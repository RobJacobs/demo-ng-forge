{"version":3,"file":"787.e005b786da8312ef.js","mappings":"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","names":["CardComponent","constructor","this","border","raisedClass","outlinedClass","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","hostVars","hostBindings","rf","ctx","i0","CommonModule","ForgeToolbarModule","i1","styles","Utils","sortData","data","key","type","direction","length","slice","sort","a","b","getPropertyValue","comparator","groupData","property","isArray","reduce","previousValue","currentValue","push","filterData","filters","map","f","isString","value","operator","substring","Object","defineProperty","toLowerCase","filter","rec","every","strict","indexOf","isDefined","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","elementId","prefix","Math","random","toString","replace","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","queryIndex","window","href","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","merge","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","mergeAll","from","EMPTY","ReplaySubject","Subject","_bufferSize","_windowTime","_timestampProvider","dateTimestampProvider","super","_buffer","_infiniteTimeWindow","max","isStopped","now","_trimBuffer","_subscribe","_throwIfClosed","subscription","_innerSubscribe","copy","i","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","handleReset","reset","onSubscriber","SafeSubscriber","unsubscribe","subscribe","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","operate","source","dest","error","err","complete","animationFrameProvider","schedule","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","delegate","handle","timestamp","Subscription","animationFrameScheduler","AnimationFrameScheduler","AsyncScheduler","flush","action","_active","flushId","_scheduled","actions","shift","execute","state","delay","id","AnimationFrameAction","AsyncAction","work","requestAsyncId","recycleAsyncId","_a","DIR_DOCUMENT","InjectionToken","providedIn","factory","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","Directionality","_document","change","EventEmitter","_resolveDirectionality","rawValue","test","body","dir","documentElement","ngOnDestroy","ɵfac","ɵprov","token","BidiModule","ɵmod","ɵinj","coerceNumberProperty","fallbackValue","_isNumberValue","Number","coerceArray","Array","coerceElement","elementOrRef","ElementRef","nativeElement","extendStyles","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","width","height","getTransform","x","y","round","getMutableClientRect","rect","getBoundingClientRect","right","bottom","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","handleScroll","event","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","name","context","getContext","drawImage","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","parseCssTimeUnitsToMs","multiplier","parseCssPropertyValue","computedStyle","split","part","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_preview","_createPreview","showPopover","destroy","_previewEmbeddedView","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","find","prop","propertyIndex","rawDurations","rawDelays","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","disableHandle","enableHandle","delete","withDirection","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_getShadowRoot","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","asyncScheduler","timer","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","connectedTo","withOrientation","_scrollableElements","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","activeApps","_ResetsLoader","ɵcmp","hostAttrs","standalone","features","decls","vars","encapsulation","changeDetection","DragDropRegistry","_appRef","ApplicationRef","_environmentInjector","EnvironmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","startsWith","e","config","_clearGlobalListeners","streams","observer","eventOptions","instance","componentRef","createComponent","environmentInjector","onDestroy","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","_addHandle","_removeHandle","ɵdir","inputs","HasDecoratorInputTransform","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","BehaviorSubject","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","ref","templateRef","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","startWith","handleInstance","dragRef","i1$1","None","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","_drag","optional","DragDropModule","providers","imports","CdkScrollableModule","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","clearImmediate","immediateProvider","asapScheduler","AsapScheduler","AsapAction","bind","auditTime","audit","durationSelector","hasValue","lastValue","durationSubscriber","isComplete","endDuration","cleanupDuration","createOperatorSubscriber","DataSource","ArrayDataSource","_data","connect","isObservable","of","disconnect","_ViewRepeaterOperation","REPLACED","INSERTED","MOVED","REMOVED","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","view","operation","_insertView","viewArgsFactory","_detachAndCacheView","_moveView","detach","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","move","pop","insert","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","useFactory","deps","forwardRef","ScrollDispatcher","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","register","elementScrolled","deregister","scrollableReference","auditTimeInMs","isBrowser","_addGlobalListener","_removeGlobalListener","_","ancestorScrolled","elementOrElementRef","ancestors","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","scrollableElement","CdkScrollable","elementRef","scrollDispatcher","ngZone","_elementScrolled","ngOnInit","scrollTo","el","isRtl","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","INVERTED","NEGATED","_applyScrollToOptions","supportsScrollBehavior","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","viewportRuler","Platform","_detachedSubject","_renderedRangeSubject","appendOnly","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","axis","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","runAfterChangeDetection","fn","viewQuery","_t","first","virtualScrollable","Optional","Inject","ngContentSelectors","consts","getOffset","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ConnectableObservable","_dataSourceChanges","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","_differs","viewChange","pairwise","prev","hasPrev","cur","_changeDataSource","_differ","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","create","oldDs","newDs","count","_updateComputedContextProperties","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","even","odd","useClass","ScrollingModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/card/card.component.ts","./src/app/shared/components/card/card.component.html","./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, HostBinding, Input } from '@angular/core';\r\nimport { ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeToolbarModule\r\n  ]\r\n})\r\nexport class CardComponent {\r\n  @HostBinding('class.app-card--raised')\r\n  public get raisedClass() { return this.border === 'raised'; }\r\n  @HostBinding('class.app-card--outlined')\r\n  public get outlinedClass() { return this.border === 'outlined'; }\r\n\r\n  @Input()\r\n  public border: 'raised' | 'outlined' = 'raised';\r\n}\r\n","<forge-toolbar class=\"header\" slot=\"header\">\r\n  <ng-content select=\"[app-card-header]\"></ng-content>\r\n</forge-toolbar>\r\n<div class=\"body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<forge-toolbar class=\"footer\" slot=\"footer\" inverted=\"true\">\r\n  <ng-content select=\"[app-card-footer]\"></ng-content>\r\n</forge-toolbar>","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DIR_DOCUMENT]\n                }] }] });\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: Dir, isStandalone: true, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                    standalone: true,\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, imports: [Dir], exports: [Dir] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Dir],\n                    exports: [Dir],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if ('showPopover' in this._preview) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._sortStrategy.direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation;\n(function (_ViewRepeaterOperation) {\n    /** The content of an existing view was replaced with another item. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n    /** A new view was created with `createEmbeddedView`. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n    /** The position of a view changed, but the content remains the same. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n    /** A view was detached from the view container. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        /**\n         * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n         * will be removed.\n         */\n        this.appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: [\"appendOnly\", \"appendOnly\", booleanAttribute] }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }], propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }], propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n"],"x_google_ignoreList":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}