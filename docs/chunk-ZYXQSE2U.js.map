{
  "version": 3,
  "sources": ["src/app/shared/interceptors/busy.interceptor.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpContextToken } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { AppCacheService } from 'src/app/app-cache.service';\n\nexport const SHOW_BUSY_INDICATOR = new HttpContextToken<boolean>(() => false);\n\n@Injectable()\nexport class BusyInterceptor implements HttpInterceptor {\n  private appCache = inject(AppCacheService);\n  private activeRequests = 0;\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (req.context.get(SHOW_BUSY_INDICATOR)) {\n      if (this.activeRequests === 0) {\n        this.appCache.isBusy.set(true);\n      }\n      this.activeRequests++;\n\n      return next.handle(req).pipe(\n        finalize(() => {\n          this.activeRequests--;\n          if (this.activeRequests === 0) {\n            this.appCache.isBusy.set(false);\n          }\n        })\n      );\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n"],
  "mappings": "wIAMO,IAAMA,EAAsB,IAAIC,EAA0B,IAAM,EAAK,EAG/DC,GAAe,IAAA,CAAtB,IAAOA,EAAP,MAAOA,CAAe,CAD5BC,aAAA,CAEU,KAAAC,SAAWC,EAAOC,CAAe,EACjC,KAAAC,eAAiB,EAEzBC,UAAUC,EAAuBC,EAAiB,CAChD,OAAID,EAAIE,QAAQC,IAAIZ,CAAmB,GACjC,KAAKO,iBAAmB,GAC1B,KAAKH,SAASS,OAAOC,IAAI,EAAI,EAE/B,KAAKP,iBAEEG,EAAKK,OAAON,CAAG,EAAEO,KACtBC,EAAS,IAAK,CACZ,KAAKV,iBACD,KAAKA,iBAAmB,GAC1B,KAAKH,SAASS,OAAOC,IAAI,EAAK,CAElC,CAAC,CAAC,GAGGJ,EAAKK,OAAON,CAAG,CAE1B,yCAtBWP,EAAe,wBAAfA,EAAegB,QAAfhB,EAAeiB,SAAA,CAAA,EAAtB,IAAOjB,EAAPkB,SAAOlB,CAAe,GAAA",
  "names": ["SHOW_BUSY_INDICATOR", "HttpContextToken", "BusyInterceptor", "constructor", "appCache", "inject", "AppCacheService", "activeRequests", "intercept", "req", "next", "context", "get", "isBusy", "set", "handle", "pipe", "finalize", "factory", "\u0275fac", "_BusyInterceptor"]
}
