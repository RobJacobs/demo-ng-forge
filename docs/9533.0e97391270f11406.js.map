{"version":3,"file":"9533.0e97391270f11406.js","mappings":"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","names":["AppDataService","constructor","httpClient","this","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","f","key","property","value","strict","sort","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Yz7","factory","ɵfac","providedIn","AppFormsModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","oAB","cJS","CommonModule","FormsModule","ReactiveFormsModule","ForgeModule","ctx_r4","rangeMessage","option_r6","_r8","$implicit","ctx_r7","onDeleteRangeOption","label","$event","_r10","ctx_r9","rangeMin","ctx_r11","rangeMax","ctx_r12","onAddRangeOption","AutocompleteRangeComponent_ng_template_8_div_14_Template","AutocompleteRangeComponent_ng_template_8_forge_list_item_16_Template","ctx_r3","maxlength","rangeOptions","AutocompleteRangeComponent","values","writeValue","ngZone","viewContainerRef","valueChange","EventEmitter","elementId","onChange","fn","onTouched","onFilter","Promise","resolve","reject","optionFilter","subscribe","response","options","forEach","isArray","push","error","optionHeaderBuilder","run","undefined","rangeRef","rootNodes","selectedTextBuilder","selectedOptions","autocompleteRef","nativeElement","open","optionCount","rangeOptionCount","rangeOption","window","requestAnimationFrame","ngAfterViewInit","createEmbeddedView","rangeTemplateRef","remove","ngOnDestroy","destroy","registerOnChange","registerOnTouched","onAutocompleteChange","emitChangeEvents","autocompleteBlur","isString","trim","comp","findIndex","filterInputRef","option","focus","optionIndex","splice","emit","Xpm","selectors","viewQuery","rf","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","AutocompleteRangeComponent_ng_template_8_Template","i2","styles","static","type","a","b","getPropertyValue","comparator","reduce","previousValue","currentValue","operator","substring","Object","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","location","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","replace","format","formatDate","formatNumber","params","search","httpParams","HttpParams","fromString","keys","k","getAll","enumerable","writable","object","reduced"],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/shared/app-forms.module.ts","./src/app/shared/components/autocomplete-range/autocomplete-range.component.html","./src/app/shared/components/autocomplete-range/autocomplete-range.component.ts","./src/utils.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }","<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\r\n  <forge-text-field>\r\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\" />\r\n    <label [attr.for]=\"elementId\">{{label}}</label>\r\n    <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n  </forge-text-field>\r\n</forge-autocomplete>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"range\" tabindex=\"-1\">\r\n    <div class=\"range__input\">\r\n      <span class=\"forge-typography--subtitle1 range__input__header\">Enter a search range</span>\r\n      <div class=\"range__input__body\">\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMin\" />\r\n        </forge-text-field>\r\n        <span>to</span>\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMax\" />\r\n        </forge-text-field>\r\n        <forge-icon-button>\r\n          <button type=\"button\" aria-label=\"add search range\" (click)=\"onAddRangeOption()\">\r\n            <forge-icon name=\"add\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n      <div *ngIf=\"rangeMessage\" class=\"forge-typography--caption\">{{rangeMessage}}</div>\r\n    </div>\r\n    <forge-list class=\"range__options\">\r\n      <forge-list-item *ngFor=\"let option of rangeOptions\">\r\n        <forge-icon-button slot=\"leading\">\r\n          <button type=\"button\" aria-label=\"delete search range\" (click)=\"onDeleteRangeOption(option)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n        {{option.label}}\r\n      </forge-list-item>\r\n    </forge-list>\r\n    <forge-divider></forge-divider>\r\n  </div>\r\n</ng-template>","import {\r\n  AfterViewInit,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  AutocompleteFilterCallback,\r\n  IOption,\r\n  IAutocompleteOptionGroup,\r\n  AutocompleteSelectedTextBuilder,\r\n  AutocompleteComponent\r\n} from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteRangeComponent), multi: true }]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  @ViewChild('rangeAutocomplete') autocompleteRef?: ElementRef;\r\n  @ViewChild('rangeTemplate') rangeTemplateRef?: TemplateRef<any>;\r\n  @ViewChild('filterInput') filterInputRef?: ElementRef;\r\n\r\n  @Input()\r\n  public optionFilter?: (filter: string) => Observable<IOption[]>;\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  @Input()\r\n  public label?: string;\r\n  @Input()\r\n  public maxlength: number | null = null;\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private viewContainerRef: ViewContainerRef\r\n  ) { }\r\n\r\n  public onChange = (fn: any) => { };\r\n  public onTouched = () => { };\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      if (this.optionFilter) {\r\n        this.optionFilter(this.filter).subscribe(\r\n          {\r\n            next: (response) => {\r\n              const options: IOption[] = [];\r\n              response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n              resolve(options);\r\n            },\r\n            error: () => reject()\r\n          }\r\n        );\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  writeValue(values: Array<IOption> | Array<string | string[] | number>): void {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({ label: `${rangeOption[0]} to ${rangeOption[1]}`, value: rangeOption });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange(): void {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  public onAddRangeOption(): void {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label =\r\n      this.rangeMin?.length && this.rangeMax?.length\r\n        ? `${this.rangeMin} to ${this.rangeMax}`\r\n        : this.rangeMin?.length\r\n          ? `Greater than ${this.rangeMin}`\r\n          : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption): void {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents(): void {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}