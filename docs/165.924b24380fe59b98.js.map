{"version":3,"file":"165.924b24380fe59b98.js","mappings":"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","names":["formlyDemoConstants","props","label","type","attributes","columns","fieldGroup","key","format","required","description","width","delayWhen","delayDurationSelector","subscriptionDelay","source","concat","pipe","take","ignoreElements","operate","subscriber","subscribe","createOperatorSubscriber","noop","mergeMap","value","index","innerFrom","mapTo","delay","due","scheduler","asyncScheduler","duration","timer","FormlyDemoService","constructor","httpClient","this","formMessage","Subject","getFormDefinition","get","getGeneroFormDefinition","responseType","getData","validateField","field","of","invalid","message","getFieldHelp","param","filters","length","count","data","result","skip","push","id","address","city","state","t","i0","i1","core","Yz7","factory","ɵfac","_c0","FormlyField_ng_template_0_Template","rf","ctx","FormlyGroup_formly_field_0_Template","$implicit","_c1","getFieldId","formId","template","Type","prototype","name","join","hasKey","isNil","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","defineProperty","defaultValue","enumerable","writable","configurable","observeDeep","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","o","_observers","target","onChange","set","previousValue","changeFn","setValue","filter","getField","f","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","touched","options","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵprov","token","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","_build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","checkExpressions","detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","i2","unregisterControl","emitEvent","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","assign","setStyle","nativeElement","className","removeAttribute","setAttribute","hide","_localFields","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","distinctUntilChanged","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","dueTime","activeTask","lastValue","lastTime","next","emitWhenIdle","targetTime","now","schedule","add","complete","parsers","parserFn","templateFieldsSubs","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","immutable","setField","fields","checkExpressionChange","switchMap","onStable","asObservable","runGuarded","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","flat","to","formState","NgControl","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","property","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","fieldArray","initialModel","remove","ɵFieldArrayType_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","content","safeHtml","bypassSecurityTrustHtml","FieldExpressionExtension","hidden","_hiddenFieldsForCheck","hideExpression","expr","parseExpressions","evalExpr","Observable","tap","expressions","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","pattern","minLengthResult","minLength","minLengthKey","minlength","maxLengthResult","maxLength","maxLengthKey","maxlength","_","min","max","validatorOption","isPromise","obj","handleAsyncResult","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","l","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","asyncValidator","mergeValidators","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","placeholder","isHidden","setDefaultValue","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","defaultFormlyConfig","FormlyModule","configService","configs","static","ngModule","providers","provide","multi","useFactory","deps","useValue","ɵmod","ɵinj","imports","CommonModule","ctx_r0","formGroup","formDefinition","formOptions","ctx_r1","FormlyDemoComponent","moduleService","age","takeUntil","getFormErrors","formErrors","groupError","Xpm","FormlyDemoComponent_formly_form_2_Template","FormlyDemoComponent_p_3_Template","FormlyFieldComponent","FormlyFieldDirective","style","column","gridColumn","row","gridRow","addEventListener","lG2","formlyFieldDirective","standalone","f_r3","_r4","GroupTypeComponent","fieldContainerElement","fieldContainer","classList","gridTemplateColumns","gridWidth","gridHeight","GroupTypeComponent_div_0_Template","GroupTypeComponent_formly_field_3_Template","CheckboxTypeComponent","addAsyncValidators","pristine","server","CheckboxTypeComponent_label_2_Template","CheckboxTypeComponent_span_3_Template","readonly","ReactiveFormsModule","i3","i4","ForgeModule","i5","_typeof","Symbol","iterator","requiredArgs","TypeError","DatePickerTypeComponent","isValid","dirtyDate","arguments","isDate","toString","call","date","toDate","argument","argStr","stack","NaN","isNaN","isValidDate","DatePickerTypeComponent_label_3_Template","DatePickerTypeComponent_span_4_Template","TextareaTypeComponent","cols","rows","TextareaTypeComponent_label_3_Template","TextareaTypeComponent_span_4_Template","field_r2","ctx_r3","onTabSelected","TabTypeComponent","activeTab","activeField","TabTypeComponent_forge_tab_1_Template","_r1","th_r3","f_r7","_r8","TableTypeComponent_tr_7_td_1_Template","i_r5","_r10","ctx_r9","onRemove","fg_r4","TableTypeComponent","onAdd","fromEntries","requestAnimationFrame","tr","from","tableElement","querySelectorAll","reverse","focusElement","querySelector","TableTypeComponent_th_4_Template","TableTypeComponent_tr_7_Template","FieldHelpDialogComponent","dialogConfig","dialogRef","paginator","pageIndex","pageSize","total","isBusy","direction","SortDirection","Ascending","title","columnConfigurations","dataObservable","initialSort","onClose","close","onPaginatorChange","onTableSort","columnIndex","onTableFilter","filterProperty","isDefined","onTableRowClick","finalize","detail","FieldHelpDialogComponent_forge_page_state_8_Template","FieldHelpDialogComponent_ng_container_9_Template","ctx_r2","InputHelpTypeComponent","dialogService","onShowDialog","dialogSub","fullscreen","header","sortable","filterDelegate","TextFieldComponentDelegate","optionsKey","afterClosed","InputHelpTypeComponent_label_3_Template","InputHelpTypeComponent_span_7_Template","LabelTypeComponent","ctx_r5","i_r4","option_r3","RadioTypeComponent_forge_radio_2_label_2_Template","RadioTypeComponent","RadioTypeComponent_label_0_Template","RadioTypeComponent_forge_radio_2_Template","RadioTypeComponent_div_3_Template","SelectTypeComponent","SelectTypeComponent_span_1_Template","formlyFieldExtension","ButtonTypeComponent","onClick","event","log","ContainerTypeComponent","ContainerTypeComponent_div_0_Template","ContainerTypeComponent_ng_container_3_Template","InputTypeComponent","inputType","InputTypeComponent_label_3_Template","InputTypeComponent_span_4_Template","FormlyConfigModule","oAB","cJS","forRoot","routes","FormlyDemoModule","RouterModule","forChild","AppFormsModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FormsModule","intervalOrScheduler","intervalDuration","isScheduler","n","closed","notifier","Action","Subscription","work","intervalProvider","setInterval","handler","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","execute","_execute","_delay","errorValue","errored","actions","arrRemove","Scheduler","schedulerActionCtor","dateTimestampProvider","AsyncScheduler","SchedulerAction","_active","action","shift","async"],"sourceRoot":"webpack:///","sources":["./src/app/formly-demo/formly-demo.constants.ts","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./src/app/formly-demo/formly-demo.service.ts","./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./src/app/formly-demo/formly-demo.component.html","./src/app/formly-demo/formly-demo.component.ts","./src/app/formly-demo/components/formly-field.component.ts","./src/app/formly-demo/components/formly-field.directive.ts","./src/app/formly-demo/components/group-type.component.ts","./src/app/formly-demo/components/checkbox-type.component.ts","./node_modules/@babel/runtime/helpers/esm/typeof.js","./node_modules/date-fns/esm/_lib/requiredArgs/index.js","./src/app/formly-demo/components/date-picker-type.component.ts","./node_modules/date-fns/esm/isValid/index.js","./node_modules/date-fns/esm/isDate/index.js","./node_modules/date-fns/esm/toDate/index.js","./src/app/formly-demo/components/textarea-type.component.ts","./src/app/formly-demo/components/tab-type.component.ts","./src/app/formly-demo/components/table-type.component.ts","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.html","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.ts","./src/app/formly-demo/components/input-help-type.component.ts","./src/app/formly-demo/components/label-type.component.ts","./src/app/formly-demo/components/radio-type.component.ts","./src/app/formly-demo/components/select-type.component.ts","./src/app/formly-demo/components/formly-field.extension.ts","./src/app/formly-demo/components/button-type.component.ts","./src/app/formly-demo/components/container-type.component.ts","./src/app/formly-demo/components/input-type.component.ts","./src/app/formly-demo/components/formly-config.module.ts","./src/app/formly-demo/formly-demo.module.ts","./src/app/shared/app-forms.module.ts","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js"],"sourcesContent":["const formDefinitionBasic = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'name',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Name',\r\n          type: 'string',\r\n          format: '###-##-####',\r\n          required: true,\r\n          description: 'Persons name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number',\r\n          format: '#,###,###,##&.&&',\r\n          required: true,\r\n          description: 'Persons age',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\nconst formDefinitionAll = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'firstName',\r\n        type: 'input',\r\n        defaultValue: 0,\r\n        props: {\r\n          label: 'First name',\r\n          required: true,\r\n          description: 'Persons first name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'lastName',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Last name',\r\n          description: 'Persons last name',\r\n          attributes: {\r\n            width: 320,\r\n            column: 1,\r\n            row: 2\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        defaultValue: 18,\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number'\r\n        }\r\n      },\r\n      {\r\n        key: 'isActive',\r\n        type: 'checkbox',\r\n        props: {\r\n          label: 'Is active'\r\n        }\r\n      },\r\n      {\r\n        key: 'birthDate',\r\n        type: 'date-picker',\r\n        props: {\r\n          label: 'DOB',\r\n          description: 'Persons date of birth',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'gender',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Gender',\r\n          options: [\r\n            { label: 'Male', value: 'M' },\r\n            { label: 'Female', value: 'F' },\r\n            { label: 'Other', value: 'O' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'comment',\r\n        type: 'textarea',\r\n        props: {\r\n          label: 'Comment',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'size',\r\n        type: 'radio',\r\n        props: {\r\n          label: 'Size',\r\n          description: 'What is your size?',\r\n          options: [\r\n            { label: 'Small', value: 'sm' },\r\n            { label: 'Medium', value: 'md' },\r\n            { label: 'Large', value: 'lg' }\r\n          ],\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'officeLocation',\r\n        type: 'input-help',\r\n        props: {\r\n          label: 'Office location',\r\n          description: 'What is your office location',\r\n          optionsKey: 'id',\r\n          options: [\r\n            { label: 'Address', property: 'address' },\r\n            { label: 'City', property: 'city' },\r\n            { label: 'State', property: 'state' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    className: 'form-divider',\r\n    template: '<forge-divider style=\"margin: 16px 0\"></forge-divider>',\r\n    props: {\r\n      safeHtml: true\r\n    }\r\n  },\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      type: 'group',\r\n      label: 'Address'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'hbox'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            key: 'address.street',\r\n            type: 'input',\r\n            props: {\r\n              label: 'Street'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.city',\r\n            type: 'input',\r\n            props: {\r\n              label: 'City'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.state',\r\n            type: 'input',\r\n            props: {\r\n              label: 'State'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'tab',\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          label: 'Tab 1'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'hbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field1',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 1'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field2',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 2'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        props: {\r\n          label: 'Tab 2'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'vbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field3',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 3'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field4',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 4'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'children',\r\n    type: 'table',\r\n    props: {\r\n      columns: [\r\n        {\r\n          label: 'First name',\r\n          key: 'firstName',\r\n          defaultValue: null\r\n        },\r\n        {\r\n          label: 'Last name',\r\n          key: 'lastName',\r\n          defaultValue: null\r\n        }\r\n      ]\r\n    },\r\n    fieldArray: {\r\n      fieldGroup: [\r\n        {\r\n          key: 'firstName',\r\n          type: 'input',\r\n          props: {\r\n            required: true\r\n          }\r\n        },\r\n        {\r\n          key: 'lastName',\r\n          type: 'input'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n];\r\n\r\nconst formDefinitionLayout = [\r\n  {\r\n    props: {\r\n      type: 'vbox'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'grid',\r\n          attributes: {\r\n            width: 83,\r\n            height: 10\r\n          }\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'group',\r\n              attributes: {\r\n                posX: 1,\r\n                posY: 1,\r\n                gridWidth: 83,\r\n                gridHeight: 6\r\n              }\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Year',\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 2,\r\n                    gridWidth: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'tax_year',\r\n                type: 'input',\r\n                defaultValue: '2023',\r\n                props: {\r\n                  type: 'number',\r\n                  disabled: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 2,\r\n                    gridWidth: 4,\r\n                    width: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'which_value',\r\n                type: 'radio',\r\n                props: {\r\n                  description: 'Value to use on report.',\r\n                  options: [\r\n                    { label: 'Original full value', value: 'O' },\r\n                    { label: 'Current full value', value: 'C' }\r\n                  ],\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 3,\r\n                    gridWidth: 31,\r\n                    width: 31\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Minimum value',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 4,\r\n                    gridWidth: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'min_val',\r\n                type: 'input',\r\n                props: {\r\n                  type: 'number',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 4,\r\n                    gridWidth: 13,\r\n                    width: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Sort vehicles by',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 5,\r\n                    gridWidth: 17\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'seq_sw',\r\n                type: 'select',\r\n                props: {\r\n                  required: true,\r\n                  options: [\r\n                    { label: 'Sequence number', value: 'S' },\r\n                    { label: 'Owner name', value: 'O' }\r\n                  ],\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 5,\r\n                    gridWidth: 17,\r\n                    width: 15\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const formlyDemoConstants = {\r\n  formDefinitionBasic,\r\n  formDefinitionAll,\r\n  formDefinitionLayout\r\n}","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { IFilterParameter, IFilterResponse } from '../shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport class FormlyDemoService {\r\n  public formMessage = new Subject<{ id: string; message: string; }>();\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getFormDefinition(): Observable<FormlyFieldConfig[]> {\r\n    return this.httpClient.get<FormlyFieldConfig[]>('mock-data/form-definition.json').pipe(\r\n      delay(1000)\r\n    );\r\n  }\r\n\r\n  public getGeneroFormDefinition(): Observable<string> {\r\n    return this.httpClient.get('mock-data/genero-form-definition.xml', { responseType: 'text' });\r\n  }\r\n\r\n  public getData(): Observable<any> {\r\n    return this.httpClient.get('mock-data/form-data.json');\r\n  }\r\n\r\n  public validateField(field: string, value: any): Observable<{ invalid: boolean; message: string }> {\r\n    const validation = {\r\n      invalid: false,\r\n      message: `Error from server: ${field}`\r\n    };\r\n\r\n    return of(validation).pipe(\r\n      delay(1000)\r\n    );\r\n\r\n    // return this.httpClient.get<{ invalid: boolean; message: string }>('http://localhost:5000/validate-get');\r\n    // return this.httpClient.post<{ invalid: boolean; message: string }>('http://localhost:5000/validate-post', { field, value });\r\n  }\r\n\r\n  public getFieldHelp(field: string, param: IFilterParameter): Observable<IFilterResponse<any>> {\r\n    if (param.filters?.length) {\r\n      return of({ count: 0, data: [] }).pipe(\r\n        delay(1000)\r\n      )\r\n    } else {\r\n      const result = [];\r\n      for (let index = param.skip; index < param.skip + param.take; index++) {\r\n        result.push(\r\n          {\r\n            id: index,\r\n            address: `${index} street`,\r\n            city: `${index} city`,\r\n            state: `${index} state`\r\n          }\r\n        );\r\n      }\r\n\r\n      return of({ count: 75, data: result }).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, NgControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '';\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1 && isObject(target)) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(currentValue) {\n            if (currentValue === state.value) {\n                return;\n            }\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => {\n                if (changeFn !== setFn) {\n                    changeFn({ previousValue, currentValue, firstChange: false });\n                }\n            });\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n            disableTreeValidityCall(field.form, () => {\n                this._build(field);\n                const options = field.options;\n                options.checkExpressions?.(field, true);\n                options.detectChanges?.(field);\n            });\n        }\n        else {\n            this._build(field);\n        }\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.checkExpressions(field);\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._localFields) {\n                field._localFields = [];\n            }\n            else {\n                defineHiddenProp(this.field, '_localFields', []);\n            }\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        this.valueChangesUnsubscribe();\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field))];\n        if (field.options) {\n            subscribes.push(observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)));\n        }\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['focus'], ['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        let templateFieldsSubs = [];\n        observe(field, ['_localFields'], ({ currentValue }) => {\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs = (currentValue || []).map((f) => this.fieldChanges(f));\n        });\n        return () => {\n            subscribes.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n        };\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        this.uiAttributes.forEach((attr) => {\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    constructor() {\n        this.field = {};\n    }\n    set controls(controls) {\n        const f = this.field;\n        f._localFields = controls\n            .map((c) => c.control._fields || [])\n            .flat()\n            .filter((f) => f.formControl !== this.field.formControl);\n    }\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options?.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"controls\", predicate: NgControl, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { controls: [{\n                type: ViewChildren,\n                args: [NgControl]\n            }], field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = {\n                ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray),\n                key: `${i}`,\n            };\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options.detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                    if (field.options && field.options.detectChanges) {\n                        field.options.detectChanges(field);\n                    }\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), parent = field.fieldGroup ? field : field.parent;\n            let control = field?.key === key ? field.formControl : field.form.get(key);\n            if (!control && field.get(key)) {\n                control = field.get(key).formControl;\n            }\n            assignFieldValue({ key, parent, model: field.model }, value);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        else {\n            try {\n                let target = field;\n                const paths = this._evalExpressionPath(field, prop);\n                const lastIndex = paths.length - 1;\n                for (let i = 0; i < lastIndex; i++) {\n                    target = target[paths[i]];\n                }\n                target[paths[lastIndex]] = value;\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n            if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n                this.changeDisabledState(field, value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        field.options.detectChanges(field);\n        return this.handleResult(field, errors, options);\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (field.fieldArray) {\n            return;\n        }\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: !!field.props.disabled }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator || null === c.asyncValidator) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options.detectChanges = (f) => {\n            if (f._componentRefs) {\n                f.options.checkExpressions(f);\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options.detectChanges(f));\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            options.build(field);\n            field.form.reset(field.model);\n            if (options.parentForm && options.parentForm.control === field.formControl) {\n                options.parentForm.submitted = false;\n            }\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n            const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n            let setDefaultValue = !field.resetOnHide || !isHidden(field);\n            if (!isHidden(field) && field.resetOnHide) {\n                let parent = field.parent;\n                while (parent && !isHidden(parent)) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !isHidden(parent);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","<div class=\"body\">\r\n  <form class=\"form\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <formly-form *ngIf=\"formDefinition\" [form]=\"formGroup\" [model]=\"model\" [fields]=\"formDefinition\" [options]=\"formOptions\"></formly-form>\r\n\r\n    <p *ngIf=\"formDefinition\">\r\n      {{formGroup.value| json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <span class=\"forge-typography--caption\" slot=\"start\">\r\n    {{formMessage?.message}}\r\n  </span>\r\n</forge-toolbar>","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { Subject, Subscription, takeUntil } from 'rxjs';\r\nimport { formlyDemoConstants } from './formly-demo.constants';\r\n\r\n@Component({\r\n  selector: 'app-formly-demo',\r\n  templateUrl: './formly-demo.component.html',\r\n  styleUrls: ['./formly-demo.component.scss']\r\n})\r\nexport class FormlyDemoComponent implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  private form: Form;\r\n\r\n  public formGroup = new FormGroup({});\r\n  public formDefinition?: FormlyFieldConfig[];\r\n  public formOptions: FormlyFormOptions = {\r\n    // showError(field) {\r\n    //   console.log(field);\r\n    //   return false;\r\n    // },\r\n    // build: (field) => {\r\n    //   console.log(field);\r\n    //   return field;\r\n    // }\r\n  };\r\n  public model = {\r\n    name: '',\r\n    age: 10\r\n  } as any;\r\n  public record: any;\r\n  public formMessage: { id: string; message: string; };\r\n\r\n  constructor(\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    this.moduleService.formMessage.pipe(\r\n      takeUntil(this.unsubscribe)\r\n    ).subscribe(result => {\r\n      this.formMessage = result;\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formDefinition = formlyDemoConstants.formDefinitionBasic;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  private getFormErrors(control: AbstractControl) {\r\n    if (control instanceof FormControl) {\r\n      return control.errors ? control : null;\r\n    }\r\n\r\n    if (control instanceof FormGroup) {\r\n      const formErrors = control.errors ? { groupError: control } : {};\r\n      Object.keys(control.controls).forEach(key => {\r\n        const error = this.getFormErrors(control.get(key));\r\n        if (error) {\r\n          formErrors[key] = error;\r\n        }\r\n      });\r\n\r\n      return Object.keys(formErrors).length > 0 ? formErrors : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-field',\r\n  template: `\r\n    <formly-field #formlyField [field]=\"field\"></formly-field>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyFieldComponent implements OnInit {\r\n  @ViewChild('formlyField', { static: true })\r\n  private formlyField: FormlyField;\r\n\r\n  @Input()\r\n  public field: FormlyFieldConfig;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyField);\r\n    // console.log(this.elementRef.nativeElement);\r\n  }\r\n}","import { Input } from '@angular/core';\r\nimport { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: '[formlyFieldDirective]',\r\n  standalone: true\r\n})\r\nexport class FormlyFieldDirective implements OnInit {\r\n  @Input()\r\n  field: FormlyFieldConfig\r\n  @Input()\r\n  formlyFieldDirective: FormlyField;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyFieldDirective);\r\n    // console.log(this.elementRef.nativeElement);\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n\r\n    if (this.field.props?.attributes) {\r\n      if (this.field.props.attributes && this.field.props.attributes['width']) {\r\n        element.style.width = `${this.field.props.attributes['width']}px`;\r\n      }\r\n\r\n      if (this.field.props.attributes['column']) {\r\n        element.style.gridColumn = `${this.field.props.attributes['column']}`;\r\n      }\r\n\r\n      if (this.field.props.attributes['row']) {\r\n        element.style.gridRow = `${this.field.props.attributes['row']}`;\r\n      }\r\n    }\r\n\r\n    if (this.field.props.description?.length) {\r\n      element.addEventListener('focusin', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: this.field.props.description });\r\n      });\r\n      element.addEventListener('focusout', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: '' });\r\n      });\r\n    }\r\n\r\n    if (this.field.props.required) {\r\n      this.field.validation.messages = {\r\n        required: `A ${this.field.props.label || 'value'} is required`\r\n      };\r\n    }\r\n\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, HostBinding, OnInit, ViewChild } from '@angular/core';\r\nimport { FieldGroupTypeConfig, FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-group',\r\n  template: `\r\n    <div class=\"label\" *ngIf=\"props.label?.length && field.parent?.type !== 'tab'\">{{props.label}}</div>\r\n    <div #fieldContainer>\r\n      <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n      height: fit-content;\r\n\r\n      ::ng-deep {\r\n        .form-grid {\r\n          display: grid !important;\r\n          row-gap: 8px !important;\r\n          // row-gap: 0 !important;\r\n        }\r\n\r\n        .form-vbox {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n        }\r\n\r\n        .form-hbox {\r\n          display: flex;\r\n          flex-direction: row;\r\n          column-gap: 16px;\r\n        }\r\n\r\n        .form-group {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n          border: var(--forge-theme-border);\r\n          border-radius: 4px;\r\n          padding: 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .label {\r\n      padding-bottom: 8px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class GroupTypeComponent extends FieldType<FieldGroupTypeConfig> implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n  // @HostBinding('style.display')\r\n  // private displayStyle = 'block';\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n\r\n        if (this.props.attributes) {\r\n          if (this.props.attributes['width']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['width']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['height']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['height']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        // this.displayStyle = 'inline-block';\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n\r\n        if (this.props.attributes && (this.props.attributes['gridWidth'] || this.props.attributes['gridHeight'])) {\r\n          fieldContainerElement.classList.add('form-grid');\r\n          if (this.props.attributes['gridWidth']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['gridWidth']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['gridHeight']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['gridHeight']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-checkbox',\r\n  template: `\r\n  <forge-checkbox>\r\n    <input\r\n      [id]=\"id\"\r\n      type=\"checkbox\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"props.description\">{{props.description}}</span>\r\n  </forge-checkbox>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class CheckboxTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { isValid as isValidDate } from 'date-fns';\r\n\r\n@Component({\r\n  selector: 'app-formly-date-picker',\r\n  template: `\r\n  <forge-date-picker [max]=\"props.max\" [min]=\"props.min\">\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n      <span slot=\"helper-text\" *ngIf=\"showError\">\r\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n      </span>\r\n    </forge-text-field>\r\n  </forge-date-picker>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DatePickerTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      if (control.value && !isValidDate(new Date(control.value))) {\r\n        control.setValue(null);\r\n        if (this.field.props.required) {\r\n          return of({ required: true });\r\n        }\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-textarea',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <textarea\r\n      [id]=\"id\"\r\n      [cols]=\"props.cols\"\r\n      [rows]=\"props.rows\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" >\r\n    </textarea>\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    textarea {\r\n      resize: none;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TextareaTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n    this.defaultOptions = {\r\n      props: {\r\n        cols: 1,\r\n        rows: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-tab',\r\n  template: `\r\n  <forge-tab-bar [activeTab]=\"activeTab\">\r\n    <forge-tab *ngFor=\"let field of field.fieldGroup\" (forge-tab-interacted)=\"onTabSelected(field)\">\r\n      {{field.props.label}}\r\n    </forge-tab>\r\n  </forge-tab-bar>\r\n  <formly-field [field]=\"activeField\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    forge-tab-bar {\r\n      display: inline-flex;\r\n      width: 100%;\r\n      border-bottom: var(--forge-theme-border);\r\n      margin: 16px 0;\r\n    }\r\n\r\n    forge-tab {\r\n      min-width: 240px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TabTypeComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n  public activeTab = 0;\r\n  public activeField: FieldTypeConfig;\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.activeField = this.field.fieldGroup[0] as FieldTypeConfig;\r\n  }\r\n\r\n  public onTabSelected(field: FieldTypeConfig) {\r\n    this.activeField = field;\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\r\nimport { FieldArrayType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-table',\r\n  template: `\r\n    <table class=\"forge-table\" #table>\r\n      <thead>\r\n        <tr class=\"forge-table-row forge-table-head__row\">\r\n          <th *ngFor=\"let th of props['columns']\" scope=\"col\" class=\"forge-table-cell forge-table-head__cell\">\r\n            <div class=\"forge-table-head__cell-container\">\r\n              <span class=\"forge-table-head__cell-text\">{{th.label}}</span>\r\n            </div>\r\n          </th>\r\n          <th class=\"forge-table-cell forge-table-head__cell forge-table-cell__button\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let fg of field.fieldGroup; index as i\" class=\"forge-table-row forge-table-body__row\">\r\n          <td *ngFor=\"let f of fg.fieldGroup\" class=\"forge-table-cell forge-table-body__cell\">\r\n            <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n          </td>\r\n          <td class=\"forge-table-cell forge-table-body__cell forge-table-cell__button\">\r\n            <forge-icon-button>\r\n              <button type=\"button\" (click)=\"onRemove(i)\">\r\n                <forge-icon name=\"delete\"></forge-icon>\r\n              </button>\r\n            </forge-icon-button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td>\r\n            <forge-button>\r\n              <button type=\"button\" (click)=\"onAdd()\">Add</button>\r\n            </forge-button>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .forge-table {\r\n      // --forge-table-theme-row-hover-background: transparent;\r\n\r\n      &-cell {\r\n        padding-right: 24px;\r\n        &:first-child {\r\n          padding-left: 0;\r\n        }\r\n        &:last-child {\r\n          padding-right: 0;\r\n        }\r\n        &__button {\r\n          width: 48px;\r\n        }\r\n      }\r\n\r\n      &-body {\r\n\r\n        &__cell {\r\n          padding-top: 8px;\r\n          padding-bottom: 8px;\r\n          vertical-align: top;\r\n\r\n          formly-field {\r\n            background-color: var(--mdc-theme-surface);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TableTypeComponent extends FieldArrayType {\r\n  @ViewChild('table')\r\n  private tableElement: ElementRef;\r\n\r\n  public onAdd() {\r\n    const model = this.props['columns'].filter(c => c.key?.length).map(c => [c.key, c.defaultValue]);\r\n\r\n    this.add(this.formControl.length, Object.fromEntries(model));\r\n\r\n    requestAnimationFrame(() => {\r\n      const tr = Array.from(this.tableElement.nativeElement.querySelectorAll('tbody > tr')).reverse()[0] as HTMLTableRowElement;\r\n      if (tr) {\r\n        const focusElement = tr.querySelector(`[id*=\"${model[0][0]}\"]`) as HTMLElement;\r\n        if (focusElement) {\r\n          focusElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public onRemove(index: number) {\r\n    this.remove(index);\r\n  }\r\n}\r\n","<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">{{title}}</span>\r\n  <forge-icon-button class=\"forge-flex-item--right\">\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  <forge-table [ngClass]=\"{'app--hidden': isBusy}\" [data]=\"data\" [columnConfigurations]=\"columnConfigurations\" allow-row-click (forge-table-row-click)=\"onTableRowClick($event.detail)\" (forge-table-sort)=\"onTableSort($event.detail)\" filter=\"true\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n  <forge-page-state *ngIf=\"!isBusy && !data?.length\">\r\n    <img src=\"https://cdn.forge.tylertech.com/v1/images/spot/no-search-results-spot.svg\" slot=\"graphic\" alt=\"No records found\" />\r\n    <div slot=\"message\">No records were found.</div>\r\n  </forge-page-state>\r\n\r\n  <ng-container *ngIf=\"isBusy\">\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n  </ng-container>\r\n</div>\r\n\r\n<div class=\"dialog__footer\">\r\n  <forge-paginator [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"paginator.pageSize\" [total]=\"paginator.total\" (forge-paginator-change)=\"onPaginatorChange($event.detail)\" [disabled]=\"isBusy || !data.length\">\r\n  </forge-paginator>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { IColumnConfiguration, ITableFilterEventData, ITableRowClickEventData, ITableSortEventData, SortDirection } from '@tylertech/forge';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\nimport { finalize, Observable, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter, IFilter, IFilterResponse } from 'src/app/shared/interfaces/filter.interface';\r\n\r\nexport interface IFieldHelpDialogConfig {\r\n  columnConfigurations: IColumnConfiguration[];\r\n  dataObservable: (param: IFilterParameter) => Observable<IFilterResponse<any>>;\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-formly-field-help-dialog',\r\n  templateUrl: './field-help-dialog.component.html',\r\n  styleUrls: ['./field-help-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FieldHelpDialogComponent {\r\n  public title: string;\r\n  public columnConfigurations: IColumnConfiguration[];\r\n  public data: any[] = [];\r\n  public paginator = {\r\n    pageIndex: 0,\r\n    pageSize: 25,\r\n    total: 0\r\n  };\r\n  public isBusy = false;\r\n  public key: string;\r\n\r\n  private unsubscribe = new Subject<void>();\r\n  private dataObservable: (param: IFilterParameter) => Observable<any>;\r\n  private sort = {\r\n    property: '',\r\n    direction: SortDirection.Ascending\r\n  };\r\n  private filters: IFilter[] = [];\r\n\r\n  constructor(\r\n    public dialogConfig: DialogConfig<IFieldHelpDialogConfig>,\r\n    private dialogRef: DialogRef\r\n  ) {\r\n    this.title = this.dialogConfig.data.title;\r\n    this.columnConfigurations = this.dialogConfig.data.columnConfigurations;\r\n    this.dataObservable = this.dialogConfig.data.dataObservable;\r\n    this.key = this.dialogConfig.data.key;\r\n    this.sort.property = this.columnConfigurations.find(c => c.initialSort)?.property || this.columnConfigurations[0].property;\r\n    this.getData();\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onPaginatorChange(value: { pageIndex: number; pageSize: number; }) {\r\n    this.paginator.pageIndex = value.pageIndex;\r\n    this.paginator.pageSize = value.pageSize;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableSort(value: ITableSortEventData) {\r\n    this.sort.property = this.columnConfigurations[value.columnIndex].property;\r\n    this.sort.direction = value.direction;\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableFilter(filter: ITableFilterEventData) {\r\n    const filterProperty = this.columnConfigurations[filter.columnIndex].property;\r\n    if (isDefined(filter.value) && filter.value?.toString().length) {\r\n      this.filters.push({ property: filterProperty, value: filter.value });\r\n    } else {\r\n      const index = this.filters.findIndex(f => f.property === filterProperty);\r\n      if (index !== -1) {\r\n        this.filters.splice(index, 1);\r\n      }\r\n    }\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableRowClick(value: ITableRowClickEventData) {\r\n    this.dialogRef.close(value.data[this.key]);\r\n  }\r\n\r\n  private getData() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.isBusy = true;\r\n    const param: IFilterParameter = {\r\n      filters: this.filters,\r\n      sort: this.sort,\r\n      skip: this.paginator.pageIndex * this.paginator.pageSize,\r\n      take: this.paginator.pageSize\r\n    };\r\n    this.dataObservable(param)\r\n      .pipe(\r\n        finalize(() => this.isBusy = false),\r\n        takeUntil(this.unsubscribe)\r\n      )\r\n      .subscribe((r: IFilterResponse<any>) => {\r\n        this.data = r.data;\r\n        this.paginator.total = r.count;\r\n      });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { DialogService, ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { FieldHelpDialogComponent } from './field-help-dialog/field-help-dialog.component';\r\n@Component({\r\n  selector: 'app-formly-input-help',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      type=\"text\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <forge-icon-button slot=\"addon-end\" dense>\r\n      <button type=\"button\" aria-label=\"Browse options\" [disabled]=\"formControl.disabled\"\r\n        (click)=\"onShowDialog()\">\r\n        <forge-icon name=\"more_horiz\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputHelpTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private dialogService: DialogService,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  public onShowDialog() {\r\n    const dialogRef = this.dialogService.show(FieldHelpDialogComponent, { fullscreen: true }, {\r\n      data: {\r\n        columnConfigurations: (this.props.options as { label: string; property: string }[]).map(o => ({\r\n          header: o.label,\r\n          property: o.property,\r\n          sortable: true,\r\n          filter: true,\r\n          filterDelegate: new TextFieldComponentDelegate()\r\n        })),\r\n        dataObservable: (param: IFilterParameter) => this.moduleService.getFieldHelp(this.key as string, param),\r\n        key: this.props['optionsKey'],\r\n        title: `Select a ${this.props.label}`,\r\n      }\r\n    });\r\n\r\n    const dialogSub = dialogRef.afterClosed.subscribe(result => {\r\n      dialogSub.unsubscribe();\r\n      if (result) {\r\n        this.formControl.setValue(result);\r\n      }\r\n    });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-label',\r\n  template: `\r\n  <label [attr.for]=\"id\" class=\"forge-typography--body2\">{{props.label}}</label>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LabelTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, HostBinding } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-radio',\r\n  template: `\r\n  <label *ngIf=\"props.label\">{{props.label}}</label>\r\n  <div role=\"radiogroup\">\r\n    <forge-radio *ngFor=\"let option of props.options; let i = index\">\r\n      <input\r\n        type=\"radio\"\r\n        [id]=\"id + '-' + i\"\r\n        [value]=\"option.value\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [for]=\"id + '-' + i\" *ngIf=\"option.label\">{{option.label}}</label>\r\n    </forge-radio>\r\n  </div>\r\n  <div class=\"forge-typography--caption\" *ngIf=\"showError\">\r\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n  </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    [role='radiogroup'] {\r\n      margin-left: -8px;\r\n      display: flex;\r\n      column-gap: 16px;\r\n      flex-direction: column;\r\n    }\r\n\r\n    forge-radio {\r\n      &::part(container) {\r\n        padding: 4px;\r\n      }\r\n    }\r\n\r\n    .forge-typography--caption {\r\n      color: var(--forge-theme-danger);\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RadioTypeComponent extends FieldType<FieldTypeConfig> {\r\n  // @HostBinding('attr.role')\r\n  // public roleAttribute = 'radiogroup';\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-select',\r\n  template: `\r\n  <forge-select\r\n    [id]=\"id\"\r\n    [options]=\"props.options\"\r\n    [label]=\"props.label\"\r\n    [placeholder]=\"props.placeholder\"\r\n    [invalid]=\"showError\"\r\n    [formControl]=\"formControl\"\r\n    [formlyAttributes]=\"field\">\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-select>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  // forge-select {\r\n  //   --forge-select-height: 2rem;\r\n  // }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SelectTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { FormlyExtension } from '@ngx-formly/core';\r\n\r\nexport const formlyFieldExtension: FormlyExtension = {\r\n  prePopulate(field) {\r\n    // TODO\r\n    switch (field.type) {\r\n      case 'date-picker':\r\n      case 'input':\r\n      case 'select':\r\n      case 'textarea': {\r\n        // field.modelOptions = {\r\n        //   updateOn: 'blur'\r\n        // }\r\n      }\r\n    }\r\n  }\r\n};","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-button',\r\n  template: `\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onClick($event)\">\r\n        {{props.label}}\r\n      </button>\r\n    </forge-button>\r\n  `,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ButtonTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n  public onClick(event: MouseEvent) {\r\n    console.log(event);\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { OnInit, ViewChild } from '@angular/core';\r\nimport { ElementRef } from '@angular/core';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldComponent } from './formly-field.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n// <formly-field [field]=\"field\"></formly-field>\r\n\r\n@Component({\r\n  selector: 'app-formly-container',\r\n  template: `\r\n  <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  <div #fieldContainer>\r\n    <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n      <formly-field #formlyField [field]=\"f\" [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n    </ng-container>\r\n  </div>\r\n  `,\r\n  // template: `\r\n  // <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  // <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n  //   <app-formly-field [field]=\"f\"></app-formly-field>\r\n  // </ng-container>\r\n  // `,\r\n  styles: [`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .form-grid {\r\n      display: grid;\r\n      gap: 16px;\r\n    }\r\n\r\n    .form-vbox {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n    }\r\n\r\n    .form-hbox {\r\n      display: flex;\r\n      flex-direction: row;\r\n      column-gap: 16px;\r\n    }\r\n\r\n    .form-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n      border: 1px solid #e6e6e6;\r\n      border-radius: 4px;\r\n      padding: 16px;\r\n    }\r\n  }\r\n\r\n  .label {\r\n    padding: 8px;\r\n  }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective,\r\n    FormlyFieldComponent\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ContainerTypeComponent extends FieldType implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n        if (this.props.attributes['columns']) {\r\n          fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['columns']}, auto)`\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n        break;\r\n    }\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-input',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      [type]=\"inputType\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n\r\n    input[type='number']::-webkit-outer-spin-button,\r\n    input[type='number']::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  @ViewChild('input', { static: true })\r\n  private inputElement: ElementRef;\r\n\r\n  public inputType = 'text';\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.inputType = this.props?.type || 'text';\r\n\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      // (this.inputElement.nativeElement as HTMLInputElement).disabled = true;\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        // finalize(() => (this.inputElement.nativeElement as HTMLInputElement).disabled = false),\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { GroupTypeComponent } from './group-type.component';\r\nimport { CheckboxTypeComponent } from './checkbox-type.component';\r\nimport { DatePickerTypeComponent } from './date-picker-type.component';\r\nimport { TextareaTypeComponent } from './textarea-type.component';\r\nimport { TabTypeComponent } from './tab-type.component';\r\nimport { TableTypeComponent } from './table-type.component';\r\nimport { InputHelpTypeComponent } from './input-help-type.component';\r\nimport { LabelTypeComponent } from './label-type.component';\r\nimport { RadioTypeComponent } from './radio-type.component';\r\nimport { SelectTypeComponent } from './select-type.component';\r\nimport { formlyFieldExtension } from './formly-field.extension';\r\nimport { ButtonTypeComponent } from './button-type.component';\r\nimport { ContainerTypeComponent } from './container-type.component';\r\nimport { InputTypeComponent } from './input-type.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormlyModule.forRoot({\r\n      extensions: [\r\n        { name: 'formly-field-extension', extension: formlyFieldExtension }\r\n      ],\r\n      types: [\r\n        { name: 'checkbox', component: CheckboxTypeComponent },\r\n        { name: 'date-picker', component: DatePickerTypeComponent },\r\n        { name: 'input', component: InputTypeComponent },\r\n        { name: 'input-help', component: InputHelpTypeComponent },\r\n        { name: 'radio', component: RadioTypeComponent },\r\n        { name: 'select', component: SelectTypeComponent },\r\n        { name: 'textarea', component: TextareaTypeComponent },\r\n        { name: 'button', component: ButtonTypeComponent },\r\n        { name: 'container', component: ContainerTypeComponent },\r\n        { name: 'formly-group', component: GroupTypeComponent },\r\n        { name: 'tab', component: TabTypeComponent },\r\n        { name: 'table', component: TableTypeComponent },\r\n        { name: 'label', component: LabelTypeComponent }\r\n      ],\r\n      // wrappers: [\r\n      //   { name: 'container', component: ContainerWrapperComponent }\r\n      // ]\r\n    }),\r\n    FormlyFieldDirective\r\n  ],\r\n  exports: [\r\n    FormlyModule\r\n  ]\r\n})\r\nexport class FormlyConfigModule { }","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormlyDemoComponent } from './formly-demo.component';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\n\r\nimport { FormlyFieldComponent } from './components/formly-field.component';\r\nimport { FormlyConfigModule } from './components/formly-config.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: FormlyDemoComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormlyDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormlyConfigModule,\r\n    FormlyFieldComponent\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    FormlyDemoService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyDemoModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n"],"x_google_ignoreList":[1,2,3,5,6,13,14,16,17,18,35,36,37,38,39,40,41,42,43,44]}