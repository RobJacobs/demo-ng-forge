{"version":3,"file":"9952.96756915ca2e24a4.js","mappings":"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","names":["Utils","static","data","key","type","direction","length","slice","sort","a","b","getPropertyValue","this","comparator","property","isArray","reduce","previousValue","currentValue","push","filters","map","f","isString","value","operator","substring","Object","defineProperty","toLowerCase","filter","rec","every","strict","indexOf","isDefined","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","location","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","toString","replace","format","formatDate","formatNumber","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","timer","dueTime","intervalOrScheduler","scheduler","asyncScheduler","intervalDuration","isScheduler","due","isValidDate","now","n","schedule","closed","complete","distinctUntilChanged","keySelector","identity","defaultCompare","operate","source","previousKey","first","subscribe","createOperatorSubscriber","currentKey","takeUntil","notifier","noop","Action","Subscription","constructor","work","super","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","id","recycleAsyncId","requestAsyncId","_id","flush","bind","_scheduler","execute","Error","error","_execute","_delay","errorValue","errored","e","unsubscribe","actions","arrRemove","Scheduler","schedulerActionCtor","dateTimestampProvider","AsyncScheduler","SchedulerAction","_active","action","shift","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","timestamp","animationFrameScheduler","AnimationFrameScheduler","flushId","_scheduled","AnimationFrameAction","async","DIR_DOCUMENT","InjectionToken","providedIn","factory","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","Directionality","_document","change","EventEmitter","_resolveDirectionality","rawValue","test","body","dir","documentElement","ngOnDestroy","ɵfac","t","i0","ɵprov","token","BidiModule","ɵmod","ɵinj","coerceBooleanProperty","coerceNumberProperty","fallbackValue","_isNumberValue","Number","coerceArray","Array","coerceElement","elementOrRef","ElementRef","nativeElement","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","parseCssPropertyValue","computedStyle","name","split","part","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","handleScroll","event","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_initialTransform","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","reset","disableHandle","enableHandle","delete","withDirection","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","isFakeMousedownFromScreenReader","buttons","offsetX","offsetY","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","find","prop","propertyIndex","rawDurations","rawDelays","propertyName","clearTimeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","config","_clearGlobalListeners","streams","observer","eventOptions","merge","instance","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","i1","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","ɵdir","selectors","inputs","exportAs","standalone","features","provide","useExisting","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","_group","_dropListRef","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_destroyed","_unsortedItems","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","addItem","_syncItemsWithRef","removeItem","getSortedItems","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","startWith","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","markForCheck","emit","dropEvent","draggingDisabled","listAutoScrollDisabled","listOrientation","i3","hostAttrs","hostVars","hostBindings","rf","ctx","outputs","useValue","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","closest","_getBoundaryElement","boundary","startEvent","releaseEvent","endEvent","enterEvent","exitEvent","tap","childHandleElements","switchMap","handleInstance","dragRef","contentQueries","dirIndex","_t","DragDropModule","providers","imports","CdkScrollableModule","hasV8BreakIterator","Intl","v8BreakIterator","supportsPassiveEvents","rtlScrollAxisType","scrollBehaviorSupported","shadowDomIsSupported","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","supportsPassiveEventListeners","supportsScrollBehavior","Element","scrollToFunction","prototype","scrollTo","getRtlScrollAxisType","scrollContainer","containerStyle","overflow","visibility","content","contentStyle","_supportsShadowDom","head","createShadowRoot","attachShadow","rootNode","ShadowRoot","composedPath","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","clearImmediate","immediateProvider","asapScheduler","AsapScheduler","AsapAction","auditTime","audit","durationSelector","hasValue","lastValue","durationSubscriber","isComplete","endDuration","cleanupDuration","ReplaySubject","_bufferSize","Infinity","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","isStopped","_trimBuffer","_subscribe","_throwIfClosed","_innerSubscribe","copy","_checkFinalizedStatuses","adjustedBufferSize","last","DataSource","ArrayDataSource","_data","connect","isObservable","of","disconnect","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","view","operation","_insertView","viewArgsFactory","_detachAndCacheView","_moveView","detach","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","move","pop","insert","_VIEW_REPEATER_STRATEGY","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","useFactory","deps","forwardRef","ScrollDispatcher","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","register","elementScrolled","deregister","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","_","ancestorScrolled","elementOrElementRef","ancestors","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","scrollableElement","CdkScrollable","elementRef","scrollDispatcher","ngZone","_elementScrolled","ngOnInit","el","isRtl","_applyScrollToOptions","LEFT","RIGHT","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","appendOnly","_appendOnly","viewportRuler","_detachedSubject","_renderedRangeSubject","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","axis","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","runAfterChangeDetection","fn","ɵcmp","viewQuery","virtualScrollable","Optional","Inject","ngContentSelectors","decls","vars","consts","encapsulation","changeDetection","getOffset","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ConnectableObservable","_dataSourceChanges","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","_differs","viewChange","pairwise","prev","hasPrev","cur","_changeDataSource","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","_differ","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","create","oldDs","newDs","count","_updateComputedContextProperties","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","even","odd","useClass","ScrollingModule"],"sourceRoot":"webpack:///","sources":["./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/@angular/cdk/fesm2022/a11y.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/platform.mjs","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js"],"sourcesContent":["import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Directionality, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DIR_DOCUMENT]\n                }] }]; } });\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BidiModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, PAGE_DOWN, PAGE_UP, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        /** Map of all registered message elements that have been placed into the document. */\n        this._messageRegistry = new Map();\n        /** Container for all registered messages. */\n        this._messagesContainer = null;\n        /** Unique ID for the service. */\n        this._id = `${nextId++}`;\n        this._document = _document;\n        this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message, this._id);\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!this._messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = this._messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (this._messagesContainer?.childNodes.length === 0) {\n            this._messagesContainer.remove();\n            this._messagesContainer = null;\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        this._messagesContainer?.remove();\n        this._messagesContainer = null;\n        this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement, this._id);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        this._messagesContainer.appendChild(messageElement);\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        this._messageRegistry.get(key)?.messageElement?.remove();\n        this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (this._messagesContainer) {\n            return;\n        }\n        const containerClassName = 'cdk-describedby-message-container';\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n        for (let i = 0; i < serverContainers.length; i++) {\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            serverContainers[i].remove();\n        }\n        const messagesContainer = this._document.createElement('div');\n        // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n        messagesContainer.style.visibility = 'hidden';\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n        messagesContainer.classList.add(containerClassName);\n        messagesContainer.classList.add('cdk-visually-hidden');\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\n        if (this._platform && !this._platform.isBrowser) {\n            messagesContainer.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(messagesContainer);\n        this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = this._messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AriaDescriber, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AriaDescriber, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.Platform }]; } });\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n    }\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        this._pageUpAndDown = { enabled: false, delta: 10 };\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            this._itemChangesSubscription = _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\n            .subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /** Cancels the current typeahead sequence. */\n    cancelTypeahead() {\n        this._pressedLetters = [];\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n     * respectively when the Page-Up or Page-Down key is pressed.\n     * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n     * @param delta Whether pressing the Home or End key activates the first/last item.\n     */\n    withPageUpDown(enabled = true, delta = 10) {\n        this._pageUpAndDown = { enabled, delta };\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_UP:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n                    this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_DOWN:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n                    const itemsLength = this._getItemsArray().length;\n                    this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /** Cleans up the key manager. */\n    destroy() {\n        this._typeaheadSubscription.unsubscribe();\n        this._itemChangesSubscription?.unsubscribe();\n        this._letterKeyStream.complete();\n        this.tabOut.complete();\n        this.change.complete();\n        this._pressedLetters = [];\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return (isPotentiallyFocusable(element) &&\n            !this.isDisabled(element) &&\n            (config?.ignoreVisibility || this.isVisible(element)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth ||\n        element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return (nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea');\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return (inputType === 'text' ||\n        inputType === 'password' ||\n        nodeName === 'select' ||\n        nodeName === 'textarea');\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return (isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element));\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            startAnchor.remove();\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            endAnchor.remove();\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            for (let i = 0; i < markers.length; i++) {\n                // @breaking-change 8.0.0\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                        `attribute will be removed in 8.0.0.`, markers[i]);\n                }\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                        `will be removed in 8.0.0.`, markers[i]);\n                }\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length\n            ? markers[markers.length - 1]\n            : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild?.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getFirstTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        const children = root.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getLastTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap.enabled;\n    }\n    set enabled(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() {\n        return this._autoCapture;\n    }\n    set autoCapture(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n    }\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange &&\n            !autoCaptureChange.firstChange &&\n            this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkTrapFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTrapFocus]',\n                    exportAs: 'cdkTrapFocus',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['cdkTrapFocus']\n            }], autoCapture: [{\n                type: Input,\n                args: ['cdkTrapFocusAutoCapture']\n            }] } });\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    /** Whether the FocusTrap is enabled. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_TRAP_INERT_STRATEGY]\n                }] }]; } });\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n    // zero or `event.buttons` is zero, depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\n    // Note that there's an edge case where the user could click the 0x0 spot of the\n    // screen themselves, but that is unlikely to contain interactive elements.\n    return event.buttons === 0 || (event.offsetX === 0 && event.offsetY === 0);\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = {\n            ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n            ...options,\n        };\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: InputModalityDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n                }] }]; } });\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nlet uniqueIds = 0;\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        if (this._liveElement.id) {\n            this._exposeAnnouncerToModals(this._liveElement.id);\n        }\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._currentPromise) {\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n            }\n            clearTimeout(this._previousTimeout);\n            this._previousTimeout = setTimeout(() => {\n                this._liveElement.textContent = message;\n                if (typeof duration === 'number') {\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\n                }\n                this._currentResolve();\n                this._currentPromise = this._currentResolve = undefined;\n            }, 100);\n            return this._currentPromise;\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        this._liveElement?.remove();\n        this._liveElement = null;\n        this._currentResolve?.();\n        this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].remove();\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live announcer element if there is an\n     * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live announcer element.\n     */\n    _exposeAnnouncerToModals(id) {\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: LiveAnnouncer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n        return this._politeness;\n    }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkAriaLive, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"], duration: [\"cdkAriaLiveDuration\", \"duration\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkAriaLive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAriaLive]',\n                    exportAs: 'cdkAriaLive',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }]; }, propDecorators: { politeness: [{\n                type: Input,\n                args: ['cdkAriaLive']\n            }], duration: [{\n                type: Input,\n                args: ['cdkAriaLiveDuration']\n            }] } });\n\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                if (event.type === 'focus') {\n                    this._onFocus(event, element);\n                }\n                else {\n                    this._onBlur(event, element);\n                }\n            }\n        };\n        this._document = document;\n        this._detectionMode = options?.detectionMode || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode,\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        // If the interaction is coming from an input label, we consider it a mouse interactions.\n        // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n        // our detection, because all our assumptions are for `mousedown`. We need to handle this\n        // special case, because it's very common for checkboxes and radio buttons.\n        if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n            return 'mouse';\n        }\n        return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ ||\n            !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        element.classList.toggle('cdk-focused', !!origin);\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n        element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo ||\n            (elementInfo.checkChildren &&\n                event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n        if (info.subject.observers.length) {\n            this._ngZone.run(() => info.subject.next(origin));\n        }\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => {\n                this._setOrigin(modality, true /* isFromInteraction */);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n        const { _mostRecentTarget: mostRecentTarget, mostRecentModality } = this._inputModalityDetector;\n        // If the last interaction used the mouse on an element contained by one of the labels\n        // of an `input`/`textarea` that is currently focused, it is very likely that the\n        // user redirected focus using the label.\n        if (mostRecentModality !== 'mouse' ||\n            !mostRecentTarget ||\n            mostRecentTarget === focusEventTarget ||\n            (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n            focusEventTarget.disabled) {\n            return false;\n        }\n        const labels = focusEventTarget.labels;\n        if (labels) {\n            for (let i = 0; i < labels.length; i++) {\n                if (labels[i].contains(mostRecentTarget)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FocusMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._focusOrigin = null;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    get focusOrigin() {\n        return this._focusOrigin;\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => {\n            this._focusOrigin = origin;\n            this.cdkFocusChange.emit(origin);\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, exportAs: [\"cdkMonitorFocus\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n                    exportAs: 'cdkMonitorFocus',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusMonitor }]; }, propDecorators: { cdkFocusChange: [{\n                type: Output\n            }] } });\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n        this._breakpointSubscription = inject(BreakpointObserver)\n            .observe('(forced-colors: active)')\n            .subscribe(() => {\n            if (this._hasCheckedHighContrastMode) {\n                this._hasCheckedHighContrastMode = false;\n                this._applyBodyHighContrastModeCssClasses();\n            }\n        });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* HighContrastMode.NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\n            ? documentWindow.getComputedStyle(testElement)\n            : null;\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\n        testElement.remove();\n        switch (computedColor) {\n            // Pre Windows 11 dark theme.\n            case 'rgb(0,0,0)':\n            // Windows 11 dark themes.\n            case 'rgb(45,50,54)':\n            case 'rgb(32,32,32)':\n                return 2 /* HighContrastMode.WHITE_ON_BLACK */;\n            // Pre Windows 11 light theme.\n            case 'rgb(255,255,255)':\n            // Windows 11 light theme.\n            case 'rgb(255,250,239)':\n                return 1 /* HighContrastMode.BLACK_ON_WHITE */;\n        }\n        return 0 /* HighContrastMode.NONE */;\n    }\n    ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: A11yModule, declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], imports: [ObserversModule], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: A11yModule, imports: [ObserversModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: A11yModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ObserversModule],\n                    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                }]\n        }], ctorParameters: function () { return [{ type: HighContrastModeDetector }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId\n            ? isPlatformBrowser(this._platformId)\n            : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser &&\n            !!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) &&\n            !this.BLINK &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Platform, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\n\nclass PlatformModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: PlatformModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PlatformModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => (supportsPassiveEvents = true),\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* RtlScrollAxisType.NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* RtlScrollAxisType.NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* RtlScrollAxisType.NEGATED */ : 2 /* RtlScrollAxisType.INVERTED */;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n    // We can't use `declare const` because it causes conflicts inside Google with the real typings\n    // for these symbols and we can't read them off the global object, because they don't appear to\n    // be attached there for some runners like Jest.\n    // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n    return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(value))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            for (let selectedValue of this._selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n"],"x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}