{
  "version": 3,
  "sources": ["src/app/icons/icons-cache.service.ts", "src/app/icons/icons.component.ts", "src/app/icons/icons.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { IconRegistry, IOption } from '@tylertech/forge';\r\nimport * as tylerIconsModule from '@tylertech/tyler-icons/standard';\r\n\r\n@Injectable()\r\nexport class IconsCacheService {\r\n  public iconOptions?: IOption[];\r\n  constructor() {\r\n    this.iconOptions = Object.values(tylerIconsModule).map((icon: { name: string; data: string }) => {\r\n      return {\r\n        label: icon.name,\r\n        value: icon.name,\r\n        leadingIcon: icon.name,\r\n        leadingIconType: 'component'\r\n      };\r\n    });\r\n    IconRegistry.define(Object.values(tylerIconsModule));\r\n  }\r\n}\r\n", "import { Component, inject } from '@angular/core';\r\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\r\nimport { IconsCacheService } from './icons-cache.service';\r\nimport { ForgeAutocompleteModule, ForgeIconModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-icons',\r\n  imports: [CommonModule, ForgeAutocompleteModule, ForgeIconModule, ForgeTextFieldModule, ForgeToolbarModule],\r\n  providers: [IconsCacheService],\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.scss']\r\n})\r\nexport class IconsComponent {\r\n  public cache = inject(IconsCacheService);\r\n  public selectedIcon?: string;\r\n\r\n  public iconOptionFilter: AutocompleteFilterCallback = (filter: string, value: string) => {\r\n    if (value) {\r\n      return [this.cache.iconOptions?.find((o) => o.value === value)] as IOption[];\r\n    } else {\r\n      if (filter.length) {\r\n        return this.cache.iconOptions?.filter((o) => o.label.toLocaleLowerCase().includes(filter.toLocaleLowerCase())).slice(0, 100) as IOption[];\r\n      } else {\r\n        return this.cache.iconOptions?.slice(0, 100) as IOption[];\r\n      }\r\n    }\r\n  };\r\n\r\n  public onIconSelected(value: string) {\r\n    this.selectedIcon = this.cache.iconOptions?.find((o) => o.value === value)?.value;\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Forge Icons - Standard</h2>\n  <forge-autocomplete slot=\"start\" [filter]=\"iconOptionFilter\" (forge-autocomplete-change)=\"onIconSelected($event.detail)\">\n    <forge-text-field>\n      @if (selectedIcon) {\n        <forge-icon slot=\"start\" [name]=\"selectedIcon\"></forge-icon>\n      }\n      <input type=\"text\" aria-label=\"Filter icons\" placeholder=\"Filter\" />\n      <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n</forge-toolbar>\n\n<div class=\"body\">\n  <div class=\"body__icons\">\n    @for (icon of cache.iconOptions; track i; let i = $index) {\n      <div class=\"icon\">\n        <forge-icon lazy [name]=\"icon.value\"></forge-icon>\n        <div class=\"forge-typography--label1\">{{ icon.value }}</div>\n      </div>\n    }\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["IconsCacheService", "constructor", "iconOptions", "Object", "values", "tylerIconsModule", "map", "icon", "label", "name", "value", "leadingIcon", "leadingIconType", "IconRegistry", "define", "factory", "\u0275fac", "_IconsCacheService", "\u0275\u0275element", "\u0275\u0275property", "ctx_r0", "selectedIcon", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "icon_r2", "value", "\u0275\u0275textInterpolate", "IconsComponent", "constructor", "cache", "inject", "IconsCacheService", "iconOptionFilter", "filter", "iconOptions", "find", "o", "length", "label", "toLocaleLowerCase", "includes", "slice", "onIconSelected", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "detail", "\u0275\u0275conditionalCreate", "IconsComponent_Conditional_5_Template", "\u0275\u0275repeaterCreate", "IconsComponent_For_11_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275conditional", "\u0275\u0275repeater", "CommonModule", "ForgeAutocompleteModule", "AutocompleteComponent", "ForgeIconModule", "IconComponent", "ForgeTextFieldModule", "TextFieldComponent", "ForgeToolbarModule", "ToolbarComponent", "styles", "_IconsComponent"]
}
