{"version":3,"file":"189.71b5a01e33fcd8f0.js","mappings":"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","names":["BaseControlValueAccessor","constructor","_renderer","_elementRef","this","onChange","_","onTouched","setProperty","key","value","nativeElement","registerOnTouched","fn","registerOnChange","setDisabledState","isDisabled","static","ɵfac","t","i0","ɵdir","type","BuiltInControlValueAccessor","ɵBuiltInControlValueAccessor_BaseFactory","features","NG_VALUE_ACCESSOR","InjectionToken","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","forwardRef","CheckboxControlValueAccessor","multi","writeValue","ɵCheckboxControlValueAccessor_BaseFactory","selectors","hostBindings","rf","ctx","$event","target","checked","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","COMPOSITION_BUFFER_MODE","renderer","elementRef","_compositionMode","super","_composing","_isAndroid","userAgent","ɵgetDOM","getUserAgent","test","toLowerCase","_handleInput","_compositionStart","_compositionEnd","isEmptyInputValue","Array","isArray","length","hasValidLength","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","minValidator","control","parseFloat","isNaN","actual","max","maxValidator","required","requiredValidator","requiredTrue","requiredTrueValidator","email","emailValidator","minLength","minLengthValidator","minlength","requiredLength","actualLength","maxLength","maxLengthValidator","maxlength","pattern","patternValidator","nullValidator","regex","regexStr","charAt","RegExp","toString","requiredPattern","actualValue","compose","validators","composeAsync","isPresent","o","toObservable","ɵisPromise","from","mergeErrors","arrayOfErrors","res","forEach","errors","Object","keys","executeValidators","map","validator","normalizeValidators","isValidatorFn","validate","c","presentValidators","filter","composeValidators","forkJoin","args","resultSelector","popResultSelector","sources","argsArgArrayOrObject","result","Observable","subscriber","complete","values","remainingCompletions","remainingEmissions","sourceIndex","hasValue","innerFrom","subscribe","createOperatorSubscriber","undefined","next","createObject","pipe","mapOneOrManyArgs","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","makeValidatorsArray","hasValidator","includes","addValidators","currentValidators","current","validatorsToAdd","v","push","removeValidators","AbstractControlDirective","_onDestroyCallbacks","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","path","_setValidators","_composedValidatorFn","_setAsyncValidators","_composedAsyncValidatorFn","asyncValidator","_registerOnDestroy","_invokeOnDestroyCallbacks","reset","hasError","errorCode","getError","ControlContainer","formDirective","NgControl","arguments","_parent","name","valueAccessor","AbstractControlStatus","cd","_cd","isTouched","isUntouched","isPristine","isDirty","isValid","isInvalid","isPending","isSubmitted","submitted","NgControlStatus","hostVars","NgControlStatusGroup","VALID","INVALID","PENDING","DISABLED","pickValidators","validatorOrOpts","isOptionsObj","pickAsyncValidators","asyncValidators","assertControlPresent","parent","isGroup","controls","ɵRuntimeError","assertAllValuesPresent","_forEachChild","AbstractControl","_pendingDirty","_hasOwnPendingAsyncValidator","_pendingTouched","_onCollectionChange","_onDisabledChange","_assignValidators","_assignAsyncValidators","validatorFn","asyncValidatorFn","updateOn","_updateOn","setValidators","setAsyncValidators","addAsyncValidators","removeAsyncValidators","hasAsyncValidator","clearValidators","clearAsyncValidators","markAsTouched","opts","onlySelf","markAllAsTouched","markAsUntouched","_updateTouched","markAsDirty","markAsPristine","_updatePristine","markAsPending","emitEvent","emit","disable","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","changeFn","enable","updateValueAndValidity","setParent","getRawValue","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","get","currPath","split","reduce","_find","root","x","_initObservables","EventEmitter","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_registerOnCollectionChange","_setUpdateStrategy","slice","coerceToValidator","coerceToAsyncValidator","FormGroup","_setUpControls","registerControl","addControl","options","removeControl","setControl","contains","controlName","hasOwnProperty","setValue","patchValue","_reduceChildren","acc","_syncPendingControls","subtreeUpdated","updated","child","cb","_reduceValue","condition","entries","initValue","CALL_SET_DISABLED_STATE","providedIn","factory","setDisabledStateDefault","controlPath","setUpControl","dir","callSetDisabledState","setUpValidators","setUpViewChangePipeline","newValue","_pendingValue","_pendingChange","updateControl","setUpModelChangePipeline","emitModelEvent","viewToModelUpdate","_unregisterOnChange","setUpBlurPipeline","setUpDisabledChangeHandler","onDisabledChange","registerOnDisabledChange","_unregisterOnDisabledChange","cleanUpControl","validateControlPresenceOnChange","noop","cleanUpValidators","registerOnValidatorChange","onValidatorChange","isControlUpdated","updatedValidators","updatedAsyncValidators","emitModelToViewChange","isPropertyUpdated","changes","viewModel","change","model","isFirstChange","is","currentValue","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","isBuiltInAccessor","getPrototypeOf","removeListItem","list","el","index","indexOf","splice","isFormControlState","formState","FormControl","defaultValue","_onChange","_applyFormState","nonNullable","initialValueIsDefault","emitViewToModelChange","AbstractFormGroupDirective","ngOnInit","_checkParentType","addFormGroup","ngOnDestroy","removeFormGroup","getFormGroup","ɵAbstractFormGroupDirective_BaseFactory","formControlBinding$1","NgModel","resolvedPromise","Promise","resolve","_changeDetectorRef","_registered","update","ngOnChanges","_checkForErrors","_checkName","oldName","previousValue","_getPath","_setUpControl","_updateDisabled","_isStandalone","_setUpStandalone","standalone","then","markForCheck","disabledValue","booleanAttribute","ChangeDetectorRef","inputs","outputs","exportAs","ɵNgNoValidate","hostAttrs","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistryModule","ɵmod","ɵinj","RadioControlRegistry","_accessors","add","accessor","remove","i","select","_isSameGroup","fireUncheck","controlPair","_control","ɵprov","token","_registry","_injector","setDisabledStateFired","inject","optional","_state","_fn","formControlName","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding","FormControlDirective","_ngModelWarningSentOnce","_ngModelWarningConfig","_ngModelWarningSent","_isControlChanged","previousForm","form","formDirectiveProvider","FormGroupDirective","_updateDomValue","directives","ngSubmit","_checkFormPresent","_updateValidators","_updateRegistrations","_oldForm","getControl","removeListItem$1","_setUpFormContainer","_cleanUpFormContainer","addFormArray","removeFormArray","getFormArray","updateModel","onSubmit","syncPendingControls","method","onReset","resetForm","oldCtrl","newCtrl","isFormControl","setUpFormContainer","cleanUpFormContainer","formGroupNameProvider","FormGroupName","_hasInvalidParent","formArrayNameProvider","FormArrayName","controlNameBinding","FormControlName","_added","AbstractValidatorDirective","_validator","inputName","input","normalizeInput","_enabled","createValidator","REQUIRED_VALIDATOR","RequiredValidator","ɵRequiredValidator_BaseFactory","ɵInternalFormsSharedModule","imports","FormArray","at","_adjustIndex","_registerControl","insert","removeAt","adjustedIndex","clear","some","FormsModule","withConfig","ngModule","providers","useValue","ReactiveFormsModule","warnOnNgModelWithFormControl","defineAutocompleteComponent","defineCustomElement","AutocompleteComponent","defineBadgeComponent","BadgeComponent","defineButtonComponent","ButtonComponent","defineCheckboxComponent","CheckboxComponent","defineDatePickerComponent","DatePickerComponent","defineDialogComponent","DialogComponent","defineDividerComponent","DividerComponent","defineDrawerComponent","DrawerComponent","defineIconComponent","IconComponent","window","ICON_REGISTRY_KEY","IconRegistry","defineIconButtonComponent","IconButtonComponent","defineLabelValueComponent","LabelValueComponent","defineListItemComponent","ListItemComponent","defineListComponent","ListComponent","defineMenuComponent","MenuComponent","defineOptionComponent","OptionComponent","definePaginatorComponent","PaginatorComponent","defineRadioComponent","RadioComponent","defineSelectComponent","SelectComponent","defineSelectDropdownComponent","SelectDropdownComponent","defineSkeletonComponent","SkeletonComponent","defineSliderComponent","SliderComponent","defineTabComponent","TabComponent","defineTabBarComponent","TabBarComponent","defineTableComponent","TableComponent","defineTextFieldComponent","TextFieldComponent","defineToastComponent","ToastComponent","defineToolbarComponent","ToolbarComponent","_c0","ForgeOpenIconModule","defineOpenIconComponent","OpenIconComponent","CommonModule","ForgeExpansionPanelModule","defineExpansionPanelComponent","ExpansionPanelComponent","ForgeAccordionModule","defineAccordionComponent","AccordionComponent","ForgeAppBarModule","defineAppBarComponent","AppBarComponent","ForgeAppBarHelpButtonModule","defineAppBarHelpButtonComponent","AppBarHelpButtonComponent","ForgeAppBarMenuButtonModule","defineAppBarMenuButtonComponent","AppBarMenuButtonComponent","ForgeAppBarNotificationButtonModule","defineAppBarNotificationButtonComponent","AppBarNotificationButtonComponent","ForgeAppBarProfileButtonModule","defineAppBarProfileButtonComponent","AppBarProfileButtonComponent","ForgeAppBarSearchModule","defineAppBarSearchComponent","AppBarSearchComponent","mode","zone","runOutsideAngular","multiple","debounce","filterOnFocus","filterFocusFirst","allowUnmatched","popupTarget","filterText","optionBuilder","selectedTextBuilder","open","matchKey","isInitialized","popupElement","beforeValueChange","popupClasses","popupHeaderBuilder","popupFooterBuilder","syncPopupWidth","optionLimit","observeScroll","observeScrollThreshold","constrainPopupWidth","wrapOptionText","appendOptions","openDropdown","closeDropdown","forceFilter","changeDetectorRef","detach","ɵcmp","ngContentSelectors","decls","vars","template","encapsulation","changeDetection","ForgeAutocompleteProxyModule","AUTOCOMPLETE_VALUE_ACCESSOR","AutocompleteValueAccessor","autocompleteChange","event","detail","blur","inputEl","querySelector","deepQuerySelectorAll","ForgeAutocompleteModule","ForgeAvatarModule","defineAvatarComponent","AvatarComponent","ForgeBackdropModule","defineBackdropComponent","BackdropComponent","dot","ForgeBadgeModule","ForgeBannerModule","defineBannerComponent","BannerComponent","BaseInjector","_parentInjector","_additionalTokens","notFoundValue","ForgeBottomSheetModule","defineBottomSheetComponent","BottomSheetComponent","DynamicComponentService","_cfr","_appRef","create","component","injector","moduleRef","cfr","componentFactoryResolver","componentFactory","_isComponentFactory","resolveComponentFactory","ViewContainerRef","ref","createComponent","instance","componentRef","destroy","attachView","hostView","componentElement","rootNodes","appendChild","detachView","ForgeBusyIndicatorModule","defineBusyIndicatorComponent","BusyIndicatorComponent","ForgeButtonModule","ForgeButtonAreaModule","defineButtonAreaComponent","ButtonAreaComponent","BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","ButtonToggleGroupValueAccessor","buttonToggleGroupChange","ForgeButtonToggleProxyModule","defineButtonToggleComponent","ButtonToggleComponent","ForgeButtonToggleModule","ForgeButtonToggleGroupModule","defineButtonToggleGroupComponent","ButtonToggleGroupComponent","ForgeCalendarModule","defineCalendarComponent","CalendarComponent","ForgeCardModule","defineCardComponent","CardComponent","dense","ForgeCheckboxModule","ForgeChipProxyModule","defineChipComponent","ChipComponent","CHIP_VALUE_ACCESSOR","ChipValueAccessor","chipSelect","ForgeChipModule","ForgeChipFieldModule","defineChipFieldComponent","ChipFieldComponent","ForgeChipSetModule","defineChipSetComponent","ChipSetComponent","ForgeCircularProgressModule","defineCircularProgressComponent","CircularProgressComponent","ForgeColorPickerModule","defineColorPickerComponent","ColorPickerComponent","disabledDates","masked","maskFormat","showMaskFormat","valueMode","notifyInputValueChanges","allowInvalidDate","showToday","showClear","parseCallback","formatCallback","prepareMaskCallback","disabledDaysOfWeek","disableDayCallback","yearRange","locale","ForgeDatePickerProxyModule","DATEPICKER_VALUE_ACCESSOR","DatePickerValueAccessor","datePickerChange","ForgeDatePickerModule","ForgeDateRangePickerProxyModule","defineDateRangePickerComponent","DateRangePickerComponent","DATE_RANGE_PICKER_VALUE_ACCESSOR","DateRangePickerValueAccessor","dateRangePickerChange","ForgeDateRangePickerModule","DialogConfig","DialogInjector","DialogRef","_afterClosed","Subject","afterClosed","asObservable","_beforeClose","beforeClose","ElementRef","addEventListener","DIALOG_CONSTANTS","events","BEFORE_CLOSE","evt","close","ForgeDialogModule","DialogService","_dcs","show","config","WeakMap","set","dialogElement","document","createElement","dialogClass","attributes","restOptions","classList","setAttribute","assign","dialogRef","dcRef","componentInstance","sub","_destroy","backdropClose","CLOSE","dialogInstance","ForgeDividerModule","direction","ForgeDrawerModule","ForgeFloatingActionButtonModule","defineFloatingActionButtonComponent","FloatingActionButton","ForgeFilePickerModule","defineFilePickerComponent","FilePickerComponent","src","lazy","external","externalType","externalUrlBuilder","viewbox","layout","ForgeIconModule","toggle","isOn","densityLevel","ForgeIconButtonModule","ForgeInlineMessageModule","defineInlineMessageComponent","InlineMessageComponent","ForgeKeyboardShortcutModule","defineKeyboardShortcutComponent","KeyboardShortcutComponent","empty","ellipsis","density","align","ForgeLabelValueModule","ForgeLinearProgressModule","defineLinearProgressComponent","LinearProgressComponent","twoLine","threeLine","active","selected","href","ripple","propagateClick","indented","wrap","focus","ForgeListItemModule","selectedValue","initializedCallback","ForgeListProxyModule","LIST_VALUE_ACCESSOR","ListValueAccessor","listItemSelect","listValue","single","_containsRadioButton","querySelectorAll","listItem","LIST_ITEM_CONSTANTS","CHECKBOX_RADIO_SELECTOR","ForgeListModule","selectedIndex","placement","fallbackPlacements","iconClass","persistSelection","popupOffset","propagateKeyEvent","activateFirstOption","ForgeMenuModule","ForgeMiniDrawerModule","defineMiniDrawerComponent","MiniDrawerComponent","ForgeModalDrawerModule","defineModalDrawerComponent","ModalDrawerComponent","label","secondaryLabel","divider","optionClass","leadingIcon","leadingIconClass","leadingIconType","leadingIconComponentProps","trailingIcon","trailingIconClass","trailingIconType","trailingIconComponentProps","leadingBuilder","trailingBuilder","ForgeOptionModule","ForgeOptionGroupModule","defineOptionGroupComponent","OptionGroupComponent","ForgePageStateModule","definePageStateComponent","PageStateComponent","pageIndex","pageSize","offset","total","pageSizeOptions","firstLast","first","alternative","alignment","ForgePaginatorModule","ForgePopupProxyModule","definePopupComponent","PopupComponent","PopupDirective","forgePopupCloseOnBlur","_popupElement","_viewContainerRef","forgePopupPlacement","POPUP_CONSTANTS","requestAnimationFrame","forgePopup","TemplateRef","Error","_contentRef","createEmbeddedView","PopupComponent$1","node","forgePopupClass","targetElement","ForgePopupModule","ForgeProductIconModule","defineProductIconComponent","ProductIconComponent","ForgeProfileCardModule","defineProfileCardComponent","ProfileCardComponent","ForgeQuantityFieldModule","defineQuantityFieldComponent","QuantityFieldComponent","syncCheckedState","ForgeRadioModule","ForgeRippleModule","defineRippleComponent","RippleComponent","ForgeScaffoldModule","defineScaffoldComponent","ScaffoldComponent","floatLabelType","shape","placeholder","selectAll","deselectAll","ForgeSelectProxyModule","SELECT_VALUE_ACCESSOR","SelectValueAccessor","selectChange","ForgeSelectModule","selectedTextTarget","syncSelectedText","ForgeSelectDropdownModule","ForgeSkeletonModule","valueStart","step","ForgeSliderProxyModule","SLIDER_VALUE_ACCESSOR","SliderValueAccessor","sliderChange","sliderInput","_toFloat","parsedValue","ForgeSliderModule","ForgeSplitViewPanelModule","defineSplitViewPanelComponent","SplitViewPanelComponent","ForgeSplitViewModule","defineSplitViewComponent","SplitViewComponent","ForgeStackModule","defineStackComponent","StackComponent","ForgeStepModule","defineStepComponent","StepComponent","ForgeStepperModule","defineStepperComponent","StepperComponent","ForgeSwitchProxyModule","defineSwitchComponent","SwitchComponent","SWITCH_VALUE_ACCESSOR","SwitchValueAccessor","switchChange","ForgeSwitchModule","stretch","activate","deactivate","computeIndicatorBounds","computeDimensions","setTabIndex","ForgeTabModule","activeTab","layoutMode","layoutAlign","underline","autoActivate","stacked","scrollButtons","forceScrollButtons","activateTab","scrollTabIntoView","ForgeTabBarModule","data","columnConfigurations","multiselect","selectKey","tooltipSelect","tooltipSelectAll","roomy","fixedHeaders","layoutType","wrapContent","resizable","minResizeWidth","allowRowClick","multiColumnSort","rowCreated","cellCreated","selectAllTemplate","selectCheckboxAlignment","hideColumn","showColumn","isColumnHidden","getSelectedRows","selectRow","selectRows","deselectRow","deselectRows","clearSelections","render","expandRow","collapseRow","isRowExpanded","selectRowsByIndex","deselectRowsByIndex","isRowSelected","ForgeTableModule","floatLabel","ForgeTextFieldModule","ForgeTimePickerProxyModule","defineTimePickerComponent","TimePickerComponent","TIME_PICKER_VALUE_ACCESSOR","TimePickerValueAccessor","timePickerChange","ForgeTimePickerModule","ToastConfig","ToastInjector","ForgeToastModule","ToastService","_rendererFactory","appRef","createRenderer","toastConfig","toastElement","message","actionHandler","restConfig","builder","actionText","listen","TOAST_CONSTANTS","ACTION","body","inverted","ForgeToolbarModule","ForgeTooltipModule","defineTooltipComponent","TooltipComponent","ForgeViewModule","defineViewComponent","ViewComponent","ForgeViewSwitcherModule","defineViewSwitcherComponent","ViewSwitcherComponent","ForgeModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/forms/fesm2022/forms.mjs","./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/@tylertech/forge/esm/autocomplete/index.js","./node_modules/@tylertech/forge/esm/badge/index.js","./node_modules/@tylertech/forge/esm/button/index.js","./node_modules/@tylertech/forge/esm/checkbox/index.js","./node_modules/@tylertech/forge/esm/date-picker/index.js","./node_modules/@tylertech/forge/esm/dialog/index.js","./node_modules/@tylertech/forge/esm/divider/index.js","./node_modules/@tylertech/forge/esm/drawer/drawer/index.js","./node_modules/@tylertech/forge/esm/icon/index.js","./node_modules/@tylertech/forge/esm/icon-button/index.js","./node_modules/@tylertech/forge/esm/label-value/index.js","./node_modules/@tylertech/forge/esm/list/list-item/index.js","./node_modules/@tylertech/forge/esm/list/list/index.js","./node_modules/@tylertech/forge/esm/menu/index.js","./node_modules/@tylertech/forge/esm/select/option/index.js","./node_modules/@tylertech/forge/esm/paginator/index.js","./node_modules/@tylertech/forge/esm/radio/index.js","./node_modules/@tylertech/forge/esm/select/select/index.js","./node_modules/@tylertech/forge/esm/select/select-dropdown/index.js","./node_modules/@tylertech/forge/esm/skeleton/index.js","./node_modules/@tylertech/forge/esm/slider/index.js","./node_modules/@tylertech/forge/esm/tabs/tab/index.js","./node_modules/@tylertech/forge/esm/tabs/tab-bar/index.js","./node_modules/@tylertech/forge/esm/table/index.js","./node_modules/@tylertech/forge/esm/text-field/index.js","./node_modules/@tylertech/forge/esm/toast/index.js","./node_modules/@tylertech/forge/esm/toolbar/index.js","./node_modules/@tylertech/forge-angular/fesm2022/tylertech-forge-angular.mjs","./node_modules/@tylertech/forge/esm/open-icon/index.js","./node_modules/@tylertech/forge/esm/expansion-panel/index.js","./node_modules/@tylertech/forge/esm/accordion/index.js","./node_modules/@tylertech/forge/esm/app-bar/index.js","./node_modules/@tylertech/forge/esm/app-bar/help-button/index.js","./node_modules/@tylertech/forge/esm/app-bar/menu-button/index.js","./node_modules/@tylertech/forge/esm/app-bar/notification-button/index.js","./node_modules/@tylertech/forge/esm/app-bar/profile-button/index.js","./node_modules/@tylertech/forge/esm/app-bar/search/index.js","./node_modules/@tylertech/forge/esm/avatar/index.js","./node_modules/@tylertech/forge/esm/backdrop/index.js","./node_modules/@tylertech/forge/esm/banner/index.js","./node_modules/@tylertech/forge/esm/bottom-sheet/index.js","./node_modules/@tylertech/forge/esm/busy-indicator/index.js","./node_modules/@tylertech/forge/esm/button-area/index.js","./node_modules/@tylertech/forge/esm/button-toggle/button-toggle/index.js","./node_modules/@tylertech/forge/esm/button-toggle/button-toggle-group/index.js","./node_modules/@tylertech/forge/esm/calendar/index.js","./node_modules/@tylertech/forge/esm/card/index.js","./node_modules/@tylertech/forge/esm/chips/chip/index.js","./node_modules/@tylertech/forge/esm/chip-field/index.js","./node_modules/@tylertech/forge/esm/chips/chip-set/index.js","./node_modules/@tylertech/forge/esm/circular-progress/index.js","./node_modules/@tylertech/forge/esm/color-picker/index.js","./node_modules/@tylertech/forge/esm/date-range-picker/index.js","./node_modules/@tylertech/forge/esm/floating-action-button/index.js","./node_modules/@tylertech/forge/esm/file-picker/index.js","./node_modules/@tylertech/forge/esm/inline-message/index.js","./node_modules/@tylertech/forge/esm/keyboard-shortcut/index.js","./node_modules/@tylertech/forge/esm/linear-progress/index.js","./node_modules/@tylertech/forge/esm/drawer/mini-drawer/index.js","./node_modules/@tylertech/forge/esm/drawer/modal-drawer/index.js","./node_modules/@tylertech/forge/esm/select/option-group/index.js","./node_modules/@tylertech/forge/esm/page-state/index.js","./node_modules/@tylertech/forge/esm/popup/index.js","./node_modules/@tylertech/forge/esm/product-icon/index.js","./node_modules/@tylertech/forge/esm/profile-card/index.js","./node_modules/@tylertech/forge/esm/quantity-field/index.js","./node_modules/@tylertech/forge/esm/ripple/index.js","./node_modules/@tylertech/forge/esm/scaffold/index.js","./node_modules/@tylertech/forge/esm/split-view/split-view-panel/index.js","./node_modules/@tylertech/forge/esm/split-view/split-view/index.js","./node_modules/@tylertech/forge/esm/stack/index.js","./node_modules/@tylertech/forge/esm/stepper/step/index.js","./node_modules/@tylertech/forge/esm/stepper/stepper/index.js","./node_modules/@tylertech/forge/esm/switch/index.js","./node_modules/@tylertech/forge/esm/time-picker/index.js","./node_modules/@tylertech/forge/esm/tooltip/index.js","./node_modules/@tylertech/forge/esm/view-switcher/view/index.js","./node_modules/@tylertech/forge/esm/view-switcher/index.js"],"sourcesContent":["/**\n * @license Angular v16.2.12\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, forwardRef, Optional, Inject, ɵisPromise, ɵisSubscribable, ɵRuntimeError, Self, EventEmitter, Input, Host, SkipSelf, booleanAttribute, ChangeDetectorRef, Output, NgModule, Injectable, inject, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { from, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Base class for all ControlValueAccessor classes defined in Forms package.\n * Contains common logic and utility functions.\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BaseControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Helper method that sets a property on a target element using the current Renderer\n     * implementation.\n     * @nodoc\n     */\n    setProperty(key, value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, key, value);\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this.setProperty('disabled', isDisabled);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: BaseControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: BaseControlValueAccessor, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: BaseControlValueAccessor, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; } });\n/**\n * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is\n * used in case no other CVAs can be found). We use this class to distinguish between default CVA,\n * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom\n * ones with higher priority (when both built-in and custom CVAs are present).\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BuiltInControlValueAccessor extends BaseControlValueAccessor {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: BuiltInControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: BuiltInControlValueAccessor, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: BuiltInControlValueAccessor, decorators: [{\n            type: Directive\n        }] });\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass CheckboxControlValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"checked\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('checked', value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: CheckboxControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.checked)\", \"blur\": \"onTouched()\" } }, providers: [CHECKBOX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: CheckboxControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                }]\n        }] });\n\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * {@searchKeywords ngDefaultControl}\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass DefaultValueAccessor extends BaseControlValueAccessor {\n    constructor(renderer, elementRef, _compositionMode) {\n        super(renderer, elementRef);\n        this._compositionMode = _compositionMode;\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /** @internal */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /** @internal */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: DefaultValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\", host: { listeners: { \"input\": \"$any(this)._handleInput($event.target.value)\", \"blur\": \"onTouched()\", \"compositionstart\": \"$any(this)._compositionStart()\", \"compositionend\": \"$any(this)._compositionEnd($event.target.value)\" } }, providers: [DEFAULT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: DefaultValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [COMPOSITION_BUFFER_MODE]\n                }] }]; } });\n\nfunction isEmptyInputValue(value) {\n    /**\n     * Check if the object is a string or array before evaluating the length attribute.\n     * This avoids falsely rejecting objects that contain a custom length attribute.\n     * For example, the object {id: 1, length: 0, width: 0} should not be returned as empty.\n     */\n    return value == null ||\n        ((typeof value === 'string' || Array.isArray(value)) && value.length === 0);\n}\nfunction hasValidLength(value) {\n    // non-strict comparison is intentional, to check for both `null` and `undefined` values\n    return value != null && typeof value.length === 'number';\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_ASYNC_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Promise<ValidationErrors|null> {\n *     return Promise.resolve({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static min(min) {\n        return minValidator(min);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static max(max) {\n        return maxValidator(max);\n    }\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static required(control) {\n        return requiredValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('some value', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static requiredTrue(control) {\n        return requiredTrueValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular\n     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common use cases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML\n     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n     * lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static email(control) {\n        return emailValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays. The\n     * `minLength` validator logic is also not invoked for values when their `length` property is 0\n     * (for example in case of an empty string or an empty array), to support optional controls. You\n     * can use the standard `required` validator if empty values should not be considered valid.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static minLength(minLength) {\n        return minLengthValidator(minLength);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static maxLength(maxLength) {\n        return maxLengthValidator(maxLength);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * ### Pattern matching with the global or sticky flag\n     *\n     * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n     * can produce different results on the same input when validations are run consecutively. This is\n     * due to how the behavior of `RegExp.prototype.test` is\n     * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n     * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n     * Due to this behavior, it is recommended that when using\n     * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n     * flag enabled.\n     *\n     * ```typescript\n     * // Not recommended (since the `g` flag is used)\n     * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n     *\n     * // Good\n     * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n     * ```\n     *\n     * @param pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static pattern(pattern) {\n        return patternValidator(pattern);\n    }\n    /**\n     * @description\n     * Validator that performs no operation.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static nullValidator(control) {\n        return nullValidator(control);\n    }\n    static compose(validators) {\n        return compose(validators);\n    }\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static composeAsync(validators) {\n        return composeAsync(validators);\n    }\n}\n/**\n * Validator that requires the control's value to be greater than or equal to the provided number.\n * See `Validators.min` for additional information.\n */\nfunction minValidator(min) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n        return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control's value to be less than or equal to the provided number.\n * See `Validators.max` for additional information.\n */\nfunction maxValidator(max) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n        return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control have a non-empty value.\n * See `Validators.required` for additional information.\n */\nfunction requiredValidator(control) {\n    return isEmptyInputValue(control.value) ? { 'required': true } : null;\n}\n/**\n * Validator that requires the control's value be true. This validator is commonly\n * used for required checkboxes.\n * See `Validators.requiredTrue` for additional information.\n */\nfunction requiredTrueValidator(control) {\n    return control.value === true ? null : { 'required': true };\n}\n/**\n * Validator that requires the control's value pass an email validation test.\n * See `Validators.email` for additional information.\n */\nfunction emailValidator(control) {\n    if (isEmptyInputValue(control.value)) {\n        return null; // don't validate empty values to allow optional controls\n    }\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n}\n/**\n * Validator that requires the length of the control's value to be greater than or equal\n * to the provided minimum length. See `Validators.minLength` for additional information.\n */\nfunction minLengthValidator(minLength) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n            // don't validate empty values to allow optional controls\n            // don't validate values without `length` property\n            return null;\n        }\n        return control.value.length < minLength ?\n            { 'minlength': { 'requiredLength': minLength, 'actualLength': control.value.length } } :\n            null;\n    };\n}\n/**\n * Validator that requires the length of the control's value to be less than or equal\n * to the provided maximum length. See `Validators.maxLength` for additional information.\n */\nfunction maxLengthValidator(maxLength) {\n    return (control) => {\n        return hasValidLength(control.value) && control.value.length > maxLength ?\n            { 'maxlength': { 'requiredLength': maxLength, 'actualLength': control.value.length } } :\n            null;\n    };\n}\n/**\n * Validator that requires the control's value to match a regex pattern.\n * See `Validators.pattern` for additional information.\n */\nfunction patternValidator(pattern) {\n    if (!pattern)\n        return nullValidator;\n    let regex;\n    let regexStr;\n    if (typeof pattern === 'string') {\n        regexStr = '';\n        if (pattern.charAt(0) !== '^')\n            regexStr += '^';\n        regexStr += pattern;\n        if (pattern.charAt(pattern.length - 1) !== '$')\n            regexStr += '$';\n        regex = new RegExp(regexStr);\n    }\n    else {\n        regexStr = pattern.toString();\n        regex = pattern;\n    }\n    return (control) => {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = control.value;\n        return regex.test(value) ? null :\n            { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n    };\n}\n/**\n * Function that has `ValidatorFn` shape, but performs no operation.\n */\nfunction nullValidator(control) {\n    return null;\n}\nfunction isPresent(o) {\n    return o != null;\n}\nfunction toObservable(value) {\n    const obs = ɵisPromise(value) ? from(value) : value;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !(ɵisSubscribable(obs))) {\n        let errorMessage = `Expected async validator to return Promise or Observable.`;\n        // A synchronous validator will return object or null.\n        if (typeof value === 'object') {\n            errorMessage +=\n                ' Are you using a synchronous validator where an async validator is expected?';\n        }\n        throw new ɵRuntimeError(-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);\n    }\n    return obs;\n}\nfunction mergeErrors(arrayOfErrors) {\n    let res = {};\n    arrayOfErrors.forEach((errors) => {\n        res = errors != null ? { ...res, ...errors } : res;\n    });\n    return Object.keys(res).length === 0 ? null : res;\n}\nfunction executeValidators(control, validators) {\n    return validators.map(validator => validator(control));\n}\nfunction isValidatorFn(validator) {\n    return !validator.validate;\n}\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nfunction normalizeValidators(validators) {\n    return validators.map(validator => {\n        return isValidatorFn(validator) ?\n            validator :\n            ((c) => validator.validate(c));\n    });\n}\n/**\n * Merges synchronous validators into a single validator function.\n * See `Validators.compose` for additional information.\n */\nfunction compose(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        return mergeErrors(executeValidators(control, presentValidators));\n    };\n}\n/**\n * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),\n * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single\n * validator function.\n */\nfunction composeValidators(validators) {\n    return validators != null ? compose(normalizeValidators(validators)) : null;\n}\n/**\n * Merges asynchronous validators into a single validator function.\n * See `Validators.composeAsync` for additional information.\n */\nfunction composeAsync(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        const observables = executeValidators(control, presentValidators).map(toObservable);\n        return forkJoin(observables).pipe(map(mergeErrors));\n    };\n}\n/**\n * Accepts a list of async validators of different possible shapes (`AsyncValidator` and\n * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges\n * them into a single validator function.\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? composeAsync(normalizeValidators(validators)) :\n        null;\n}\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nfunction mergeValidators(controlValidators, dirValidator) {\n    if (controlValidators === null)\n        return [dirValidator];\n    return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] :\n        [controlValidators, dirValidator];\n}\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nfunction getControlValidators(control) {\n    return control._rawValidators;\n}\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nfunction getControlAsyncValidators(control) {\n    return control._rawAsyncValidators;\n}\n/**\n * Accepts a singleton validator, an array, or null, and returns an array type with the provided\n * validators.\n *\n * @param validators A validator, validators, or null.\n * @returns A validators array.\n */\nfunction makeValidatorsArray(validators) {\n    if (!validators)\n        return [];\n    return Array.isArray(validators) ? validators : [validators];\n}\n/**\n * Determines whether a validator or validators array has a given validator.\n *\n * @param validators The validator or validators to compare against.\n * @param validator The validator to check.\n * @returns Whether the validator is present.\n */\nfunction hasValidator(validators, validator) {\n    return Array.isArray(validators) ? validators.includes(validator) : validators === validator;\n}\n/**\n * Combines two arrays of validators into one. If duplicates are provided, only one will be added.\n *\n * @param validators The new validators.\n * @param currentValidators The base array of current validators.\n * @returns An array of validators.\n */\nfunction addValidators(validators, currentValidators) {\n    const current = makeValidatorsArray(currentValidators);\n    const validatorsToAdd = makeValidatorsArray(validators);\n    validatorsToAdd.forEach((v) => {\n        // Note: if there are duplicate entries in the new validators array,\n        // only the first one would be added to the current list of validators.\n        // Duplicate ones would be ignored since `hasValidator` would detect\n        // the presence of a validator function and we update the current list in place.\n        if (!hasValidator(current, v)) {\n            current.push(v);\n        }\n    });\n    return current;\n}\nfunction removeValidators(validators, currentValidators) {\n    return makeValidatorsArray(currentValidators).filter(v => !hasValidator(validators, v));\n}\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n    constructor() {\n        /**\n         * Set of synchronous validators as they were provided while calling `setValidators` function.\n         * @internal\n         */\n        this._rawValidators = [];\n        /**\n         * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n         * function.\n         * @internal\n         */\n        this._rawAsyncValidators = [];\n        /*\n         * The set of callbacks to be invoked when directive instance is being destroyed.\n         */\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    get value() {\n        return this.control ? this.control.value : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    get valid() {\n        return this.control ? this.control.valid : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    get invalid() {\n        return this.control ? this.control.invalid : null;\n    }\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    get pending() {\n        return this.control ? this.control.pending : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    get disabled() {\n        return this.control ? this.control.disabled : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    get enabled() {\n        return this.control ? this.control.enabled : null;\n    }\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    get errors() {\n        return this.control ? this.control.errors : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get pristine() {\n        return this.control ? this.control.pristine : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get dirty() {\n        return this.control ? this.control.dirty : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get touched() {\n        return this.control ? this.control.touched : null;\n    }\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    get status() {\n        return this.control ? this.control.status : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get untouched() {\n        return this.control ? this.control.untouched : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return null;\n    }\n    /**\n     * Sets synchronous validators for this directive.\n     * @internal\n     */\n    _setValidators(validators) {\n        this._rawValidators = validators || [];\n        this._composedValidatorFn = composeValidators(this._rawValidators);\n    }\n    /**\n     * Sets asynchronous validators for this directive.\n     * @internal\n     */\n    _setAsyncValidators(validators) {\n        this._rawAsyncValidators = validators || [];\n        this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     */\n    get validator() {\n        return this._composedValidatorFn || null;\n    }\n    /**\n     * @description\n     * Asynchronous validator function composed of all the asynchronous validators registered with\n     * this directive.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn || null;\n    }\n    /**\n     * Internal function to register callbacks that should be invoked\n     * when directive instance is being destroyed.\n     * @internal\n     */\n    _registerOnDestroy(fn) {\n        this._onDestroyCallbacks.push(fn);\n    }\n    /**\n     * Internal function to invoke all registered \"on destroy\" callbacks.\n     * Note: calling this function also clears the list of callbacks.\n     * @internal\n     */\n    _invokeOnDestroyCallbacks() {\n        this._onDestroyCallbacks.forEach(fn => fn());\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    get formDirective() {\n        return null;\n    }\n    /**\n     * @description\n     * The path to this group.\n     */\n    get path() {\n        return null;\n    }\n}\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * @description\n         * The parent form for the control.\n         *\n         * @internal\n         */\n        this._parent = null;\n        /**\n         * @description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * @description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n    }\n}\n\n// DO NOT REFACTOR!\n// Each status is represented by a separate function to make sure that\n// advanced Closure Compiler optimizations related to property renaming\n// can work correctly.\nclass AbstractControlStatus {\n    constructor(cd) {\n        this._cd = cd;\n    }\n    get isTouched() {\n        return !!this._cd?.control?.touched;\n    }\n    get isUntouched() {\n        return !!this._cd?.control?.untouched;\n    }\n    get isPristine() {\n        return !!this._cd?.control?.pristine;\n    }\n    get isDirty() {\n        return !!this._cd?.control?.dirty;\n    }\n    get isValid() {\n        return !!this._cd?.control?.valid;\n    }\n    get isInvalid() {\n        return !!this._cd?.control?.invalid;\n    }\n    get isPending() {\n        return !!this._cd?.control?.pending;\n    }\n    get isSubmitted() {\n        // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but\n        // we avoid instanceof checks to prevent non-tree-shakable references to those types.\n        return !!this._cd?.submitted;\n    }\n}\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'isUntouched',\n    '[class.ng-touched]': 'isTouched',\n    '[class.ng-pristine]': 'isPristine',\n    '[class.ng-dirty]': 'isDirty',\n    '[class.ng-valid]': 'isValid',\n    '[class.ng-invalid]': 'isInvalid',\n    '[class.ng-pending]': 'isPending',\n};\nconst ngGroupStatusHost = {\n    ...ngControlStatusHost,\n    '[class.ng-submitted]': 'isSubmitted',\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgControlStatus, deps: [{ token: NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgControlStatus, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]\n        }], ctorParameters: function () { return [{ type: NgControl, decorators: [{\n                    type: Self\n                }] }]; } });\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional\n * class ng-submitted.\n *\n * @see {@link NgControlStatus}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgControlStatusGroup, deps: [{ token: ControlContainer, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\", \"class.ng-submitted\": \"isSubmitted\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgControlStatusGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngGroupStatusHost\n                }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; } });\n\nconst formControlNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <input formControlName=\"firstName\">\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      firstName: new FormControl()\n  });`;\nconst formGroupNameExample = `\n  <div [formGroup]=\"myGroup\">\n      <div formGroupName=\"person\">\n        <input formControlName=\"firstName\">\n      </div>\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      person: new FormGroup({ firstName: new FormControl() })\n  });`;\nconst formArrayNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <div formArrayName=\"cities\">\n      <div *ngFor=\"let city of cityArray.controls; index as i\">\n        <input [formControlName]=\"i\">\n      </div>\n    </div>\n  </div>\n\n  In your class:\n\n  this.cityArray = new FormArray([new FormControl('SF')]);\n  this.myGroup = new FormGroup({\n    cities: this.cityArray\n  });`;\nconst ngModelGroupExample = `\n  <form>\n      <div ngModelGroup=\"person\">\n        <input [(ngModel)]=\"person.name\" name=\"firstName\">\n      </div>\n  </form>`;\nconst ngModelWithFormGroupExample = `\n  <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n      <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n  </div>\n`;\n\nfunction controlParentException() {\n    return new ɵRuntimeError(1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formControlNameExample}`);\n}\nfunction ngModelGroupException() {\n    return new ɵRuntimeError(1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n      that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n      Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n      ${formGroupNameExample}\n\n      Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n      ${ngModelGroupExample}`);\n}\nfunction missingFormException() {\n    return new ɵRuntimeError(1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.\n\n      Example:\n\n      ${formControlNameExample}`);\n}\nfunction groupParentException() {\n    return new ɵRuntimeError(1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n    directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formGroupNameExample}`);\n}\nfunction arrayParentException() {\n    return new ɵRuntimeError(1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${formArrayNameExample}`);\n}\nconst disabledAttrWarning = `\n  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n  you. We recommend using this approach to avoid 'changed after checked' errors.\n\n  Example:\n  // Specify the \\`disabled\\` property at control creation time:\n  form = new FormGroup({\n    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n    last: new FormControl('Drew', Validators.required)\n  });\n\n  // Controls can also be enabled/disabled after creation:\n  form.get('first')?.enable();\n  form.get('last')?.disable();\n`;\nconst asyncValidatorsDroppedWithOptsWarning = `\n  It looks like you're constructing using a FormControl with both an options argument and an\n  async validators argument. Mixing these arguments will cause your async validators to be dropped.\n  You should either put all your validators in the options object, or in separate validators\n  arguments. For example:\n\n  // Using validators arguments\n  fc = new FormControl(42, Validators.required, myAsyncValidator);\n\n  // Using AbstractControlOptions\n  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});\n\n  // Do NOT mix them: async validators will be dropped!\n  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);\n`;\nfunction ngModelWarning(directiveName) {\n    return `\n  It looks like you're using ngModel on the same form field as ${directiveName}.\n  Support for using the ngModel input property and ngModelChange event with\n  reactive form directives has been deprecated in Angular v6 and will be removed\n  in a future version of Angular.\n\n  For more information on this, see our API docs here:\n  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel\n  `;\n}\nfunction describeKey(isFormGroup, key) {\n    return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;\n}\nfunction noControlsError(isFormGroup) {\n    return `\n    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,\n    you may want to check next tick (e.g. use setTimeout).\n  `;\n}\nfunction missingControlError(isFormGroup, key) {\n    return `Cannot find form control ${describeKey(isFormGroup, key)}`;\n}\nfunction missingControlValueError(isFormGroup, key) {\n    return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;\n}\n\n/**\n * Reports that a control is valid, meaning that no errors exist in the input value.\n *\n * @see {@link status}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a control is invalid, meaning that an error exists in the input value.\n *\n * @see {@link status}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a control is pending, meaning that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see {@link markAsPending}\n * @see {@link status}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a control is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see {@link markAsDisabled}\n * @see {@link status}\n */\nconst DISABLED = 'DISABLED';\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts) {\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(asyncValidator, validatorOrOpts) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (isOptionsObj(validatorOrOpts) && asyncValidator) {\n            console.warn(asyncValidatorsDroppedWithOptsWarning);\n        }\n    }\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n        asyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\nfunction assertControlPresent(parent, isGroup, key) {\n    const controls = parent.controls;\n    const collection = isGroup ? Object.keys(controls) : controls;\n    if (!collection.length) {\n        throw new ɵRuntimeError(1000 /* RuntimeErrorCode.NO_CONTROLS */, (typeof ngDevMode === 'undefined' || ngDevMode) ? noControlsError(isGroup) : '');\n    }\n    if (!controls[key]) {\n        throw new ɵRuntimeError(1001 /* RuntimeErrorCode.MISSING_CONTROL */, (typeof ngDevMode === 'undefined' || ngDevMode) ? missingControlError(isGroup, key) : '');\n    }\n}\nfunction assertAllValuesPresent(control, isGroup, value) {\n    control._forEachChild((_, key) => {\n        if (value[key] === undefined) {\n            throw new ɵRuntimeError(1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, (typeof ngDevMode === 'undefined' || ngDevMode) ? missingControlValueError(isGroup, key) :\n                '');\n        }\n    });\n}\n// clang-format on\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * The first type parameter TValue represents the value type of the control (`control.value`).\n * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @publicApi\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validators The function or array of functions that is used to determine the validity of\n     *     this control synchronously.\n     * @param asyncValidators The function or array of functions that is used to determine validity of\n     *     this control asynchronously.\n     */\n    constructor(validators, asyncValidators) {\n        /** @internal */\n        this._pendingDirty = false;\n        /**\n         * Indicates that a control has its own pending asynchronous validation in progress.\n         *\n         * @internal\n         */\n        this._hasOwnPendingAsyncValidator = false;\n        /** @internal */\n        this._pendingTouched = false;\n        /** @internal */\n        this._onCollectionChange = () => { };\n        this._parent = null;\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /** @internal */\n        this._onDisabledChange = [];\n        this._assignValidators(validators);\n        this._assignAsyncValidators(asyncValidators);\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control synchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get validator() {\n        return this._composedValidatorFn;\n    }\n    set validator(validatorFn) {\n        this._rawValidators = this._composedValidatorFn = validatorFn;\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control asynchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn;\n    }\n    set asyncValidator(asyncValidatorFn) {\n        this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n    }\n    /**\n     * The parent control.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() {\n        return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() {\n        return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() {\n        return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    get disabled() {\n        return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     */\n    get enabled() {\n        return this.status !== DISABLED;\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() {\n        return !this.pristine;\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    get untouched() {\n        return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing synchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addValidators()` method instead.\n     */\n    setValidators(validators) {\n        this._assignValidators(validators);\n    }\n    /**\n     * Sets the asynchronous validators that are active on this control. Calling this\n     * overwrites any existing asynchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addAsyncValidators()` method instead.\n     */\n    setAsyncValidators(validators) {\n        this._assignAsyncValidators(validators);\n    }\n    /**\n     * Add a synchronous validator or validators to this control, without affecting other validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect. If duplicate validator functions\n     * are present in the `validators` array, only the first instance would be added to a form\n     * control.\n     *\n     * @param validators The new validator function or functions to add to this control.\n     */\n    addValidators(validators) {\n        this.setValidators(addValidators(validators, this._rawValidators));\n    }\n    /**\n     * Add an asynchronous validator or validators to this control, without affecting other\n     * validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect.\n     *\n     * @param validators The new asynchronous validator function or functions to add to this control.\n     */\n    addAsyncValidators(validators) {\n        this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Remove a synchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found,\n     * it is ignored.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<string | null>('', Validators.required);\n     * ctrl.removeValidators(Validators.required);\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<string | null>('', minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     *\n     * ctrl.removeValidators(minValidator);\n     * ```\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The validator or validators to remove.\n     */\n    removeValidators(validators) {\n        this.setValidators(removeValidators(validators, this._rawValidators));\n    }\n    /**\n     * Remove an asynchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found, it\n     * is ignored.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The asynchronous validator or validators to remove.\n     */\n    removeAsyncValidators(validators) {\n        this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Check whether a synchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<number | null>(0, Validators.required);\n     * expect(ctrl.hasValidator(Validators.required)).toEqual(true)\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<number | null>(0, minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     * ```\n     *\n     * @param validator The validator to check for presence. Compared by function reference.\n     * @returns Whether the provided validator was found on this control.\n     */\n    hasValidator(validator) {\n        return hasValidator(this._rawValidators, validator);\n    }\n    /**\n     * Check whether an asynchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @param validator The asynchronous validator to check for presence. Compared by function\n     *     reference.\n     * @returns Whether the provided asynchronous validator was found on this control.\n     */\n    hasAsyncValidator(validator) {\n        return hasValidator(this._rawAsyncValidators, validator);\n    }\n    /**\n     * Empties out the synchronous validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearValidators() {\n        this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearAsyncValidators() {\n        this.asyncValidator = null;\n    }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see {@link markAsUntouched()}\n     * @see {@link markAsDirty()}\n     * @see {@link markAsPristine()}\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsTouched(opts = {}) {\n        this.touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see {@link markAsTouched()}\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((control) => control.markAllAsTouched());\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see {@link markAsTouched()}\n     * @see {@link markAsDirty()}\n     * @see {@link markAsPristine()}\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsUntouched(opts = {}) {\n        this.touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => {\n            control.markAsUntouched({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see {@link markAsTouched()}\n     * @see {@link markAsUntouched()}\n     * @see {@link markAsPristine()}\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsDirty(opts = {}) {\n        this.pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see {@link markAsTouched()}\n     * @see {@link markAsUntouched()}\n     * @see {@link markAsDirty()}\n     *\n     * @param opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsPristine(opts = {}) {\n        this.pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => {\n            control.markAsPristine({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     */\n    markAsPending(opts = {}) {\n        this.status = PENDING;\n        if (opts.emitEvent !== false) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = DISABLED;\n        this.errors = null;\n        this._forEachChild((control) => {\n            control.disable({ ...opts, onlySelf: true });\n        });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        this._updateAncestors({ ...opts, skipPristineCheck });\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = VALID;\n        this._forEachChild((control) => {\n            control.enable({ ...opts, onlySelf: true });\n        });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors({ ...opts, skipPristineCheck });\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * Sets the parent of the control\n     *\n     * @param parent The new parent.\n     */\n    setParent(parent) {\n        this._parent = parent;\n    }\n    /**\n     * The raw value of this control. For most control implementations, the raw value will include\n     * disabled children.\n     */\n    getRawValue() {\n        return this.value;\n    }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this.errors = this._runValidator();\n            this.status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /** @internal */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    _setInitialStatus() {\n        this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            this.status = PENDING;\n            this._hasOwnPendingAsyncValidator = true;\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription = obs.subscribe((errors) => {\n                this._hasOwnPendingAsyncValidator = false;\n                // This will trigger the recalculation of the validation status, which depends on\n                // the state of the asynchronous validation (whether it is in progress or not). So, it is\n                // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n                this.setErrors(errors, { emitEvent });\n            });\n        }\n    }\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n            this._hasOwnPendingAsyncValidator = false;\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control errors are set.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event after the errors are set.\n     *\n     * @usageNotes\n     *\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors, opts = {}) {\n        this.errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control. If a string is provided, passing it as a string literal will result in improved type\n     * information. Likewise, if an array is provided, passing it `as const` will cause improved type\n     * information to be available.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings\n     *\n     * ### Retrieve a control in a FormArray\n     *\n     * When accessing an element inside a FormArray, you can use an element index.\n     * For example, to get a `price` control from the first element in an `items` array you can use:\n     *\n     * * `this.form.get('items.0.price');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['items', 0, 'price']);`\n     */\n    get(path) {\n        let currPath = path;\n        if (currPath == null)\n            return null;\n        if (!Array.isArray(currPath))\n            currPath = currPath.split('.');\n        if (currPath.length === 0)\n            return null;\n        return currPath.reduce((control, name) => control && control._find(name), this);\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    get root() {\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent) {\n        this.status = this._calculateStatus();\n        if (emitEvent) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this.valueChanges = new EventEmitter();\n        this.statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /** @internal */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /** @internal */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /** @internal */\n    _updatePristine(opts = {}) {\n        this.pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /** @internal */\n    _updateTouched(opts = {}) {\n        this.touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /** @internal */\n    _registerOnCollectionChange(fn) {\n        this._onCollectionChange = fn;\n    }\n    /** @internal */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && opts.updateOn != null) {\n            this._updateOn = opts.updateOn;\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * @internal\n     */\n    _parentMarkedDirty(onlySelf) {\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();\n    }\n    /** @internal */\n    _find(name) {\n        return null;\n    }\n    /**\n     * Internal implementation of the `setValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignValidators(validators) {\n        this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedValidatorFn = coerceToValidator(this._rawValidators);\n    }\n    /**\n     * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignAsyncValidators(validators) {\n        this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n    }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormArray`, and `FormRecord`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * `FormGroup` is intended for use cases where the keys are known ahead of time.\n * If you need to dynamically add and remove controls, use {@link FormRecord} instead.\n *\n * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner\n * control types as values.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### The type argument, and optional controls\n *\n * `FormGroup` accepts one generic argument, which is an object containing its inner controls.\n * This type will usually be inferred automatically, but you can always specify it explicitly if you\n * wish.\n *\n * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the\n * type):\n *\n * ```\n * const form = new FormGroup<{\n *   first: FormControl<string|null>,\n *   middle?: FormControl<string|null>, // Middle name is optional.\n *   last: FormControl<string|null>,\n * }>({\n *   first: new FormControl('Nancy'),\n *   last: new FormControl('Drew'),\n * });\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * ### Using a FormGroup with optional controls\n *\n * It is possible to have optional controls in a FormGroup. An optional control can be removed later\n * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be\n * declared optional in the group's type.\n *\n * ```ts\n * const c = new FormGroup<{one?: FormControl<string>}>({\n *   one: new FormControl('')\n * });\n * ```\n *\n * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`\n * without providing the optional key `one` will cause it to become `null`.\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n            // so we set `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n    }\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    addControl(name, control, options = {}) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group. In a strongly-typed group, required controls cannot be\n     * removed.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to remove from the collection\n     * @param options Specifies whether this FormGroup instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeControl(name, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    setControl(name, control, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, true, value);\n        Object.keys(value).forEach(name => {\n            assertControlPresent(this, true, name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control value\n     * is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values, so\n        // we just ignore such cases when a field containing FormGroup instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        Object.keys(value).forEach(name => {\n            // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so\n            // `as any` is required.\n            const control = this.controls[name];\n            if (control) {\n                control.patchValue(\n                /* Guaranteed to be present, due to the outer forEach. */ value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n     * the value of all descendants to their default values, or null if no defaults were provided.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(form.value);  // {last: 'last'}\n     * console.log(form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value ? value[name] : null, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control.getRawValue();\n            return acc;\n        });\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(key => {\n            // The list of controls can change (for ex. controls might be removed) while the loop\n            // is running (as a result of invoking Forms API in `valueChanges` subscription), so we\n            // have to null check before invoking the callback.\n            const control = this.controls[key];\n            control && cb(control, key);\n        });\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this._reduceValue();\n    }\n    /** @internal */\n    _anyControls(condition) {\n        for (const [controlName, control] of Object.entries(this.controls)) {\n            if (this.contains(controlName) && condition(control)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _reduceValue() {\n        let acc = {};\n        return this._reduceChildren(acc, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        let res = initValue;\n        this._forEachChild((control, name) => {\n            res = fn(res, control, name);\n        });\n        return res;\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /** @internal */\n    _find(name) {\n        return this.controls.hasOwnProperty(name) ?\n            this.controls[name] :\n            null;\n    }\n}\nconst UntypedFormGroup = FormGroup;\n/**\n * @description\n * Asserts that the given control is an instance of `FormGroup`\n *\n * @publicApi\n */\nconst isFormGroup = (control) => control instanceof FormGroup;\n/**\n * Tracks the value and validity state of a collection of `FormControl` instances, each of which has\n * the same value type.\n *\n * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,\n * with controls added and removed as needed.\n *\n * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.\n *\n * @usageNotes\n *\n * ```\n * let numbers = new FormRecord({bill: new FormControl('415-123-456')});\n * numbers.addControl('bob', new FormControl('415-234-567'));\n * numbers.removeControl('bill');\n * ```\n *\n * @publicApi\n */\nclass FormRecord extends FormGroup {\n}\n/**\n * @description\n * Asserts that the given control is an instance of `FormRecord`\n *\n * @publicApi\n */\nconst isFormRecord = (control) => control instanceof FormRecord;\n\n/**\n * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of\n * whether the control is disabled or enabled.\n *\n * @see {@link FormsModule#withconfig}\n */\nconst CALL_SET_DISABLED_STATE = new InjectionToken('CallSetDisabledState', { providedIn: 'root', factory: () => setDisabledStateDefault });\n/**\n * Whether to use the fixed setDisabledState behavior by default.\n */\nconst setDisabledStateDefault = 'always';\nfunction controlPath(name, parent) {\n    return [...parent.path, name];\n}\n/**\n * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both\n * instances. This function is typically invoked when form directive is being initialized.\n *\n * @param control Form control instance that should be linked.\n * @param dir Directive that should be linked with a given control.\n */\nfunction setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwMissingValueAccessorError(dir);\n    }\n    setUpValidators(control, dir);\n    dir.valueAccessor.writeValue(control.value);\n    // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.\n    // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and\n    // the method is always called.\n    if (control.disabled || callSetDisabledState === 'always') {\n        dir.valueAccessor.setDisabledState?.(control.disabled);\n    }\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    setUpDisabledChangeHandler(control, dir);\n}\n/**\n * Reverts configuration performed by the `setUpControl` control function.\n * Effectively disconnects form control with a given form directive.\n * This function is typically invoked when corresponding form directive is being destroyed.\n *\n * @param control Form control which should be cleaned up.\n * @param dir Directive that should be disconnected from a given control.\n * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should\n *     contain asserts to verify that it's not called once directive is destroyed. We need this flag\n *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.\n */\nfunction cleanUpControl(control, dir, validateControlPresenceOnChange = true) {\n    const noop = () => {\n        if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            _noControlError(dir);\n        }\n    };\n    // The `valueAccessor` field is typically defined on FromControl and FormControlName directive\n    // instances and there is a logic in `selectValueAccessor` function that throws if it's not the\n    // case. We still check the presence of `valueAccessor` before invoking its methods to make sure\n    // that cleanup works correctly if app code or tests are setup to ignore the error thrown from\n    // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.\n    if (dir.valueAccessor) {\n        dir.valueAccessor.registerOnChange(noop);\n        dir.valueAccessor.registerOnTouched(noop);\n    }\n    cleanUpValidators(control, dir);\n    if (control) {\n        dir._invokeOnDestroyCallbacks();\n        control._registerOnCollectionChange(() => { });\n    }\n}\nfunction registerOnValidatorChange(validators, onChange) {\n    validators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(onChange);\n    });\n}\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nfunction setUpDisabledChangeHandler(control, dir) {\n    if (dir.valueAccessor.setDisabledState) {\n        const onDisabledChange = (isDisabled) => {\n            dir.valueAccessor.setDisabledState(isDisabled);\n        };\n        control.registerOnDisabledChange(onDisabledChange);\n        // Register a callback function to cleanup disabled change handler\n        // from a control instance when a directive is destroyed.\n        dir._registerOnDestroy(() => {\n            control._unregisterOnDisabledChange(onDisabledChange);\n        });\n    }\n}\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n */\nfunction setUpValidators(control, dir) {\n    const validators = getControlValidators(control);\n    if (dir.validator !== null) {\n        control.setValidators(mergeValidators(validators, dir.validator));\n    }\n    else if (typeof validators === 'function') {\n        // If sync validators are represented by a single validator function, we force the\n        // `Validators.compose` call to happen by executing the `setValidators` function with\n        // an array that contains that function. We need this to avoid possible discrepancies in\n        // validators behavior, so sync validators are always processed by the `Validators.compose`.\n        // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n        // have consistent behavior on AbstractControl API level. The same applies to the async\n        // validators logic below.\n        control.setValidators([validators]);\n    }\n    const asyncValidators = getControlAsyncValidators(control);\n    if (dir.asyncValidator !== null) {\n        control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));\n    }\n    else if (typeof asyncValidators === 'function') {\n        control.setAsyncValidators([asyncValidators]);\n    }\n    // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    const onValidatorChange = () => control.updateValueAndValidity();\n    registerOnValidatorChange(dir._rawValidators, onValidatorChange);\n    registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);\n}\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpValidators(control, dir) {\n    let isControlUpdated = false;\n    if (control !== null) {\n        if (dir.validator !== null) {\n            const validators = getControlValidators(control);\n            if (Array.isArray(validators) && validators.length > 0) {\n                // Filter out directive validator function.\n                const updatedValidators = validators.filter((validator) => validator !== dir.validator);\n                if (updatedValidators.length !== validators.length) {\n                    isControlUpdated = true;\n                    control.setValidators(updatedValidators);\n                }\n            }\n        }\n        if (dir.asyncValidator !== null) {\n            const asyncValidators = getControlAsyncValidators(control);\n            if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n                // Filter out directive async validator function.\n                const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);\n                if (updatedAsyncValidators.length !== asyncValidators.length) {\n                    isControlUpdated = true;\n                    control.setAsyncValidators(updatedAsyncValidators);\n                }\n            }\n        }\n    }\n    // Clear onValidatorChange callbacks by providing a noop function.\n    const noop = () => { };\n    registerOnValidatorChange(dir._rawValidators, noop);\n    registerOnValidatorChange(dir._rawAsyncValidators, noop);\n    return isControlUpdated;\n}\nfunction setUpViewChangePipeline(control, dir) {\n    dir.valueAccessor.registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\nfunction setUpBlurPipeline(control, dir) {\n    dir.valueAccessor.registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n    const onChange = (newValue, emitModelEvent) => {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    };\n    control.registerOnChange(onChange);\n    // Register a callback function to cleanup onChange handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n        control._unregisterOnChange(onChange);\n    });\n}\n/**\n * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators\n * present in the view.\n *\n * @param control FormGroup or FormArray instance that should be linked.\n * @param dir Directive that provides view validators.\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'Cannot find control with');\n    setUpValidators(control, dir);\n}\n/**\n * Reverts the setup performed by the `setUpFormContainer` function.\n *\n * @param control FormGroup or FormArray instance that should be cleaned up.\n * @param dir Directive that provided view validators.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpFormContainer(control, dir) {\n    return cleanUpValidators(control, dir);\n}\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n    const messageEnd = _describeControlLocation(dir);\n    throw new Error(`${message} ${messageEnd}`);\n}\nfunction _describeControlLocation(dir) {\n    const path = dir.path;\n    if (path && path.length > 1)\n        return `path: '${path.join(' -> ')}'`;\n    if (path?.[0])\n        return `name: '${path}'`;\n    return 'unspecified name attribute';\n}\nfunction _throwMissingValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);\n}\nfunction _throwInvalidValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` +\n        `Check that the \\`NG_VALUE_ACCESSOR\\` token is configured as a \\`multi: true\\` provider.`);\n}\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object.is(viewModel, change.currentValue);\n}\nfunction isBuiltInAccessor(valueAccessor) {\n    // Check if a given value accessor is an instance of a class that directly extends\n    // `BuiltInControlValueAccessor` one.\n    return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;\n}\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach((dir) => {\n        const control = dir.control;\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwInvalidValueAccessorError(dir);\n    let defaultAccessor = undefined;\n    let builtinAccessor = undefined;\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _throwError(dir, 'No valid value accessor for form control with');\n    }\n    return null;\n}\nfunction removeListItem$1(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        console.warn(ngModelWarning(name));\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\nconst resolvedPromise$1 = (() => Promise.resolve())();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgForm extends ControlContainer {\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /**\n         * @description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = new Set();\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @nodoc */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control =\n                container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir, this.callSetDisabledState);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.add(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            this._directives.delete(dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise$1.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        // Forms with `method=\"dialog\"` have some special behavior\n        // that won't reload the page and that shouldn't be prevented.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgForm, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider$1], exportAs: [\"ngForm\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgForm, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { options: [{\n                type: Input,\n                args: ['ngFormOptions']\n            }] } });\n\nfunction removeListItem(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\nfunction isFormControlState(formState) {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n}\nconst FormControl = (class FormControl extends AbstractControl {\n    constructor(\n    // formState and defaultValue will only be null if T is nullable\n    formState = null, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        /** @publicApi */\n        this.defaultValue = null;\n        /** @internal */\n        this._onChange = [];\n        /** @internal */\n        this._pendingChange = false;\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this._initObservables();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set\n            // `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n        if (isOptionsObj(validatorOrOpts) &&\n            (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {\n            if (isFormControlState(formState)) {\n                this.defaultValue = formState.value;\n            }\n            else {\n                this.defaultValue = formState;\n            }\n        }\n    }\n    setValue(value, options = {}) {\n        this.value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    reset(formState = this.defaultValue, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**  @internal */\n    _updateValue() { }\n    /**  @internal */\n    _anyControls(condition) {\n        return false;\n    }\n    /**  @internal */\n    _allControlsDisabled() {\n        return this.disabled;\n    }\n    registerOnChange(fn) {\n        this._onChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnChange(fn) {\n        removeListItem(this._onChange, fn);\n    }\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnDisabledChange(fn) {\n        removeListItem(this._onDisabledChange, fn);\n    }\n    /** @internal */\n    _forEachChild(cb) { }\n    /** @internal */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    _applyFormState(formState) {\n        if (isFormControlState(formState)) {\n            this.value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this.value = this._pendingValue = formState;\n        }\n    }\n});\nconst UntypedFormControl = FormControl;\n/**\n * @description\n * Asserts that the given control is an instance of `FormControl`\n *\n * @publicApi\n */\nconst isFormControl = (control) => control instanceof FormControl;\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /** @nodoc */\n    ngOnInit() {\n        this._checkParentType();\n        // Register the group with its parent group.\n        this.formDirective.addFormGroup(this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            // Remove the group from its parent group.\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /** @internal */\n    _checkParentType() { }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractFormGroupDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractFormGroupDirective, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractFormGroupDirective, decorators: [{\n            type: Directive\n        }] });\n\nfunction modelParentException() {\n    return new ɵRuntimeError(1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `\n    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n    formGroup's partner directive \"formControlName\" instead.  Example:\n\n    ${formControlNameExample}\n\n    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n    Example:\n\n    ${ngModelWithFormGroupExample}`);\n}\nfunction formGroupNameException() {\n    return new ɵRuntimeError(1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `\n    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n    Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\nfunction missingNameException() {\n    return new ɵRuntimeError(1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form\n    control must be defined as 'standalone' in ngModelOptions.\n\n    Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n    Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n}\nfunction modelGroupParentException() {\n    return new ɵRuntimeError(1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `\n    ngModelGroup cannot be used with a parent formGroup directive.\n\n    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\n\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n         * to a key in the parent `NgForm`.\n         */\n        this.name = '';\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw modelGroupParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgModelGroup, deps: [{ token: ControlContainer, host: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgModelGroup, selector: \"[ngModelGroup]\", inputs: { name: [\"ngModelGroup\", \"name\"] }, providers: [modelGroupProvider], exportAs: [\"ngModelGroup\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgModelGroup, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['ngModelGroup']\n            }] } });\n\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve())();\n/**\n * @description\n * Creates a `FormControl` instance from a [domain\n * model](https://en.wikipedia.org/wiki/Domain_model) and binds it to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see {@link RadioControlValueAccessor}\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this.callSetDisabledState = callSetDisabledState;\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Tracks the name bound to the directive. If a parent form exists, it\n         * uses this name as a key to retrieve this control's value.\n         */\n        this.name = '';\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered || 'name' in changes) {\n            if (this._registered) {\n                this._checkName();\n                if (this.formDirective) {\n                    // We can't call `formDirective.removeControl(this)`, because the `name` has already been\n                    // changed. We also can't reset the name temporarily since the logic in `removeControl`\n                    // is inside a promise and it won't run immediately. We work around it by giving it an\n                    // object with the same shape instead.\n                    const oldName = changes['name'].previousValue;\n                    this.formDirective.removeControl({ name: oldName, path: this._getPath(oldName) });\n                }\n            }\n            this._setUpControl();\n        }\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._getPath(this.name);\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this, this.callSetDisabledState);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                throw modelParentException();\n            }\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        // checking for 0 to avoid breaking change\n        const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);\n        resolvedPromise.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _getPath(controlName) {\n        return this._parent ? controlPath(controlName, this._parent) : [controlName];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgModel, deps: [{ token: ControlContainer, host: true, optional: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: ChangeDetectorRef, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding$1], exportAs: [\"ngModel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgModel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding$1],\n                    exportAs: 'ngModel'\n                }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { name: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], options: [{\n                type: Input,\n                args: ['ngModelOptions']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nclass ɵNgNoValidate {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵNgNoValidate, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\", host: { attributes: { \"novalidate\": \"\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵNgNoValidate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                }]\n        }] });\n\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NumberValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NumberValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\", host: { listeners: { \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [NUMBER_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NumberValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                }]\n        }] });\n\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\nfunction throwNameError() {\n    throw new ɵRuntimeError(1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n/**\n * Internal-only NgModule that works as a host for the `RadioControlRegistry` tree-shakable\n * provider. Note: the `InternalFormsSharedModule` can not be used here directly, since it's\n * declared *after* the `RadioControlRegistry` class and the `providedIn` doesn't support\n * `forwardRef` logic.\n */\nclass RadioControlRegistryModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistryModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistryModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistryModule, decorators: [{\n            type: NgModule\n        }] });\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistry, providedIn: RadioControlRegistryModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: RadioControlRegistryModule }]\n        }] });\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RadioControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor(renderer, elementRef, _registry, _injector) {\n        super(renderer, elementRef);\n        this._registry = _registry;\n        this._injector = _injector;\n        this.setDisabledStateFired = false;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * Note: we declare `onChange` here (also used as host listener) as a function with no arguments\n         * to override the `onChange` function (which expects 1 argument) in the parent\n         * `BaseControlValueAccessor` class.\n         * @nodoc\n         */\n        this.onChange = () => { };\n        this.callSetDisabledState = inject(CALL_SET_DISABLED_STATE, { optional: true }) ?? setDisabledStateDefault;\n    }\n    /** @nodoc */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._registry.remove(this);\n    }\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this.setProperty('checked', this._state);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /** @nodoc */\n    setDisabledState(isDisabled) {\n        /**\n         * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,\n         * including upon control creation. However, a longstanding bug caused the method to not fire\n         * when an *enabled* control was attached. This bug was fixed in v15 in #47576.\n         *\n         * This had a side effect: previously, it was possible to instantiate a reactive form control\n         * with `[attr.disabled]=true`, even though the corresponding control was enabled in the\n         * model. This resulted in a mismatch between the model and the DOM. Now, because\n         * `setDisabledState` is always called, the value in the DOM will be immediately overwritten\n         * with the \"correct\" enabled value.\n         *\n         * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms\n         * models the entire group of radio buttons as a single `FormControl`, there is no way to\n         * control the disabled state for individual radios, so they can no longer be configured as\n         * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`\n         * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`\n         * is `false`, and we are not in legacy mode.\n         */\n        if (this.setDisabledStateFired || isDisabled ||\n            this.callSetDisabledState === 'whenDisabledForLegacyCode') {\n            this.setProperty('disabled', isDisabled);\n        }\n        this.setDisabledStateFired = true;\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n        this.writeValue(value);\n    }\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: RadioControlRegistry }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: { name: \"name\", formControlName: \"formControlName\", value: \"value\" }, host: { listeners: { \"change\": \"onChange()\", \"blur\": \"onTouched()\" } }, providers: [RADIO_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RadioControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: RadioControlRegistry }, { type: i0.Injector }]; }, propDecorators: { name: [{\n                type: Input\n            }], formControlName: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RangeValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('value', parseFloat(value));\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RangeValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: RangeValueAccessor, selector: \"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.value)\", \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [RANGE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RangeValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                }]\n        }] });\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlDirective. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static { this._ngModelWarningSentOnce = false; }\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this.callSetDisabledState = callSetDisabledState;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            const previousForm = changes['form'].previousValue;\n            if (previousForm) {\n                cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */ false);\n            }\n            setUpControl(this.form, this, this.callSetDisabledState);\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            }\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpControl(this.form, this, /* validateControlPresenceOnChange */ false);\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormControlDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: FormControlDirective, selector: \"[formControl]\", inputs: { form: [\"formControl\", \"form\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormControlDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { form: [{\n                type: Input,\n                args: ['formControl']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /**\n         * @description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * Callback that should be invoked when controls in FormGroup or FormArray collection change\n         * (added or removed). This callback triggers corresponding DOM updates.\n         */\n        this._onCollectionChange = () => this._updateDomValue();\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n            this._oldForm = this.form;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpValidators(this.form, this);\n            // Currently the `onCollectionChange` callback is rewritten each time the\n            // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n            // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n            // Otherwise it might cause overriding a callback of some other directive instances. We should\n            // consider updating this logic later to make it similar to how `onChange` callbacks are\n            // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n            if (this.form._onCollectionChange === this._onCollectionChange) {\n                this.form._registerOnCollectionChange(() => { });\n            }\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir, this.callSetDisabledState);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */ false);\n        removeListItem$1(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n        // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n        // some internal apps call this method directly with the wrong arguments.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            const oldCtrl = dir.control;\n            const newCtrl = this.form.get(dir.path);\n            if (oldCtrl !== newCtrl) {\n                // Note: the value of the `dir.control` may not be defined, for example when it's a first\n                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n                cleanUpControl(oldCtrl || null, dir);\n                // Check whether new control at the same location inside the corresponding `FormGroup` is an\n                // instance of `FormControl` and perform control setup only if that's the case.\n                // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n                // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n                // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n                if (isFormControl(newCtrl)) {\n                    setUpControl(newCtrl, dir, this.callSetDisabledState);\n                    dir.control = newCtrl;\n                }\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _setUpFormContainer(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        // NOTE: this operation looks unnecessary in case no new validators were added in\n        // `setUpFormContainer` call. Consider updating this code to match the logic in\n        // `_cleanUpFormContainer` function.\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    _cleanUpFormContainer(dir) {\n        if (this.form) {\n            const ctrl = this.form.get(dir.path);\n            if (ctrl) {\n                const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n                if (isControlUpdated) {\n                    // Run validity check only in case a control was updated (i.e. view validators were\n                    // removed) as removing view validators might cause validity to change.\n                    ctrl.updateValueAndValidity({ emitEvent: false });\n                }\n            }\n        }\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(this._onCollectionChange);\n        if (this._oldForm) {\n            this._oldForm._registerOnCollectionChange(() => { });\n        }\n    }\n    _updateValidators() {\n        setUpValidators(this.form, this);\n        if (this._oldForm) {\n            cleanUpValidators(this._oldForm, this);\n        }\n    }\n    _checkFormPresent() {\n        if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingFormException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormGroupDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: FormGroupDirective, selector: \"[formGroup]\", inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormGroupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { form: [{\n                type: Input,\n                args: ['formGroup']\n            }], ngSubmit: [{\n                type: Output\n            }] } });\n\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form groups to be bound\n         * to indices when iterating over groups in a `FormArray`.\n         */\n        this.name = null;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw groupParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormGroupName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: FormGroupName, selector: \"[formGroupName]\", inputs: { name: [\"formGroupName\", \"name\"] }, providers: [formGroupNameProvider], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormGroupName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formGroupName']\n            }] } });\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form arrays to be bound\n         * to indices when iterating over arrays in a `FormArray`.\n         */\n        this.name = null;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @nodoc\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @nodoc\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw arrayParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormArrayName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: FormArrayName, selector: \"[formArrayName]\", inputs: { name: [\"formArrayName\", \"name\"] }, providers: [formArrayNameProvider], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormArrayName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formArrayName']\n            }] } });\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlName. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static { this._ngModelWarningSentOnce = false; }\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @description\n         * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form controls to be bound\n         * to indices when iterating over controls in a `FormArray`.\n         */\n        this.name = null;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            }\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) &&\n                !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                throw controlParentException();\n            }\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control = this.formDirective.addControl(this);\n        this._added = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormControlName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: FormControlName, selector: \"[formControlName]\", inputs: { name: [\"formControlName\", \"name\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [controlNameBinding], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormControlName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName]', providers: [controlNameBinding] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formControlName']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in IE, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the select element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        const id = this._getOptionId(value);\n        const valueString = _buildValueString$1(id, value);\n        this.setProperty('value', valueString);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /** @internal */\n    _registerOption() {\n        return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of this._optionMap.keys()) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SelectControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SelectControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgSelectOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgSelectOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgSelectOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }]; }, propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on one or of more of the select's options.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(ids.indexOf(o.toString()) > -1);\n            };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(false);\n            };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (element) => {\n            const selected = [];\n            const selectedOptions = element.selectedOptions;\n            if (selectedOptions !== undefined) {\n                const options = selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade to use `options` when `selectedOptions` property is not available.\n            // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib\n            // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.\n            else {\n                const options = element.options;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    if (opt.selected) {\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /** @internal */\n    _registerOption(value) {\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of this._optionMap.keys()) {\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SelectMultipleControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: SelectMultipleControlValueAccessor, selector: \"select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SelectMultipleControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectMultipleControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass ɵNgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵNgSelectMultipleOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectMultipleControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: ɵNgSelectMultipleOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵNgSelectMultipleOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }]; }, propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value) {\n    return typeof value === 'number' ? value : parseInt(value, 10);\n}\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value) {\n    return typeof value === 'number' ? value : parseFloat(value);\n}\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\nclass AbstractValidatorDirective {\n    constructor() {\n        this._validator = nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this.inputName in changes) {\n            const input = this.normalizeInput(changes[this.inputName].currentValue);\n            this._enabled = this.enabled(input);\n            this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n            if (this._onChange) {\n                this._onChange();\n            }\n        }\n    }\n    /** @nodoc */\n    validate(control) {\n        return this._validator(control);\n    }\n    /** @nodoc */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @description\n     * Determines whether this validator should be active or not based on an input.\n     * Base class implementation checks whether an input is defined (if the value is different from\n     * `null` and `undefined`). Validator classes that extend this base class can override this\n     * function with the logic specific to a particular validator directive.\n     */\n    enabled(input) {\n        return input != null /* both `null` and `undefined` */;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: AbstractValidatorDirective, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: AbstractValidatorDirective, decorators: [{\n            type: Directive\n        }] });\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'max';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (max) => maxValidator(max);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MaxValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: MaxValidator, selector: \"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]\", inputs: { max: \"max\" }, host: { properties: { \"attr.max\": \"_enabled ? max : null\" } }, providers: [MAX_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MaxValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',\n                    providers: [MAX_VALIDATOR],\n                    host: { '[attr.max]': '_enabled ? max : null' }\n                }]\n        }], propDecorators: { max: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'min';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (min) => minValidator(min);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MinValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: MinValidator, selector: \"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]\", inputs: { min: \"min\" }, host: { properties: { \"attr.min\": \"_enabled ? min : null\" } }, providers: [MIN_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MinValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',\n                    providers: [MIN_VALIDATOR],\n                    host: { '[attr.min]': '_enabled ? min : null' }\n                }]\n        }], propDecorators: { min: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass RequiredValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'required';\n        /** @internal */\n        this.normalizeInput = booleanAttribute;\n        /** @internal */\n        this.createValidator = (input) => requiredValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: { required: \"required\" }, host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: RequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' }\n                }]\n        }], propDecorators: { required: [{\n                type: Input\n            }] } });\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.createValidator = (input) => requiredTrueValidator;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: CheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\", host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: CheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' }\n                }]\n        }] });\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass EmailValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'email';\n        /** @internal */\n        this.normalizeInput = booleanAttribute;\n        /** @internal */\n        this.createValidator = (input) => emailValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: EmailValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: { email: \"email\" }, providers: [EMAIL_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: EmailValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                }]\n        }], propDecorators: { email: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'minlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (minlength) => minLengthValidator(minlength);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MinLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: { minlength: \"minlength\" }, host: { properties: { \"attr.minlength\": \"_enabled ? minlength : null\" } }, providers: [MIN_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MinLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': '_enabled ? minlength : null' }\n                }]\n        }], propDecorators: { minlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'maxlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (maxlength) => maxLengthValidator(maxlength);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MaxLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: { maxlength: \"maxlength\" }, host: { properties: { \"attr.maxlength\": \"_enabled ? maxlength : null\" } }, providers: [MAX_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: MaxLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': '_enabled ? maxlength : null' }\n                }]\n        }], propDecorators: { maxlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass PatternValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'pattern';\n        /** @internal */\n        this.normalizeInput = (input) => input;\n        /** @internal */\n        this.createValidator = (input) => patternValidator(input);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: PatternValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: { pattern: \"pattern\" }, host: { properties: { \"attr.pattern\": \"_enabled ? pattern : null\" } }, providers: [PATTERN_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: PatternValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': '_enabled ? pattern : null' }\n                }]\n        }], propDecorators: { pattern: [{\n                type: Input\n            }] } });\n\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n    MinValidator,\n    MaxValidator,\n];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵInternalFormsSharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵInternalFormsSharedModule, declarations: [ɵNgNoValidate,\n            NgSelectOption,\n            ɵNgSelectMultipleOption,\n            DefaultValueAccessor,\n            NumberValueAccessor,\n            RangeValueAccessor,\n            CheckboxControlValueAccessor,\n            SelectControlValueAccessor,\n            SelectMultipleControlValueAccessor,\n            RadioControlValueAccessor,\n            NgControlStatus,\n            NgControlStatusGroup,\n            RequiredValidator,\n            MinLengthValidator,\n            MaxLengthValidator,\n            PatternValidator,\n            CheckboxRequiredValidator,\n            EmailValidator,\n            MinValidator,\n            MaxValidator], imports: [RadioControlRegistryModule], exports: [ɵNgNoValidate,\n            NgSelectOption,\n            ɵNgSelectMultipleOption,\n            DefaultValueAccessor,\n            NumberValueAccessor,\n            RangeValueAccessor,\n            CheckboxControlValueAccessor,\n            SelectControlValueAccessor,\n            SelectMultipleControlValueAccessor,\n            RadioControlValueAccessor,\n            NgControlStatus,\n            NgControlStatusGroup,\n            RequiredValidator,\n            MinLengthValidator,\n            MaxLengthValidator,\n            PatternValidator,\n            CheckboxRequiredValidator,\n            EmailValidator,\n            MinValidator,\n            MaxValidator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵInternalFormsSharedModule, imports: [RadioControlRegistryModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ɵInternalFormsSharedModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    imports: [RadioControlRegistryModule],\n                    exports: SHARED_FORM_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` accepts one generic argument, which is the type of the controls inside.\n * If you need a heterogenous array, use {@link UntypedFormArray}.\n *\n * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormGroup`, and `FormRecord`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n            // to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap\n     *     around from the back, and if index is greatly negative (less than `-length`), the result is\n     * undefined. This behavior is the same as `Array.at(index)`.\n     */\n    at(index) {\n        return this.controls[this._adjustIndex(index)];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is added.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    push(control, options = {}) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.\n     * This behavior is the same as `Array.splice(index, 0, control)`.\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is inserted.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    insert(index, control, options = {}) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control.  If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), removes the first\n     *     element. This behavior is the same as `Array.splice(index, 1)`.\n     * @param options Specifies whether this FormArray instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeAt(index, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), replaces the first\n     *     element. This behavior is the same as `Array.splice(index, 1, control)`.\n     * @param control The `AbstractControl` control to replace the existing control\n     * @param options Specifies whether this FormArray instance should emit events after an\n     *     existing control is replaced with a new one.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * replaced with a new one. When false, no events are emitted.\n     */\n    setControl(index, control, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        if (control) {\n            this.controls.splice(adjustedIndex, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() {\n        return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, false, value);\n        value.forEach((newValue, index) => {\n            assertControlPresent(this, false, index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control\n     * value is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values,\n        // so we just ignore such cases when a field containing FormArray instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(arr.value);  // ['last']\n     * console.log(arr.at(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this.controls.map((control) => control.getRawValue());\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * @param options Specifies whether this FormArray instance should emit events after all\n     *     controls are removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when all controls\n     * in this FormArray instance are removed. When false, no events are emitted.\n     *\n     * @usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     */\n    clear(options = {}) {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((control) => control._registerOnCollectionChange(() => { }));\n        this.controls.splice(0);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Adjusts a negative index by summing it with the length of the array. For very negative\n     * indices, the result may remain negative.\n     * @internal\n     */\n    _adjustIndex(index) {\n        return index < 0 ? index + this.length : index;\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => {\n            cb(control, index);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /** @internal */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n    /** @internal */\n    _find(name) {\n        return this.at(name) ?? null;\n    }\n}\nconst UntypedFormArray = FormArray;\n/**\n * @description\n * Asserts that the given control is an instance of `FormArray`\n *\n * @publicApi\n */\nconst isFormArray = (control) => control instanceof FormArray;\n\nfunction isAbstractControlOptions(options) {\n    return !!options &&\n        (options.asyncValidators !== undefined ||\n            options.validators !== undefined ||\n            options.updateOn !== undefined);\n}\n// clang-format on\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass FormBuilder {\n    constructor() {\n        this.useNonNullable = false;\n    }\n    /**\n     * @description\n     * Returns a FormBuilder in which automatically constructed `FormControl` elements\n     * have `{nonNullable: true}` and are non-nullable.\n     *\n     * **Constructing non-nullable controls**\n     *\n     * When constructing a control, it will be non-nullable, and will reset to its initial value.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.control('Alex'); // FormControl<string>\n     * name.reset();\n     * console.log(name); // 'Alex'\n     * ```\n     *\n     * **Constructing non-nullable groups or arrays**\n     *\n     * When constructing a group or array, all automatically created inner controls will be\n     * non-nullable, and will reset to their initial values.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>\n     * name.reset();\n     * console.log(name); // {who: 'Alex'}\n     * ```\n     * **Constructing *nullable* fields on groups or arrays**\n     *\n     * It is still possible to have a nullable field. In particular, any `FormControl` which is\n     * *already* constructed will not be altered. For example:\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * // FormGroup<{who: FormControl<string|null>}>\n     * let name = nnfb.group({who: new FormControl('Alex')});\n     * name.reset(); console.log(name); // {who: null}\n     * ```\n     *\n     * Because the inner control is constructed explicitly by the caller, the builder has\n     * no control over how it is created, and cannot exclude the `null`.\n     */\n    get nonNullable() {\n        const nnfb = new FormBuilder();\n        nnfb.useNonNullable = true;\n        return nnfb;\n    }\n    group(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        let newOptions = {};\n        if (isAbstractControlOptions(options)) {\n            // `options` are `AbstractControlOptions`\n            newOptions = options;\n        }\n        else if (options !== null) {\n            // `options` are legacy form group options\n            newOptions.validators = options.validator;\n            newOptions.asyncValidators = options.asyncValidator;\n        }\n        return new FormGroup(reducedControls, newOptions);\n    }\n    /**\n     * @description\n     * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object\n     * containing all the keys and corresponding inner control types.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormRecord`. The object should have the\n     * `AbstractControlOptions` type and might contain the following fields:\n     * * `validators`: A synchronous validator function, or an array of validator functions.\n     * * `asyncValidators`: A single async validator or array of async validator functions.\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n     * | submit').\n     */\n    record(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormRecord(reducedControls, options);\n    }\n    /**\n     * @description\n     * Constructs a new `FormControl` with the given state, validators and options. Sets\n     * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the\n     * control will be nullable. Accepts a single generic argument, which is the type  of the\n     * control's value.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or a `FormControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        let newOptions = {};\n        if (!this.useNonNullable) {\n            return new FormControl(formState, validatorOrOpts, asyncValidator);\n        }\n        if (isAbstractControlOptions(validatorOrOpts)) {\n            // If the second argument is options, then they are copied.\n            newOptions = validatorOrOpts;\n        }\n        else {\n            // If the other arguments are validators, they are copied into an options object.\n            newOptions.validators = validatorOrOpts;\n            newOptions.asyncValidators = asyncValidator;\n        }\n        return new FormControl(formState, { ...newOptions, nonNullable: true });\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options. Accepts a single generic argument, which is the type of each control\n     * inside the array.\n     *\n     * @param controls An array of child controls or control configs. Each child control is given an\n     *     index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an\n     *     `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions.\n     */\n    array(controls, validatorOrOpts, asyncValidator) {\n        const createdControls = controls.map(c => this._createControl(c));\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormArray(createdControls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controls) {\n        const createdControls = {};\n        Object.keys(controls).forEach(controlName => {\n            createdControls[controlName] = this._createControl(controls[controlName]);\n        });\n        return createdControls;\n    }\n    /** @internal */\n    _createControl(controls) {\n        if (controls instanceof FormControl) {\n            return controls;\n        }\n        else if (controls instanceof AbstractControl) { // A control; just return it\n            return controls;\n        }\n        else if (Array.isArray(controls)) { // ControlConfig Tuple\n            const value = controls[0];\n            const validator = controls.length > 1 ? controls[1] : null;\n            const asyncValidator = controls.length > 2 ? controls[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else { // T or FormControlState<T>\n            return this.control(controls);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * @description\n * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed\n * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.\n *\n * @publicApi\n */\nclass NonNullableFormBuilder {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NonNullableFormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NonNullableFormBuilder, providedIn: 'root', useFactory: () => inject(FormBuilder).nonNullable }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NonNullableFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useFactory: () => inject(FormBuilder).nonNullable,\n                }]\n        }] });\n/**\n * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.\n */\nclass UntypedFormBuilder extends FormBuilder {\n    group(controlsConfig, options = null) {\n        return super.group(controlsConfig, options);\n    }\n    /**\n     * Like `FormBuilder#control`, except the resulting control is untyped.\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return super.control(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Like `FormBuilder#array`, except the resulting array is untyped.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        return super.array(controlsConfig, validatorOrOpts, asyncValidator);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: UntypedFormBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: UntypedFormBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: UntypedFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('16.2.12');\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * Providers associated with this module:\n * * `RadioControlRegistry`\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\nclass FormsModule {\n    /**\n     * @description\n     * Provides options for configuring the forms module.\n     *\n     * @param opts An object of configuration options\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [{\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n                }]\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: FormsModule, declarations: [NgModel, NgModelGroup, NgForm], exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormsModule, imports: [ɵInternalFormsSharedModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: FormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                }]\n        }] });\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * Providers associated with this module:\n * * `RadioControlRegistry`\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [\n                {\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl ?? 'always'\n                },\n                {\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n                }\n            ]\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ReactiveFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: ReactiveFormsModule, declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ReactiveFormsModule, imports: [ɵInternalFormsSharedModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ReactiveFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                }]\n        }] });\n\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a `FormGroup` that\n * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormRecord, FormsModule, MaxLengthValidator, MaxValidator, MinLengthValidator, MinValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NonNullableFormBuilder, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, VERSION, Validators, isFormArray, isFormControl, isFormGroup, isFormRecord, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption };\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AutocompleteComponent } from './autocomplete';\nexport * from './autocomplete-adapter';\nexport * from './autocomplete-component-delegate';\nexport * from './autocomplete-constants';\nexport * from './autocomplete-foundation';\nexport * from './autocomplete-utils';\nexport * from './autocomplete';\nexport function defineAutocompleteComponent() {\n    defineCustomElement(AutocompleteComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { BadgeComponent } from './badge';\nexport * from './badge-adapter';\nexport * from './badge-constants';\nexport * from './badge-foundation';\nexport * from './badge';\nexport * from './badge-component-delegate';\nexport function defineBadgeComponent() {\n    defineCustomElement(BadgeComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ButtonComponent } from './button';\nexport * from './button';\nexport * from './button-constants';\nexport * from './button-component-delegate';\nexport function defineButtonComponent() {\n    defineCustomElement(ButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { CheckboxComponent } from './checkbox';\nexport * from './checkbox-constants';\nexport * from './checkbox-adapter';\nexport * from './checkbox-foundation';\nexport * from './checkbox';\nexport * from './checkbox-component-delegate';\nexport function defineCheckboxComponent() {\n    defineCustomElement(CheckboxComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { DatePickerComponent } from './date-picker';\nexport * from './date-picker';\nexport * from './date-picker-adapter';\nexport * from './date-picker-component-delegate';\nexport * from './date-picker-constants';\nexport * from './date-picker-foundation';\nexport function defineDatePickerComponent() {\n    defineCustomElement(DatePickerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { DialogComponent } from './dialog';\nexport * from './dialog-adapter';\nexport * from './dialog-constants';\nexport * from './dialog-foundation';\nexport * from './dialog';\nexport function defineDialogComponent() {\n    defineCustomElement(DialogComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { DividerComponent } from './divider';\nexport * from './divider-constants';\nexport * from './divider';\nexport function defineDividerComponent() {\n    defineCustomElement(DividerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { DrawerComponent } from './drawer';\nexport * from './drawer-constants';\nexport * from './drawer';\nexport function defineDrawerComponent() {\n    defineCustomElement(DrawerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { IconComponent } from './icon';\nimport { IconRegistry } from './icon-registry';\nimport { ICON_REGISTRY_KEY } from './icon-constants';\nexport * from './icon-adapter';\nexport * from './icon-constants';\nexport * from './icon-foundation';\nexport * from './icon-registry';\nexport * from './icon-utils';\nexport * from './icon';\nexport * from './icon-component-delegate';\nexport function defineIconComponent() {\n    defineCustomElement(IconComponent);\n}\n// Store a reference to the icon registry on `window`.\nif (window && !window[ICON_REGISTRY_KEY]) {\n    window[ICON_REGISTRY_KEY] = IconRegistry;\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { IconButtonComponent } from './icon-button';\nexport * from './icon-button-constants';\nexport * from './icon-button';\nexport * from './icon-button-component-delegate';\nexport function defineIconButtonComponent() {\n    defineCustomElement(IconButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { LabelValueComponent } from './label-value';\nexport * from './label-value-adapter';\nexport * from './label-value-constants';\nexport * from './label-value-foundation';\nexport * from './label-value';\nexport * from './label-value-component-delegate';\nexport function defineLabelValueComponent() {\n    defineCustomElement(LabelValueComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ListItemComponent } from './list-item';\nexport * from './list-item-adapter';\nexport * from './list-item-constants';\nexport * from './list-item-foundation';\nexport * from './list-item';\nexport function defineListItemComponent() {\n    defineCustomElement(ListItemComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ListComponent } from './list';\nexport * from './list-adapter';\nexport * from './list-constants';\nexport * from './list-foundation';\nexport * from './list';\nexport function defineListComponent() {\n    defineCustomElement(ListComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { MenuComponent } from './menu';\nexport * from './menu-adapter';\nexport * from './menu-constants';\nexport * from './menu-foundation';\nexport * from './menu';\nexport function defineMenuComponent() {\n    defineCustomElement(MenuComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { OptionComponent } from './option';\nexport * from './option-adapter';\nexport * from './option-constants';\nexport * from './option-foundation';\nexport * from './option';\nexport function defineOptionComponent() {\n    defineCustomElement(OptionComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { PaginatorComponent } from './paginator';\nexport * from './paginator-adapter';\nexport * from './paginator-constants';\nexport * from './paginator-foundation';\nexport * from './paginator';\nexport function definePaginatorComponent() {\n    defineCustomElement(PaginatorComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { RadioComponent } from './radio';\nexport * from './radio-constants';\nexport * from './radio';\nexport function defineRadioComponent() {\n    defineCustomElement(RadioComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SelectComponent } from './select';\nexport * from './select-adapter';\nexport * from './select-constants';\nexport * from './select-foundation';\nexport * from './select';\nexport function defineSelectComponent() {\n    defineCustomElement(SelectComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SelectDropdownComponent } from './select-dropdown';\nexport * from './select-dropdown-adapter';\nexport * from './select-dropdown-constants';\nexport * from './select-dropdown-foundation';\nexport * from './select-dropdown';\nexport function defineSelectDropdownComponent() {\n    defineCustomElement(SelectDropdownComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SkeletonComponent } from './skeleton';\nexport * from './skeleton-constants';\nexport * from './skeleton';\nexport function defineSkeletonComponent() {\n    defineCustomElement(SkeletonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SliderComponent } from './slider';\nexport * from './slider-constants';\nexport * from './slider';\nexport * from './slider-component-delegate';\nexport function defineSliderComponent() {\n    defineCustomElement(SliderComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TabComponent } from './tab';\nexport * from './tab-adapter';\nexport * from './tab-constants';\nexport * from './tab-foundation';\nexport * from './tab';\nexport function defineTabComponent() {\n    defineCustomElement(TabComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TabBarComponent } from './tab-bar';\nexport * from './tab-bar-adapter';\nexport * from './tab-bar-constants';\nexport * from './tab-bar-foundation';\nexport * from './tab-bar';\nexport function defineTabBarComponent() {\n    defineCustomElement(TabBarComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TableComponent } from './table';\nexport * from './table-adapter';\nexport * from './table-constants';\nexport * from './table-foundation';\nexport * from './table-row';\nexport * from './table';\nexport * from './types';\nexport function defineTableComponent() {\n    defineCustomElement(TableComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TextFieldComponent } from './text-field';\nexport * from './text-field-adapter';\nexport * from './text-field-component-delegate';\nexport * from './text-field-constants';\nexport * from './text-field-foundation';\nexport * from './text-field';\nexport function defineTextFieldComponent() {\n    defineCustomElement(TextFieldComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ToastComponent } from './toast';\nexport * from './toast-adapter';\nexport * from './toast-constants';\nexport * from './toast-foundation';\nexport * from './toast';\nexport function defineToastComponent() {\n    defineCustomElement(ToastComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ToolbarComponent } from './toolbar';\nexport * from './toolbar-constants';\nexport * from './toolbar';\nexport function defineToolbarComponent() {\n    defineCustomElement(ToolbarComponent);\n}\n","import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, NgModule, forwardRef, Directive, HostListener, ElementRef, ViewContainerRef, Injectable, TemplateRef } from '@angular/core';\nimport { defineAccordionComponent, defineOpenIconComponent, defineExpansionPanelComponent, defineAppBarComponent, defineAppBarHelpButtonComponent, defineAppBarMenuButtonComponent, defineAppBarNotificationButtonComponent, defineAppBarProfileButtonComponent, defineAppBarSearchComponent, defineAutocompleteComponent, defineAvatarComponent, defineBackdropComponent, defineBadgeComponent, defineBannerComponent, BOTTOM_SHEET_CONSTANTS, defineBottomSheetComponent, defineBusyIndicatorComponent, defineButtonComponent, defineButtonAreaComponent, defineButtonToggleComponent, defineButtonToggleGroupComponent, defineCalendarComponent, defineCardComponent, defineCheckboxComponent, defineChipComponent, defineChipFieldComponent, defineChipSetComponent, defineCircularProgressComponent, defineColorPickerComponent, defineDatePickerComponent, defineDateRangePickerComponent, DIALOG_CONSTANTS, defineDialogComponent, defineDividerComponent, defineDrawerComponent, defineFloatingActionButtonComponent, defineFilePickerComponent, defineIconComponent, defineIconButtonComponent, defineInlineMessageComponent, defineKeyboardShortcutComponent, defineLabelValueComponent, defineLinearProgressComponent, defineListItemComponent, defineListComponent, LIST_ITEM_CONSTANTS, defineMenuComponent, defineMiniDrawerComponent, defineModalDrawerComponent, defineOptionComponent, defineOptionGroupComponent, definePageStateComponent, definePaginatorComponent, definePopupComponent, POPUP_CONSTANTS, PopupComponent as PopupComponent$1, defineProductIconComponent, defineProfileCardComponent, defineQuantityFieldComponent, defineRadioComponent, defineRippleComponent, defineScaffoldComponent, defineSelectComponent, defineSelectDropdownComponent, defineSkeletonComponent, defineSliderComponent, defineSplitViewComponent, defineSplitViewPanelComponent, defineStackComponent, defineStepComponent, defineStepperComponent, defineSwitchComponent, defineTabComponent, defineTabBarComponent, defineTableComponent, defineTextFieldComponent, defineTimePickerComponent, defineToastComponent, TOAST_CONSTANTS, defineToolbarComponent, defineTooltipComponent, defineViewComponent, defineViewSwitcherComponent } from '@tylertech/forge';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { deepQuerySelectorAll } from '@tylertech/forge-core';\nimport { AsyncSubject, Subject } from 'rxjs';\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/**\n * The custom element class behind the `<forge-accordion>` web component.\n *\n * This component is intended to wrap and orchestrate child expansion panels\n * so that only one expansion panel is open at a time.\n */\nclass AccordionComponent {\n    /** Gets/sets the selector to use for finding the child expansion panels. Defaults to searching the direct children for `<forge-expansion-panel>` elements. */\n    set panelSelector(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.panelSelector = value;\n        });\n    }\n    get panelSelector() {\n        return this.elementRef.nativeElement.panelSelector;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAccordionComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AccordionComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AccordionComponent, selector: \"forge-accordion\", inputs: { panelSelector: \"panelSelector\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AccordionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-accordion',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { panelSelector: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-open-icon>` custom element. */\nclass OpenIconComponent {\n    /** Controls the open state of the icon. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /**\n     * Gets/sets the orientation of the icon.\n     * Valid values are 'vertical' (default) or 'horizontal'.\n     */\n    set orientation(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.orientation = value;\n        });\n    }\n    get orientation() {\n        return this.elementRef.nativeElement.orientation;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineOpenIconComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OpenIconComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: OpenIconComponent, selector: \"forge-open-icon\", inputs: { open: \"open\", orientation: \"orientation\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OpenIconComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-open-icon',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeOpenIconModule {\n    constructor() {\n        defineOpenIconComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOpenIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOpenIconModule, declarations: [OpenIconComponent], imports: [CommonModule], exports: [OpenIconComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOpenIconModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOpenIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [OpenIconComponent],\n                    exports: [OpenIconComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** A web component that encapsulates the functionality of expanding/collapsing content when clicked. */\nclass ExpansionPanelComponent {\n    /** Controls the open state of the panel. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /**\n     * Sets the function to call when the panel wants to open.\n     * The function must return a promise which can be resolved to\n     * open the panel or rejected which cancels the panel open.\n     */\n    set openCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.openCallback = value;\n        });\n    }\n    get openCallback() {\n        return this.elementRef.nativeElement.openCallback;\n    }\n    /**\n     * Sets the function to call when the panel wants to close.\n     * The function must return a promise which can be resolved to\n     * close the panel or rejected which cancels the panel close.\n     */\n    set closeCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.closeCallback = value;\n        });\n    }\n    get closeCallback() {\n        return this.elementRef.nativeElement.closeCallback;\n    }\n    /**\n     * Sets the orientation of the panel expansion.\n     * Valid values are 'vertical' (default) or 'horizontal'.\n     */\n    set orientation(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.orientation = value;\n        });\n    }\n    get orientation() {\n        return this.elementRef.nativeElement.orientation;\n    }\n    /** Gets/sets if animations are used in the expand/collapse transition. */\n    set useAnimations(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.useAnimations = value != null && `${value}` !== 'false';\n        });\n    }\n    get useAnimations() {\n        return this.elementRef.nativeElement.useAnimations;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    /** Toggles the collapsed state. */\n    toggle(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.toggle(...args));\n    }\n    /** Forces the expansion panel to expand/collapse without transition animations. */\n    setOpenImmediate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.setOpenImmediate(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineExpansionPanelComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ExpansionPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ExpansionPanelComponent, selector: \"forge-expansion-panel\", inputs: { open: \"open\", openCallback: \"openCallback\", closeCallback: \"closeCallback\", orientation: \"orientation\", useAnimations: \"useAnimations\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ExpansionPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-expansion-panel',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], openCallback: [{\n                type: Input\n            }], closeCallback: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], useAnimations: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeExpansionPanelModule {\n    constructor() {\n        defineExpansionPanelComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeExpansionPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeExpansionPanelModule, declarations: [ExpansionPanelComponent], imports: [CommonModule, ForgeOpenIconModule], exports: [ExpansionPanelComponent, ForgeOpenIconModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeExpansionPanelModule, imports: [CommonModule, ForgeOpenIconModule, ForgeOpenIconModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeExpansionPanelModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeOpenIconModule],\n                    declarations: [ExpansionPanelComponent],\n                    exports: [ExpansionPanelComponent, ForgeOpenIconModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAccordionModule {\n    constructor() {\n        defineAccordionComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAccordionModule, declarations: [AccordionComponent], imports: [CommonModule, ForgeExpansionPanelModule], exports: [AccordionComponent, ForgeExpansionPanelModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAccordionModule, imports: [CommonModule, ForgeExpansionPanelModule, ForgeExpansionPanelModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeExpansionPanelModule],\n                    declarations: [AccordionComponent],\n                    exports: [AccordionComponent, ForgeExpansionPanelModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar>` custom element. */\nclass AppBarComponent {\n    /** Gets/sets the title text. */\n    set titleText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.titleText = value;\n        });\n    }\n    get titleText() {\n        return this.elementRef.nativeElement.titleText;\n    }\n    /** Gets/sets the fixed variant. */\n    set fixed(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fixed = value != null && `${value}` !== 'false';\n        });\n    }\n    get fixed() {\n        return this.elementRef.nativeElement.fixed;\n    }\n    /** Gets/sets the raised state. */\n    set raised(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.raised = value != null && `${value}` !== 'false';\n        });\n    }\n    get raised() {\n        return this.elementRef.nativeElement.raised;\n    }\n    /** Convenience property to allow for easily getting/setting the theme color from JavaScript. */\n    set theme(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.theme = value;\n        });\n    }\n    get theme() {\n        return this.elementRef.nativeElement.theme;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarComponent, selector: \"forge-app-bar\", inputs: { titleText: \"titleText\", fixed: \"fixed\", raised: \"raised\", theme: \"theme\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { titleText: [{\n                type: Input\n            }], fixed: [{\n                type: Input\n            }], raised: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarModule {\n    constructor() {\n        defineAppBarComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarModule, declarations: [AppBarComponent], imports: [CommonModule], exports: [AppBarComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarComponent],\n                    exports: [AppBarComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar-help-button>` custom element. */\nclass AppBarHelpButtonComponent {\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarHelpButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarHelpButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarHelpButtonComponent, selector: \"forge-app-bar-help-button\", inputs: { options: \"options\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarHelpButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar-help-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarHelpButtonModule {\n    constructor() {\n        defineAppBarHelpButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarHelpButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarHelpButtonModule, declarations: [AppBarHelpButtonComponent], imports: [CommonModule], exports: [AppBarHelpButtonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarHelpButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarHelpButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarHelpButtonComponent],\n                    exports: [AppBarHelpButtonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar-menu-button>` custom element. */\nclass AppBarMenuButtonComponent {\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarMenuButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarMenuButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarMenuButtonComponent, selector: \"forge-app-bar-menu-button\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarMenuButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar-menu-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarMenuButtonModule {\n    constructor() {\n        defineAppBarMenuButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarMenuButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarMenuButtonModule, declarations: [AppBarMenuButtonComponent], imports: [CommonModule], exports: [AppBarMenuButtonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarMenuButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarMenuButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarMenuButtonComponent],\n                    exports: [AppBarMenuButtonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar-notification-button>` custom element. */\nclass AppBarNotificationButtonComponent {\n    set count(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.count = +value;\n        });\n    }\n    get count() {\n        return this.elementRef.nativeElement.count;\n    }\n    set dot(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dot = value != null && `${value}` !== 'false';\n        });\n    }\n    get dot() {\n        return this.elementRef.nativeElement.dot;\n    }\n    set theme(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.theme = value;\n        });\n    }\n    get theme() {\n        return this.elementRef.nativeElement.theme;\n    }\n    set icon(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.icon = value;\n        });\n    }\n    get icon() {\n        return this.elementRef.nativeElement.icon;\n    }\n    set showBadge(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showBadge = value != null && `${value}` !== 'false';\n        });\n    }\n    get showBadge() {\n        return this.elementRef.nativeElement.showBadge;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarNotificationButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarNotificationButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarNotificationButtonComponent, selector: \"forge-app-bar-notification-button\", inputs: { count: \"count\", dot: \"dot\", theme: \"theme\", icon: \"icon\", showBadge: \"showBadge\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarNotificationButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar-notification-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { count: [{\n                type: Input\n            }], dot: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], showBadge: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarNotificationButtonModule {\n    constructor() {\n        defineAppBarNotificationButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarNotificationButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarNotificationButtonModule, declarations: [AppBarNotificationButtonComponent], imports: [CommonModule], exports: [AppBarNotificationButtonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarNotificationButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarNotificationButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarNotificationButtonComponent],\n                    exports: [AppBarNotificationButtonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar-profile-button>` custom element. */\nclass AppBarProfileButtonComponent {\n    set fullName(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fullName = value;\n        });\n    }\n    get fullName() {\n        return this.elementRef.nativeElement.fullName;\n    }\n    set email(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.email = value;\n        });\n    }\n    get email() {\n        return this.elementRef.nativeElement.email;\n    }\n    set avatarImageUrl(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarImageUrl = value;\n        });\n    }\n    get avatarImageUrl() {\n        return this.elementRef.nativeElement.avatarImageUrl;\n    }\n    set avatarLetterCount(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarLetterCount = +value;\n        });\n    }\n    get avatarLetterCount() {\n        return this.elementRef.nativeElement.avatarLetterCount;\n    }\n    set avatarText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarText = value;\n        });\n    }\n    get avatarText() {\n        return this.elementRef.nativeElement.avatarText;\n    }\n    set avatarIcon(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarIcon = value;\n        });\n    }\n    get avatarIcon() {\n        return this.elementRef.nativeElement.avatarIcon;\n    }\n    set signOutButton(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.signOutButton = value != null && `${value}` !== 'false';\n        });\n    }\n    get signOutButton() {\n        return this.elementRef.nativeElement.signOutButton;\n    }\n    set profileButton(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.profileButton = value != null && `${value}` !== 'false';\n        });\n    }\n    get profileButton() {\n        return this.elementRef.nativeElement.profileButton;\n    }\n    set signOutButtonText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.signOutButtonText = value;\n        });\n    }\n    get signOutButtonText() {\n        return this.elementRef.nativeElement.signOutButtonText;\n    }\n    set profileButtonText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.profileButtonText = value;\n        });\n    }\n    get profileButtonText() {\n        return this.elementRef.nativeElement.profileButtonText;\n    }\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Sets the profile card builder callback that will be used to add extra content to the profile card. */\n    set profileCardBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.profileCardBuilder = value;\n        });\n    }\n    get profileCardBuilder() {\n        return this.elementRef.nativeElement.profileCardBuilder;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarProfileButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarProfileButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarProfileButtonComponent, selector: \"forge-app-bar-profile-button\", inputs: { fullName: \"fullName\", email: \"email\", avatarImageUrl: \"avatarImageUrl\", avatarLetterCount: \"avatarLetterCount\", avatarText: \"avatarText\", avatarIcon: \"avatarIcon\", signOutButton: \"signOutButton\", profileButton: \"profileButton\", signOutButtonText: \"signOutButtonText\", profileButtonText: \"profileButtonText\", open: \"open\", profileCardBuilder: \"profileCardBuilder\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarProfileButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar-profile-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { fullName: [{\n                type: Input\n            }], email: [{\n                type: Input\n            }], avatarImageUrl: [{\n                type: Input\n            }], avatarLetterCount: [{\n                type: Input\n            }], avatarText: [{\n                type: Input\n            }], avatarIcon: [{\n                type: Input\n            }], signOutButton: [{\n                type: Input\n            }], profileButton: [{\n                type: Input\n            }], signOutButtonText: [{\n                type: Input\n            }], profileButtonText: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], profileCardBuilder: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarProfileButtonModule {\n    constructor() {\n        defineAppBarProfileButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarProfileButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarProfileButtonModule, declarations: [AppBarProfileButtonComponent], imports: [CommonModule], exports: [AppBarProfileButtonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarProfileButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarProfileButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarProfileButtonComponent],\n                    exports: [AppBarProfileButtonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-app-bar-search>` custom element. */\nclass AppBarSearchComponent {\n    /** Gets/sets the value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the disabled state of the search input. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets whether this is a combined search box with search options. */\n    set combined(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.combined = value != null && `${value}` !== 'false';\n        });\n    }\n    get combined() {\n        return this.elementRef.nativeElement.combined;\n    }\n    /** Gets/sets seelcted option for the combined search dropdown. */\n    set combinedOptions(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.combinedOptions = value;\n        });\n    }\n    get combinedOptions() {\n        return this.elementRef.nativeElement.combinedOptions;\n    }\n    /** Gets/sets selected option for the combined search dropdown. */\n    set selectedCombinedOption(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedCombinedOption = value;\n        });\n    }\n    get selectedCombinedOption() {\n        return this.elementRef.nativeElement.selectedCombinedOption;\n    }\n    /** Gets/sets whether the global icon is displayed at the end of the input. */\n    set global(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.global = value != null && `${value}` !== 'false';\n        });\n    }\n    get global() {\n        return this.elementRef.nativeElement.global;\n    }\n    /** Sets the input placeholder value. */\n    set placeholder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.placeholder = value;\n        });\n    }\n    get placeholder() {\n        return this.elementRef.nativeElement.placeholder;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAppBarSearchComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarSearchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AppBarSearchComponent, selector: \"forge-app-bar-search\", inputs: { value: \"value\", disabled: \"disabled\", combined: \"combined\", combinedOptions: \"combinedOptions\", selectedCombinedOption: \"selectedCombinedOption\", global: \"global\", placeholder: \"placeholder\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AppBarSearchComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-app-bar-search',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], combined: [{\n                type: Input\n            }], combinedOptions: [{\n                type: Input\n            }], selectedCombinedOption: [{\n                type: Input\n            }], global: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAppBarSearchModule {\n    constructor() {\n        defineAppBarSearchComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarSearchModule, declarations: [AppBarSearchComponent], imports: [CommonModule], exports: [AppBarSearchComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarSearchModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAppBarSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AppBarSearchComponent],\n                    exports: [AppBarSearchComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-autocomplete>` element. */\nclass AutocompleteComponent {\n    /** Gets/sets the interaction mode. */\n    set mode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.mode = value;\n        });\n    }\n    get mode() {\n        return this.elementRef.nativeElement.mode;\n    }\n    /** Gets/sets the multi-select state. */\n    set multiple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiple() {\n        return this.elementRef.nativeElement.multiple;\n    }\n    /** Gets/sets the value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the debounce delay (milliseconds) for keyboard events. */\n    set debounce(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.debounce = +value;\n        });\n    }\n    get debounce() {\n        return this.elementRef.nativeElement.debounce;\n    }\n    /** Gets/sets filter on focus settings which controls whether the dropdown displays automatically when focused. */\n    set filterOnFocus(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.filterOnFocus = value != null && `${value}` !== 'false';\n        });\n    }\n    get filterOnFocus() {\n        return this.elementRef.nativeElement.filterOnFocus;\n    }\n    /** Gets/sets whether the first option in the dropdown will be focused automatically when opened or not. */\n    set filterFocusFirst(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.filterFocusFirst = value != null && `${value}` !== 'false';\n        });\n    }\n    get filterFocusFirst() {\n        return this.elementRef.nativeElement.filterFocusFirst;\n    }\n    /** Controls whether unmatched text entered by the user will stay visible an option in the dropdown is not found. */\n    set allowUnmatched(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowUnmatched = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowUnmatched() {\n        return this.elementRef.nativeElement.allowUnmatched;\n    }\n    /** Gets/sets the selector that will be used to find an element to attach the popup to. Defaults to the input element. */\n    set popupTarget(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupTarget = value;\n        });\n    }\n    get popupTarget() {\n        return this.elementRef.nativeElement.popupTarget;\n    }\n    /**\n     * Gets/sets the filter text.\n     *\n     * Setting the filter text only applies when allowUnmatched is enabled.\n     */\n    set filterText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.filterText = value;\n        });\n    }\n    get filterText() {\n        return this.elementRef.nativeElement.filterText;\n    }\n    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */\n    set optionBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionBuilder = value;\n        });\n    }\n    get optionBuilder() {\n        return this.elementRef.nativeElement.optionBuilder;\n    }\n    /** Sets the filter callback that will be executed when fetching options for the autocomplete dropdown. */\n    set filter(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.filter = value;\n        });\n    }\n    get filter() {\n        return this.elementRef.nativeElement.filter;\n    }\n    /** Sets the selected text builder callback that will be executed when getting the selected text. */\n    set selectedTextBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedTextBuilder = value;\n        });\n    }\n    get selectedTextBuilder() {\n        return this.elementRef.nativeElement.selectedTextBuilder;\n    }\n    /** Controls the open state of the dropdown. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Gets/sets the property key to match the value to an option. */\n    set matchKey(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.matchKey = value;\n        });\n    }\n    get matchKey() {\n        return this.elementRef.nativeElement.matchKey;\n    }\n    /** Returns whether the component has been initialized or not yet. */\n    set isInitialized(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.isInitialized = value != null && `${value}` !== 'false';\n        });\n    }\n    get isInitialized() {\n        return this.elementRef.nativeElement.isInitialized;\n    }\n    /** Gets the currently active popup element when the dropdown is open. */\n    set popupElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupElement = value;\n        });\n    }\n    get popupElement() {\n        return this.elementRef.nativeElement.popupElement;\n    }\n    /** Sets the callback to be executed when the user selects an option, before the UI is updated to allow for validation. */\n    set beforeValueChange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.beforeValueChange = value;\n        });\n    }\n    get beforeValueChange() {\n        return this.elementRef.nativeElement.beforeValueChange;\n    }\n    /** Gets/sets the list of classes to apply to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupHeaderBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupHeaderBuilder = value;\n        });\n    }\n    get popupHeaderBuilder() {\n        return this.elementRef.nativeElement.popupHeaderBuilder;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupFooterBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupFooterBuilder = value;\n        });\n    }\n    get popupFooterBuilder() {\n        return this.elementRef.nativeElement.popupFooterBuilder;\n    }\n    /** Gets/sets whether the popup width is synchronized with the popup target width. */\n    set syncPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.syncPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get syncPopupWidth() {\n        return this.elementRef.nativeElement.syncPopupWidth;\n    }\n    /** Gets/sets the maximum number of options to display in the dropdown. */\n    set optionLimit(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionLimit = +value;\n        });\n    }\n    get optionLimit() {\n        return this.elementRef.nativeElement.optionLimit;\n    }\n    /** Controls the observation of scroll events on the dropdown. */\n    set observeScroll(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScroll = value != null && `${value}` !== 'false';\n        });\n    }\n    get observeScroll() {\n        return this.elementRef.nativeElement.observeScroll;\n    }\n    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */\n    set observeScrollThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScrollThreshold = +value;\n        });\n    }\n    get observeScrollThreshold() {\n        return this.elementRef.nativeElement.observeScrollThreshold;\n    }\n    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */\n    set constrainPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.constrainPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get constrainPopupWidth() {\n        return this.elementRef.nativeElement.constrainPopupWidth;\n    }\n    /**\n     * Gets/sets whether the options will wrap their text or not.\n     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.\n     */\n    set wrapOptionText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrapOptionText = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrapOptionText() {\n        return this.elementRef.nativeElement.wrapOptionText;\n    }\n    /** Adds options to the dropdown while it is open. Has no effect if the dropdown is closed. */\n    appendOptions(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.appendOptions(...args));\n    }\n    /** Opens the dropdown. */\n    openDropdown(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.openDropdown(...args));\n    }\n    /** Closes the dropdown. */\n    closeDropdown(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.closeDropdown(...args));\n    }\n    /** Forces the filter callback to be executed to update the current selection state with new options. */\n    forceFilter(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.forceFilter(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAutocompleteComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AutocompleteComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AutocompleteComponent, selector: \"forge-autocomplete\", inputs: { mode: \"mode\", multiple: \"multiple\", value: \"value\", debounce: \"debounce\", filterOnFocus: \"filterOnFocus\", filterFocusFirst: \"filterFocusFirst\", allowUnmatched: \"allowUnmatched\", popupTarget: \"popupTarget\", filterText: \"filterText\", optionBuilder: \"optionBuilder\", filter: \"filter\", selectedTextBuilder: \"selectedTextBuilder\", open: \"open\", matchKey: \"matchKey\", isInitialized: \"isInitialized\", popupElement: \"popupElement\", beforeValueChange: \"beforeValueChange\", popupClasses: \"popupClasses\", popupHeaderBuilder: \"popupHeaderBuilder\", popupFooterBuilder: \"popupFooterBuilder\", syncPopupWidth: \"syncPopupWidth\", optionLimit: \"optionLimit\", observeScroll: \"observeScroll\", observeScrollThreshold: \"observeScrollThreshold\", constrainPopupWidth: \"constrainPopupWidth\", wrapOptionText: \"wrapOptionText\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AutocompleteComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-autocomplete',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { mode: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], debounce: [{\n                type: Input\n            }], filterOnFocus: [{\n                type: Input\n            }], filterFocusFirst: [{\n                type: Input\n            }], allowUnmatched: [{\n                type: Input\n            }], popupTarget: [{\n                type: Input\n            }], filterText: [{\n                type: Input\n            }], optionBuilder: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], selectedTextBuilder: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], matchKey: [{\n                type: Input\n            }], isInitialized: [{\n                type: Input\n            }], popupElement: [{\n                type: Input\n            }], beforeValueChange: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], popupHeaderBuilder: [{\n                type: Input\n            }], popupFooterBuilder: [{\n                type: Input\n            }], syncPopupWidth: [{\n                type: Input\n            }], optionLimit: [{\n                type: Input\n            }], observeScroll: [{\n                type: Input\n            }], observeScrollThreshold: [{\n                type: Input\n            }], constrainPopupWidth: [{\n                type: Input\n            }], wrapOptionText: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAutocompleteProxyModule {\n    constructor() {\n        defineAutocompleteComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteProxyModule, declarations: [AutocompleteComponent], imports: [CommonModule], exports: [AutocompleteComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AutocompleteComponent],\n                    exports: [AutocompleteComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => AutocompleteValueAccessor),\n    multi: true\n};\nclass AutocompleteValueAccessor {\n    autocompleteChange(event) {\n        this.change(event.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        const inputEl = this._elementRef.nativeElement.querySelector('input') ?? deepQuerySelectorAll(this._elementRef.nativeElement, 'input')[0];\n        if (inputEl) {\n            this._renderer.setProperty(inputEl, 'disabled', isDisabled);\n        }\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AutocompleteValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AutocompleteValueAccessor, selector: \"forge-autocomplete[formControlName],forge-autocomplete[formControl],forge-autocomplete[ngModel]\", host: { listeners: { \"forge-autocomplete-change\": \"autocompleteChange($event)\", \"focusout\": \"blur()\" } }, providers: [AUTOCOMPLETE_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AutocompleteValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-autocomplete[formControlName],forge-autocomplete[formControl],forge-autocomplete[ngModel]',\n                    providers: [AUTOCOMPLETE_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { autocompleteChange: [{\n                type: HostListener,\n                args: ['forge-autocomplete-change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\nclass ForgeAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteModule, declarations: [AutocompleteValueAccessor], exports: [AutocompleteValueAccessor,\n            ForgeAutocompleteProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteModule, imports: [ForgeAutocompleteProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        AutocompleteValueAccessor\n                    ],\n                    exports: [\n                        AutocompleteValueAccessor,\n                        ForgeAutocompleteProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-avatar>` element. */\nclass AvatarComponent {\n    /** Gets/sets the text to display. */\n    set text(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.text = value;\n        });\n    }\n    get text() {\n        return this.elementRef.nativeElement.text;\n    }\n    /** Controls the number of letters to display from the text. By default the text is split on spaces and the first character of each word is used. */\n    set letterCount(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.letterCount = +value;\n        });\n    }\n    get letterCount() {\n        return this.elementRef.nativeElement.letterCount;\n    }\n    /** Sets the background image URL to use. */\n    set imageUrl(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.imageUrl = value;\n        });\n    }\n    get imageUrl() {\n        return this.elementRef.nativeElement.imageUrl;\n    }\n    /** Controls whether the background color is set automatically based on the text value. Does not have any effect when an image URL is specified. */\n    set autoColor(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoColor = value != null && `${value}` !== 'false';\n        });\n    }\n    get autoColor() {\n        return this.elementRef.nativeElement.autoColor;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineAvatarComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AvatarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: AvatarComponent, selector: \"forge-avatar\", inputs: { text: \"text\", letterCount: \"letterCount\", imageUrl: \"imageUrl\", autoColor: \"autoColor\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: AvatarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-avatar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { text: [{\n                type: Input\n            }], letterCount: [{\n                type: Input\n            }], imageUrl: [{\n                type: Input\n            }], autoColor: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeAvatarModule {\n    constructor() {\n        defineAvatarComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAvatarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAvatarModule, declarations: [AvatarComponent], imports: [CommonModule], exports: [AvatarComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAvatarModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeAvatarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AvatarComponent],\n                    exports: [AvatarComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** A web component that renders a backdrop covering its parent container with a semi-opaque element. */\nclass BackdropComponent {\n    /**\n     * The time in milliseconds to delay the fade in animation of the opacity.\n     * Note: The element will start with 0% opacity when the component is rendered.\n     */\n    set delay(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.delay = +value;\n        });\n    }\n    get delay() {\n        return this.elementRef.nativeElement.delay;\n    }\n    /** Controls whether the theme defaults to light vs dark compatibility. */\n    set appearance(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.appearance = value;\n        });\n    }\n    get appearance() {\n        return this.elementRef.nativeElement.appearance;\n    }\n    /** The max opacity to fade the element to. This defines how opaque the backdrop is when visible. */\n    set maxOpacity(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.maxOpacity = +value;\n        });\n    }\n    get maxOpacity() {\n        return this.elementRef.nativeElement.maxOpacity;\n    }\n    /** Starts the fade-out animation to animate the backdrop to 0% opacity. */\n    fadeOut(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.fadeOut(...args));\n    }\n    /** Starts the fade-in animation to animate the backdrop to max opacity. */\n    fadeIn(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.fadeIn(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineBackdropComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BackdropComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: BackdropComponent, selector: \"forge-backdrop\", inputs: { delay: \"delay\", appearance: \"appearance\", maxOpacity: \"maxOpacity\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BackdropComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-backdrop',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { delay: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], maxOpacity: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeBackdropModule {\n    constructor() {\n        defineBackdropComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBackdropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBackdropModule, declarations: [BackdropComponent], imports: [CommonModule], exports: [BackdropComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBackdropModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBackdropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BackdropComponent],\n                    exports: [BackdropComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-badge>` custom element. */\nclass BadgeComponent {\n    /** Controls whether the component renders a simple dot/circle, or allows for content. */\n    set dot(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dot = value != null && `${value}` !== 'false';\n        });\n    }\n    get dot() {\n        return this.elementRef.nativeElement.dot;\n    }\n    /** Controls the visibility state. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineBadgeComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BadgeComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: BadgeComponent, selector: \"forge-badge\", inputs: { dot: \"dot\", open: \"open\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BadgeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-badge',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dot: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeBadgeModule {\n    constructor() {\n        defineBadgeComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBadgeModule, declarations: [BadgeComponent], imports: [CommonModule], exports: [BadgeComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBadgeModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BadgeComponent],\n                    exports: [BadgeComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-banner>` element. */\nclass BannerComponent {\n    /** Controls whether the component is dismissed (hidden) or not. */\n    set dismissed(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dismissed = value != null && `${value}` !== 'false';\n        });\n    }\n    get dismissed() {\n        return this.elementRef.nativeElement.dismissed;\n    }\n    /** Controls the visibility of the dismiss button. */\n    set canDismiss(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.canDismiss = value != null && `${value}` !== 'false';\n        });\n    }\n    get canDismiss() {\n        return this.elementRef.nativeElement.canDismiss;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineBannerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BannerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: BannerComponent, selector: \"forge-banner\", inputs: { dismissed: \"dismissed\", canDismiss: \"canDismiss\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BannerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-banner',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dismissed: [{\n                type: Input\n            }], canDismiss: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeBannerModule {\n    constructor() {\n        defineBannerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBannerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBannerModule, declarations: [BannerComponent], imports: [CommonModule], exports: [BannerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBannerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBannerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BannerComponent],\n                    exports: [BannerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass BottomSheetConfig {\n}\n\nclass BaseInjector {\n    constructor(_parentInjector, _additionalTokens) {\n        this._parentInjector = _parentInjector;\n        this._additionalTokens = _additionalTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._additionalTokens.get(token);\n        if (value) {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\nclass BottomSheetInjector extends BaseInjector {\n}\n\nclass BottomSheetRef {\n    constructor(instance) {\n        this._afterClosed = new AsyncSubject();\n        this.afterClosed = this._afterClosed.asObservable();\n        this._beforeClose = new Subject();\n        this.beforeClose = this._beforeClose.asObservable();\n        this._elementRef = new ElementRef(instance);\n        instance.addEventListener(BOTTOM_SHEET_CONSTANTS.events.BEFORE_CLOSE, evt => this._beforeClose.next(evt));\n    }\n    close(result) {\n        this._afterClosed.next(result);\n        this._afterClosed.complete();\n        this._beforeClose.complete();\n    }\n    get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-bottom-sheet>` custom element. */\nclass BottomSheetComponent {\n    /** Controls whether clicking the backdrop closes the bottom-sheet or not. Default is true. */\n    set backdropClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.backdropClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get backdropClose() {\n        return this.elementRef.nativeElement.backdropClose;\n    }\n    /** Controls whether pressing the escape key closes the bottom-sheet or not. Default is true. */\n    set escapeClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.escapeClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get escapeClose() {\n        return this.elementRef.nativeElement.escapeClose;\n    }\n    /** Controls whether the bottom-sheet is open or not. Default is false. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Controls whether the bottom-sheet is full screen or not. Default is false. */\n    set fullscreen(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fullscreen = value != null && `${value}` !== 'false';\n        });\n    }\n    get fullscreen() {\n        return this.elementRef.nativeElement.fullscreen;\n    }\n    /** Shows a backdrop to prevent interacting with other content until the bottom sheet is dismissed.  Default is false. */\n    set showBackdrop(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showBackdrop = value != null && `${value}` !== 'false';\n        });\n    }\n    get showBackdrop() {\n        return this.elementRef.nativeElement.showBackdrop;\n    }\n    /** The function to call when the bottom-sheet wants to open. */\n    set openCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.openCallback = value;\n        });\n    }\n    get openCallback() {\n        return this.elementRef.nativeElement.openCallback;\n    }\n    /** the function to call when the bottom-sheet wants to close. */\n    set closeCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.closeCallback = value;\n        });\n    }\n    get closeCallback() {\n        return this.elementRef.nativeElement.closeCallback;\n    }\n    /** the function to call when the bottom-sheet wants to close. */\n    set beforeCloseCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.beforeCloseCallback = value;\n        });\n    }\n    get beforeCloseCallback() {\n        return this.elementRef.nativeElement.beforeCloseCallback;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineBottomSheetComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BottomSheetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: BottomSheetComponent, selector: \"forge-bottom-sheet\", inputs: { backdropClose: \"backdropClose\", escapeClose: \"escapeClose\", open: \"open\", fullscreen: \"fullscreen\", showBackdrop: \"showBackdrop\", openCallback: \"openCallback\", closeCallback: \"closeCallback\", beforeCloseCallback: \"beforeCloseCallback\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BottomSheetComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-bottom-sheet',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { backdropClose: [{\n                type: Input\n            }], escapeClose: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], fullscreen: [{\n                type: Input\n            }], showBackdrop: [{\n                type: Input\n            }], openCallback: [{\n                type: Input\n            }], closeCallback: [{\n                type: Input\n            }], beforeCloseCallback: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeBottomSheetModule {\n    constructor() {\n        defineBottomSheetComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBottomSheetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBottomSheetModule, declarations: [BottomSheetComponent], imports: [CommonModule], exports: [BottomSheetComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBottomSheetModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBottomSheetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BottomSheetComponent],\n                    exports: [BottomSheetComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass DynamicComponentService {\n    constructor(_cfr, _injector, _appRef) {\n        this._cfr = _cfr;\n        this._injector = _injector;\n        this._appRef = _appRef;\n    }\n    /**\n     * Creates an Angular component dynamically, and optionally attaches the component instance to a given element.\n     * @param component The component to create.\n     * @param target Optional target element to attach the component element to.\n     * @param moduleRef Optional module to create the component factory from.\n     */\n    create(component, target, injector, moduleRef) {\n        const cfr = moduleRef ? moduleRef.componentFactoryResolver : this._cfr;\n        const componentFactory = this._isComponentFactory(component) ? component : cfr.resolveComponentFactory(component);\n        injector = injector || this._injector;\n        if (target instanceof ViewContainerRef) {\n            const ref = target.createComponent(componentFactory, undefined, injector);\n            return {\n                instance: ref.instance,\n                componentRef: ref,\n                destroy: () => {\n                    target.detach();\n                    componentRef.destroy();\n                }\n            };\n        }\n        const componentRef = componentFactory.create(injector);\n        this._appRef.attachView(componentRef.hostView);\n        const componentElement = componentRef.hostView.rootNodes[0];\n        if (target) {\n            target.appendChild(componentElement);\n        }\n        return {\n            instance: componentRef.instance,\n            componentRef,\n            componentElement,\n            destroy: () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }\n        };\n    }\n    _isComponentFactory(component) {\n        return component.create !== undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DynamicComponentService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DynamicComponentService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DynamicComponentService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });\n\n/**\n * Provides facilities for working with a Forge bottom sheet and placing dynamic components within it.\n */\nclass BottomSheetService {\n    constructor(_dcs, _injector) {\n        this._dcs = _dcs;\n        this._injector = _injector;\n        defineBottomSheetComponent();\n    }\n    /**\n     * Displays a components within a Forge bottom sheet instance.\n     * @param component The component reference.\n     * @param options The component reference.\n     * @param config The configuration to provide to the dynamic component as an injectable token.\n     * @param moduleRef An NgModuleRef to create the component factory from. (should the injector also inherit from this?)\n     * @returns A reference for interacting with the created bottom sheet.\n     */\n    show(component, options, config, moduleRef) {\n        // Contains tokens that will be provided to components through our custom bottom sheet injector\n        const map = new WeakMap();\n        // If we got a config, we should provide it as an injection token\n        if (config) {\n            map.set(BottomSheetConfig, config);\n        }\n        // Create the Forge bottom sheet element\n        const bottomSheetElement = document.createElement('forge-bottom-sheet');\n        // Configure the bottom sheet with the provided options\n        if (options) {\n            const { bottomSheetClass, attributes, ...restOptions } = options;\n            if (bottomSheetClass) {\n                bottomSheetElement.classList.add(bottomSheetClass);\n            }\n            if (attributes) {\n                attributes.forEach((value, key) => bottomSheetElement.setAttribute(key, value));\n            }\n            Object.assign(bottomSheetElement, restOptions);\n        }\n        // Create the ref that will allow the consumer to control the bottom sheet\n        const bottomSheetRef = new BottomSheetRef(bottomSheetElement);\n        // Always provide the bottom sheet ref as an injection token\n        map.set(BottomSheetRef, bottomSheetRef);\n        // Create and attach the dynamic component to the bottom sheet element\n        const dcRef = this._dcs.create(component, bottomSheetElement, new BottomSheetInjector(this._injector, map), moduleRef);\n        bottomSheetRef.componentInstance = dcRef.componentRef.instance;\n        // Always destroy when the bottom sheet is closed\n        bottomSheetElement.addEventListener(BOTTOM_SHEET_CONSTANTS.events.CLOSE, () => dcRef.destroy());\n        // Listen for close via escape/backdrop click if applicable to ensure observables complete.\n        const closeRef = () => bottomSheetRef.close();\n        if (bottomSheetElement.backdropClose) {\n            bottomSheetElement.addEventListener(BOTTOM_SHEET_CONSTANTS.events.CLOSE, closeRef);\n        }\n        const sub = bottomSheetRef.afterClosed.subscribe(() => {\n            bottomSheetElement.removeEventListener(BOTTOM_SHEET_CONSTANTS.events.CLOSE, closeRef);\n            bottomSheetElement.open = false;\n            sub.unsubscribe();\n        });\n        // Appends the bottom sheet element to the DOM\n        bottomSheetElement.open = true;\n        return bottomSheetRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BottomSheetService, deps: [{ token: DynamicComponentService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BottomSheetService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BottomSheetService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: DynamicComponentService }, { type: i0.Injector }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** A web component that renders a busy indicator covering its parent container. */\nclass BusyIndicatorComponent {\n    /** The title to be displayed. */\n    set titleText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.titleText = value;\n        });\n    }\n    get titleText() {\n        return this.elementRef.nativeElement.titleText;\n    }\n    /** The message to be displayed. */\n    set message(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.message = value;\n        });\n    }\n    get message() {\n        return this.elementRef.nativeElement.message;\n    }\n    /** Controls whether the cancel button is visible or not. */\n    set cancel(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.cancel = value != null && `${value}` !== 'false';\n        });\n    }\n    get cancel() {\n        return this.elementRef.nativeElement.cancel;\n    }\n    /** Controls whether the progress spinner is visible or not. */\n    set spinner(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.spinner = value != null && `${value}` !== 'false';\n        });\n    }\n    get spinner() {\n        return this.elementRef.nativeElement.spinner;\n    }\n    /** Controls whether the progres bar is visible or not. */\n    set progressBar(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.progressBar = value != null && `${value}` !== 'false';\n        });\n    }\n    get progressBar() {\n        return this.elementRef.nativeElement.progressBar;\n    }\n    /** Sets the progress bar determinate state. */\n    set progressBarDeterminate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.progressBarDeterminate = value != null && `${value}` !== 'false';\n        });\n    }\n    get progressBarDeterminate() {\n        return this.elementRef.nativeElement.progressBarDeterminate;\n    }\n    /** The progress amount of the progress bar. */\n    set progress(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.progress = +value;\n        });\n    }\n    get progress() {\n        return this.elementRef.nativeElement.progress;\n    }\n    /** The buffer amount of the progress bar. */\n    set buffer(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.buffer = +value;\n        });\n    }\n    get buffer() {\n        return this.elementRef.nativeElement.buffer;\n    }\n    /** Sets the width of the busy indicator element. */\n    set width(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.width = value;\n        });\n    }\n    get width() {\n        return this.elementRef.nativeElement.width;\n    }\n    /** The layout direction for alternative designs. */\n    set direction(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.direction = value;\n        });\n    }\n    get direction() {\n        return this.elementRef.nativeElement.direction;\n    }\n    /** Controls whether the component will manage capturing and relasing focus when opened/closed. */\n    set manageFocus(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.manageFocus = value != null && `${value}` !== 'false';\n        });\n    }\n    get manageFocus() {\n        return this.elementRef.nativeElement.manageFocus;\n    }\n    /**\n     * Controls the `position` of the backdrop and surface element between `fixed` and `absolute` positioning. Default is `true`.\n     *\n     * Note: use this property when you want to render the busy indicator within a specific element where it doesn't fill the\n     *       full viewport heigth/width to only cover the parent element bounds.\n     */\n    set fixed(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fixed = value != null && `${value}` !== 'false';\n        });\n    }\n    get fixed() {\n        return this.elementRef.nativeElement.fixed;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    /** Removes the element from the DOM. */\n    hide(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.hide(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineBusyIndicatorComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BusyIndicatorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: BusyIndicatorComponent, selector: \"forge-busy-indicator\", inputs: { titleText: \"titleText\", message: \"message\", cancel: \"cancel\", spinner: \"spinner\", progressBar: \"progressBar\", progressBarDeterminate: \"progressBarDeterminate\", progress: \"progress\", buffer: \"buffer\", width: \"width\", direction: \"direction\", manageFocus: \"manageFocus\", fixed: \"fixed\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BusyIndicatorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-busy-indicator',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { titleText: [{\n                type: Input\n            }], message: [{\n                type: Input\n            }], cancel: [{\n                type: Input\n            }], spinner: [{\n                type: Input\n            }], progressBar: [{\n                type: Input\n            }], progressBarDeterminate: [{\n                type: Input\n            }], progress: [{\n                type: Input\n            }], buffer: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], manageFocus: [{\n                type: Input\n            }], fixed: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeBusyIndicatorModule {\n    constructor() {\n        defineBusyIndicatorComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBusyIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBusyIndicatorModule, declarations: [BusyIndicatorComponent], imports: [CommonModule], exports: [BusyIndicatorComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBusyIndicatorModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeBusyIndicatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [BusyIndicatorComponent],\n                    exports: [BusyIndicatorComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Provides facilities for showing/hiding a busy indicator.\n */\nclass BusyIndicatorService {\n    constructor() {\n        defineBusyIndicatorComponent();\n    }\n    /**\n     * Shows a busy indicator in a parent element (or the body if not provided).\n     * @param config The busy indicator component configuration.\n     * @param [parent] The parent element to attach this busy indicator instance to.\n     */\n    show(config, parent = document.body) {\n        const element = document.createElement('forge-busy-indicator');\n        Object.assign(element, config);\n        parent.appendChild(element);\n        return element;\n    }\n    /**\n     * Removes the busy indicator from the DOM.\n     */\n    hide(selector) {\n        const element = document.querySelector(selector ?? 'forge-busy-indicator');\n        if (element) {\n            element.remove();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BusyIndicatorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BusyIndicatorService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: BusyIndicatorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-button>` element. */\nclass ButtonComponent {\n    /**\n     * Sets the type of button decoration.\n     * Possible values are: raised, elevated, outlined, and dense.\n     * Can be combined as: outlined-dense.\n     */\n    set type(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.type = value;\n        });\n    }\n    get type() {\n        return this.elementRef.nativeElement.type;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ButtonComponent, selector: \"forge-button\", inputs: { type: \"type\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { type: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeButtonModule {\n    constructor() {\n        defineButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonModule, declarations: [ButtonComponent], imports: [CommonModule], exports: [ButtonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ButtonComponent],\n                    exports: [ButtonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-button-area>` element. */\nclass ButtonAreaComponent {\n    /** Controls whether the component and associated button element are disabled. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineButtonAreaComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonAreaComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ButtonAreaComponent, selector: \"forge-button-area\", inputs: { disabled: \"disabled\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonAreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-button-area',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { disabled: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeButtonAreaModule {\n    constructor() {\n        defineButtonAreaComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonAreaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonAreaModule, declarations: [ButtonAreaComponent], imports: [CommonModule], exports: [ButtonAreaComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonAreaModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonAreaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ButtonAreaComponent],\n                    exports: [ButtonAreaComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ButtonToggleGroupValueAccessor),\n    multi: true\n};\nclass ButtonToggleGroupValueAccessor {\n    buttonToggleGroupChange(event) {\n        this.change(event.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = value => fn(value === '' ? null : value);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleGroupValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ButtonToggleGroupValueAccessor, selector: \"forge-button-toggle-group[formControlName],forge-button-toggle-group[formControl],forge-button-toggle-group[ngModel]\", host: { listeners: { \"forge-button-toggle-group-change\": \"buttonToggleGroupChange($event)\", \"focusout\": \"blur()\" } }, providers: [BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleGroupValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-button-toggle-group[formControlName],forge-button-toggle-group[formControl],forge-button-toggle-group[ngModel]',\n                    providers: [BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { buttonToggleGroupChange: [{\n                type: HostListener,\n                args: ['forge-button-toggle-group-change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-button-toggle>` custom element. */\nclass ButtonToggleComponent {\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    set selected(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';\n        });\n    }\n    get selected() {\n        return this.elementRef.nativeElement.selected;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    focus(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineButtonToggleComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ButtonToggleComponent, selector: \"forge-button-toggle\", inputs: { value: \"value\", selected: \"selected\", disabled: \"disabled\", dense: \"dense\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-button-toggle',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeButtonToggleProxyModule {\n    constructor() {\n        defineButtonToggleComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleProxyModule, declarations: [ButtonToggleComponent], imports: [CommonModule], exports: [ButtonToggleComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ButtonToggleComponent],\n                    exports: [ButtonToggleComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ForgeButtonToggleModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleModule, declarations: [ButtonToggleGroupValueAccessor], exports: [ButtonToggleGroupValueAccessor,\n            ForgeButtonToggleProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleModule, imports: [ForgeButtonToggleProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ButtonToggleGroupValueAccessor\n                    ],\n                    exports: [\n                        ButtonToggleGroupValueAccessor,\n                        ForgeButtonToggleProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-button-toggle-group>` custom element. */\nclass ButtonToggleGroupComponent {\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    set multiple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiple() {\n        return this.elementRef.nativeElement.multiple;\n    }\n    set mandatory(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.mandatory = value != null && `${value}` !== 'false';\n        });\n    }\n    get mandatory() {\n        return this.elementRef.nativeElement.mandatory;\n    }\n    set vertical(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.vertical = value != null && `${value}` !== 'false';\n        });\n    }\n    get vertical() {\n        return this.elementRef.nativeElement.vertical;\n    }\n    set stretch(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.stretch = value != null && `${value}` !== 'false';\n        });\n    }\n    get stretch() {\n        return this.elementRef.nativeElement.stretch;\n    }\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineButtonToggleGroupComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ButtonToggleGroupComponent, selector: \"forge-button-toggle-group\", inputs: { value: \"value\", multiple: \"multiple\", mandatory: \"mandatory\", vertical: \"vertical\", stretch: \"stretch\", dense: \"dense\", disabled: \"disabled\", options: \"options\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ButtonToggleGroupComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-button-toggle-group',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], mandatory: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], stretch: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeButtonToggleGroupModule {\n    constructor() {\n        defineButtonToggleGroupComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleGroupModule, declarations: [ButtonToggleGroupComponent], imports: [CommonModule, ForgeButtonToggleProxyModule], exports: [ButtonToggleGroupComponent, ForgeButtonToggleProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleGroupModule, imports: [CommonModule, ForgeButtonToggleProxyModule, ForgeButtonToggleProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeButtonToggleGroupModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeButtonToggleProxyModule],\n                    declarations: [ButtonToggleGroupComponent],\n                    exports: [ButtonToggleGroupComponent, ForgeButtonToggleProxyModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-calendar>` custom element. */\nclass CalendarComponent {\n    set activeDate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.activeDate = value;\n        });\n    }\n    get activeDate() {\n        return this.elementRef.nativeElement.activeDate;\n    }\n    set allowSingleDateRange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowSingleDateRange = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowSingleDateRange() {\n        return this.elementRef.nativeElement.allowSingleDateRange;\n    }\n    set clearButton(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.clearButton = value != null && `${value}` !== 'false';\n        });\n    }\n    get clearButton() {\n        return this.elementRef.nativeElement.clearButton;\n    }\n    set clearCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.clearCallback = value;\n        });\n    }\n    get clearCallback() {\n        return this.elementRef.nativeElement.clearCallback;\n    }\n    set constrainToEnabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.constrainToEnabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get constrainToEnabled() {\n        return this.elementRef.nativeElement.constrainToEnabled;\n    }\n    set dateBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dateBuilder = value;\n        });\n    }\n    get dateBuilder() {\n        return this.elementRef.nativeElement.dateBuilder;\n    }\n    set dateSelectCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dateSelectCallback = value;\n        });\n    }\n    get dateSelectCallback() {\n        return this.elementRef.nativeElement.dateSelectCallback;\n    }\n    set dayBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dayBuilder = value;\n        });\n    }\n    get dayBuilder() {\n        return this.elementRef.nativeElement.dayBuilder;\n    }\n    set disabledDateBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDateBuilder = value;\n        });\n    }\n    get disabledDateBuilder() {\n        return this.elementRef.nativeElement.disabledDateBuilder;\n    }\n    set disabledDates(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDates = value;\n        });\n    }\n    get disabledDates() {\n        return this.elementRef.nativeElement.disabledDates;\n    }\n    set disabledDaysOfWeek(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDaysOfWeek = value;\n        });\n    }\n    get disabledDaysOfWeek() {\n        return this.elementRef.nativeElement.disabledDaysOfWeek;\n    }\n    set eventBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.eventBuilder = value;\n        });\n    }\n    get eventBuilder() {\n        return this.elementRef.nativeElement.eventBuilder;\n    }\n    set events(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.events = value;\n        });\n    }\n    get events() {\n        return this.elementRef.nativeElement.events;\n    }\n    set firstDayOfWeek(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.firstDayOfWeek = value;\n        });\n    }\n    get firstDayOfWeek() {\n        return this.elementRef.nativeElement.firstDayOfWeek;\n    }\n    set fixedHeight(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fixedHeight = value != null && `${value}` !== 'false';\n        });\n    }\n    get fixedHeight() {\n        return this.elementRef.nativeElement.fixedHeight;\n    }\n    set listYears(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.listYears = value != null && `${value}` !== 'false';\n        });\n    }\n    get listYears() {\n        return this.elementRef.nativeElement.listYears;\n    }\n    set locale(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.locale = value;\n        });\n    }\n    get locale() {\n        return this.elementRef.nativeElement.locale;\n    }\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    set menuAnimation(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.menuAnimation = value;\n        });\n    }\n    get menuAnimation() {\n        return this.elementRef.nativeElement.menuAnimation;\n    }\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    set mode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.mode = value;\n        });\n    }\n    get mode() {\n        return this.elementRef.nativeElement.mode;\n    }\n    set month(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.month = +value;\n        });\n    }\n    get month() {\n        return this.elementRef.nativeElement.month;\n    }\n    set preventFocus(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.preventFocus = value != null && `${value}` !== 'false';\n        });\n    }\n    get preventFocus() {\n        return this.elementRef.nativeElement.preventFocus;\n    }\n    set readonly(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.readonly = value != null && `${value}` !== 'false';\n        });\n    }\n    get readonly() {\n        return this.elementRef.nativeElement.readonly;\n    }\n    set selectionFollowsMonth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectionFollowsMonth = value != null && `${value}` !== 'false';\n        });\n    }\n    get selectionFollowsMonth() {\n        return this.elementRef.nativeElement.selectionFollowsMonth;\n    }\n    set showHeader(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showHeader = value != null && `${value}` !== 'false';\n        });\n    }\n    get showHeader() {\n        return this.elementRef.nativeElement.showHeader;\n    }\n    set showOtherMonths(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showOtherMonths = value != null && `${value}` !== 'false';\n        });\n    }\n    get showOtherMonths() {\n        return this.elementRef.nativeElement.showOtherMonths;\n    }\n    set showToday(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showToday = value != null && `${value}` !== 'false';\n        });\n    }\n    get showToday() {\n        return this.elementRef.nativeElement.showToday;\n    }\n    set todayButton(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.todayButton = value != null && `${value}` !== 'false';\n        });\n    }\n    get todayButton() {\n        return this.elementRef.nativeElement.todayButton;\n    }\n    set todayCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.todayCallback = value;\n        });\n    }\n    get todayCallback() {\n        return this.elementRef.nativeElement.todayCallback;\n    }\n    set tooltipBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.tooltipBuilder = value;\n        });\n    }\n    get tooltipBuilder() {\n        return this.elementRef.nativeElement.tooltipBuilder;\n    }\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    set view(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.view = value;\n        });\n    }\n    get view() {\n        return this.elementRef.nativeElement.view;\n    }\n    set weekendDays(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.weekendDays = value;\n        });\n    }\n    get weekendDays() {\n        return this.elementRef.nativeElement.weekendDays;\n    }\n    set year(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.year = +value;\n        });\n    }\n    get year() {\n        return this.elementRef.nativeElement.year;\n    }\n    set yearRange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.yearRange = value;\n        });\n    }\n    get yearRange() {\n        return this.elementRef.nativeElement.yearRange;\n    }\n    clear(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.clear(...args));\n    }\n    deselectDate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectDate(...args));\n    }\n    goToDate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.goToDate(...args));\n    }\n    handleKey(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.handleKey(...args));\n    }\n    layout(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layout(...args));\n    }\n    selectDate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectDate(...args));\n    }\n    setActiveDate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.setActiveDate(...args));\n    }\n    today(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.today(...args));\n    }\n    toggleDate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.toggleDate(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineCalendarComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CalendarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: CalendarComponent, selector: \"forge-calendar\", inputs: { activeDate: \"activeDate\", allowSingleDateRange: \"allowSingleDateRange\", clearButton: \"clearButton\", clearCallback: \"clearCallback\", constrainToEnabled: \"constrainToEnabled\", dateBuilder: \"dateBuilder\", dateSelectCallback: \"dateSelectCallback\", dayBuilder: \"dayBuilder\", disabledDateBuilder: \"disabledDateBuilder\", disabledDates: \"disabledDates\", disabledDaysOfWeek: \"disabledDaysOfWeek\", eventBuilder: \"eventBuilder\", events: \"events\", firstDayOfWeek: \"firstDayOfWeek\", fixedHeight: \"fixedHeight\", listYears: \"listYears\", locale: \"locale\", max: \"max\", menuAnimation: \"menuAnimation\", min: \"min\", mode: \"mode\", month: \"month\", preventFocus: \"preventFocus\", readonly: \"readonly\", selectionFollowsMonth: \"selectionFollowsMonth\", showHeader: \"showHeader\", showOtherMonths: \"showOtherMonths\", showToday: \"showToday\", todayButton: \"todayButton\", todayCallback: \"todayCallback\", tooltipBuilder: \"tooltipBuilder\", value: \"value\", view: \"view\", weekendDays: \"weekendDays\", year: \"year\", yearRange: \"yearRange\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CalendarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-calendar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { activeDate: [{\n                type: Input\n            }], allowSingleDateRange: [{\n                type: Input\n            }], clearButton: [{\n                type: Input\n            }], clearCallback: [{\n                type: Input\n            }], constrainToEnabled: [{\n                type: Input\n            }], dateBuilder: [{\n                type: Input\n            }], dateSelectCallback: [{\n                type: Input\n            }], dayBuilder: [{\n                type: Input\n            }], disabledDateBuilder: [{\n                type: Input\n            }], disabledDates: [{\n                type: Input\n            }], disabledDaysOfWeek: [{\n                type: Input\n            }], eventBuilder: [{\n                type: Input\n            }], events: [{\n                type: Input\n            }], firstDayOfWeek: [{\n                type: Input\n            }], fixedHeight: [{\n                type: Input\n            }], listYears: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], menuAnimation: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], month: [{\n                type: Input\n            }], preventFocus: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], selectionFollowsMonth: [{\n                type: Input\n            }], showHeader: [{\n                type: Input\n            }], showOtherMonths: [{\n                type: Input\n            }], showToday: [{\n                type: Input\n            }], todayButton: [{\n                type: Input\n            }], todayCallback: [{\n                type: Input\n            }], tooltipBuilder: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], weekendDays: [{\n                type: Input\n            }], year: [{\n                type: Input\n            }], yearRange: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeCalendarModule {\n    constructor() {\n        defineCalendarComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCalendarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCalendarModule, declarations: [CalendarComponent], imports: [CommonModule], exports: [CalendarComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCalendarModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCalendarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CalendarComponent],\n                    exports: [CalendarComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-card>` component. */\nclass CardComponent {\n    /** Gets/sets whether the card is using the outlined style or not. */\n    set outlined(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.outlined = value != null && `${value}` !== 'false';\n        });\n    }\n    get outlined() {\n        return this.elementRef.nativeElement.outlined;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineCardComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: CardComponent, selector: \"forge-card\", inputs: { outlined: \"outlined\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-card',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { outlined: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeCardModule {\n    constructor() {\n        defineCardComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCardModule, declarations: [CardComponent], imports: [CommonModule], exports: [CardComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCardModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CardComponent],\n                    exports: [CardComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-checkbox>` element. */\nclass CheckboxComponent {\n    /** Gets or sets whether or not the checkbox is dense */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineCheckboxComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: CheckboxComponent, selector: \"forge-checkbox\", inputs: { dense: \"dense\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CheckboxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-checkbox',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dense: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeCheckboxModule {\n    constructor() {\n        defineCheckboxComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCheckboxModule, declarations: [CheckboxComponent], imports: [CommonModule], exports: [CheckboxComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCheckboxModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CheckboxComponent],\n                    exports: [CheckboxComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-chip>` component. */\nclass ChipComponent {\n    /** Gets/sets the chip type. */\n    set type(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.type = value;\n        });\n    }\n    get type() {\n        return this.elementRef.nativeElement.type;\n    }\n    /** Gets/sets the selected state of the chip. */\n    set selected(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';\n        });\n    }\n    get selected() {\n        return this.elementRef.nativeElement.selected;\n    }\n    /** Gets/sets the disabled state of the chip. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets the invalid state of the chip. */\n    set invalid(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';\n        });\n    }\n    get invalid() {\n        return this.elementRef.nativeElement.invalid;\n    }\n    /** Gets/sets the chip value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the dense state of the chip. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    set emulateFocus(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.emulateFocus = value != null && `${value}` !== 'false';\n        });\n    }\n    get emulateFocus() {\n        return this.elementRef.nativeElement.emulateFocus;\n    }\n    focus(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));\n    }\n    tryFocusDelete(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.tryFocusDelete(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineChipComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ChipComponent, selector: \"forge-chip\", inputs: { type: \"type\", selected: \"selected\", disabled: \"disabled\", invalid: \"invalid\", value: \"value\", dense: \"dense\", emulateFocus: \"emulateFocus\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-chip',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { type: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], emulateFocus: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeChipProxyModule {\n    constructor() {\n        defineChipComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipProxyModule, declarations: [ChipComponent], imports: [CommonModule], exports: [ChipComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ChipComponent],\n                    exports: [ChipComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst CHIP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ChipValueAccessor),\n    multi: true\n};\nclass ChipValueAccessor {\n    chipSelect(event) {\n        this.change(event.detail.value);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'selected', this._elementRef.nativeElement.value === value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ChipValueAccessor, selector: \"forge-chip[value][formControlName],forge-chip[value][formControl],forge-chip[value][ngModel]\", host: { listeners: { \"forge-chip-select\": \"chipSelect($event)\", \"blur\": \"blur()\" } }, providers: [CHIP_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-chip[value][formControlName],forge-chip[value][formControl],forge-chip[value][ngModel]',\n                    providers: [CHIP_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { chipSelect: [{\n                type: HostListener,\n                args: ['forge-chip-select', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass ForgeChipModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipModule, declarations: [ChipValueAccessor], exports: [ChipValueAccessor,\n            ForgeChipProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipModule, imports: [ForgeChipProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ChipValueAccessor\n                    ],\n                    exports: [\n                        ChipValueAccessor,\n                        ForgeChipProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-chip-field>` custom element. */\nclass ChipFieldComponent {\n    /** Controls the density type. */\n    set density(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.density = value;\n        });\n    }\n    get density() {\n        return this.elementRef.nativeElement.density;\n    }\n    /** Whether the label should always float, never float or float as the user types. */\n    set floatLabelType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.floatLabelType = value;\n        });\n    }\n    get floatLabelType() {\n        return this.elementRef.nativeElement.floatLabelType;\n    }\n    /** The shape type to use. */\n    set shape(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.shape = value;\n        });\n    }\n    get shape() {\n        return this.elementRef.nativeElement.shape;\n    }\n    /** Gets/sets the invalid state. */\n    set invalid(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';\n        });\n    }\n    get invalid() {\n        return this.elementRef.nativeElement.invalid;\n    }\n    /** Gets/sets the required state which controls the visibility of the asterisk in the label. */\n    set required(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';\n        });\n    }\n    get required() {\n        return this.elementRef.nativeElement.required;\n    }\n    /** Controls whether the label should be floating or not. */\n    floatLabel(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.floatLabel(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineChipFieldComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ChipFieldComponent, selector: \"forge-chip-field\", inputs: { density: \"density\", floatLabelType: \"floatLabelType\", shape: \"shape\", invalid: \"invalid\", required: \"required\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipFieldComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-chip-field',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { density: [{\n                type: Input\n            }], floatLabelType: [{\n                type: Input\n            }], shape: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeChipFieldModule {\n    constructor() {\n        defineChipFieldComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipFieldModule, declarations: [ChipFieldComponent], imports: [CommonModule, ForgeChipProxyModule], exports: [ChipFieldComponent, ForgeChipProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipFieldModule, imports: [CommonModule, ForgeChipProxyModule, ForgeChipProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeChipProxyModule],\n                    declarations: [ChipFieldComponent],\n                    exports: [ChipFieldComponent, ForgeChipProxyModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-chip-set>` custom element. */\nclass ChipSetComponent {\n    set vertical(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.vertical = value != null && `${value}` !== 'false';\n        });\n    }\n    get vertical() {\n        return this.elementRef.nativeElement.vertical;\n    }\n    set type(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.type = value;\n        });\n    }\n    get type() {\n        return this.elementRef.nativeElement.type;\n    }\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineChipSetComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipSetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ChipSetComponent, selector: \"forge-chip-set\", inputs: { vertical: \"vertical\", type: \"type\", dense: \"dense\", disabled: \"disabled\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ChipSetComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-chip-set',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { vertical: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeChipSetModule {\n    constructor() {\n        defineChipSetComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipSetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipSetModule, declarations: [ChipSetComponent], imports: [CommonModule, ForgeChipProxyModule], exports: [ChipSetComponent, ForgeChipProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipSetModule, imports: [CommonModule, ForgeChipProxyModule, ForgeChipProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeChipSetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeChipProxyModule],\n                    declarations: [ChipSetComponent],\n                    exports: [ChipSetComponent, ForgeChipProxyModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-circular-progress>` custom element. */\nclass CircularProgressComponent {\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    set determinate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.determinate = value != null && `${value}` !== 'false';\n        });\n    }\n    get determinate() {\n        return this.elementRef.nativeElement.determinate;\n    }\n    set progress(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.progress = +value;\n        });\n    }\n    get progress() {\n        return this.elementRef.nativeElement.progress;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineCircularProgressComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CircularProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: CircularProgressComponent, selector: \"forge-circular-progress\", inputs: { open: \"open\", determinate: \"determinate\", progress: \"progress\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CircularProgressComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-circular-progress',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], determinate: [{\n                type: Input\n            }], progress: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeCircularProgressModule {\n    constructor() {\n        defineCircularProgressComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCircularProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCircularProgressModule, declarations: [CircularProgressComponent], imports: [CommonModule], exports: [CircularProgressComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCircularProgressModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeCircularProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CircularProgressComponent],\n                    exports: [CircularProgressComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-color-picker>` custom element. */\nclass ColorPickerComponent {\n    /** Gets/sets the value using hex format only. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the value using rgba format. */\n    set rgba(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.rgba = value;\n        });\n    }\n    get rgba() {\n        return this.elementRef.nativeElement.rgba;\n    }\n    /** Gets/sets the value using hsva format. */\n    set hsva(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.hsva = value;\n        });\n    }\n    get hsva() {\n        return this.elementRef.nativeElement.hsva;\n    }\n    /** Gets/sets the opacity value, if `allowOpacity` is true. */\n    set opacity(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.opacity = value;\n        });\n    }\n    get opacity() {\n        return this.elementRef.nativeElement.opacity;\n    }\n    /** Gets/sets whether opacity is displayed and allowed be to changed. */\n    set allowOpacity(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowOpacity = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowOpacity() {\n        return this.elementRef.nativeElement.allowOpacity;\n    }\n    /** Gets/sets whether change event has a debounce applied to avoid successive updates. Defaults to `false`. */\n    set debounceChangeEvent(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.debounceChangeEvent = value != null && `${value}` !== 'false';\n        });\n    }\n    get debounceChangeEvent() {\n        return this.elementRef.nativeElement.debounceChangeEvent;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineColorPickerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ColorPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ColorPickerComponent, selector: \"forge-color-picker\", inputs: { value: \"value\", rgba: \"rgba\", hsva: \"hsva\", opacity: \"opacity\", allowOpacity: \"allowOpacity\", debounceChangeEvent: \"debounceChangeEvent\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ColorPickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-color-picker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], rgba: [{\n                type: Input\n            }], hsva: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], allowOpacity: [{\n                type: Input\n            }], debounceChangeEvent: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeColorPickerModule {\n    constructor() {\n        defineColorPickerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeColorPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeColorPickerModule, declarations: [ColorPickerComponent], imports: [CommonModule], exports: [ColorPickerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeColorPickerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeColorPickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ColorPickerComponent],\n                    exports: [ColorPickerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-date-picker>` element. */\nclass DatePickerComponent {\n    /** Gets/sets the value of the component. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the minimum date the calendar will allow. */\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    /** Gets/sets the maximum date the calendar will allow. */\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    /** Gets/sets the dates that are restricted from being selected. */\n    set disabledDates(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDates = value;\n        });\n    }\n    get disabledDates() {\n        return this.elementRef.nativeElement.disabledDates;\n    }\n    /** Gets/sets whether the calendar dropdown is open. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Gets/sets the CSS classes that are applied to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets whether the date picker is disabled or not. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets whether the input mask is applied or not. */\n    set masked(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.masked = value != null && `${value}` !== 'false';\n        });\n    }\n    get masked() {\n        return this.elementRef.nativeElement.masked;\n    }\n    /** Gets/sets the mask format that displayed in the input. Default is `MM/DD/YYYY` */\n    set maskFormat(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.maskFormat = value;\n        });\n    }\n    get maskFormat() {\n        return this.elementRef.nativeElement.maskFormat;\n    }\n    /** Gets/sets whether the mask format is displayed in the input or not. Only applies if `masked` is `true`. */\n    set showMaskFormat(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showMaskFormat = value != null && `${value}` !== 'false';\n        });\n    }\n    get showMaskFormat() {\n        return this.elementRef.nativeElement.showMaskFormat;\n    }\n    /** Gets/sets the type for the `value` property and `forge-date-picker-change` event. */\n    set valueMode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.valueMode = value;\n        });\n    }\n    get valueMode() {\n        return this.elementRef.nativeElement.valueMode;\n    }\n    /** Gets/sets whether the native input will be notified of value changes via the `input` and `change` events. */\n    set notifyInputValueChanges(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.notifyInputValueChanges = value != null && `${value}` !== 'false';\n        });\n    }\n    get notifyInputValueChanges() {\n        return this.elementRef.nativeElement.notifyInputValueChanges;\n    }\n    /** Gets/sets whether to allow an invalid date to be input. When true, the date picker will not clear out the value of the input if the date was invalid (i.e. could not be parsed). */\n    set allowInvalidDate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowInvalidDate = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowInvalidDate() {\n        return this.elementRef.nativeElement.allowInvalidDate;\n    }\n    /** Gets/sets whether the today button is visible in the popup. */\n    set showToday(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showToday = value != null && `${value}` !== 'false';\n        });\n    }\n    get showToday() {\n        return this.elementRef.nativeElement.showToday;\n    }\n    /** Gets/sets whether the clear button is visible in the popup. */\n    set showClear(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showClear = value != null && `${value}` !== 'false';\n        });\n    }\n    get showClear() {\n        return this.elementRef.nativeElement.showClear;\n    }\n    /** Sets the callback to use for parsing a date value string to a `Date` object. */\n    set parseCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.parseCallback = value;\n        });\n    }\n    get parseCallback() {\n        return this.elementRef.nativeElement.parseCallback;\n    }\n    /** Sets the callback to use for formatting `Date` value to a custom string format. */\n    set formatCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.formatCallback = value;\n        });\n    }\n    get formatCallback() {\n        return this.elementRef.nativeElement.formatCallback;\n    }\n    /** Sets the callback to use when altering default mask entry. */\n    set prepareMaskCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.prepareMaskCallback = value;\n        });\n    }\n    get prepareMaskCallback() {\n        return this.elementRef.nativeElement.prepareMaskCallback;\n    }\n    /** Sets the days of the week to disable from selection. */\n    set disabledDaysOfWeek(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDaysOfWeek = value;\n        });\n    }\n    get disabledDaysOfWeek() {\n        return this.elementRef.nativeElement.disabledDaysOfWeek;\n    }\n    /** Sets the callback to use for testing whether a specific date should be disabled or not. */\n    set disableDayCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disableDayCallback = value;\n        });\n    }\n    get disableDayCallback() {\n        return this.elementRef.nativeElement.disableDayCallback;\n    }\n    /** Sets the year range. */\n    set yearRange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.yearRange = value;\n        });\n    }\n    get yearRange() {\n        return this.elementRef.nativeElement.yearRange;\n    }\n    /** Sets the locale to use. */\n    set locale(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.locale = value;\n        });\n    }\n    get locale() {\n        return this.elementRef.nativeElement.locale;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineDatePickerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DatePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DatePickerComponent, selector: \"forge-date-picker\", inputs: { value: \"value\", min: \"min\", max: \"max\", disabledDates: \"disabledDates\", open: \"open\", popupClasses: \"popupClasses\", disabled: \"disabled\", masked: \"masked\", maskFormat: \"maskFormat\", showMaskFormat: \"showMaskFormat\", valueMode: \"valueMode\", notifyInputValueChanges: \"notifyInputValueChanges\", allowInvalidDate: \"allowInvalidDate\", showToday: \"showToday\", showClear: \"showClear\", parseCallback: \"parseCallback\", formatCallback: \"formatCallback\", prepareMaskCallback: \"prepareMaskCallback\", disabledDaysOfWeek: \"disabledDaysOfWeek\", disableDayCallback: \"disableDayCallback\", yearRange: \"yearRange\", locale: \"locale\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DatePickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-date-picker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], disabledDates: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], masked: [{\n                type: Input\n            }], maskFormat: [{\n                type: Input\n            }], showMaskFormat: [{\n                type: Input\n            }], valueMode: [{\n                type: Input\n            }], notifyInputValueChanges: [{\n                type: Input\n            }], allowInvalidDate: [{\n                type: Input\n            }], showToday: [{\n                type: Input\n            }], showClear: [{\n                type: Input\n            }], parseCallback: [{\n                type: Input\n            }], formatCallback: [{\n                type: Input\n            }], prepareMaskCallback: [{\n                type: Input\n            }], disabledDaysOfWeek: [{\n                type: Input\n            }], disableDayCallback: [{\n                type: Input\n            }], yearRange: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeDatePickerProxyModule {\n    constructor() {\n        defineDatePickerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerProxyModule, declarations: [DatePickerComponent], imports: [CommonModule], exports: [DatePickerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DatePickerComponent],\n                    exports: [DatePickerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DatePickerValueAccessor),\n    multi: true\n};\nclass DatePickerValueAccessor {\n    datePickerChange(event) {\n        this.change(event.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DatePickerValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DatePickerValueAccessor, selector: \"forge-date-picker[formControlName],forge-date-picker[formControl],forge-date-picker[ngModel]\", host: { listeners: { \"forge-date-picker-change\": \"datePickerChange($event)\", \"focusout\": \"blur()\" } }, providers: [DATEPICKER_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DatePickerValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-date-picker[formControlName],forge-date-picker[formControl],forge-date-picker[ngModel]',\n                    providers: [DATEPICKER_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { datePickerChange: [{\n                type: HostListener,\n                args: ['forge-date-picker-change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\nclass ForgeDatePickerModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerModule, declarations: [DatePickerValueAccessor], exports: [DatePickerValueAccessor,\n            ForgeDatePickerProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerModule, imports: [ForgeDatePickerProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDatePickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        DatePickerValueAccessor\n                    ],\n                    exports: [\n                        DatePickerValueAccessor,\n                        ForgeDatePickerProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-date-range-picker>` element. */\nclass DateRangePickerComponent {\n    /** Gets/sets the \"from\" date range value. */\n    set from(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.from = value;\n        });\n    }\n    get from() {\n        return this.elementRef.nativeElement.from;\n    }\n    /** Gets/sets the \"to\" date range value. */\n    set to(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.to = value;\n        });\n    }\n    get to() {\n        return this.elementRef.nativeElement.to;\n    }\n    /** Gets/sets the value of the component. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the minimum date the calendar will allow. */\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    /** Gets/sets the maximum date the calendar will allow. */\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    /** Gets/sets the dates that are restricted from being selected. */\n    set disabledDates(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDates = value;\n        });\n    }\n    get disabledDates() {\n        return this.elementRef.nativeElement.disabledDates;\n    }\n    /** Gets/sets whether the calendar dropdown is open. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Gets/sets the CSS classes that are applied to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets whether the date picker is disabled or not. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets whether the input mask is applied or not. */\n    set masked(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.masked = value != null && `${value}` !== 'false';\n        });\n    }\n    get masked() {\n        return this.elementRef.nativeElement.masked;\n    }\n    /** Gets/sets the mask format that displayed in the input. Default is `MM/DD/YYYY` */\n    set maskFormat(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.maskFormat = value;\n        });\n    }\n    get maskFormat() {\n        return this.elementRef.nativeElement.maskFormat;\n    }\n    /** Gets/sets whether the mask format is displayed in the input or not. Only applies if `masked` is `true`. */\n    set showMaskFormat(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showMaskFormat = value != null && `${value}` !== 'false';\n        });\n    }\n    get showMaskFormat() {\n        return this.elementRef.nativeElement.showMaskFormat;\n    }\n    /** Gets/sets the type for the `value` property and `forge-date-picker-change` event. */\n    set valueMode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.valueMode = value;\n        });\n    }\n    get valueMode() {\n        return this.elementRef.nativeElement.valueMode;\n    }\n    /** Gets/sets whether the native input will be notified of value changes via the `input` and `change` events. */\n    set notifyInputValueChanges(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.notifyInputValueChanges = value != null && `${value}` !== 'false';\n        });\n    }\n    get notifyInputValueChanges() {\n        return this.elementRef.nativeElement.notifyInputValueChanges;\n    }\n    /** Gets/sets whether to allow an invalid date to be input. When true, the date picker will not clear out the value of the input if the date was invalid (i.e. could not be parsed). */\n    set allowInvalidDate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowInvalidDate = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowInvalidDate() {\n        return this.elementRef.nativeElement.allowInvalidDate;\n    }\n    /** Gets/sets whether the today button is visible in the popup. */\n    set showToday(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showToday = value != null && `${value}` !== 'false';\n        });\n    }\n    get showToday() {\n        return this.elementRef.nativeElement.showToday;\n    }\n    /** Gets/sets whether the clear button is visible in the popup. */\n    set showClear(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showClear = value != null && `${value}` !== 'false';\n        });\n    }\n    get showClear() {\n        return this.elementRef.nativeElement.showClear;\n    }\n    /** Sets the callback to use for parsing a date value string to a `Date` object. */\n    set parseCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.parseCallback = value;\n        });\n    }\n    get parseCallback() {\n        return this.elementRef.nativeElement.parseCallback;\n    }\n    /** Sets the callback to use for formatting `Date` value to a custom string format. */\n    set formatCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.formatCallback = value;\n        });\n    }\n    get formatCallback() {\n        return this.elementRef.nativeElement.formatCallback;\n    }\n    /** Sets the callback to use when altering default mask entry. */\n    set prepareMaskCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.prepareMaskCallback = value;\n        });\n    }\n    get prepareMaskCallback() {\n        return this.elementRef.nativeElement.prepareMaskCallback;\n    }\n    /** Sets the days of the week to disable from selection. */\n    set disabledDaysOfWeek(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabledDaysOfWeek = value;\n        });\n    }\n    get disabledDaysOfWeek() {\n        return this.elementRef.nativeElement.disabledDaysOfWeek;\n    }\n    /** Sets the callback to use for testing whether a specific date should be disabled or not. */\n    set disableDayCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disableDayCallback = value;\n        });\n    }\n    get disableDayCallback() {\n        return this.elementRef.nativeElement.disableDayCallback;\n    }\n    /** Sets the year range. */\n    set yearRange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.yearRange = value;\n        });\n    }\n    get yearRange() {\n        return this.elementRef.nativeElement.yearRange;\n    }\n    /** Sets the locale to use. */\n    set locale(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.locale = value;\n        });\n    }\n    get locale() {\n        return this.elementRef.nativeElement.locale;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineDateRangePickerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DateRangePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DateRangePickerComponent, selector: \"forge-date-range-picker\", inputs: { from: \"from\", to: \"to\", value: \"value\", min: \"min\", max: \"max\", disabledDates: \"disabledDates\", open: \"open\", popupClasses: \"popupClasses\", disabled: \"disabled\", masked: \"masked\", maskFormat: \"maskFormat\", showMaskFormat: \"showMaskFormat\", valueMode: \"valueMode\", notifyInputValueChanges: \"notifyInputValueChanges\", allowInvalidDate: \"allowInvalidDate\", showToday: \"showToday\", showClear: \"showClear\", parseCallback: \"parseCallback\", formatCallback: \"formatCallback\", prepareMaskCallback: \"prepareMaskCallback\", disabledDaysOfWeek: \"disabledDaysOfWeek\", disableDayCallback: \"disableDayCallback\", yearRange: \"yearRange\", locale: \"locale\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DateRangePickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-date-range-picker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { from: [{\n                type: Input\n            }], to: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], disabledDates: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], masked: [{\n                type: Input\n            }], maskFormat: [{\n                type: Input\n            }], showMaskFormat: [{\n                type: Input\n            }], valueMode: [{\n                type: Input\n            }], notifyInputValueChanges: [{\n                type: Input\n            }], allowInvalidDate: [{\n                type: Input\n            }], showToday: [{\n                type: Input\n            }], showClear: [{\n                type: Input\n            }], parseCallback: [{\n                type: Input\n            }], formatCallback: [{\n                type: Input\n            }], prepareMaskCallback: [{\n                type: Input\n            }], disabledDaysOfWeek: [{\n                type: Input\n            }], disableDayCallback: [{\n                type: Input\n            }], yearRange: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeDateRangePickerProxyModule {\n    constructor() {\n        defineDateRangePickerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerProxyModule, declarations: [DateRangePickerComponent], imports: [CommonModule], exports: [DateRangePickerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DateRangePickerComponent],\n                    exports: [DateRangePickerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst DATE_RANGE_PICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DateRangePickerValueAccessor),\n    multi: true\n};\nclass DateRangePickerValueAccessor {\n    dateRangePickerChange(event) {\n        this.change(event.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DateRangePickerValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DateRangePickerValueAccessor, selector: \"forge-date-range-picker[formControlName],forge-date-range-picker[formControl],forge-date-range-picker[ngModel]\", host: { listeners: { \"forge-date-range-picker-change\": \"dateRangePickerChange($event)\", \"focusout\": \"blur()\" } }, providers: [DATE_RANGE_PICKER_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DateRangePickerValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-date-range-picker[formControlName],forge-date-range-picker[formControl],forge-date-range-picker[ngModel]',\n                    providers: [DATE_RANGE_PICKER_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { dateRangePickerChange: [{\n                type: HostListener,\n                args: ['forge-date-range-picker-change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\nclass ForgeDateRangePickerModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerModule, declarations: [DateRangePickerValueAccessor], exports: [DateRangePickerValueAccessor,\n            ForgeDateRangePickerProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerModule, imports: [ForgeDateRangePickerProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDateRangePickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        DateRangePickerValueAccessor\n                    ],\n                    exports: [\n                        DateRangePickerValueAccessor,\n                        ForgeDateRangePickerProxyModule\n                    ]\n                }]\n        }] });\n\nclass DialogConfig {\n}\n\nclass DialogInjector extends BaseInjector {\n}\n\nclass DialogRef {\n    constructor(instance) {\n        this._afterClosed = new Subject();\n        this.afterClosed = this._afterClosed.asObservable();\n        this._beforeClose = new Subject();\n        this.beforeClose = this._beforeClose.asObservable();\n        this._elementRef = new ElementRef(instance);\n        instance.addEventListener(DIALOG_CONSTANTS.events.BEFORE_CLOSE, evt => this._beforeClose.next(evt));\n    }\n    close(result) {\n        this._afterClosed.next(result);\n        this._afterClosed.complete();\n        this._beforeClose.complete();\n    }\n    get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-dialog>` custom element. */\nclass DialogComponent {\n    /** Controls whether clicking the backdrop closes the dialog or not. Default is true. */\n    set backdropClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.backdropClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get backdropClose() {\n        return this.elementRef.nativeElement.backdropClose;\n    }\n    /** Controls whether pressing the escape key closes the dialog or not. Default is true. */\n    set escapeClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.escapeClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get escapeClose() {\n        return this.elementRef.nativeElement.escapeClose;\n    }\n    /** Controls whether the dialog is open or not. Default is false. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Controls whether the dialog is full screen or not. Default is false. */\n    set fullscreen(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fullscreen = value != null && `${value}` !== 'false';\n        });\n    }\n    get fullscreen() {\n        return this.elementRef.nativeElement.fullscreen;\n    }\n    /** The function to call when the dialog wants to open. */\n    set openCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.openCallback = value;\n        });\n    }\n    get openCallback() {\n        return this.elementRef.nativeElement.openCallback;\n    }\n    /** the function to call when the dialog wants to close. */\n    set closeCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.closeCallback = value;\n        });\n    }\n    get closeCallback() {\n        return this.elementRef.nativeElement.closeCallback;\n    }\n    /** the function to call when the dialog wants to close. */\n    set beforeCloseCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.beforeCloseCallback = value;\n        });\n    }\n    get beforeCloseCallback() {\n        return this.elementRef.nativeElement.beforeCloseCallback;\n    }\n    /** Gets/sets the position type when using custom positioning values. Default is 'absolute'. */\n    set positionType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.positionType = value;\n        });\n    }\n    get positionType() {\n        return this.elementRef.nativeElement.positionType;\n    }\n    /** Controls the horizontal position of the dialog surface. */\n    set positionX(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.positionX = value;\n        });\n    }\n    get positionX() {\n        return this.elementRef.nativeElement.positionX;\n    }\n    /** Controls the vertical position of the dialog surface. */\n    set positionY(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.positionY = value;\n        });\n    }\n    get positionY() {\n        return this.elementRef.nativeElement.positionY;\n    }\n    /** Gets/sets whether the dialog surface can be moved or not. */\n    set moveable(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.moveable = value != null && `${value}` !== 'false';\n        });\n    }\n    get moveable() {\n        return this.elementRef.nativeElement.moveable;\n    }\n    /** Gets/sets the selector used to target the element that is used as the drag target. */\n    set moveTarget(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.moveTarget = value;\n        });\n    }\n    get moveTarget() {\n        return this.elementRef.nativeElement.moveTarget;\n    }\n    initializeMoveTarget(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializeMoveTarget(...args));\n    }\n    resetPosition(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.resetPosition(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineDialogComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DialogComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DialogComponent, selector: \"forge-dialog\", inputs: { backdropClose: \"backdropClose\", escapeClose: \"escapeClose\", open: \"open\", fullscreen: \"fullscreen\", openCallback: \"openCallback\", closeCallback: \"closeCallback\", beforeCloseCallback: \"beforeCloseCallback\", positionType: \"positionType\", positionX: \"positionX\", positionY: \"positionY\", moveable: \"moveable\", moveTarget: \"moveTarget\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DialogComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-dialog',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { backdropClose: [{\n                type: Input\n            }], escapeClose: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], fullscreen: [{\n                type: Input\n            }], openCallback: [{\n                type: Input\n            }], closeCallback: [{\n                type: Input\n            }], beforeCloseCallback: [{\n                type: Input\n            }], positionType: [{\n                type: Input\n            }], positionX: [{\n                type: Input\n            }], positionY: [{\n                type: Input\n            }], moveable: [{\n                type: Input\n            }], moveTarget: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeDialogModule {\n    constructor() {\n        defineDialogComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDialogModule, declarations: [DialogComponent], imports: [CommonModule], exports: [DialogComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDialogModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DialogComponent],\n                    exports: [DialogComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Provides facilities for working with a Forge dialog and placing dynamic components within it.\n */\nclass DialogService {\n    constructor(_dcs, _injector) {\n        this._dcs = _dcs;\n        this._injector = _injector;\n        defineDialogComponent();\n    }\n    /**\n     * Displays a component within a Forge dialog instance.\n     * @param component The component reference.\n     * @param config The configuration to provide to the dynamic component as an injectable token.\n     */\n    show(component, options, config, moduleRef) {\n        // Contains tokens that will be provided to components through our custom dialog injector\n        const map = new WeakMap();\n        // If we got a config, we should provide it as an injection token\n        if (config) {\n            map.set(DialogConfig, config);\n        }\n        // Create the Forge dialog element\n        const dialogElement = document.createElement('forge-dialog');\n        // Configure the dialog with the provided options\n        if (options) {\n            const { dialogClass, attributes, ...restOptions } = options;\n            if (dialogClass) {\n                dialogElement.classList.add(dialogClass);\n            }\n            if (attributes) {\n                attributes.forEach((value, key) => dialogElement.setAttribute(key, value));\n            }\n            Object.assign(dialogElement, restOptions);\n        }\n        // Create the ref that will allow the consumer to control the dialog\n        const dialogRef = new DialogRef(dialogElement);\n        // Always provide the dialog ref as an injection token\n        map.set(DialogRef, dialogRef);\n        // Create and attach the dynamic component to the dialog element\n        const dcRef = this._dcs.create(component, dialogElement, new DialogInjector(this._injector, map), moduleRef);\n        dialogRef.componentInstance = dcRef.componentRef.instance;\n        // Always destroy when the dialog is closed\n        const sub = dialogRef.afterClosed.subscribe(() => {\n            this._destroy(dialogElement, dcRef);\n            sub.unsubscribe();\n        });\n        // Listen for clicks on the backdrop to destroy the dialog (if applicable)\n        if (dialogElement.backdropClose) {\n            dialogElement.addEventListener(DIALOG_CONSTANTS.events.CLOSE, () => {\n                dialogRef.close();\n                this._destroy(dialogElement, dcRef);\n                sub.unsubscribe();\n            });\n        }\n        // Appends the dialog element to the DOM\n        dialogElement.open = true;\n        return dialogRef;\n    }\n    /**\n     * Removes a dialog from the DOM and destroys the component instance.\n     * @param dialogInstance An instance of a Forge dialog element.\n     * @param ref A reference to the dynamic component.\n     */\n    _destroy(dialogInstance, ref) {\n        dialogInstance.open = false;\n        ref.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DialogService, deps: [{ token: DynamicComponentService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DialogService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DialogService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: DynamicComponentService }, { type: i0.Injector }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-divider>` element. */\nclass DividerComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineDividerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DividerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DividerComponent, selector: \"forge-divider\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DividerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-divider',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeDividerModule {\n    constructor() {\n        defineDividerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDividerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDividerModule, declarations: [DividerComponent], imports: [CommonModule], exports: [DividerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDividerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDividerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DividerComponent],\n                    exports: [DividerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-drawer>` custom element. */\nclass DrawerComponent {\n    /** Toggles whether a `dismissible` or `modal` drawer is open or not. Has no effect on `permanent` drawers. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Controls the laytout direction of the drawer for positioning on the left vs. right side of the screen. */\n    set direction(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.direction = value;\n        });\n    }\n    get direction() {\n        return this.elementRef.nativeElement.direction;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineDrawerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DrawerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: DrawerComponent, selector: \"forge-drawer\", inputs: { open: \"open\", direction: \"direction\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: DrawerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-drawer',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeDrawerModule {\n    constructor() {\n        defineDrawerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDrawerModule, declarations: [DrawerComponent], imports: [CommonModule], exports: [DrawerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDrawerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeDrawerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DrawerComponent],\n                    exports: [DrawerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-fab>` element. */\nclass FloatingActionButton {\n    /** Gets/sets the exited state. */\n    set exited(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.exited = value != null && `${value}` !== 'false';\n        });\n    }\n    get exited() {\n        return this.elementRef.nativeElement.exited;\n    }\n    /** Gets/sets the mini state. */\n    set mini(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.mini = value != null && `${value}` !== 'false';\n        });\n    }\n    get mini() {\n        return this.elementRef.nativeElement.mini;\n    }\n    /** Gets/sets the extended state. */\n    set extended(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.extended = value != null && `${value}` !== 'false';\n        });\n    }\n    get extended() {\n        return this.elementRef.nativeElement.extended;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineFloatingActionButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: FloatingActionButton, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: FloatingActionButton, selector: \"forge-fab\", inputs: { exited: \"exited\", mini: \"mini\", extended: \"extended\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: FloatingActionButton, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-fab',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { exited: [{\n                type: Input\n            }], mini: [{\n                type: Input\n            }], extended: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeFloatingActionButtonModule {\n    constructor() {\n        defineFloatingActionButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFloatingActionButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFloatingActionButtonModule, declarations: [FloatingActionButton], imports: [CommonModule], exports: [FloatingActionButton] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFloatingActionButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFloatingActionButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [FloatingActionButton],\n                    exports: [FloatingActionButton]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-file-picker>` custom element. */\nclass FilePickerComponent {\n    /** Gets and sets the allowed file types */\n    set accept(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.accept = value;\n        });\n    }\n    get accept() {\n        return this.elementRef.nativeElement.accept;\n    }\n    /** Gets and sets the maximum allowed file size */\n    set maxSize(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.maxSize = value;\n        });\n    }\n    get maxSize() {\n        return this.elementRef.nativeElement.maxSize;\n    }\n    /** Gets and sets the camera to use when capturing video or images */\n    set capture(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.capture = value;\n        });\n    }\n    get capture() {\n        return this.elementRef.nativeElement.capture;\n    }\n    /** Gets and sets whether multiple files are allowed */\n    set multiple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiple() {\n        return this.elementRef.nativeElement.multiple;\n    }\n    /** Gets and sets whether the file picker is disabled */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets and sets whether the file picker is compact */\n    set compact(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.compact = value != null && `${value}` !== 'false';\n        });\n    }\n    get compact() {\n        return this.elementRef.nativeElement.compact;\n    }\n    /** Gets and sets whether the file picker is borderless */\n    set borderless(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.borderless = value != null && `${value}` !== 'false';\n        });\n    }\n    get borderless() {\n        return this.elementRef.nativeElement.borderless;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineFilePickerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: FilePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: FilePickerComponent, selector: \"forge-file-picker\", inputs: { accept: \"accept\", maxSize: \"maxSize\", capture: \"capture\", multiple: \"multiple\", disabled: \"disabled\", compact: \"compact\", borderless: \"borderless\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: FilePickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-file-picker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { accept: [{\n                type: Input\n            }], maxSize: [{\n                type: Input\n            }], capture: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], compact: [{\n                type: Input\n            }], borderless: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeFilePickerModule {\n    constructor() {\n        defineFilePickerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFilePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFilePickerModule, declarations: [FilePickerComponent], imports: [CommonModule], exports: [FilePickerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFilePickerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeFilePickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [FilePickerComponent],\n                    exports: [FilePickerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-icon>` custom element. */\nclass IconComponent {\n    /** The name of the icon within the icon registry to be used. */\n    set name(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.name = value;\n        });\n    }\n    get name() {\n        return this.elementRef.nativeElement.name;\n    }\n    /** Provides the ability to set the SVG string content directly. */\n    set src(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.src = value;\n        });\n    }\n    get src() {\n        return this.elementRef.nativeElement.src;\n    }\n    /** Controls whether the icon will be loaded dynamically when it comes into view. False by default. */\n    set lazy(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.lazy = value != null && `${value}` !== 'false';\n        });\n    }\n    get lazy() {\n        return this.elementRef.nativeElement.lazy;\n    }\n    /** Controls whether external network requests are allowed for this icon. Only pertains for icons that aren't defined in the registry. */\n    set external(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.external = value != null && `${value}` !== 'false';\n        });\n    }\n    get external() {\n        return this.elementRef.nativeElement.external;\n    }\n    /** The type of icon to load externally. Possible values: \"standard\", \"extended\", \"custom\". */\n    set externalType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.externalType = value;\n        });\n    }\n    get externalType() {\n        return this.elementRef.nativeElement.externalType;\n    }\n    /** A callback that can be provided to generate a URL that will be used to fetch an SVG icon. */\n    set externalUrlBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.externalUrlBuilder = value;\n        });\n    }\n    get externalUrlBuilder() {\n        return this.elementRef.nativeElement.externalUrlBuilder;\n    }\n    /** A custom value to apply to the `viewBox` attribute on the internal `<svg>` element. */\n    set viewbox(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.viewbox = value;\n        });\n    }\n    get viewbox() {\n        return this.elementRef.nativeElement.viewbox;\n    }\n    /** Forces a reload of the icon. */\n    layout(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layout(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineIconComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: IconComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: IconComponent, selector: \"forge-icon\", inputs: { name: \"name\", src: \"src\", lazy: \"lazy\", external: \"external\", externalType: \"externalType\", externalUrlBuilder: \"externalUrlBuilder\", viewbox: \"viewbox\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: IconComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-icon',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { name: [{\n                type: Input\n            }], src: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], external: [{\n                type: Input\n            }], externalType: [{\n                type: Input\n            }], externalUrlBuilder: [{\n                type: Input\n            }], viewbox: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeIconModule {\n    constructor() {\n        defineIconComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconModule, declarations: [IconComponent], imports: [CommonModule], exports: [IconComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [IconComponent],\n                    exports: [IconComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-icon-button>` element. */\nclass IconButtonComponent {\n    /** Gets/sets whether the button is togglable. */\n    set toggle(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.toggle = value != null && `${value}` !== 'false';\n        });\n    }\n    get toggle() {\n        return this.elementRef.nativeElement.toggle;\n    }\n    /** Gets/sets the toggled state of the icon button. Only applies when `toggle = true`. */\n    set isOn(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.isOn = value != null && `${value}` !== 'false';\n        });\n    }\n    get isOn() {\n        return this.elementRef.nativeElement.isOn;\n    }\n    /** Gets/sets whether the icon button is dense. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    /** Controls the density level. 1 (least dense) to 6 (most dense). */\n    set densityLevel(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.densityLevel = +value;\n        });\n    }\n    get densityLevel() {\n        return this.elementRef.nativeElement.densityLevel;\n    }\n    layout(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layout(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineIconButtonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: IconButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: IconButtonComponent, selector: \"forge-icon-button\", inputs: { toggle: \"toggle\", isOn: \"isOn\", dense: \"dense\", densityLevel: \"densityLevel\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: IconButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-icon-button',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { toggle: [{\n                type: Input\n            }], isOn: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], densityLevel: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeIconButtonModule {\n    constructor() {\n        defineIconButtonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconButtonModule, declarations: [IconButtonComponent], imports: [CommonModule, ForgeIconModule], exports: [IconButtonComponent, ForgeIconModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconButtonModule, imports: [CommonModule, ForgeIconModule, ForgeIconModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeIconButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeIconModule],\n                    declarations: [IconButtonComponent],\n                    exports: [IconButtonComponent, ForgeIconModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-inline-message>` custom element. */\nclass InlineMessageComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineInlineMessageComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: InlineMessageComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: InlineMessageComponent, selector: \"forge-inline-message\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: InlineMessageComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-inline-message',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeInlineMessageModule {\n    constructor() {\n        defineInlineMessageComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeInlineMessageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeInlineMessageModule, declarations: [InlineMessageComponent], imports: [CommonModule], exports: [InlineMessageComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeInlineMessageModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeInlineMessageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [InlineMessageComponent],\n                    exports: [InlineMessageComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-keyboard-shortcut>` custom element. */\nclass KeyboardShortcutComponent {\n    /** Gets/sets the key binding. */\n    set key(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.key = value;\n        });\n    }\n    get key() {\n        return this.elementRef.nativeElement.key;\n    }\n    /** Alias for key. */\n    set keyBinding(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.keyBinding = value;\n        });\n    }\n    get keyBinding() {\n        return this.elementRef.nativeElement.keyBinding;\n    }\n    /** Gets/sets the target element selector. */\n    set target(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.target = value;\n        });\n    }\n    get target() {\n        return this.elementRef.nativeElement.target;\n    }\n    /** Gets/sets the global listener state. */\n    set global(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.global = value != null && `${value}` !== 'false';\n        });\n    }\n    get global() {\n        return this.elementRef.nativeElement.global;\n    }\n    /** Gets/sets whether the callback will be called while in a text entry field. */\n    set allowWhileTyping(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowWhileTyping = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowWhileTyping() {\n        return this.elementRef.nativeElement.allowWhileTyping;\n    }\n    /** Gets/sets whether to prevent default on keyboard events */\n    set preventDefault(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.preventDefault = value != null && `${value}` !== 'false';\n        });\n    }\n    get preventDefault() {\n        return this.elementRef.nativeElement.preventDefault;\n    }\n    /** Gets/sets whether to use capturing on keyboard events */\n    set capture(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.capture = value != null && `${value}` !== 'false';\n        });\n    }\n    get capture() {\n        return this.elementRef.nativeElement.capture;\n    }\n    /** Gets/sets whether to match codes instead of keys on keyboard events */\n    set useCode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.useCode = value != null && `${value}` !== 'false';\n        });\n    }\n    get useCode() {\n        return this.elementRef.nativeElement.useCode;\n    }\n    /** Gets/sets whether the callback will be called. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets whether the activation callback. */\n    set activateCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.activateCallback = value;\n        });\n    }\n    get activateCallback() {\n        return this.elementRef.nativeElement.activateCallback;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineKeyboardShortcutComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: KeyboardShortcutComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: KeyboardShortcutComponent, selector: \"forge-keyboard-shortcut\", inputs: { key: \"key\", keyBinding: \"keyBinding\", target: \"target\", global: \"global\", allowWhileTyping: \"allowWhileTyping\", preventDefault: \"preventDefault\", capture: \"capture\", useCode: \"useCode\", disabled: \"disabled\", activateCallback: \"activateCallback\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: KeyboardShortcutComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-keyboard-shortcut',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { key: [{\n                type: Input\n            }], keyBinding: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], global: [{\n                type: Input\n            }], allowWhileTyping: [{\n                type: Input\n            }], preventDefault: [{\n                type: Input\n            }], capture: [{\n                type: Input\n            }], useCode: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], activateCallback: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeKeyboardShortcutModule {\n    constructor() {\n        defineKeyboardShortcutComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeKeyboardShortcutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeKeyboardShortcutModule, declarations: [KeyboardShortcutComponent], imports: [CommonModule], exports: [KeyboardShortcutComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeKeyboardShortcutModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeKeyboardShortcutModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [KeyboardShortcutComponent],\n                    exports: [KeyboardShortcutComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-label-value>` custom element. */\nclass LabelValueComponent {\n    /** Gets/sets the empty state. */\n    set empty(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.empty = value != null && `${value}` !== 'false';\n        });\n    }\n    get empty() {\n        return this.elementRef.nativeElement.empty;\n    }\n    /** Gets/sets the wrap-content attribute. */\n    set ellipsis(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.ellipsis = value != null && `${value}` !== 'false';\n        });\n    }\n    get ellipsis() {\n        return this.elementRef.nativeElement.ellipsis;\n    }\n    /** Controls the density type. */\n    set density(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.density = value;\n        });\n    }\n    get density() {\n        return this.elementRef.nativeElement.density;\n    }\n    /** Gets/sets the alignment. */\n    set align(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.align = value;\n        });\n    }\n    get align() {\n        return this.elementRef.nativeElement.align;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineLabelValueComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: LabelValueComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: LabelValueComponent, selector: \"forge-label-value\", inputs: { empty: \"empty\", ellipsis: \"ellipsis\", density: \"density\", align: \"align\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: LabelValueComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-label-value',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { empty: [{\n                type: Input\n            }], ellipsis: [{\n                type: Input\n            }], density: [{\n                type: Input\n            }], align: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeLabelValueModule {\n    constructor() {\n        defineLabelValueComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLabelValueModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLabelValueModule, declarations: [LabelValueComponent], imports: [CommonModule], exports: [LabelValueComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLabelValueModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLabelValueModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [LabelValueComponent],\n                    exports: [LabelValueComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-linear-progress>` custom element. */\nclass LinearProgressComponent {\n    set determinate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.determinate = value != null && `${value}` !== 'false';\n        });\n    }\n    get determinate() {\n        return this.elementRef.nativeElement.determinate;\n    }\n    set progress(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.progress = +value;\n        });\n    }\n    get progress() {\n        return this.elementRef.nativeElement.progress;\n    }\n    set buffer(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.buffer = +value;\n        });\n    }\n    get buffer() {\n        return this.elementRef.nativeElement.buffer;\n    }\n    set visible(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.visible = value != null && `${value}` !== 'false';\n        });\n    }\n    get visible() {\n        return this.elementRef.nativeElement.visible;\n    }\n    open(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.open(...args));\n    }\n    close(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.close(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineLinearProgressComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: LinearProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: LinearProgressComponent, selector: \"forge-linear-progress\", inputs: { determinate: \"determinate\", progress: \"progress\", buffer: \"buffer\", visible: \"visible\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: LinearProgressComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-linear-progress',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { determinate: [{\n                type: Input\n            }], progress: [{\n                type: Input\n            }], buffer: [{\n                type: Input\n            }], visible: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeLinearProgressModule {\n    constructor() {\n        defineLinearProgressComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLinearProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLinearProgressModule, declarations: [LinearProgressComponent], imports: [CommonModule], exports: [LinearProgressComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLinearProgressModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeLinearProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [LinearProgressComponent],\n                    exports: [LinearProgressComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-list-item>` element. */\nclass ListItemComponent {\n    /** Gets/sets whether the static state of this list item. */\n    set static(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.static = value != null && `${value}` !== 'false';\n        });\n    }\n    get static() {\n        return this.elementRef.nativeElement.static;\n    }\n    /** Gets/sets whether the list item displays two lines of text. */\n    set twoLine(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.twoLine = value != null && `${value}` !== 'false';\n        });\n    }\n    get twoLine() {\n        return this.elementRef.nativeElement.twoLine;\n    }\n    /** Gets/sets whether the list item displays three lines of text. */\n    set threeLine(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.threeLine = value != null && `${value}` !== 'false';\n        });\n    }\n    get threeLine() {\n        return this.elementRef.nativeElement.threeLine;\n    }\n    /** Gets/sets whether the list item is active or not. */\n    set active(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.active = value != null && `${value}` !== 'false';\n        });\n    }\n    get active() {\n        return this.elementRef.nativeElement.active;\n    }\n    /** Gets/sets whether the list item is selected or not. */\n    set selected(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';\n        });\n    }\n    get selected() {\n        return this.elementRef.nativeElement.selected;\n    }\n    /** Gets/sets list item value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the href link that this list item will send the browser to when clicked. */\n    set href(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.href = value;\n        });\n    }\n    get href() {\n        return this.elementRef.nativeElement.href;\n    }\n    /** Gets/sets the href link target. Only pertains when `href` is also used. */\n    set target(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.target = value;\n        });\n    }\n    get target() {\n        return this.elementRef.nativeElement.target;\n    }\n    /** Gets/sets whether the list item has a ripple or not. */\n    set ripple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.ripple = value != null && `${value}` !== 'false';\n        });\n    }\n    get ripple() {\n        return this.elementRef.nativeElement.ripple;\n    }\n    /** Gets/sets whether the list item is disabled or not. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets whether the list item is using dense styles or not. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    /** Gets/sets whether the list item allows mousedown events through to the underlying list item element. Default is true. */\n    set propagateClick(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.propagateClick = value != null && `${value}` !== 'false';\n        });\n    }\n    get propagateClick() {\n        return this.elementRef.nativeElement.propagateClick;\n    }\n    /** Gets/sets whether the list item is indented or not. Default is false. */\n    set indented(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.indented = value != null && `${value}` !== 'false';\n        });\n    }\n    get indented() {\n        return this.elementRef.nativeElement.indented;\n    }\n    /** Gets/sets whether the list item content is wrapped or not. Default is true. */\n    set wrap(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrap = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrap() {\n        return this.elementRef.nativeElement.wrap;\n    }\n    /** Sets focus to this list item. */\n    focus(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineListItemComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListItemComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ListItemComponent, selector: \"forge-list-item\", inputs: { static: \"static\", twoLine: \"twoLine\", threeLine: \"threeLine\", active: \"active\", selected: \"selected\", value: \"value\", href: \"href\", target: \"target\", ripple: \"ripple\", disabled: \"disabled\", dense: \"dense\", propagateClick: \"propagateClick\", indented: \"indented\", wrap: \"wrap\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListItemComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-list-item',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { static: [{\n                type: Input\n            }], twoLine: [{\n                type: Input\n            }], threeLine: [{\n                type: Input\n            }], active: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], href: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], ripple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], propagateClick: [{\n                type: Input\n            }], indented: [{\n                type: Input\n            }], wrap: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeListItemModule {\n    constructor() {\n        defineListItemComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListItemModule, declarations: [ListItemComponent], imports: [CommonModule], exports: [ListItemComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListItemModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListItemModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ListItemComponent],\n                    exports: [ListItemComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-list>` element. */\nclass ListComponent {\n    /** Gets/sets whether the list has all static items or not. */\n    set static(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.static = value != null && `${value}` !== 'false';\n        });\n    }\n    get static() {\n        return this.elementRef.nativeElement.static;\n    }\n    /** Gets/sets whether the list has all dense items or not. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    /** Gets/sets whether the list items allow mousedown events through to their underlying list item elements. Default is true. */\n    set propagateClick(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.propagateClick = value != null && `${value}` !== 'false';\n        });\n    }\n    get propagateClick() {\n        return this.elementRef.nativeElement.propagateClick;\n    }\n    /** Gets/sets whether the list items within this list are indented. Default is false. */\n    set indented(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.indented = value != null && `${value}` !== 'false';\n        });\n    }\n    get indented() {\n        return this.elementRef.nativeElement.indented;\n    }\n    /** Gets/sets the selected list item value(s) */\n    set selectedValue(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedValue = value;\n        });\n    }\n    get selectedValue() {\n        return this.elementRef.nativeElement.selectedValue;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineListComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ListComponent, selector: \"forge-list\", inputs: { static: \"static\", dense: \"dense\", propagateClick: \"propagateClick\", indented: \"indented\", selectedValue: \"selectedValue\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-list',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { static: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], propagateClick: [{\n                type: Input\n            }], indented: [{\n                type: Input\n            }], selectedValue: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeListProxyModule {\n    constructor() {\n        defineListComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListProxyModule, declarations: [ListComponent], imports: [CommonModule, ForgeListItemModule], exports: [ListComponent, ForgeListItemModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListProxyModule, imports: [CommonModule, ForgeListItemModule, ForgeListItemModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeListItemModule],\n                    declarations: [ListComponent],\n                    exports: [ListComponent, ForgeListItemModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst LIST_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ListValueAccessor),\n    multi: true\n};\nclass ListValueAccessor {\n    /**\n     * Responds to individual list item selections and synchronizes the list state based on\n     * whether single or multiple selections are allowed.\n     */\n    listItemSelect({ target, detail: { value } }) {\n        let listValue = [...this._elementRef.nativeElement.selectedValue];\n        if (listValue.includes(value)) {\n            listValue.splice(listValue.indexOf(value), 1);\n        }\n        else {\n            const isSingle = this.single || this._containsRadioButton(target);\n            listValue = isSingle ? [value] : [...listValue, value];\n        }\n        this.writeValue(listValue);\n        this.change(listValue);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        /** Controls the single selection mode. */\n        this.single = false;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'selectedValue', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        const listItems = this._elementRef.nativeElement.querySelectorAll('forge-list-item');\n        listItems.forEach((listItem) => {\n            this._renderer.setProperty(listItem, 'disabled', isDisabled);\n        });\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    _containsRadioButton(target) {\n        const el = target.querySelector(LIST_ITEM_CONSTANTS.selectors.CHECKBOX_RADIO_SELECTOR);\n        return el?.type === 'radio';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ListValueAccessor, selector: \"forge-list[formControlName],forge-list[formControl],forge-list[ngModel]\", inputs: { single: [\"forgeListSingle\", \"single\"] }, host: { listeners: { \"forge-list-item-select\": \"listItemSelect($event)\", \"blur\": \"blur()\" } }, providers: [LIST_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ListValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-list[formControlName],forge-list[formControl],forge-list[ngModel]',\n                    providers: [LIST_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { single: [{\n                type: Input,\n                args: ['forgeListSingle']\n            }], listItemSelect: [{\n                type: HostListener,\n                args: ['forge-list-item-select', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass ForgeListModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListModule, declarations: [ListValueAccessor], exports: [ListValueAccessor,\n            ForgeListProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListModule, imports: [ForgeListProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ListValueAccessor\n                    ],\n                    exports: [\n                        ListValueAccessor,\n                        ForgeListProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-menu>` custom element. */\nclass MenuComponent {\n    /** Gets/sets the open state. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Gets/sets the array of options to display in the menu. */\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    /** Gets/sets the selected option to the index. Does not support cascading menus. */\n    set selectedIndex(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedIndex = +value;\n        });\n    }\n    get selectedIndex() {\n        return this.elementRef.nativeElement.selectedIndex;\n    }\n    /** Gets/sets the value of the option to select. */\n    set selectedValue(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedValue = value;\n        });\n    }\n    get selectedValue() {\n        return this.elementRef.nativeElement.selectedValue;\n    }\n    /** Gets/sets the menu placement (default is bottom-left). */\n    set placement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.placement = value;\n        });\n    }\n    get placement() {\n        return this.elementRef.nativeElement.placement;\n    }\n    /** Gets/sets the fallback menu placement for overriding the default of any side. */\n    set fallbackPlacements(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fallbackPlacements = value;\n        });\n    }\n    get fallbackPlacements() {\n        return this.elementRef.nativeElement.fallbackPlacements;\n    }\n    /** Gets/sets dense state of the list options used in the menu popup. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    /** Gets/sets the class name to use for option icons. */\n    set iconClass(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.iconClass = value;\n        });\n    }\n    get iconClass() {\n        return this.elementRef.nativeElement.iconClass;\n    }\n    /** Gets/sets whether selection of menu items is persisted. */\n    set persistSelection(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.persistSelection = value != null && `${value}` !== 'false';\n        });\n    }\n    get persistSelection() {\n        return this.elementRef.nativeElement.persistSelection;\n    }\n    /** Gets/sets the mode that this menu is using. */\n    set mode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.mode = value;\n        });\n    }\n    get mode() {\n        return this.elementRef.nativeElement.mode;\n    }\n    /** Sets the position adjustment on the internal popup element. */\n    set popupOffset(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupOffset = value;\n        });\n    }\n    get popupOffset() {\n        return this.elementRef.nativeElement.popupOffset;\n    }\n    /** Sets the callback that will be executed for each option in the dropdown for producing custom option templates. */\n    set optionBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionBuilder = value;\n        });\n    }\n    get optionBuilder() {\n        return this.elementRef.nativeElement.optionBuilder;\n    }\n    /** Gets the currently active popup element when the dropdown is open. */\n    set popupElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupElement = value;\n        });\n    }\n    get popupElement() {\n        return this.elementRef.nativeElement.popupElement;\n    }\n    /** Gets/sets the list of classes to apply to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupHeaderBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupHeaderBuilder = value;\n        });\n    }\n    get popupHeaderBuilder() {\n        return this.elementRef.nativeElement.popupHeaderBuilder;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupFooterBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupFooterBuilder = value;\n        });\n    }\n    get popupFooterBuilder() {\n        return this.elementRef.nativeElement.popupFooterBuilder;\n    }\n    /** Gets/sets whether the popup width is synchronized with the popup target width. */\n    set syncPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.syncPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get syncPopupWidth() {\n        return this.elementRef.nativeElement.syncPopupWidth;\n    }\n    /** Gets/sets the maximum number of options to display in the dropdown. */\n    set optionLimit(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionLimit = +value;\n        });\n    }\n    get optionLimit() {\n        return this.elementRef.nativeElement.optionLimit;\n    }\n    /** Controls the observation of scroll events on the dropdown. */\n    set observeScroll(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScroll = value != null && `${value}` !== 'false';\n        });\n    }\n    get observeScroll() {\n        return this.elementRef.nativeElement.observeScroll;\n    }\n    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */\n    set observeScrollThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScrollThreshold = +value;\n        });\n    }\n    get observeScrollThreshold() {\n        return this.elementRef.nativeElement.observeScrollThreshold;\n    }\n    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */\n    set constrainPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.constrainPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get constrainPopupWidth() {\n        return this.elementRef.nativeElement.constrainPopupWidth;\n    }\n    /**\n     * Gets/sets whether the options will wrap their text or not.\n     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.\n     */\n    set wrapOptionText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrapOptionText = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrapOptionText() {\n        return this.elementRef.nativeElement.wrapOptionText;\n    }\n    /** Force propagates the key event from another element this component. */\n    propagateKeyEvent(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.propagateKeyEvent(...args));\n    }\n    activateFirstOption(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.activateFirstOption(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineMenuComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: MenuComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: MenuComponent, selector: \"forge-menu\", inputs: { open: \"open\", options: \"options\", selectedIndex: \"selectedIndex\", selectedValue: \"selectedValue\", placement: \"placement\", fallbackPlacements: \"fallbackPlacements\", dense: \"dense\", iconClass: \"iconClass\", persistSelection: \"persistSelection\", mode: \"mode\", popupOffset: \"popupOffset\", optionBuilder: \"optionBuilder\", popupElement: \"popupElement\", popupClasses: \"popupClasses\", popupHeaderBuilder: \"popupHeaderBuilder\", popupFooterBuilder: \"popupFooterBuilder\", syncPopupWidth: \"syncPopupWidth\", optionLimit: \"optionLimit\", observeScroll: \"observeScroll\", observeScrollThreshold: \"observeScrollThreshold\", constrainPopupWidth: \"constrainPopupWidth\", wrapOptionText: \"wrapOptionText\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: MenuComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-menu',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], selectedValue: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], fallbackPlacements: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], iconClass: [{\n                type: Input\n            }], persistSelection: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], popupOffset: [{\n                type: Input\n            }], optionBuilder: [{\n                type: Input\n            }], popupElement: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], popupHeaderBuilder: [{\n                type: Input\n            }], popupFooterBuilder: [{\n                type: Input\n            }], syncPopupWidth: [{\n                type: Input\n            }], optionLimit: [{\n                type: Input\n            }], observeScroll: [{\n                type: Input\n            }], observeScrollThreshold: [{\n                type: Input\n            }], constrainPopupWidth: [{\n                type: Input\n            }], wrapOptionText: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeMenuModule {\n    constructor() {\n        defineMenuComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMenuModule, declarations: [MenuComponent], imports: [CommonModule], exports: [MenuComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMenuModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [MenuComponent],\n                    exports: [MenuComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-mini-drawer>` custom element. */\nclass MiniDrawerComponent {\n    /** Toggles whether a `dismissible` or `modal` drawer is open or not. Has no effect on `permanent` drawers. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Controls the laytout direction of the drawer for positioning on the left vs. right side of the screen. */\n    set direction(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.direction = value;\n        });\n    }\n    get direction() {\n        return this.elementRef.nativeElement.direction;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineMiniDrawerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: MiniDrawerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: MiniDrawerComponent, selector: \"forge-mini-drawer\", inputs: { open: \"open\", direction: \"direction\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: MiniDrawerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-mini-drawer',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeMiniDrawerModule {\n    constructor() {\n        defineMiniDrawerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMiniDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMiniDrawerModule, declarations: [MiniDrawerComponent], imports: [CommonModule], exports: [MiniDrawerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMiniDrawerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeMiniDrawerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [MiniDrawerComponent],\n                    exports: [MiniDrawerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-modal-drawer>` custom element. */\nclass ModalDrawerComponent {\n    /** Toggles whether a `dismissible` or `modal` drawer is open or not. Has no effect on `permanent` drawers. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Controls the laytout direction of the drawer for positioning on the left vs. right side of the screen. */\n    set direction(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.direction = value;\n        });\n    }\n    get direction() {\n        return this.elementRef.nativeElement.direction;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineModalDrawerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ModalDrawerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ModalDrawerComponent, selector: \"forge-modal-drawer\", inputs: { open: \"open\", direction: \"direction\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ModalDrawerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-modal-drawer',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { open: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeModalDrawerModule {\n    constructor() {\n        defineModalDrawerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModalDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModalDrawerModule, declarations: [ModalDrawerComponent], imports: [CommonModule], exports: [ModalDrawerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModalDrawerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModalDrawerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ModalDrawerComponent],\n                    exports: [ModalDrawerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-option>` element. */\nclass OptionComponent {\n    /** Gets/sets the value of this option. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the label of this option. */\n    set label(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.label = value;\n        });\n    }\n    get label() {\n        return this.elementRef.nativeElement.label;\n    }\n    /** Gets/sets the secondary label of this option. */\n    set secondaryLabel(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.secondaryLabel = value;\n        });\n    }\n    get secondaryLabel() {\n        return this.elementRef.nativeElement.secondaryLabel;\n    }\n    /** Gets/sets the disabled status of this option. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets the whether this option is a divider. */\n    set divider(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.divider = value != null && `${value}` !== 'false';\n        });\n    }\n    get divider() {\n        return this.elementRef.nativeElement.divider;\n    }\n    /** Gets/sets the classes of this option. */\n    set optionClass(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionClass = value;\n        });\n    }\n    get optionClass() {\n        return this.elementRef.nativeElement.optionClass;\n    }\n    /** Gets/sets the leading icon of this option. */\n    set leadingIcon(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.leadingIcon = value;\n        });\n    }\n    get leadingIcon() {\n        return this.elementRef.nativeElement.leadingIcon;\n    }\n    /** Gets/sets the leading icon class of this option. */\n    set leadingIconClass(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.leadingIconClass = value;\n        });\n    }\n    get leadingIconClass() {\n        return this.elementRef.nativeElement.leadingIconClass;\n    }\n    /** Gets/sets the leading icon type of this option. */\n    set leadingIconType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.leadingIconType = value;\n        });\n    }\n    get leadingIconType() {\n        return this.elementRef.nativeElement.leadingIconType;\n    }\n    /** Gets/sets properties on leading icon component. */\n    set leadingIconComponentProps(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.leadingIconComponentProps = value;\n        });\n    }\n    get leadingIconComponentProps() {\n        return this.elementRef.nativeElement.leadingIconComponentProps;\n    }\n    /** Gets/sets the trailing icon of this option. */\n    set trailingIcon(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.trailingIcon = value;\n        });\n    }\n    get trailingIcon() {\n        return this.elementRef.nativeElement.trailingIcon;\n    }\n    /** Gets/sets the trailing icon class of this option. */\n    set trailingIconClass(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.trailingIconClass = value;\n        });\n    }\n    get trailingIconClass() {\n        return this.elementRef.nativeElement.trailingIconClass;\n    }\n    /** Gets/sets the trailing icon type of this option. */\n    set trailingIconType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.trailingIconType = value;\n        });\n    }\n    get trailingIconType() {\n        return this.elementRef.nativeElement.trailingIconType;\n    }\n    /** Gets/sets properties on trailing icon component. */\n    set trailingIconComponentProps(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.trailingIconComponentProps = value;\n        });\n    }\n    get trailingIconComponentProps() {\n        return this.elementRef.nativeElement.trailingIconComponentProps;\n    }\n    /** Gets/sets the leading builder of this option. */\n    set leadingBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.leadingBuilder = value;\n        });\n    }\n    get leadingBuilder() {\n        return this.elementRef.nativeElement.leadingBuilder;\n    }\n    /** Gets/sets the trailing builder of this option. */\n    set trailingBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.trailingBuilder = value;\n        });\n    }\n    get trailingBuilder() {\n        return this.elementRef.nativeElement.trailingBuilder;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineOptionComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OptionComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: OptionComponent, selector: \"forge-option\", inputs: { value: \"value\", label: \"label\", secondaryLabel: \"secondaryLabel\", disabled: \"disabled\", divider: \"divider\", optionClass: \"optionClass\", leadingIcon: \"leadingIcon\", leadingIconClass: \"leadingIconClass\", leadingIconType: \"leadingIconType\", leadingIconComponentProps: \"leadingIconComponentProps\", trailingIcon: \"trailingIcon\", trailingIconClass: \"trailingIconClass\", trailingIconType: \"trailingIconType\", trailingIconComponentProps: \"trailingIconComponentProps\", leadingBuilder: \"leadingBuilder\", trailingBuilder: \"trailingBuilder\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OptionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-option',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], secondaryLabel: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], divider: [{\n                type: Input\n            }], optionClass: [{\n                type: Input\n            }], leadingIcon: [{\n                type: Input\n            }], leadingIconClass: [{\n                type: Input\n            }], leadingIconType: [{\n                type: Input\n            }], leadingIconComponentProps: [{\n                type: Input\n            }], trailingIcon: [{\n                type: Input\n            }], trailingIconClass: [{\n                type: Input\n            }], trailingIconType: [{\n                type: Input\n            }], trailingIconComponentProps: [{\n                type: Input\n            }], leadingBuilder: [{\n                type: Input\n            }], trailingBuilder: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeOptionModule {\n    constructor() {\n        defineOptionComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionModule, declarations: [OptionComponent], imports: [CommonModule], exports: [OptionComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [OptionComponent],\n                    exports: [OptionComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-option-group>` element. */\nclass OptionGroupComponent {\n    /** Gets/sets the label of this option group. */\n    set label(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.label = value;\n        });\n    }\n    get label() {\n        return this.elementRef.nativeElement.label;\n    }\n    /** The child options of this group. */\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    /** The builder function for the group content. */\n    set builder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.builder = value;\n        });\n    }\n    get builder() {\n        return this.elementRef.nativeElement.builder;\n    }\n    /** Gets/sets the optional group value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** The text content for the group. */\n    set text(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.text = value;\n        });\n    }\n    get text() {\n        return this.elementRef.nativeElement.text;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineOptionGroupComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OptionGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: OptionGroupComponent, selector: \"forge-option-group\", inputs: { label: \"label\", options: \"options\", builder: \"builder\", value: \"value\", text: \"text\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: OptionGroupComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-option-group',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { label: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], builder: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeOptionGroupModule {\n    constructor() {\n        defineOptionGroupComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionGroupModule, declarations: [OptionGroupComponent], imports: [CommonModule], exports: [OptionGroupComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionGroupModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeOptionGroupModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [OptionGroupComponent],\n                    exports: [OptionGroupComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-page-state>` custom element. */\nclass PageStateComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        definePageStateComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PageStateComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: PageStateComponent, selector: \"forge-page-state\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PageStateComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-page-state',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgePageStateModule {\n    constructor() {\n        definePageStateComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePageStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePageStateModule, declarations: [PageStateComponent], imports: [CommonModule], exports: [PageStateComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePageStateModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePageStateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [PageStateComponent],\n                    exports: [PageStateComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/**  */\nclass PaginatorComponent {\n    /** The zero-based page index. Default is 0. */\n    set pageIndex(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.pageIndex = +value;\n        });\n    }\n    get pageIndex() {\n        return this.elementRef.nativeElement.pageIndex;\n    }\n    /** Number of items to display on a page. By default set to 25. */\n    set pageSize(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.pageSize = +value;\n        });\n    }\n    get pageSize() {\n        return this.elementRef.nativeElement.pageSize;\n    }\n    /** Sets page index by providing the number of items to skip. The getter for this property returns the number of items to skip. */\n    set offset(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.offset = +value;\n        });\n    }\n    get offset() {\n        return this.elementRef.nativeElement.offset;\n    }\n    /** The total number of items to be paginated. Default is 0. */\n    set total(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.total = +value;\n        });\n    }\n    get total() {\n        return this.elementRef.nativeElement.total;\n    }\n    /** The set of provided page size options to display to the user. */\n    set pageSizeOptions(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.pageSizeOptions = value;\n        });\n    }\n    get pageSizeOptions() {\n        return this.elementRef.nativeElement.pageSizeOptions;\n    }\n    /** A label for the paginator. Default is \"Rows per page:\". */\n    set label(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.label = value;\n        });\n    }\n    get label() {\n        return this.elementRef.nativeElement.label;\n    }\n    /** Whether to show the first page and last page buttons. Default is false. */\n    set firstLast(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.firstLast = value != null && `${value}` !== 'false';\n        });\n    }\n    get firstLast() {\n        return this.elementRef.nativeElement.firstLast;\n    }\n    /** Whether to show the first page button. Default is false. */\n    set first(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.first = value != null && `${value}` !== 'false';\n        });\n    }\n    get first() {\n        return this.elementRef.nativeElement.first;\n    }\n    /** Whether the paginator is disabled. Default is false. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set alternative(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.alternative = value != null && `${value}` !== 'false';\n        });\n    }\n    get alternative() {\n        return this.elementRef.nativeElement.alternative;\n    }\n    set alignment(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.alignment = value;\n        });\n    }\n    get alignment() {\n        return this.elementRef.nativeElement.alignment;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        definePaginatorComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PaginatorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: PaginatorComponent, selector: \"forge-paginator\", inputs: { pageIndex: \"pageIndex\", pageSize: \"pageSize\", offset: \"offset\", total: \"total\", pageSizeOptions: \"pageSizeOptions\", label: \"label\", firstLast: \"firstLast\", first: \"first\", disabled: \"disabled\", alternative: \"alternative\", alignment: \"alignment\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PaginatorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-paginator',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { pageIndex: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], total: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], firstLast: [{\n                type: Input\n            }], first: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], alternative: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgePaginatorModule {\n    constructor() {\n        definePaginatorComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePaginatorModule, declarations: [PaginatorComponent], imports: [CommonModule], exports: [PaginatorComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePaginatorModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [PaginatorComponent],\n                    exports: [PaginatorComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass PopupConfig {\n}\n\nclass PopupInjector extends BaseInjector {\n}\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-popup>` custom element. */\nclass PopupComponent {\n    set targetElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.targetElement = value;\n        });\n    }\n    get targetElement() {\n        return this.elementRef.nativeElement.targetElement;\n    }\n    set placement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.placement = value;\n        });\n    }\n    get placement() {\n        return this.elementRef.nativeElement.placement;\n    }\n    set fallbackPlacements(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fallbackPlacements = value;\n        });\n    }\n    get fallbackPlacements() {\n        return this.elementRef.nativeElement.fallbackPlacements;\n    }\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    set manageFocus(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.manageFocus = value != null && `${value}` !== 'false';\n        });\n    }\n    get manageFocus() {\n        return this.elementRef.nativeElement.manageFocus;\n    }\n    set animationType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.animationType = value;\n        });\n    }\n    get animationType() {\n        return this.elementRef.nativeElement.animationType;\n    }\n    set static(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.static = value != null && `${value}` !== 'false';\n        });\n    }\n    get static() {\n        return this.elementRef.nativeElement.static;\n    }\n    set hideWhenClipped(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.hideWhenClipped = value != null && `${value}` !== 'false';\n        });\n    }\n    get hideWhenClipped() {\n        return this.elementRef.nativeElement.hideWhenClipped;\n    }\n    set openCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.openCallback = value;\n        });\n    }\n    get openCallback() {\n        return this.elementRef.nativeElement.openCallback;\n    }\n    set closeCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.closeCallback = value;\n        });\n    }\n    get closeCallback() {\n        return this.elementRef.nativeElement.closeCallback;\n    }\n    set offset(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.offset = value;\n        });\n    }\n    get offset() {\n        return this.elementRef.nativeElement.offset;\n    }\n    position(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.position(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        definePopupComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: PopupComponent, selector: \"forge-popup\", inputs: { targetElement: \"targetElement\", placement: \"placement\", fallbackPlacements: \"fallbackPlacements\", open: \"open\", manageFocus: \"manageFocus\", animationType: \"animationType\", static: \"static\", hideWhenClipped: \"hideWhenClipped\", openCallback: \"openCallback\", closeCallback: \"closeCallback\", offset: \"offset\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-popup',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { targetElement: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], fallbackPlacements: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], manageFocus: [{\n                type: Input\n            }], animationType: [{\n                type: Input\n            }], static: [{\n                type: Input\n            }], hideWhenClipped: [{\n                type: Input\n            }], openCallback: [{\n                type: Input\n            }], closeCallback: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgePopupProxyModule {\n    constructor() {\n        definePopupComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupProxyModule, declarations: [PopupComponent], imports: [CommonModule], exports: [PopupComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [PopupComponent],\n                    exports: [PopupComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass PopupRef {\n    constructor(instance) {\n        this._afterClosed = new AsyncSubject();\n        this.afterClosed = this._afterClosed.asObservable();\n        this._elementRef = new ElementRef(instance);\n    }\n    close(result) {\n        this._afterClosed.next(result);\n        this._afterClosed.complete();\n    }\n    get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n/**\n * Allows for declaratively specifying an element that should display a Forge popup\n * from the provided `TemplateRef`.\n */\nclass PopupDirective {\n    /**\n     * @deprecated Use static property instead.\n     */\n    set forgePopupCloseOnBlur(value) {\n        this.static = !value;\n    }\n    get popupElement() {\n        return this._popupElement;\n    }\n    constructor(_elementRef, _viewContainerRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        /** The popup placement around the `ElementRef`. */\n        this.forgePopupPlacement = 'bottom-start';\n        /** Controls whether the popup closes when it loses focus. */\n        this.static = false;\n        this._elementRef.nativeElement.addEventListener(POPUP_CONSTANTS.events.CLOSE, () => window.requestAnimationFrame(() => this.close()));\n    }\n    /** Creates and renders a TemplateRef inside of a Forge popup. */\n    open() {\n        if (this._popupElement) {\n            return;\n        }\n        // Ensure that we have a popup template\n        if (this.forgePopup instanceof TemplateRef === false) {\n            throw new Error('Popup template is not defined.');\n        }\n        // Create the embedded view from the template\n        this._contentRef = this._viewContainerRef.createEmbeddedView(this.forgePopup);\n        if (this._contentRef.rootNodes[0] instanceof PopupComponent$1) {\n            // <forge-popup> element is supplied in the template\n            this._popupElement = this._contentRef.rootNodes[0];\n            this._popupElement.remove();\n        }\n        else {\n            // Create the Forge popup element\n            this._popupElement = this._renderer.createElement('forge-popup');\n            // Because createEmbeddedView will place the template within the element defined by ViewContainerRef, we\n            // need to then move the elements to children of the Forge popup element so they render within the popup\n            this._contentRef.rootNodes.forEach(node => this._popupElement?.appendChild(node));\n            this._popupElement.placement = this.forgePopupPlacement;\n            // Add the custom class (if provided)\n            if (this.forgePopupClass) {\n                this._popupElement.classList.add(this.forgePopupClass);\n            }\n            this._popupElement.static = this.static;\n        }\n        this._popupElement.targetElement = this._elementRef.nativeElement;\n        // This appends the Forge popup to the body\n        this._popupElement.open = true;\n    }\n    /** Closes the Forge popup and destroys the embedded view. */\n    close() {\n        if (this._popupElement) {\n            this._popupElement.open = false;\n            this._popupElement = undefined;\n        }\n        if (this._contentRef) {\n            this._contentRef.destroy();\n            this._contentRef = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this.close();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: PopupDirective, selector: \"[forgePopup]\", inputs: { forgePopup: \"forgePopup\", forgePopupPlacement: \"forgePopupPlacement\", forgePopupCloseOnBlur: \"forgePopupCloseOnBlur\", static: \"static\", forgePopupClass: \"forgePopupClass\" }, exportAs: [\"forgePopup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[forgePopup]',\n                    exportAs: 'forgePopup'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { forgePopup: [{\n                type: Input\n            }], forgePopupPlacement: [{\n                type: Input\n            }], forgePopupCloseOnBlur: [{\n                type: Input\n            }], static: [{\n                type: Input\n            }], forgePopupClass: [{\n                type: Input\n            }] } });\n\nclass ForgePopupModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupModule, declarations: [PopupDirective], exports: [PopupDirective,\n            ForgePopupProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupModule, imports: [ForgePopupProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgePopupModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        PopupDirective\n                    ],\n                    exports: [\n                        PopupDirective,\n                        ForgePopupProxyModule\n                    ]\n                }]\n        }] });\n\n/**\n * Provides facilities for working with a Forge popup and placing dynamic components within it.\n */\nclass PopupService {\n    constructor(_dcs, _injector) {\n        this._dcs = _dcs;\n        this._injector = _injector;\n        definePopupComponent();\n    }\n    /**\n     * Displays a components within a Forge popup instance.\n     * @param component The component reference.\n     * @param options Sets attributes and properties on the `forge-popup` element. `targetElement` is required.\n     * @param config The configuration to provide to the dynamic component as an injectable token.\n     * @param moduleRef Optional NgModule ref if need by the component.\n     * @returns A PopupRef to the forge-popup and dynamically created component, and related close handling.\n     */\n    show(component, options, config, moduleRef) {\n        // Contains tokens that will be provided to components through our custom popup injector\n        const map = new WeakMap();\n        // If we got a config, we should provide it as an injection token\n        if (config) {\n            map.set(PopupConfig, config);\n        }\n        // Create the Forge popup element\n        const popupElement = document.createElement('forge-popup');\n        // Configure the popup with the provided options\n        const { popupClass, attributes, ...restOptions } = options;\n        if (popupClass) {\n            popupElement.classList.add(popupClass);\n        }\n        if (attributes) {\n            attributes.forEach((value, key) => popupElement.setAttribute(key, value));\n        }\n        Object.assign(popupElement, restOptions);\n        // Create the ref that will allow the consumer to control the popup\n        const popupRef = new PopupRef(popupElement);\n        // Always provide the popup ref as an injection token\n        map.set(PopupRef, popupRef);\n        // Create and attach the dynamic component to the popup element\n        const dcRef = this._dcs.create(component, popupElement, new PopupInjector(this._injector, map), moduleRef);\n        popupRef.componentInstance = dcRef.componentRef.instance;\n        // Always destroy when the popup is closed\n        const sub = popupRef.afterClosed.subscribe(() => {\n            this._destroy(popupElement, dcRef);\n            sub.unsubscribe();\n        });\n        popupElement.addEventListener(POPUP_CONSTANTS.events.CLOSE, () => {\n            popupRef.close();\n            this._destroy(popupElement, dcRef);\n            sub.unsubscribe();\n        });\n        // Force initial change detection so component size can affect initial positioning.\n        dcRef.componentRef.changeDetectorRef.detectChanges();\n        // Appends the popup element to the DOM\n        popupElement.open = true;\n        return popupRef;\n    }\n    /**\n     * Removes a popup from the DOM and destroys the component instance.\n     * @param popupInstance An instance of a Forge popup element.\n     * @param ref A reference to the dynamic component.\n     */\n    _destroy(popupInstance, ref) {\n        popupInstance.open = false;\n        ref.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupService, deps: [{ token: DynamicComponentService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: PopupService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: DynamicComponentService }, { type: i0.Injector }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-product-icon>` custom element. */\nclass ProductIconComponent {\n    /** The color of the container element from the material color palette. */\n    set color(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.color = value;\n        });\n    }\n    get color() {\n        return this.elementRef.nativeElement.color;\n    }\n    /** Controls the height and width of the container element. */\n    set size(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.size = +value;\n        });\n    }\n    get size() {\n        return this.elementRef.nativeElement.size;\n    }\n    /** Controls the visibility of the text shadow. */\n    set shadow(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.shadow = value != null && `${value}` !== 'false';\n        });\n    }\n    get shadow() {\n        return this.elementRef.nativeElement.shadow;\n    }\n    /** The number of iterations to apply the text shadow. */\n    set iterations(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.iterations = +value;\n        });\n    }\n    get iterations() {\n        return this.elementRef.nativeElement.iterations;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineProductIconComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ProductIconComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ProductIconComponent, selector: \"forge-product-icon\", inputs: { color: \"color\", size: \"size\", shadow: \"shadow\", iterations: \"iterations\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ProductIconComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-product-icon',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { color: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], shadow: [{\n                type: Input\n            }], iterations: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeProductIconModule {\n    constructor() {\n        defineProductIconComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProductIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProductIconModule, declarations: [ProductIconComponent], imports: [CommonModule], exports: [ProductIconComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProductIconModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProductIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ProductIconComponent],\n                    exports: [ProductIconComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-profile-card>` custom element. */\nclass ProfileCardComponent {\n    set fullName(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fullName = value;\n        });\n    }\n    get fullName() {\n        return this.elementRef.nativeElement.fullName;\n    }\n    set email(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.email = value;\n        });\n    }\n    get email() {\n        return this.elementRef.nativeElement.email;\n    }\n    set signOut(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.signOut = value != null && `${value}` !== 'false';\n        });\n    }\n    get signOut() {\n        return this.elementRef.nativeElement.signOut;\n    }\n    set profile(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.profile = value != null && `${value}` !== 'false';\n        });\n    }\n    get profile() {\n        return this.elementRef.nativeElement.profile;\n    }\n    set signOutText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.signOutText = value;\n        });\n    }\n    get signOutText() {\n        return this.elementRef.nativeElement.signOutText;\n    }\n    set profileText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.profileText = value;\n        });\n    }\n    get profileText() {\n        return this.elementRef.nativeElement.profileText;\n    }\n    set avatarText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarText = value;\n        });\n    }\n    get avatarText() {\n        return this.elementRef.nativeElement.avatarText;\n    }\n    set avatarIcon(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarIcon = value;\n        });\n    }\n    get avatarIcon() {\n        return this.elementRef.nativeElement.avatarIcon;\n    }\n    set avatarImageUrl(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarImageUrl = value;\n        });\n    }\n    get avatarImageUrl() {\n        return this.elementRef.nativeElement.avatarImageUrl;\n    }\n    set avatarLetterCount(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.avatarLetterCount = +value;\n        });\n    }\n    get avatarLetterCount() {\n        return this.elementRef.nativeElement.avatarLetterCount;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineProfileCardComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ProfileCardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ProfileCardComponent, selector: \"forge-profile-card\", inputs: { fullName: \"fullName\", email: \"email\", signOut: \"signOut\", profile: \"profile\", signOutText: \"signOutText\", profileText: \"profileText\", avatarText: \"avatarText\", avatarIcon: \"avatarIcon\", avatarImageUrl: \"avatarImageUrl\", avatarLetterCount: \"avatarLetterCount\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ProfileCardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-profile-card',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { fullName: [{\n                type: Input\n            }], email: [{\n                type: Input\n            }], signOut: [{\n                type: Input\n            }], profile: [{\n                type: Input\n            }], signOutText: [{\n                type: Input\n            }], profileText: [{\n                type: Input\n            }], avatarText: [{\n                type: Input\n            }], avatarIcon: [{\n                type: Input\n            }], avatarImageUrl: [{\n                type: Input\n            }], avatarLetterCount: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeProfileCardModule {\n    constructor() {\n        defineProfileCardComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProfileCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProfileCardModule, declarations: [ProfileCardComponent], imports: [CommonModule], exports: [ProfileCardComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProfileCardModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeProfileCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ProfileCardComponent],\n                    exports: [ProfileCardComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-quantity-field>` custom element. */\nclass QuantityFieldComponent {\n    /** Gets/sets the invalid state. */\n    set invalid(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';\n        });\n    }\n    get invalid() {\n        return this.elementRef.nativeElement.invalid;\n    }\n    /** Gets/sets the required state which controls the visibility of the asterisk in the label. */\n    set required(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';\n        });\n    }\n    get required() {\n        return this.elementRef.nativeElement.required;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineQuantityFieldComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: QuantityFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: QuantityFieldComponent, selector: \"forge-quantity-field\", inputs: { invalid: \"invalid\", required: \"required\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: QuantityFieldComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-quantity-field',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { invalid: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeQuantityFieldModule {\n    constructor() {\n        defineQuantityFieldComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeQuantityFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeQuantityFieldModule, declarations: [QuantityFieldComponent], imports: [CommonModule], exports: [QuantityFieldComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeQuantityFieldModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeQuantityFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [QuantityFieldComponent],\n                    exports: [QuantityFieldComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-radio>` element. */\nclass RadioComponent {\n    /** Gets/sets whether the radio button is dense. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    syncCheckedState(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.syncCheckedState(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineRadioComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: RadioComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: RadioComponent, selector: \"forge-radio\", inputs: { dense: \"dense\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: RadioComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-radio',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dense: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeRadioModule {\n    constructor() {\n        defineRadioComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRadioModule, declarations: [RadioComponent], imports: [CommonModule], exports: [RadioComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRadioModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [RadioComponent],\n                    exports: [RadioComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-ripple>` custom element. */\nclass RippleComponent {\n    set target(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.target = value;\n        });\n    }\n    get target() {\n        return this.elementRef.nativeElement.target;\n    }\n    set unbounded(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.unbounded = value != null && `${value}` !== 'false';\n        });\n    }\n    get unbounded() {\n        return this.elementRef.nativeElement.unbounded;\n    }\n    layout(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layout(...args));\n    }\n    activate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.activate(...args));\n    }\n    deactivate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deactivate(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineRippleComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: RippleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: RippleComponent, selector: \"forge-ripple\", inputs: { target: \"target\", unbounded: \"unbounded\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: RippleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-ripple',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { target: [{\n                type: Input\n            }], unbounded: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeRippleModule {\n    constructor() {\n        defineRippleComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRippleModule, declarations: [RippleComponent], imports: [CommonModule], exports: [RippleComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRippleModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeRippleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [RippleComponent],\n                    exports: [RippleComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-scaffold>` element. */\nclass ScaffoldComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineScaffoldComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ScaffoldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ScaffoldComponent, selector: \"forge-scaffold\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ScaffoldComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-scaffold',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeScaffoldModule {\n    constructor() {\n        defineScaffoldComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeScaffoldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeScaffoldModule, declarations: [ScaffoldComponent], imports: [CommonModule], exports: [ScaffoldComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeScaffoldModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeScaffoldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ScaffoldComponent],\n                    exports: [ScaffoldComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-select>` component. */\nclass SelectComponent {\n    /** Gets/sets the label text. */\n    set label(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.label = value;\n        });\n    }\n    get label() {\n        return this.elementRef.nativeElement.label;\n    }\n    /** Gets/sets the disabled state. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Gets/sets the invalid state. */\n    set invalid(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';\n        });\n    }\n    get invalid() {\n        return this.elementRef.nativeElement.invalid;\n    }\n    /** Gets/sets the required state which controls the visibility of the asterisk in the label. */\n    set required(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';\n        });\n    }\n    get required() {\n        return this.elementRef.nativeElement.required;\n    }\n    /** Controls the density type. */\n    set density(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.density = value;\n        });\n    }\n    get density() {\n        return this.elementRef.nativeElement.density;\n    }\n    /** Whether the label should always float, never float or float as the user types. */\n    set floatLabelType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.floatLabelType = value;\n        });\n    }\n    get floatLabelType() {\n        return this.elementRef.nativeElement.floatLabelType;\n    }\n    /** The shape type to use. */\n    set shape(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.shape = value;\n        });\n    }\n    get shape() {\n        return this.elementRef.nativeElement.shape;\n    }\n    /** Gets/sets the placeholder text. */\n    set placeholder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.placeholder = value;\n        });\n    }\n    get placeholder() {\n        return this.elementRef.nativeElement.placeholder;\n    }\n    /** Gets/sets the value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the selected index. */\n    set selectedIndex(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedIndex = value;\n        });\n    }\n    get selectedIndex() {\n        return this.elementRef.nativeElement.selectedIndex;\n    }\n    /** Gets/sets the available options. */\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    /** Gets/sets the multiple select state. */\n    set multiple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiple() {\n        return this.elementRef.nativeElement.multiple;\n    }\n    /** Gets the open state of the dropdown. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */\n    set optionBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionBuilder = value;\n        });\n    }\n    get optionBuilder() {\n        return this.elementRef.nativeElement.optionBuilder;\n    }\n    /** Sets the selected text builder callback that will be executed when getting the selected text to display in the field. */\n    set selectedTextBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedTextBuilder = value;\n        });\n    }\n    get selectedTextBuilder() {\n        return this.elementRef.nativeElement.selectedTextBuilder;\n    }\n    /** Sets the callback to be executed when the user selects a value. */\n    set beforeValueChange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.beforeValueChange = value;\n        });\n    }\n    get beforeValueChange() {\n        return this.elementRef.nativeElement.beforeValueChange;\n    }\n    /** Gets the popup element (when the dropdown is open). */\n    set popupElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupElement = value;\n        });\n    }\n    get popupElement() {\n        return this.elementRef.nativeElement.popupElement;\n    }\n    /** Gets/sets the list of classes to apply to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupHeaderBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupHeaderBuilder = value;\n        });\n    }\n    get popupHeaderBuilder() {\n        return this.elementRef.nativeElement.popupHeaderBuilder;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupFooterBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupFooterBuilder = value;\n        });\n    }\n    get popupFooterBuilder() {\n        return this.elementRef.nativeElement.popupFooterBuilder;\n    }\n    /** Gets/sets whether the popup width is synchronized with the popup target width. */\n    set syncPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.syncPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get syncPopupWidth() {\n        return this.elementRef.nativeElement.syncPopupWidth;\n    }\n    /** Gets/sets the maximum number of options to display in the dropdown. */\n    set optionLimit(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionLimit = +value;\n        });\n    }\n    get optionLimit() {\n        return this.elementRef.nativeElement.optionLimit;\n    }\n    /** Controls the observation of scroll events on the dropdown. */\n    set observeScroll(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScroll = value != null && `${value}` !== 'false';\n        });\n    }\n    get observeScroll() {\n        return this.elementRef.nativeElement.observeScroll;\n    }\n    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */\n    set observeScrollThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScrollThreshold = +value;\n        });\n    }\n    get observeScrollThreshold() {\n        return this.elementRef.nativeElement.observeScrollThreshold;\n    }\n    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */\n    set constrainPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.constrainPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get constrainPopupWidth() {\n        return this.elementRef.nativeElement.constrainPopupWidth;\n    }\n    /**\n     * Gets/sets whether the options will wrap their text or not.\n     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.\n     */\n    set wrapOptionText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrapOptionText = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrapOptionText() {\n        return this.elementRef.nativeElement.wrapOptionText;\n    }\n    appendOptions(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.appendOptions(...args));\n    }\n    selectAll(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectAll(...args));\n    }\n    deselectAll(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectAll(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSelectComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SelectComponent, selector: \"forge-select\", inputs: { label: \"label\", disabled: \"disabled\", invalid: \"invalid\", required: \"required\", density: \"density\", floatLabelType: \"floatLabelType\", shape: \"shape\", placeholder: \"placeholder\", value: \"value\", selectedIndex: \"selectedIndex\", options: \"options\", multiple: \"multiple\", open: \"open\", optionBuilder: \"optionBuilder\", selectedTextBuilder: \"selectedTextBuilder\", beforeValueChange: \"beforeValueChange\", popupElement: \"popupElement\", popupClasses: \"popupClasses\", popupHeaderBuilder: \"popupHeaderBuilder\", popupFooterBuilder: \"popupFooterBuilder\", syncPopupWidth: \"syncPopupWidth\", optionLimit: \"optionLimit\", observeScroll: \"observeScroll\", observeScrollThreshold: \"observeScrollThreshold\", constrainPopupWidth: \"constrainPopupWidth\", wrapOptionText: \"wrapOptionText\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-select',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { label: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], density: [{\n                type: Input\n            }], floatLabelType: [{\n                type: Input\n            }], shape: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], optionBuilder: [{\n                type: Input\n            }], selectedTextBuilder: [{\n                type: Input\n            }], beforeValueChange: [{\n                type: Input\n            }], popupElement: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], popupHeaderBuilder: [{\n                type: Input\n            }], popupFooterBuilder: [{\n                type: Input\n            }], syncPopupWidth: [{\n                type: Input\n            }], optionLimit: [{\n                type: Input\n            }], observeScroll: [{\n                type: Input\n            }], observeScrollThreshold: [{\n                type: Input\n            }], constrainPopupWidth: [{\n                type: Input\n            }], wrapOptionText: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSelectProxyModule {\n    constructor() {\n        defineSelectComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectProxyModule, declarations: [SelectComponent], imports: [CommonModule, ForgeOptionModule], exports: [SelectComponent, ForgeOptionModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectProxyModule, imports: [CommonModule, ForgeOptionModule, ForgeOptionModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeOptionModule],\n                    declarations: [SelectComponent],\n                    exports: [SelectComponent, ForgeOptionModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectValueAccessor),\n    multi: true\n};\nclass SelectValueAccessor {\n    selectChange(event) {\n        this.change(event.target.value);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SelectValueAccessor, selector: \"forge-select[formControlName],forge-select[formControl],forge-select[ngModel]\", host: { listeners: { \"change\": \"selectChange($event)\", \"blur\": \"blur()\" } }, providers: [SELECT_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-select[formControlName],forge-select[formControl],forge-select[ngModel]',\n                    providers: [SELECT_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { selectChange: [{\n                type: HostListener,\n                args: ['change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass ForgeSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectModule, declarations: [SelectValueAccessor], exports: [SelectValueAccessor,\n            ForgeSelectProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectModule, imports: [ForgeSelectProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SelectValueAccessor\n                    ],\n                    exports: [\n                        SelectValueAccessor,\n                        ForgeSelectProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-select-dropdown>` custom element. */\nclass SelectDropdownComponent {\n    /** Sets the target element CSS selector */\n    set target(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.target = value;\n        });\n    }\n    get target() {\n        return this.elementRef.nativeElement.target;\n    }\n    /** Sets the selected text element CSS selector */\n    set selectedTextTarget(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedTextTarget = value;\n        });\n    }\n    get selectedTextTarget() {\n        return this.elementRef.nativeElement.selectedTextTarget;\n    }\n    /** Controls whether the selected text is synchronized to the target elements' text content. Default is false. */\n    set syncSelectedText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.syncSelectedText = value != null && `${value}` !== 'false';\n        });\n    }\n    get syncSelectedText() {\n        return this.elementRef.nativeElement.syncSelectedText;\n    }\n    /** Gets/sets the value. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the selected index. */\n    set selectedIndex(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedIndex = value;\n        });\n    }\n    get selectedIndex() {\n        return this.elementRef.nativeElement.selectedIndex;\n    }\n    /** Gets/sets the available options. */\n    set options(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.options = value;\n        });\n    }\n    get options() {\n        return this.elementRef.nativeElement.options;\n    }\n    /** Gets/sets the multiple select state. */\n    set multiple(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiple = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiple() {\n        return this.elementRef.nativeElement.multiple;\n    }\n    /** Gets the open state of the dropdown. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */\n    set optionBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionBuilder = value;\n        });\n    }\n    get optionBuilder() {\n        return this.elementRef.nativeElement.optionBuilder;\n    }\n    /** Sets the selected text builder callback that will be executed when getting the selected text to display in the field. */\n    set selectedTextBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedTextBuilder = value;\n        });\n    }\n    get selectedTextBuilder() {\n        return this.elementRef.nativeElement.selectedTextBuilder;\n    }\n    /** Sets the callback to be executed when the user selects a value. */\n    set beforeValueChange(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.beforeValueChange = value;\n        });\n    }\n    get beforeValueChange() {\n        return this.elementRef.nativeElement.beforeValueChange;\n    }\n    /** Gets the popup element (when the dropdown is open). */\n    set popupElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupElement = value;\n        });\n    }\n    get popupElement() {\n        return this.elementRef.nativeElement.popupElement;\n    }\n    /** Gets/sets the list of classes to apply to the popup element. */\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupHeaderBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupHeaderBuilder = value;\n        });\n    }\n    get popupHeaderBuilder() {\n        return this.elementRef.nativeElement.popupHeaderBuilder;\n    }\n    /** Gets/sets the callback function for generating header content within the popup. */\n    set popupFooterBuilder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupFooterBuilder = value;\n        });\n    }\n    get popupFooterBuilder() {\n        return this.elementRef.nativeElement.popupFooterBuilder;\n    }\n    /** Gets/sets whether the popup width is synchronized with the popup target width. */\n    set syncPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.syncPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get syncPopupWidth() {\n        return this.elementRef.nativeElement.syncPopupWidth;\n    }\n    /** Gets/sets the maximum number of options to display in the dropdown. */\n    set optionLimit(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.optionLimit = +value;\n        });\n    }\n    get optionLimit() {\n        return this.elementRef.nativeElement.optionLimit;\n    }\n    /** Controls the observation of scroll events on the dropdown. */\n    set observeScroll(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScroll = value != null && `${value}` !== 'false';\n        });\n    }\n    get observeScroll() {\n        return this.elementRef.nativeElement.observeScroll;\n    }\n    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */\n    set observeScrollThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.observeScrollThreshold = +value;\n        });\n    }\n    get observeScrollThreshold() {\n        return this.elementRef.nativeElement.observeScrollThreshold;\n    }\n    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */\n    set constrainPopupWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.constrainPopupWidth = value != null && `${value}` !== 'false';\n        });\n    }\n    get constrainPopupWidth() {\n        return this.elementRef.nativeElement.constrainPopupWidth;\n    }\n    /**\n     * Gets/sets whether the options will wrap their text or not.\n     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.\n     */\n    set wrapOptionText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrapOptionText = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrapOptionText() {\n        return this.elementRef.nativeElement.wrapOptionText;\n    }\n    appendOptions(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.appendOptions(...args));\n    }\n    selectAll(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectAll(...args));\n    }\n    deselectAll(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectAll(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSelectDropdownComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectDropdownComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SelectDropdownComponent, selector: \"forge-select-dropdown\", inputs: { target: \"target\", selectedTextTarget: \"selectedTextTarget\", syncSelectedText: \"syncSelectedText\", value: \"value\", selectedIndex: \"selectedIndex\", options: \"options\", multiple: \"multiple\", open: \"open\", optionBuilder: \"optionBuilder\", selectedTextBuilder: \"selectedTextBuilder\", beforeValueChange: \"beforeValueChange\", popupElement: \"popupElement\", popupClasses: \"popupClasses\", popupHeaderBuilder: \"popupHeaderBuilder\", popupFooterBuilder: \"popupFooterBuilder\", syncPopupWidth: \"syncPopupWidth\", optionLimit: \"optionLimit\", observeScroll: \"observeScroll\", observeScrollThreshold: \"observeScrollThreshold\", constrainPopupWidth: \"constrainPopupWidth\", wrapOptionText: \"wrapOptionText\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SelectDropdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-select-dropdown',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { target: [{\n                type: Input\n            }], selectedTextTarget: [{\n                type: Input\n            }], syncSelectedText: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], optionBuilder: [{\n                type: Input\n            }], selectedTextBuilder: [{\n                type: Input\n            }], beforeValueChange: [{\n                type: Input\n            }], popupElement: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], popupHeaderBuilder: [{\n                type: Input\n            }], popupFooterBuilder: [{\n                type: Input\n            }], syncPopupWidth: [{\n                type: Input\n            }], optionLimit: [{\n                type: Input\n            }], observeScroll: [{\n                type: Input\n            }], observeScrollThreshold: [{\n                type: Input\n            }], constrainPopupWidth: [{\n                type: Input\n            }], wrapOptionText: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSelectDropdownModule {\n    constructor() {\n        defineSelectDropdownComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectDropdownModule, declarations: [SelectDropdownComponent], imports: [CommonModule], exports: [SelectDropdownComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectDropdownModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSelectDropdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SelectDropdownComponent],\n                    exports: [SelectDropdownComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-skeleton>` custom element. */\nclass SkeletonComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSkeletonComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SkeletonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SkeletonComponent, selector: \"forge-skeleton\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SkeletonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-skeleton',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSkeletonModule {\n    constructor() {\n        defineSkeletonComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSkeletonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSkeletonModule, declarations: [SkeletonComponent], imports: [CommonModule], exports: [SkeletonComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSkeletonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSkeletonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SkeletonComponent],\n                    exports: [SkeletonComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-slider>` component. */\nclass SliderComponent {\n    /** Gets/sets the type of slider this is: `continuous` (default), `discrete`, `discrete-markers` */\n    set type(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.type = value;\n        });\n    }\n    get type() {\n        return this.elementRef.nativeElement.type;\n    }\n    /** Gets/sets the value of the slider. */\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = +value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    /** Gets/sets the start value of the slider (only applicable for range sliders). */\n    set valueStart(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.valueStart = +value;\n        });\n    }\n    get valueStart() {\n        return this.elementRef.nativeElement.valueStart;\n    }\n    /** Gets/sets the minimum value for the slider. */\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = +value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    /** Gets/sets the maximum value for the slider. */\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = +value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    /** Gets/sets the step value for the slider when in discrete mode. */\n    set step(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.step = +value;\n        });\n    }\n    get step() {\n        return this.elementRef.nativeElement.step;\n    }\n    /** Gets/sets the disabled state of the slider. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSliderComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SliderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SliderComponent, selector: \"forge-slider\", inputs: { type: \"type\", value: \"value\", valueStart: \"valueStart\", min: \"min\", max: \"max\", step: \"step\", disabled: \"disabled\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SliderComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-slider',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { type: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueStart: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSliderProxyModule {\n    constructor() {\n        defineSliderComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderProxyModule, declarations: [SliderComponent], imports: [CommonModule], exports: [SliderComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SliderComponent],\n                    exports: [SliderComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderValueAccessor),\n    multi: true\n};\nclass SliderValueAccessor {\n    sliderChange(event) {\n        this.change(event.detail.value);\n    }\n    sliderInput(event) {\n        this.change(event.detail.value);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', this._toFloat(value));\n    }\n    registerOnChange(fn) {\n        this.onChange = value => fn(value === '' ? null : this._toFloat(value));\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    _toFloat(value) {\n        if (value === null || value === undefined) {\n            return 0;\n        }\n        const parsedValue = parseFloat(value);\n        if (isNaN(parsedValue) || typeof parsedValue !== 'number') {\n            return 0;\n        }\n        return parsedValue;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SliderValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SliderValueAccessor, selector: \"forge-slider[formControlName],forge-slider[formControl],forge-slider[ngModel]\", host: { listeners: { \"forge-slider-change\": \"sliderChange($event)\", \"forge-slider-input\": \"sliderInput($event)\", \"blur\": \"blur()\" } }, providers: [SLIDER_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SliderValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-slider[formControlName],forge-slider[formControl],forge-slider[ngModel]',\n                    providers: [SLIDER_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { sliderChange: [{\n                type: HostListener,\n                args: ['forge-slider-change', ['$event']]\n            }], sliderInput: [{\n                type: HostListener,\n                args: ['forge-slider-input', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass ForgeSliderModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderModule, declarations: [SliderValueAccessor], exports: [SliderValueAccessor,\n            ForgeSliderProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderModule, imports: [ForgeSliderProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSliderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SliderValueAccessor\n                    ],\n                    exports: [\n                        SliderValueAccessor,\n                        ForgeSliderProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-split-view>` element. */\nclass SplitViewComponent {\n    /** Whether child split view panels are laid out and resize horizontally or vertically. */\n    set orientation(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.orientation = value;\n        });\n    }\n    get orientation() {\n        return this.elementRef.nativeElement.orientation;\n    }\n    /** Whether child split view panels have resize interactions disabled or enabled. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Whether child split view panels can be closed via keyboard interaction. */\n    set allowClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowClose() {\n        return this.elementRef.nativeElement.allowClose;\n    }\n    /** Whether child split view panels automatically close when they reach a size of 0. */\n    set autoClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get autoClose() {\n        return this.elementRef.nativeElement.autoClose;\n    }\n    /** The size at which panels auto close. */\n    set autoCloseThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoCloseThreshold = +value;\n        });\n    }\n    get autoCloseThreshold() {\n        return this.elementRef.nativeElement.autoCloseThreshold;\n    }\n    /** Arranges split view panels to avoid overlapping during animations. */\n    layerSlottedPanels(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.layerSlottedPanels(...args));\n    }\n    /** Removes presentation data set during an animation. */\n    unlayerSlottedPanels(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.unlayerSlottedPanels(...args));\n    }\n    /** Updates the provided characteristics of each slotted panel. */\n    update(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.update(...args));\n    }\n    /** Resizes panels within the split view to avoid overflow. */\n    refit(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.refit(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSplitViewComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SplitViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SplitViewComponent, selector: \"forge-split-view\", inputs: { orientation: \"orientation\", disabled: \"disabled\", allowClose: \"allowClose\", autoClose: \"autoClose\", autoCloseThreshold: \"autoCloseThreshold\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SplitViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-split-view',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], allowClose: [{\n                type: Input\n            }], autoClose: [{\n                type: Input\n            }], autoCloseThreshold: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-split-view-panel>` element. */\nclass SplitViewPanelComponent {\n    /** Controls which side of the panel the resize handle appears on. */\n    set resizable(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.resizable = value;\n        });\n    }\n    get resizable() {\n        return this.elementRef.nativeElement.resizable;\n    }\n    /** The initial size along the axis of orientation. */\n    set size(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.size = value;\n        });\n    }\n    get size() {\n        return this.elementRef.nativeElement.size;\n    }\n    /** The smallest size the panel can take along its axis of orientation. */\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    /** The largest size the panel can take along its axis of orientation. */\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    /** The ARIA label given to the resize handle. */\n    set accessibleLabel(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.accessibleLabel = value;\n        });\n    }\n    get accessibleLabel() {\n        return this.elementRef.nativeElement.accessibleLabel;\n    }\n    /** Controls the open state of the panel. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    /** Whether resize interactions are disabled or enabled. */\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value;\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    /** Whether the panel can be closed via keyboard interaction. */\n    set allowClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowClose = value;\n        });\n    }\n    get allowClose() {\n        return this.elementRef.nativeElement.allowClose;\n    }\n    /** Whether the panel automatically closes when it reaches a size of 0. */\n    set autoClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoClose = value;\n        });\n    }\n    get autoClose() {\n        return this.elementRef.nativeElement.autoClose;\n    }\n    /** The size at which the panel auto closes. */\n    set autoCloseThreshold(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoCloseThreshold = value;\n        });\n    }\n    get autoCloseThreshold() {\n        return this.elementRef.nativeElement.autoCloseThreshold;\n    }\n    /** Gets the size of content along the axis of orientation. */\n    getContentSize(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.getContentSize(...args));\n    }\n    /**\n     * Gets the amount that the content can shrink along the axis of orientation before reaching its\n     * min size.\n     */\n    getCollapsibleSize(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.getCollapsibleSize(...args));\n    }\n    /** Sets the size of content along the axis of orientation. */\n    setContentSize(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.setContentSize(...args));\n    }\n    /** Updates the provided characteristics. */\n    update(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.update(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSplitViewPanelComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SplitViewPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SplitViewPanelComponent, selector: \"forge-split-view-panel\", inputs: { resizable: \"resizable\", size: \"size\", min: \"min\", max: \"max\", accessibleLabel: \"accessibleLabel\", open: \"open\", disabled: \"disabled\", allowClose: \"allowClose\", autoClose: \"autoClose\", autoCloseThreshold: \"autoCloseThreshold\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SplitViewPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-split-view-panel',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { resizable: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], accessibleLabel: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], allowClose: [{\n                type: Input\n            }], autoClose: [{\n                type: Input\n            }], autoCloseThreshold: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSplitViewPanelModule {\n    constructor() {\n        defineSplitViewPanelComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewPanelModule, declarations: [SplitViewPanelComponent], imports: [CommonModule], exports: [SplitViewPanelComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewPanelModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewPanelModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SplitViewPanelComponent],\n                    exports: [SplitViewPanelComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSplitViewModule {\n    constructor() {\n        defineSplitViewComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewModule, declarations: [SplitViewComponent], imports: [CommonModule, ForgeSplitViewPanelModule], exports: [SplitViewComponent, ForgeSplitViewPanelModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewModule, imports: [CommonModule, ForgeSplitViewPanelModule, ForgeSplitViewPanelModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSplitViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeSplitViewPanelModule],\n                    declarations: [SplitViewComponent],\n                    exports: [SplitViewComponent, ForgeSplitViewPanelModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-stack>` component. */\nclass StackComponent {\n    /** Controls the direction of the stack. */\n    set inline(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.inline = value != null && `${value}` !== 'false';\n        });\n    }\n    get inline() {\n        return this.elementRef.nativeElement.inline;\n    }\n    /** Controls if items wrap to a new line in inline mode */\n    set wrap(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrap = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrap() {\n        return this.elementRef.nativeElement.wrap;\n    }\n    /** Controls if items stretch and take up the maximum amount of space */\n    set stretch(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.stretch = value != null && `${value}` !== 'false';\n        });\n    }\n    get stretch() {\n        return this.elementRef.nativeElement.stretch;\n    }\n    /** Controls the gap between the children within the stack */\n    set gap(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.gap = value;\n        });\n    }\n    get gap() {\n        return this.elementRef.nativeElement.gap;\n    }\n    /** Controls if stack items are at the end of the row or column */\n    set alignment(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.alignment = value;\n        });\n    }\n    get alignment() {\n        return this.elementRef.nativeElement.alignment;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineStackComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StackComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: StackComponent, selector: \"forge-stack\", inputs: { inline: \"inline\", wrap: \"wrap\", stretch: \"stretch\", gap: \"gap\", alignment: \"alignment\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StackComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-stack',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { inline: [{\n                type: Input\n            }], wrap: [{\n                type: Input\n            }], stretch: [{\n                type: Input\n            }], gap: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeStackModule {\n    constructor() {\n        defineStackComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStackModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStackModule, declarations: [StackComponent], imports: [CommonModule], exports: [StackComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStackModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStackModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [StackComponent],\n                    exports: [StackComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-step>` custom element. */\nclass StepComponent {\n    set alternative(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.alternative = value != null && `${value}` !== 'false';\n        });\n    }\n    get alternative() {\n        return this.elementRef.nativeElement.alternative;\n    }\n    set index(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.index = +value;\n        });\n    }\n    get index() {\n        return this.elementRef.nativeElement.index;\n    }\n    set editable(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.editable = value != null && `${value}` !== 'false';\n        });\n    }\n    get editable() {\n        return this.elementRef.nativeElement.editable;\n    }\n    set completed(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.completed = value != null && `${value}` !== 'false';\n        });\n    }\n    get completed() {\n        return this.elementRef.nativeElement.completed;\n    }\n    set error(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.error = value != null && `${value}` !== 'false';\n        });\n    }\n    get error() {\n        return this.elementRef.nativeElement.error;\n    }\n    set selected(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';\n        });\n    }\n    get selected() {\n        return this.elementRef.nativeElement.selected;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set vertical(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.vertical = value != null && `${value}` !== 'false';\n        });\n    }\n    get vertical() {\n        return this.elementRef.nativeElement.vertical;\n    }\n    set expanded(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.expanded = value != null && `${value}` !== 'false';\n        });\n    }\n    get expanded() {\n        return this.elementRef.nativeElement.expanded;\n    }\n    set ignoreUserExpansion(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.ignoreUserExpansion = value != null && `${value}` !== 'false';\n        });\n    }\n    get ignoreUserExpansion() {\n        return this.elementRef.nativeElement.ignoreUserExpansion;\n    }\n    focus(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));\n    }\n    setStepTabIndex(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.setStepTabIndex(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineStepComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StepComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: StepComponent, selector: \"forge-step\", inputs: { alternative: \"alternative\", index: \"index\", editable: \"editable\", completed: \"completed\", error: \"error\", selected: \"selected\", disabled: \"disabled\", vertical: \"vertical\", expanded: \"expanded\", ignoreUserExpansion: \"ignoreUserExpansion\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StepComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-step',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { alternative: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], editable: [{\n                type: Input\n            }], completed: [{\n                type: Input\n            }], error: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], ignoreUserExpansion: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeStepModule {\n    constructor() {\n        defineStepComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepModule, declarations: [StepComponent], imports: [CommonModule], exports: [StepComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [StepComponent],\n                    exports: [StepComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-stepper>` custom element. */\nclass StepperComponent {\n    /** The step configurations. */\n    set steps(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.steps = value;\n        });\n    }\n    get steps() {\n        return this.elementRef.nativeElement.steps;\n    }\n    /** The active step index. */\n    set selectedIndex(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectedIndex = +value;\n        });\n    }\n    get selectedIndex() {\n        return this.elementRef.nativeElement.selectedIndex;\n    }\n    /** Whether the stepper is linear or non-linear. */\n    set linear(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.linear = value != null && `${value}` !== 'false';\n        });\n    }\n    get linear() {\n        return this.elementRef.nativeElement.linear;\n    }\n    /** Whether the stepper uses the default or alternative label layout mode. */\n    set alternative(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.alternative = value != null && `${value}` !== 'false';\n        });\n    }\n    get alternative() {\n        return this.elementRef.nativeElement.alternative;\n    }\n    /** The layout mode of the stepper. */\n    set layoutMode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.layoutMode = value;\n        });\n    }\n    get layoutMode() {\n        return this.elementRef.nativeElement.layoutMode;\n    }\n    /** The layout alignment of the stepper. */\n    set layoutAlign(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.layoutAlign = value;\n        });\n    }\n    get layoutAlign() {\n        return this.elementRef.nativeElement.layoutAlign;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set vertical(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.vertical = value != null && `${value}` !== 'false';\n        });\n    }\n    get vertical() {\n        return this.elementRef.nativeElement.vertical;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineStepperComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StepperComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: StepperComponent, selector: \"forge-stepper\", inputs: { steps: \"steps\", selectedIndex: \"selectedIndex\", linear: \"linear\", alternative: \"alternative\", layoutMode: \"layoutMode\", layoutAlign: \"layoutAlign\", disabled: \"disabled\", vertical: \"vertical\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: StepperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-stepper',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { steps: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], linear: [{\n                type: Input\n            }], alternative: [{\n                type: Input\n            }], layoutMode: [{\n                type: Input\n            }], layoutAlign: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeStepperModule {\n    constructor() {\n        defineStepperComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepperModule, declarations: [StepperComponent], imports: [CommonModule, ForgeStepModule], exports: [StepperComponent, ForgeStepModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepperModule, imports: [CommonModule, ForgeStepModule, ForgeStepModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeStepperModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeStepModule],\n                    declarations: [StepperComponent],\n                    exports: [StepperComponent, ForgeStepModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-switch>` element. */\nclass SwitchComponent {\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set selected(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selected = value != null && `${value}` !== 'false';\n        });\n    }\n    get selected() {\n        return this.elementRef.nativeElement.selected;\n    }\n    set labelPosition(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.labelPosition = value;\n        });\n    }\n    get labelPosition() {\n        return this.elementRef.nativeElement.labelPosition;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineSwitchComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwitchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SwitchComponent, selector: \"forge-switch\", inputs: { dense: \"dense\", disabled: \"disabled\", selected: \"selected\", labelPosition: \"labelPosition\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwitchComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-switch',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dense: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeSwitchProxyModule {\n    constructor() {\n        defineSwitchComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchProxyModule, declarations: [SwitchComponent], imports: [CommonModule], exports: [SwitchComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SwitchComponent],\n                    exports: [SwitchComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst SWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SwitchValueAccessor),\n    multi: true\n};\nclass SwitchValueAccessor {\n    switchChange(evt) {\n        this.change(evt.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'selected', !!value);\n    }\n    registerOnChange(fn) {\n        this.onChange = value => fn(value);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', value);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwitchValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: SwitchValueAccessor, selector: \"forge-switch[formControlName],forge-switch[formControl],forge-switch[ngModel]\", host: { listeners: { \"forge-switch-select\": \"switchChange($event)\", \"blur\": \"blur()\" } }, providers: [SWITCH_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SwitchValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-switch[formControlName],forge-switch[formControl],forge-switch[ngModel]',\n                    providers: [SWITCH_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { switchChange: [{\n                type: HostListener,\n                args: ['forge-switch-select', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass ForgeSwitchModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchModule, declarations: [SwitchValueAccessor], exports: [SwitchValueAccessor,\n            ForgeSwitchProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchModule, imports: [ForgeSwitchProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeSwitchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        SwitchValueAccessor\n                    ],\n                    exports: [\n                        SwitchValueAccessor,\n                        ForgeSwitchProxyModule\n                    ]\n                }]\n        }] });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-tab>` custom element. */\nclass TabComponent {\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set active(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.active = value != null && `${value}` !== 'false';\n        });\n    }\n    get active() {\n        return this.elementRef.nativeElement.active;\n    }\n    set stretch(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.stretch = value != null && `${value}` !== 'false';\n        });\n    }\n    get stretch() {\n        return this.elementRef.nativeElement.stretch;\n    }\n    activate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.activate(...args));\n    }\n    deactivate(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deactivate(...args));\n    }\n    computeIndicatorBounds(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.computeIndicatorBounds(...args));\n    }\n    computeDimensions(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.computeDimensions(...args));\n    }\n    focus(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.focus(...args));\n    }\n    setTabIndex(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.setTabIndex(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTabComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TabComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TabComponent, selector: \"forge-tab\", inputs: { disabled: \"disabled\", active: \"active\", stretch: \"stretch\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TabComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-tab',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], active: [{\n                type: Input\n            }], stretch: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTabModule {\n    constructor() {\n        defineTabComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabModule, declarations: [TabComponent], imports: [CommonModule], exports: [TabComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TabComponent],\n                    exports: [TabComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-tab-bar>` element. */\nclass TabBarComponent {\n    /** Gets and sets the active tab index. */\n    set activeTab(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.activeTab = +value;\n        });\n    }\n    get activeTab() {\n        return this.elementRef.nativeElement.activeTab;\n    }\n    /** Gets/sets the layout mode that controls how the tabs are sized and rendered. */\n    set layoutMode(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.layoutMode = value;\n        });\n    }\n    get layoutMode() {\n        return this.elementRef.nativeElement.layoutMode;\n    }\n    /** Gets/sets the layout alignment. Only pertains to non-full width layout modes. */\n    set layoutAlign(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.layoutAlign = value;\n        });\n    }\n    get layoutAlign() {\n        return this.elementRef.nativeElement.layoutAlign;\n    }\n    /** Gets/sets whether the component displays an underline or not. Default is `false`. */\n    set underline(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.underline = value != null && `${value}` !== 'false';\n        });\n    }\n    get underline() {\n        return this.elementRef.nativeElement.underline;\n    }\n    /** Gets/sets whether tabs are auto-activated when using arrow keys. Default is `true` */\n    set autoActivate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.autoActivate = value != null && `${value}` !== 'false';\n        });\n    }\n    get autoActivate() {\n        return this.elementRef.nativeElement.autoActivate;\n    }\n    /** Gets/sets whether the tabs are displayed with as their stacked variant. Default is `false`. */\n    set stacked(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.stacked = value != null && `${value}` !== 'false';\n        });\n    }\n    get stacked() {\n        return this.elementRef.nativeElement.stacked;\n    }\n    /** Gets/sets whether the scroll buttons can be displayed or not. Default is `true`. The component handles visibility automatically. */\n    set scrollButtons(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.scrollButtons = value != null && `${value}` !== 'false';\n        });\n    }\n    get scrollButtons() {\n        return this.elementRef.nativeElement.scrollButtons;\n    }\n    /** Gets/sets whether the scroll buttons are visible indefinitely or not. Default is `false`. */\n    set forceScrollButtons(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.forceScrollButtons = value != null && `${value}` !== 'false';\n        });\n    }\n    get forceScrollButtons() {\n        return this.elementRef.nativeElement.forceScrollButtons;\n    }\n    /** Activates the tab at the given index. */\n    activateTab(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.activateTab(...args));\n    }\n    /** Scrolls the tab at the given index into view. */\n    scrollTabIntoView(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.scrollTabIntoView(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTabBarComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TabBarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TabBarComponent, selector: \"forge-tab-bar\", inputs: { activeTab: \"activeTab\", layoutMode: \"layoutMode\", layoutAlign: \"layoutAlign\", underline: \"underline\", autoActivate: \"autoActivate\", stacked: \"stacked\", scrollButtons: \"scrollButtons\", forceScrollButtons: \"forceScrollButtons\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TabBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-tab-bar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { activeTab: [{\n                type: Input\n            }], layoutMode: [{\n                type: Input\n            }], layoutAlign: [{\n                type: Input\n            }], underline: [{\n                type: Input\n            }], autoActivate: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], scrollButtons: [{\n                type: Input\n            }], forceScrollButtons: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTabBarModule {\n    constructor() {\n        defineTabBarComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabBarModule, declarations: [TabBarComponent], imports: [CommonModule, ForgeTabModule], exports: [TabBarComponent, ForgeTabModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabBarModule, imports: [CommonModule, ForgeTabModule, ForgeTabModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTabBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeTabModule],\n                    declarations: [TabBarComponent],\n                    exports: [TabBarComponent, ForgeTabModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-table>` component. */\nclass TableComponent {\n    /** The data to be display in the table body. */\n    set data(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.data = value;\n        });\n    }\n    get data() {\n        return this.elementRef.nativeElement.data;\n    }\n    /** The column configuration options. */\n    set columnConfigurations(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.columnConfigurations = value;\n        });\n    }\n    get columnConfigurations() {\n        return this.elementRef.nativeElement.columnConfigurations;\n    }\n    /** Controls the visibility of the select column. */\n    set select(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.select = value != null && `${value}` !== 'false';\n        });\n    }\n    get select() {\n        return this.elementRef.nativeElement.select;\n    }\n    /** Controls the visibility of the select all checkbox (only applied when `select` is `true`). */\n    set multiselect(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiselect = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiselect() {\n        return this.elementRef.nativeElement.multiselect;\n    }\n    /** The row key for matching data to selections. */\n    set selectKey(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectKey = value;\n        });\n    }\n    get selectKey() {\n        return this.elementRef.nativeElement.selectKey;\n    }\n    set tooltipSelect(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.tooltipSelect = value;\n        });\n    }\n    get tooltipSelect() {\n        return this.elementRef.nativeElement.tooltipSelect;\n    }\n    set tooltipSelectAll(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.tooltipSelectAll = value;\n        });\n    }\n    get tooltipSelectAll() {\n        return this.elementRef.nativeElement.tooltipSelectAll;\n    }\n    /** Controls whether the table is dense or not. False by default. */\n    set dense(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.dense = value != null && `${value}` !== 'false';\n        });\n    }\n    get dense() {\n        return this.elementRef.nativeElement.dense;\n    }\n    /** Controls whether the table is roomy or not. False by default. */\n    set roomy(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.roomy = value != null && `${value}` !== 'false';\n        });\n    }\n    get roomy() {\n        return this.elementRef.nativeElement.roomy;\n    }\n    /** Controls whether the table filters are visible or not. */\n    set filter(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.filter = value != null && `${value}` !== 'false';\n        });\n    }\n    get filter() {\n        return this.elementRef.nativeElement.filter;\n    }\n    /** Controls whether the table applies fixed headers when in scroll containers. */\n    set fixedHeaders(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.fixedHeaders = value != null && `${value}` !== 'false';\n        });\n    }\n    get fixedHeaders() {\n        return this.elementRef.nativeElement.fixedHeaders;\n    }\n    /** Controls the table layout algorithm. */\n    set layoutType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.layoutType = value;\n        });\n    }\n    get layoutType() {\n        return this.elementRef.nativeElement.layoutType;\n    }\n    /** Controls whether the content in each cell wraps or not (true by default). */\n    set wrapContent(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.wrapContent = value != null && `${value}` !== 'false';\n        });\n    }\n    get wrapContent() {\n        return this.elementRef.nativeElement.wrapContent;\n    }\n    /** Controls whether the columns are resizable or not. */\n    set resizable(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.resizable = value != null && `${value}` !== 'false';\n        });\n    }\n    get resizable() {\n        return this.elementRef.nativeElement.resizable;\n    }\n    /** Gets/sets the minimum width that a column can be resized to by the user dragging the resize handle. */\n    set minResizeWidth(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.minResizeWidth = +value;\n        });\n    }\n    get minResizeWidth() {\n        return this.elementRef.nativeElement.minResizeWidth;\n    }\n    /** Gets/sets whether the rows respond to (and emit) row click events. */\n    set allowRowClick(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowRowClick = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowRowClick() {\n        return this.elementRef.nativeElement.allowRowClick;\n    }\n    set multiColumnSort(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.multiColumnSort = value != null && `${value}` !== 'false';\n        });\n    }\n    get multiColumnSort() {\n        return this.elementRef.nativeElement.multiColumnSort;\n    }\n    set rowCreated(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.rowCreated = value;\n        });\n    }\n    get rowCreated() {\n        return this.elementRef.nativeElement.rowCreated;\n    }\n    set cellCreated(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.cellCreated = value;\n        });\n    }\n    get cellCreated() {\n        return this.elementRef.nativeElement.cellCreated;\n    }\n    set selectAllTemplate(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectAllTemplate = value;\n        });\n    }\n    get selectAllTemplate() {\n        return this.elementRef.nativeElement.selectAllTemplate;\n    }\n    set selectCheckboxAlignment(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.selectCheckboxAlignment = value;\n        });\n    }\n    get selectCheckboxAlignment() {\n        return this.elementRef.nativeElement.selectCheckboxAlignment;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    /** Hides a column from the table. */\n    hideColumn(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.hideColumn(...args));\n    }\n    /** Shows a hidden column in th table. */\n    showColumn(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.showColumn(...args));\n    }\n    /** Determines if a column at the given index is hidden or not. */\n    isColumnHidden(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.isColumnHidden(...args));\n    }\n    /** Returns the selected row instances. */\n    getSelectedRows(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.getSelectedRows(...args));\n    }\n    /** Selects a row in the table. Only applicable if `select` is true. */\n    selectRow(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectRow(...args));\n    }\n    /** Selects one or more rows in the table. Only applicable if `select` is true. */\n    selectRows(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectRows(...args));\n    }\n    /** Deselects a single row in the table. */\n    deselectRow(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectRow(...args));\n    }\n    /** Deselects one or more rows in the table. */\n    deselectRows(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectRows(...args));\n    }\n    /** Clears all selected table rows. */\n    clearSelections(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.clearSelections(...args));\n    }\n    /** Forces the table to re-render based on its current configuration. */\n    render(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.render(...args));\n    }\n    /** Expands a collapsed row. */\n    expandRow(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.expandRow(...args));\n    }\n    /** Collapses an expanded row. */\n    collapseRow(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.collapseRow(...args));\n    }\n    /** Checks if a row is expanded or not. */\n    isRowExpanded(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.isRowExpanded(...args));\n    }\n    /** Selects a rows by an index or array of indexes. */\n    selectRowsByIndex(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.selectRowsByIndex(...args));\n    }\n    /** Deselects a rows by an index or array of indexes. */\n    deselectRowsByIndex(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.deselectRowsByIndex(...args));\n    }\n    /** Checks if a row is selected or not. */\n    isRowSelected(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.isRowSelected(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTableComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TableComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TableComponent, selector: \"forge-table\", inputs: { data: \"data\", columnConfigurations: \"columnConfigurations\", select: \"select\", multiselect: \"multiselect\", selectKey: \"selectKey\", tooltipSelect: \"tooltipSelect\", tooltipSelectAll: \"tooltipSelectAll\", dense: \"dense\", roomy: \"roomy\", filter: \"filter\", fixedHeaders: \"fixedHeaders\", layoutType: \"layoutType\", wrapContent: \"wrapContent\", resizable: \"resizable\", minResizeWidth: \"minResizeWidth\", allowRowClick: \"allowRowClick\", multiColumnSort: \"multiColumnSort\", rowCreated: \"rowCreated\", cellCreated: \"cellCreated\", selectAllTemplate: \"selectAllTemplate\", selectCheckboxAlignment: \"selectCheckboxAlignment\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TableComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-table',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input\n            }], columnConfigurations: [{\n                type: Input\n            }], select: [{\n                type: Input\n            }], multiselect: [{\n                type: Input\n            }], selectKey: [{\n                type: Input\n            }], tooltipSelect: [{\n                type: Input\n            }], tooltipSelectAll: [{\n                type: Input\n            }], dense: [{\n                type: Input\n            }], roomy: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], fixedHeaders: [{\n                type: Input\n            }], layoutType: [{\n                type: Input\n            }], wrapContent: [{\n                type: Input\n            }], resizable: [{\n                type: Input\n            }], minResizeWidth: [{\n                type: Input\n            }], allowRowClick: [{\n                type: Input\n            }], multiColumnSort: [{\n                type: Input\n            }], rowCreated: [{\n                type: Input\n            }], cellCreated: [{\n                type: Input\n            }], selectAllTemplate: [{\n                type: Input\n            }], selectCheckboxAlignment: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTableModule {\n    constructor() {\n        defineTableComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTableModule, declarations: [TableComponent], imports: [CommonModule], exports: [TableComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTableModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TableComponent],\n                    exports: [TableComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-text-field>` custom element. */\nclass TextFieldComponent {\n    /** Controls the density type. */\n    set density(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.density = value;\n        });\n    }\n    get density() {\n        return this.elementRef.nativeElement.density;\n    }\n    /** Whether the label should always float, never float or float as the user types. */\n    set floatLabelType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.floatLabelType = value;\n        });\n    }\n    get floatLabelType() {\n        return this.elementRef.nativeElement.floatLabelType;\n    }\n    /** The shape type to use. */\n    set shape(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.shape = value;\n        });\n    }\n    get shape() {\n        return this.elementRef.nativeElement.shape;\n    }\n    /** Gets/sets the invalid state. */\n    set invalid(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.invalid = value != null && `${value}` !== 'false';\n        });\n    }\n    get invalid() {\n        return this.elementRef.nativeElement.invalid;\n    }\n    /** Gets/sets the required state which controls the visibility of the asterisk in the label. */\n    set required(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.required = value != null && `${value}` !== 'false';\n        });\n    }\n    get required() {\n        return this.elementRef.nativeElement.required;\n    }\n    /** Controls whether the label should be floating or not. */\n    floatLabel(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.floatLabel(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTextFieldComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TextFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TextFieldComponent, selector: \"forge-text-field\", inputs: { density: \"density\", floatLabelType: \"floatLabelType\", shape: \"shape\", invalid: \"invalid\", required: \"required\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TextFieldComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-text-field',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { density: [{\n                type: Input\n            }], floatLabelType: [{\n                type: Input\n            }], shape: [{\n                type: Input\n            }], invalid: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTextFieldModule {\n    constructor() {\n        defineTextFieldComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTextFieldModule, declarations: [TextFieldComponent], imports: [CommonModule], exports: [TextFieldComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTextFieldModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TextFieldComponent],\n                    exports: [TextFieldComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-time-picker>` custom element. */\nclass TimePickerComponent {\n    set value(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.value = value;\n        });\n    }\n    get value() {\n        return this.elementRef.nativeElement.value;\n    }\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    set allowSeconds(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowSeconds = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowSeconds() {\n        return this.elementRef.nativeElement.allowSeconds;\n    }\n    set masked(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.masked = value != null && `${value}` !== 'false';\n        });\n    }\n    get masked() {\n        return this.elementRef.nativeElement.masked;\n    }\n    set showMaskFormat(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showMaskFormat = value != null && `${value}` !== 'false';\n        });\n    }\n    get showMaskFormat() {\n        return this.elementRef.nativeElement.showMaskFormat;\n    }\n    set use24HourTime(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.use24HourTime = value != null && `${value}` !== 'false';\n        });\n    }\n    get use24HourTime() {\n        return this.elementRef.nativeElement.use24HourTime;\n    }\n    set allowInvalidTime(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowInvalidTime = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowInvalidTime() {\n        return this.elementRef.nativeElement.allowInvalidTime;\n    }\n    set min(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.min = value;\n        });\n    }\n    get min() {\n        return this.elementRef.nativeElement.min;\n    }\n    set max(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.max = value;\n        });\n    }\n    get max() {\n        return this.elementRef.nativeElement.max;\n    }\n    set restrictedTimes(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.restrictedTimes = value;\n        });\n    }\n    get restrictedTimes() {\n        return this.elementRef.nativeElement.restrictedTimes;\n    }\n    set startTime(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.startTime = value;\n        });\n    }\n    get startTime() {\n        return this.elementRef.nativeElement.startTime;\n    }\n    set step(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.step = +value;\n        });\n    }\n    get step() {\n        return this.elementRef.nativeElement.step;\n    }\n    set allowInput(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowInput = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowInput() {\n        return this.elementRef.nativeElement.allowInput;\n    }\n    set showNow(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showNow = value != null && `${value}` !== 'false';\n        });\n    }\n    get showNow() {\n        return this.elementRef.nativeElement.showNow;\n    }\n    /** Whether or not to display hour options in dropdown */\n    set showHourOptions(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showHourOptions = value != null && `${value}` !== 'false';\n        });\n    }\n    get showHourOptions() {\n        return this.elementRef.nativeElement.showHourOptions;\n    }\n    set customOptions(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.customOptions = value;\n        });\n    }\n    get customOptions() {\n        return this.elementRef.nativeElement.customOptions;\n    }\n    set validationCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.validationCallback = value;\n        });\n    }\n    get validationCallback() {\n        return this.elementRef.nativeElement.validationCallback;\n    }\n    set parseCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.parseCallback = value;\n        });\n    }\n    get parseCallback() {\n        return this.elementRef.nativeElement.parseCallback;\n    }\n    set formatCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.formatCallback = value;\n        });\n    }\n    get formatCallback() {\n        return this.elementRef.nativeElement.formatCallback;\n    }\n    set coercionCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.coercionCallback = value;\n        });\n    }\n    get coercionCallback() {\n        return this.elementRef.nativeElement.coercionCallback;\n    }\n    set prepareMaskCallback(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.prepareMaskCallback = value;\n        });\n    }\n    get prepareMaskCallback() {\n        return this.elementRef.nativeElement.prepareMaskCallback;\n    }\n    set disabled(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.disabled = value != null && `${value}` !== 'false';\n        });\n    }\n    get disabled() {\n        return this.elementRef.nativeElement.disabled;\n    }\n    set popupClasses(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupClasses = value;\n        });\n    }\n    get popupClasses() {\n        return this.elementRef.nativeElement.popupClasses;\n    }\n    set allowDropdown(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.allowDropdown = value != null && `${value}` !== 'false';\n        });\n    }\n    get allowDropdown() {\n        return this.elementRef.nativeElement.allowDropdown;\n    }\n    set popupTarget(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.popupTarget = value;\n        });\n    }\n    get popupTarget() {\n        return this.elementRef.nativeElement.popupTarget;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTimePickerComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TimePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TimePickerComponent, selector: \"forge-time-picker\", inputs: { value: \"value\", open: \"open\", allowSeconds: \"allowSeconds\", masked: \"masked\", showMaskFormat: \"showMaskFormat\", use24HourTime: \"use24HourTime\", allowInvalidTime: \"allowInvalidTime\", min: \"min\", max: \"max\", restrictedTimes: \"restrictedTimes\", startTime: \"startTime\", step: \"step\", allowInput: \"allowInput\", showNow: \"showNow\", showHourOptions: \"showHourOptions\", customOptions: \"customOptions\", validationCallback: \"validationCallback\", parseCallback: \"parseCallback\", formatCallback: \"formatCallback\", coercionCallback: \"coercionCallback\", prepareMaskCallback: \"prepareMaskCallback\", disabled: \"disabled\", popupClasses: \"popupClasses\", allowDropdown: \"allowDropdown\", popupTarget: \"popupTarget\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TimePickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-time-picker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { value: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], allowSeconds: [{\n                type: Input\n            }], masked: [{\n                type: Input\n            }], showMaskFormat: [{\n                type: Input\n            }], use24HourTime: [{\n                type: Input\n            }], allowInvalidTime: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], restrictedTimes: [{\n                type: Input\n            }], startTime: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], allowInput: [{\n                type: Input\n            }], showNow: [{\n                type: Input\n            }], showHourOptions: [{\n                type: Input\n            }], customOptions: [{\n                type: Input\n            }], validationCallback: [{\n                type: Input\n            }], parseCallback: [{\n                type: Input\n            }], formatCallback: [{\n                type: Input\n            }], coercionCallback: [{\n                type: Input\n            }], prepareMaskCallback: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], popupClasses: [{\n                type: Input\n            }], allowDropdown: [{\n                type: Input\n            }], popupTarget: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTimePickerProxyModule {\n    constructor() {\n        defineTimePickerComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerProxyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerProxyModule, declarations: [TimePickerComponent], imports: [CommonModule], exports: [TimePickerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerProxyModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerProxyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TimePickerComponent],\n                    exports: [TimePickerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst TIME_PICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerValueAccessor),\n    multi: true\n};\nclass TimePickerValueAccessor {\n    timePickerChange(event) {\n        this.change(event.detail);\n    }\n    blur() {\n        this.onTouched();\n    }\n    constructor(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    change(value) {\n        this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TimePickerValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TimePickerValueAccessor, selector: \"forge-time-picker[formControlName],forge-time-picker[formControl],forge-time-picker[ngModel]\", host: { listeners: { \"forge-time-picker-change\": \"timePickerChange($event)\", \"focusout\": \"blur()\" } }, providers: [TIME_PICKER_VALUE_ACCESSOR], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TimePickerValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'forge-time-picker[formControlName],forge-time-picker[formControl],forge-time-picker[ngModel]',\n                    providers: [TIME_PICKER_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { timePickerChange: [{\n                type: HostListener,\n                args: ['forge-time-picker-change', ['$event']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout']\n            }] } });\n\nclass ForgeTimePickerModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerModule, declarations: [TimePickerValueAccessor], exports: [TimePickerValueAccessor,\n            ForgeTimePickerProxyModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerModule, imports: [ForgeTimePickerProxyModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTimePickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        TimePickerValueAccessor\n                    ],\n                    exports: [\n                        TimePickerValueAccessor,\n                        ForgeTimePickerProxyModule\n                    ]\n                }]\n        }] });\n\nclass ToastConfig {\n}\n\nclass ToastInjector extends BaseInjector {\n}\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-toast>` web component. */\nclass ToastComponent {\n    /** The message to display in the toast. */\n    set message(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.message = value;\n        });\n    }\n    get message() {\n        return this.elementRef.nativeElement.message;\n    }\n    /** The text to display in the action button. */\n    set actionText(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.actionText = value;\n        });\n    }\n    get actionText() {\n        return this.elementRef.nativeElement.actionText;\n    }\n    /** The time in milliseconds to show the toast. */\n    set duration(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.duration = +value;\n        });\n    }\n    get duration() {\n        return this.elementRef.nativeElement.duration;\n    }\n    /** The placement of the toast. */\n    set placement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.placement = value;\n        });\n    }\n    get placement() {\n        return this.elementRef.nativeElement.placement;\n    }\n    /** Sets the toast builder function for displaying custom content. */\n    set builder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.builder = value;\n        });\n    }\n    get builder() {\n        return this.elementRef.nativeElement.builder;\n    }\n    /** Controls the visibility of the close button. */\n    set showClose(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.showClose = value != null && `${value}` !== 'false';\n        });\n    }\n    get showClose() {\n        return this.elementRef.nativeElement.showClose;\n    }\n    initializedCallback(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.initializedCallback(...args));\n    }\n    /** Hides the toast and removes it from the DOM. */\n    hide(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.hide(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineToastComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToastComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ToastComponent, selector: \"forge-toast\", inputs: { message: \"message\", actionText: \"actionText\", duration: \"duration\", placement: \"placement\", builder: \"builder\", showClose: \"showClose\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToastComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-toast',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { message: [{\n                type: Input\n            }], actionText: [{\n                type: Input\n            }], duration: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], builder: [{\n                type: Input\n            }], showClose: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeToastModule {\n    constructor() {\n        defineToastComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToastModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToastModule, declarations: [ToastComponent], imports: [CommonModule], exports: [ToastComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToastModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToastModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ToastComponent],\n                    exports: [ToastComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Provides facilities for managing toast notifications.\n */\nclass ToastService {\n    constructor(_rendererFactory, componentFactoryResolver, appRef, injector) {\n        this._rendererFactory = _rendererFactory;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.appRef = appRef;\n        this.injector = injector;\n        this._renderer = this._rendererFactory.createRenderer(null, null);\n        defineToastComponent();\n    }\n    /**\n     * Creates and renders a toast component.\n     * @param config The toast configuration.\n     */\n    show(config, toastConfig) {\n        const toastElement = this._renderer.createElement('forge-toast');\n        const map = new WeakMap();\n        if (toastConfig) {\n            map.set(ToastConfig, toastConfig);\n        }\n        if (typeof config === 'string') {\n            config = {\n                message: config\n            };\n        }\n        const { component, actionHandler, ...restConfig } = config;\n        if (component) {\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n            const componentRef = componentFactory.create(new ToastInjector(this.injector, map));\n            this.appRef.attachView(componentRef.hostView);\n            const componentElement = componentRef.hostView.rootNodes[0];\n            toastElement.builder = () => componentElement;\n        }\n        Object.assign(toastElement, restConfig);\n        if (config.actionText && typeof config.actionHandler === 'function') {\n            /* eslint-disable @typescript-eslint/no-non-null-assertion */\n            this._renderer.listen(toastElement, TOAST_CONSTANTS.events.ACTION, () => config.actionHandler());\n            /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        }\n        this._renderer.appendChild(document.body, toastElement);\n        return toastElement;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToastService, deps: [{ token: i0.RendererFactory2 }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToastService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToastService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.RendererFactory2 }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-toolbar>` custom element. */\nclass ToolbarComponent {\n    set inverted(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.inverted = value != null && `${value}` !== 'false';\n        });\n    }\n    get inverted() {\n        return this.elementRef.nativeElement.inverted;\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineToolbarComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToolbarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ToolbarComponent, selector: \"forge-toolbar\", inputs: { inverted: \"inverted\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ToolbarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-toolbar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { inverted: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeToolbarModule {\n    constructor() {\n        defineToolbarComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToolbarModule, declarations: [ToolbarComponent], imports: [CommonModule], exports: [ToolbarComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToolbarModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ToolbarComponent],\n                    exports: [ToolbarComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The custom element class behind the `<forge-tooltip>` element. */\nclass TooltipComponent {\n    /** Gets/sets the tooltip text. */\n    set text(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.text = value;\n        });\n    }\n    get text() {\n        return this.elementRef.nativeElement.text;\n    }\n    /** Sets the tooltip builder function for display complex tooltip content. */\n    set builder(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.builder = value;\n        });\n    }\n    get builder() {\n        return this.elementRef.nativeElement.builder;\n    }\n    /** Gets/sets the target element selector. */\n    set target(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.target = value;\n        });\n    }\n    get target() {\n        return this.elementRef.nativeElement.target;\n    }\n    /** The tooltip display delay in milliseconds. */\n    set delay(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.delay = +value;\n        });\n    }\n    get delay() {\n        return this.elementRef.nativeElement.delay;\n    }\n    /** Gets/sets the position. */\n    set position(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.position = value;\n        });\n    }\n    get position() {\n        return this.elementRef.nativeElement.position;\n    }\n    /** Gets the open state of the tooltip. */\n    set open(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.open = value != null && `${value}` !== 'false';\n        });\n    }\n    get open() {\n        return this.elementRef.nativeElement.open;\n    }\n    set tooltipElement(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.tooltipElement = value;\n        });\n    }\n    get tooltipElement() {\n        return this.elementRef.nativeElement.tooltipElement;\n    }\n    /** Hides the tooltip if it's open. */\n    hide(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.hide(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineTooltipComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TooltipComponent, selector: \"forge-tooltip\", inputs: { text: \"text\", builder: \"builder\", target: \"target\", delay: \"delay\", position: \"position\", open: \"open\", tooltipElement: \"tooltipElement\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-tooltip',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { text: [{\n                type: Input\n            }], builder: [{\n                type: Input\n            }], target: [{\n                type: Input\n            }], delay: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }], open: [{\n                type: Input\n            }], tooltipElement: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeTooltipModule {\n    constructor() {\n        defineTooltipComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTooltipModule, declarations: [TooltipComponent], imports: [CommonModule], exports: [TooltipComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTooltipModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TooltipComponent],\n                    exports: [TooltipComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-view>` custom element. */\nclass ViewComponent {\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineViewComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ViewComponent, selector: \"forge-view\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-view',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeViewModule {\n    constructor() {\n        defineViewComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewModule, declarations: [ViewComponent], imports: [CommonModule], exports: [ViewComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ViewComponent],\n                    exports: [ViewComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\n/** The web component class behind the `<forge-view-switcher>` custom element. */\nclass ViewSwitcherComponent {\n    /** Gets/sets the currently visible view index. */\n    set index(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.index = +value;\n        });\n    }\n    get index() {\n        return this.elementRef.nativeElement.index;\n    }\n    /** Gets/sets the animation type. */\n    set animationType(value) {\n        this.zone.runOutsideAngular(() => {\n            this.elementRef.nativeElement.animationType = value;\n        });\n    }\n    get animationType() {\n        return this.elementRef.nativeElement.animationType;\n    }\n    /** Transitions to the next view. */\n    next(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.next(...args));\n    }\n    /** Transitions to the previous view. */\n    previous(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.previous(...args));\n    }\n    /** Transitions to the first view. */\n    goToStart(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.goToStart(...args));\n    }\n    /** Transitions to the last view. */\n    goToEnd(...args) {\n        return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.goToEnd(...args));\n    }\n    constructor(changeDetectorRef, elementRef, zone) {\n        this.elementRef = elementRef;\n        this.zone = zone;\n        defineViewSwitcherComponent();\n        changeDetectorRef.detach();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ViewSwitcherComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: ViewSwitcherComponent, selector: \"forge-view-switcher\", inputs: { index: \"index\", animationType: \"animationType\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ViewSwitcherComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'forge-view-switcher',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { index: [{\n                type: Input\n            }], animationType: [{\n                type: Input\n            }] } });\n\n// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.\nclass ForgeViewSwitcherModule {\n    constructor() {\n        defineViewSwitcherComponent();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewSwitcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewSwitcherModule, declarations: [ViewSwitcherComponent], imports: [CommonModule, ForgeViewModule], exports: [ViewSwitcherComponent, ForgeViewModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewSwitcherModule, imports: [CommonModule, ForgeViewModule, ForgeViewModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeViewSwitcherModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ForgeViewModule],\n                    declarations: [ViewSwitcherComponent],\n                    exports: [ViewSwitcherComponent, ForgeViewModule]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ForgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModule, exports: [ForgeAccordionModule,\n            ForgeAppBarModule,\n            ForgeAppBarHelpButtonModule,\n            ForgeAppBarMenuButtonModule,\n            ForgeAppBarNotificationButtonModule,\n            ForgeAppBarProfileButtonModule,\n            ForgeAppBarSearchModule,\n            ForgeAutocompleteModule,\n            ForgeAvatarModule,\n            ForgeBackdropModule,\n            ForgeBadgeModule,\n            ForgeBannerModule,\n            ForgeBottomSheetModule,\n            ForgeBusyIndicatorModule,\n            ForgeButtonModule,\n            ForgeButtonAreaModule,\n            ForgeButtonToggleModule,\n            ForgeButtonToggleGroupModule,\n            ForgeCalendarModule,\n            ForgeCardModule,\n            ForgeCheckboxModule,\n            ForgeChipModule,\n            ForgeChipFieldModule,\n            ForgeChipSetModule,\n            ForgeCircularProgressModule,\n            ForgeColorPickerModule,\n            ForgeDatePickerModule,\n            ForgeDateRangePickerModule,\n            ForgeDialogModule,\n            ForgeDividerModule,\n            ForgeDrawerModule,\n            ForgeExpansionPanelModule,\n            ForgeFloatingActionButtonModule,\n            ForgeFilePickerModule,\n            ForgeIconModule,\n            ForgeIconButtonModule,\n            ForgeInlineMessageModule,\n            ForgeKeyboardShortcutModule,\n            ForgeLabelValueModule,\n            ForgeLinearProgressModule,\n            ForgeListModule,\n            ForgeListItemModule,\n            ForgeMenuModule,\n            ForgeMiniDrawerModule,\n            ForgeModalDrawerModule,\n            ForgeOpenIconModule,\n            ForgeOptionModule,\n            ForgeOptionGroupModule,\n            ForgePageStateModule,\n            ForgePaginatorModule,\n            ForgePopupModule,\n            ForgeProductIconModule,\n            ForgeProfileCardModule,\n            ForgeQuantityFieldModule,\n            ForgeRadioModule,\n            ForgeRippleModule,\n            ForgeScaffoldModule,\n            ForgeSelectModule,\n            ForgeSelectDropdownModule,\n            ForgeSkeletonModule,\n            ForgeSliderModule,\n            ForgeSplitViewModule,\n            ForgeSplitViewPanelModule,\n            ForgeStackModule,\n            ForgeStepModule,\n            ForgeStepperModule,\n            ForgeSwitchModule,\n            ForgeTabModule,\n            ForgeTabBarModule,\n            ForgeTableModule,\n            ForgeTextFieldModule,\n            ForgeTimePickerModule,\n            ForgeToastModule,\n            ForgeToolbarModule,\n            ForgeTooltipModule,\n            ForgeViewModule,\n            ForgeViewSwitcherModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModule, imports: [ForgeAccordionModule,\n            ForgeAppBarModule,\n            ForgeAppBarHelpButtonModule,\n            ForgeAppBarMenuButtonModule,\n            ForgeAppBarNotificationButtonModule,\n            ForgeAppBarProfileButtonModule,\n            ForgeAppBarSearchModule,\n            ForgeAutocompleteModule,\n            ForgeAvatarModule,\n            ForgeBackdropModule,\n            ForgeBadgeModule,\n            ForgeBannerModule,\n            ForgeBottomSheetModule,\n            ForgeBusyIndicatorModule,\n            ForgeButtonModule,\n            ForgeButtonAreaModule,\n            ForgeButtonToggleModule,\n            ForgeButtonToggleGroupModule,\n            ForgeCalendarModule,\n            ForgeCardModule,\n            ForgeCheckboxModule,\n            ForgeChipModule,\n            ForgeChipFieldModule,\n            ForgeChipSetModule,\n            ForgeCircularProgressModule,\n            ForgeColorPickerModule,\n            ForgeDatePickerModule,\n            ForgeDateRangePickerModule,\n            ForgeDialogModule,\n            ForgeDividerModule,\n            ForgeDrawerModule,\n            ForgeExpansionPanelModule,\n            ForgeFloatingActionButtonModule,\n            ForgeFilePickerModule,\n            ForgeIconModule,\n            ForgeIconButtonModule,\n            ForgeInlineMessageModule,\n            ForgeKeyboardShortcutModule,\n            ForgeLabelValueModule,\n            ForgeLinearProgressModule,\n            ForgeListModule,\n            ForgeListItemModule,\n            ForgeMenuModule,\n            ForgeMiniDrawerModule,\n            ForgeModalDrawerModule,\n            ForgeOpenIconModule,\n            ForgeOptionModule,\n            ForgeOptionGroupModule,\n            ForgePageStateModule,\n            ForgePaginatorModule,\n            ForgePopupModule,\n            ForgeProductIconModule,\n            ForgeProfileCardModule,\n            ForgeQuantityFieldModule,\n            ForgeRadioModule,\n            ForgeRippleModule,\n            ForgeScaffoldModule,\n            ForgeSelectModule,\n            ForgeSelectDropdownModule,\n            ForgeSkeletonModule,\n            ForgeSliderModule,\n            ForgeSplitViewModule,\n            ForgeSplitViewPanelModule,\n            ForgeStackModule,\n            ForgeStepModule,\n            ForgeStepperModule,\n            ForgeSwitchModule,\n            ForgeTabModule,\n            ForgeTabBarModule,\n            ForgeTableModule,\n            ForgeTextFieldModule,\n            ForgeTimePickerModule,\n            ForgeToastModule,\n            ForgeToolbarModule,\n            ForgeTooltipModule,\n            ForgeViewModule,\n            ForgeViewSwitcherModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: ForgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ForgeAccordionModule,\n                        ForgeAppBarModule,\n                        ForgeAppBarHelpButtonModule,\n                        ForgeAppBarMenuButtonModule,\n                        ForgeAppBarNotificationButtonModule,\n                        ForgeAppBarProfileButtonModule,\n                        ForgeAppBarSearchModule,\n                        ForgeAutocompleteModule,\n                        ForgeAvatarModule,\n                        ForgeBackdropModule,\n                        ForgeBadgeModule,\n                        ForgeBannerModule,\n                        ForgeBottomSheetModule,\n                        ForgeBusyIndicatorModule,\n                        ForgeButtonModule,\n                        ForgeButtonAreaModule,\n                        ForgeButtonToggleModule,\n                        ForgeButtonToggleGroupModule,\n                        ForgeCalendarModule,\n                        ForgeCardModule,\n                        ForgeCheckboxModule,\n                        ForgeChipModule,\n                        ForgeChipFieldModule,\n                        ForgeChipSetModule,\n                        ForgeCircularProgressModule,\n                        ForgeColorPickerModule,\n                        ForgeDatePickerModule,\n                        ForgeDateRangePickerModule,\n                        ForgeDialogModule,\n                        ForgeDividerModule,\n                        ForgeDrawerModule,\n                        ForgeExpansionPanelModule,\n                        ForgeFloatingActionButtonModule,\n                        ForgeFilePickerModule,\n                        ForgeIconModule,\n                        ForgeIconButtonModule,\n                        ForgeInlineMessageModule,\n                        ForgeKeyboardShortcutModule,\n                        ForgeLabelValueModule,\n                        ForgeLinearProgressModule,\n                        ForgeListModule,\n                        ForgeListItemModule,\n                        ForgeMenuModule,\n                        ForgeMiniDrawerModule,\n                        ForgeModalDrawerModule,\n                        ForgeOpenIconModule,\n                        ForgeOptionModule,\n                        ForgeOptionGroupModule,\n                        ForgePageStateModule,\n                        ForgePaginatorModule,\n                        ForgePopupModule,\n                        ForgeProductIconModule,\n                        ForgeProfileCardModule,\n                        ForgeQuantityFieldModule,\n                        ForgeRadioModule,\n                        ForgeRippleModule,\n                        ForgeScaffoldModule,\n                        ForgeSelectModule,\n                        ForgeSelectDropdownModule,\n                        ForgeSkeletonModule,\n                        ForgeSliderModule,\n                        ForgeSplitViewModule,\n                        ForgeSplitViewPanelModule,\n                        ForgeStackModule,\n                        ForgeStepModule,\n                        ForgeStepperModule,\n                        ForgeSwitchModule,\n                        ForgeTabModule,\n                        ForgeTabBarModule,\n                        ForgeTableModule,\n                        ForgeTextFieldModule,\n                        ForgeTimePickerModule,\n                        ForgeToastModule,\n                        ForgeToolbarModule,\n                        ForgeTooltipModule,\n                        ForgeViewModule,\n                        ForgeViewSwitcherModule,\n                    ],\n                }]\n        }] });\n\n/*\n * Public API Surface of forge-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_VALUE_ACCESSOR, AccordionComponent, AppBarComponent, AppBarHelpButtonComponent, AppBarMenuButtonComponent, AppBarNotificationButtonComponent, AppBarProfileButtonComponent, AppBarSearchComponent, AutocompleteComponent, AutocompleteValueAccessor, AvatarComponent, BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, BackdropComponent, BadgeComponent, BannerComponent, BaseInjector, BottomSheetComponent, BottomSheetConfig, BottomSheetInjector, BottomSheetRef, BottomSheetService, BusyIndicatorComponent, BusyIndicatorService, ButtonAreaComponent, ButtonComponent, ButtonToggleComponent, ButtonToggleGroupComponent, ButtonToggleGroupValueAccessor, CHIP_VALUE_ACCESSOR, CalendarComponent, CardComponent, CheckboxComponent, ChipComponent, ChipFieldComponent, ChipSetComponent, ChipValueAccessor, CircularProgressComponent, ColorPickerComponent, DATEPICKER_VALUE_ACCESSOR, DATE_RANGE_PICKER_VALUE_ACCESSOR, DatePickerComponent, DatePickerValueAccessor, DateRangePickerComponent, DateRangePickerValueAccessor, DialogComponent, DialogConfig, DialogInjector, DialogRef, DialogService, DividerComponent, DrawerComponent, DynamicComponentService, ExpansionPanelComponent, FilePickerComponent, FloatingActionButton, ForgeAccordionModule, ForgeAppBarHelpButtonModule, ForgeAppBarMenuButtonModule, ForgeAppBarModule, ForgeAppBarNotificationButtonModule, ForgeAppBarProfileButtonModule, ForgeAppBarSearchModule, ForgeAutocompleteModule, ForgeAutocompleteProxyModule, ForgeAvatarModule, ForgeBackdropModule, ForgeBadgeModule, ForgeBannerModule, ForgeBottomSheetModule, ForgeBusyIndicatorModule, ForgeButtonAreaModule, ForgeButtonModule, ForgeButtonToggleGroupModule, ForgeButtonToggleModule, ForgeButtonToggleProxyModule, ForgeCalendarModule, ForgeCardModule, ForgeCheckboxModule, ForgeChipFieldModule, ForgeChipModule, ForgeChipProxyModule, ForgeChipSetModule, ForgeCircularProgressModule, ForgeColorPickerModule, ForgeDatePickerModule, ForgeDatePickerProxyModule, ForgeDateRangePickerModule, ForgeDateRangePickerProxyModule, ForgeDialogModule, ForgeDividerModule, ForgeDrawerModule, ForgeExpansionPanelModule, ForgeFilePickerModule, ForgeFloatingActionButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeInlineMessageModule, ForgeKeyboardShortcutModule, ForgeLabelValueModule, ForgeLinearProgressModule, ForgeListItemModule, ForgeListModule, ForgeListProxyModule, ForgeMenuModule, ForgeMiniDrawerModule, ForgeModalDrawerModule, ForgeModule, ForgeOpenIconModule, ForgeOptionGroupModule, ForgeOptionModule, ForgePageStateModule, ForgePaginatorModule, ForgePopupModule, ForgePopupProxyModule, ForgeProductIconModule, ForgeProfileCardModule, ForgeQuantityFieldModule, ForgeRadioModule, ForgeRippleModule, ForgeScaffoldModule, ForgeSelectDropdownModule, ForgeSelectModule, ForgeSelectProxyModule, ForgeSkeletonModule, ForgeSliderModule, ForgeSliderProxyModule, ForgeSplitViewModule, ForgeSplitViewPanelModule, ForgeStackModule, ForgeStepModule, ForgeStepperModule, ForgeSwitchModule, ForgeSwitchProxyModule, ForgeTabBarModule, ForgeTabModule, ForgeTableModule, ForgeTextFieldModule, ForgeTimePickerModule, ForgeTimePickerProxyModule, ForgeToastModule, ForgeToolbarModule, ForgeTooltipModule, ForgeViewModule, ForgeViewSwitcherModule, IconButtonComponent, IconComponent, InlineMessageComponent, KeyboardShortcutComponent, LIST_VALUE_ACCESSOR, LabelValueComponent, LinearProgressComponent, ListComponent, ListItemComponent, ListValueAccessor, MenuComponent, MiniDrawerComponent, ModalDrawerComponent, OpenIconComponent, OptionComponent, OptionGroupComponent, PageStateComponent, PaginatorComponent, PopupComponent, PopupConfig, PopupDirective, PopupInjector, PopupRef, PopupService, ProductIconComponent, ProfileCardComponent, QuantityFieldComponent, RadioComponent, RippleComponent, SELECT_VALUE_ACCESSOR, SLIDER_VALUE_ACCESSOR, SWITCH_VALUE_ACCESSOR, ScaffoldComponent, SelectComponent, SelectDropdownComponent, SelectValueAccessor, SkeletonComponent, SliderComponent, SliderValueAccessor, SplitViewComponent, SplitViewPanelComponent, StackComponent, StepComponent, StepperComponent, SwitchComponent, SwitchValueAccessor, TIME_PICKER_VALUE_ACCESSOR, TabBarComponent, TabComponent, TableComponent, TextFieldComponent, TimePickerComponent, TimePickerValueAccessor, ToastComponent, ToastConfig, ToastInjector, ToastService, ToolbarComponent, TooltipComponent, ViewComponent, ViewSwitcherComponent };\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { OpenIconComponent } from './open-icon';\nexport * from './open-icon-adapter';\nexport * from './open-icon-constants';\nexport * from './open-icon-foundation';\nexport * from './open-icon';\nexport function defineOpenIconComponent() {\n    defineCustomElement(OpenIconComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ExpansionPanelComponent } from './expansion-panel';\nexport * from './expansion-panel-adapter';\nexport * from './expansion-panel-constants';\nexport * from './expansion-panel-foundation';\nexport * from './expansion-panel';\nexport function defineExpansionPanelComponent() {\n    defineCustomElement(ExpansionPanelComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AccordionComponent } from './accordion';\nexport * from './accordion-adapter';\nexport * from './accordion-constants';\nexport * from './accordion-foundation';\nexport * from './accordion';\nexport function defineAccordionComponent() {\n    defineCustomElement(AccordionComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarComponent } from './app-bar';\nexport * from './app-bar-adapter';\nexport * from './app-bar-constants';\nexport * from './app-bar-foundation';\nexport * from './app-bar';\nexport * from './search';\nexport * from './menu-button';\nexport * from './notification-button';\nexport * from './help-button';\nexport * from '../profile-card';\nexport * from './profile-button';\nexport function defineAppBarComponent() {\n    defineCustomElement(AppBarComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarHelpButtonComponent } from './app-bar-help-button';\nexport * from './app-bar-help-button-adapter';\nexport * from './app-bar-help-button-constants';\nexport * from './app-bar-help-button-foundation';\nexport * from './app-bar-help-button';\nexport function defineAppBarHelpButtonComponent() {\n    defineCustomElement(AppBarHelpButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarMenuButtonComponent } from './app-bar-menu-button';\nexport * from './app-bar-menu-button-constants';\nexport * from './app-bar-menu-button';\nexport function defineAppBarMenuButtonComponent() {\n    defineCustomElement(AppBarMenuButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarNotificationButtonComponent } from './app-bar-notification-button';\nexport * from './app-bar-notification-button-adapter';\nexport * from './app-bar-notification-button-constants';\nexport * from './app-bar-notification-button-foundation';\nexport * from './app-bar-notification-button';\nexport function defineAppBarNotificationButtonComponent() {\n    defineCustomElement(AppBarNotificationButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarProfileButtonComponent } from './app-bar-profile-button';\nexport * from './app-bar-profile-button-adapter';\nexport * from './app-bar-profile-button-constants';\nexport * from './app-bar-profile-button-foundation';\nexport * from './app-bar-profile-button';\nexport function defineAppBarProfileButtonComponent() {\n    defineCustomElement(AppBarProfileButtonComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AppBarSearchComponent } from './app-bar-search';\nexport * from './app-bar-search-adapter';\nexport * from './app-bar-search-constants';\nexport * from './app-bar-search-foundation';\nexport * from './app-bar-search';\nexport function defineAppBarSearchComponent() {\n    defineCustomElement(AppBarSearchComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { AvatarComponent } from './avatar';\nexport * from './avatar-adapter';\nexport * from './avatar-constants';\nexport * from './avatar-foundation';\nexport * from './avatar';\nexport * from './avatar-component-delegate';\nexport function defineAvatarComponent() {\n    defineCustomElement(AvatarComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { BackdropComponent } from './backdrop';\nexport * from './backdrop-adapter';\nexport * from './backdrop-constants';\nexport * from './backdrop-foundation';\nexport * from './backdrop';\nexport function defineBackdropComponent() {\n    defineCustomElement(BackdropComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { BannerComponent } from './banner';\nexport * from './banner-adapter';\nexport * from './banner-constants';\nexport * from './banner-foundation';\nexport * from './banner';\nexport function defineBannerComponent() {\n    defineCustomElement(BannerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { BottomSheetComponent } from './bottom-sheet';\nexport * from './bottom-sheet-adapter';\nexport * from './bottom-sheet-constants';\nexport * from './bottom-sheet-foundation';\nexport * from './bottom-sheet';\nexport function defineBottomSheetComponent() {\n    defineCustomElement(BottomSheetComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { BusyIndicatorComponent } from './busy-indicator';\nexport * from './busy-indicator-adapter';\nexport * from './busy-indicator-constants';\nexport * from './busy-indicator-foundation';\nexport * from './busy-indicator';\nexport function defineBusyIndicatorComponent() {\n    defineCustomElement(BusyIndicatorComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ButtonAreaComponent } from './button-area';\nexport * from './button-area-adapter';\nexport * from './button-area-constants';\nexport * from './button-area-foundation';\nexport * from './button-area';\nexport function defineButtonAreaComponent() {\n    defineCustomElement(ButtonAreaComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ButtonToggleComponent } from './button-toggle';\nexport * from './button-toggle-adapter';\nexport * from './button-toggle-constants';\nexport * from './button-toggle-foundation';\nexport * from './button-toggle';\nexport function defineButtonToggleComponent() {\n    defineCustomElement(ButtonToggleComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ButtonToggleGroupComponent } from './button-toggle-group';\nexport * from './button-toggle-group-adapter';\nexport * from './button-toggle-group-constants';\nexport * from './button-toggle-group-foundation';\nexport * from './button-toggle-group';\nexport function defineButtonToggleGroupComponent() {\n    defineCustomElement(ButtonToggleGroupComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { CalendarComponent } from './calendar';\nexport * from './calendar-adapter';\nexport * from './calendar-component-delegate';\nexport * from './calendar-constants';\nexport * from './calendar-dom-utils';\nexport * from './calendar-dropdown';\nexport * from './calendar-foundation';\nexport * from './calendar-locale-utils';\nexport * from './calendar-menu';\nexport * from './calendar-utils';\nexport * from './calendar';\nexport * from './core';\nexport function defineCalendarComponent() {\n    defineCustomElement(CalendarComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { CardComponent } from './card';\nexport * from './card-constants';\nexport * from './card';\nexport function defineCardComponent() {\n    defineCustomElement(CardComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ChipComponent } from './chip';\nexport * from './chip-adapter';\nexport * from './chip-constants';\nexport * from './chip-foundation';\nexport * from './chip';\nexport function defineChipComponent() {\n    defineCustomElement(ChipComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ChipFieldComponent } from './chip-field';\nexport * from './chip-field-adapter';\nexport * from './chip-field-component-delegate';\nexport * from './chip-field-constants';\nexport * from './chip-field-foundation';\nexport * from './chip-field';\nexport function defineChipFieldComponent() {\n    defineCustomElement(ChipFieldComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ChipSetComponent } from './chip-set';\nexport * from './chip-set-adapter';\nexport * from './chip-set-constants';\nexport * from './chip-set-foundation';\nexport * from './chip-set';\nexport function defineChipSetComponent() {\n    defineCustomElement(ChipSetComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { CircularProgressComponent } from './circular-progress';\nexport * from './circular-progress-adapter';\nexport * from './circular-progress-constants';\nexport * from './circular-progress-foundation';\nexport * from './circular-progress';\nexport function defineCircularProgressComponent() {\n    defineCustomElement(CircularProgressComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ColorPickerComponent } from './color-picker';\nexport * from './color-picker-adapter';\nexport * from './color-picker-constants';\nexport * from './color-picker-foundation';\nexport * from './color-picker';\nexport function defineColorPickerComponent() {\n    defineCustomElement(ColorPickerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { DateRangePickerComponent } from './date-range-picker';\nexport * from './date-range-picker';\nexport * from './date-range-picker-adapter';\nexport * from './date-range-picker-constants';\nexport * from './date-range-picker-foundation';\nexport * from './date-range-picker-component-delegate';\nexport function defineDateRangePickerComponent() {\n    defineCustomElement(DateRangePickerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { FloatingActionButton } from './floating-action-button';\nexport * from './floating-action-button-constants';\nexport * from './floating-action-button';\nexport * from './floating-action-button-component-delegate';\nexport function defineFloatingActionButtonComponent() {\n    defineCustomElement(FloatingActionButton);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { FilePickerComponent } from './file-picker';\nexport * from './file-picker-adapter';\nexport * from './file-picker-constants';\nexport * from './file-picker-foundation';\nexport * from './file-picker';\nexport * from './file-picker-component-delegate';\nexport function defineFilePickerComponent() {\n    defineCustomElement(FilePickerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { InlineMessageComponent } from './inline-message';\nexport * from './inline-message-constants';\nexport * from './inline-message';\nexport function defineInlineMessageComponent() {\n    defineCustomElement(InlineMessageComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { KeyboardShortcutComponent } from './keyboard-shortcut';\nexport * from './keyboard-shortcut-adapter';\nexport * from './keyboard-shortcut-constants';\nexport * from './keyboard-shortcut-foundation';\nexport * from './keyboard-shortcut-utils';\nexport * from './keyboard-shortcut';\nexport function defineKeyboardShortcutComponent() {\n    defineCustomElement(KeyboardShortcutComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { LinearProgressComponent } from './linear-progress';\nexport * from './linear-progress-constants';\nexport * from './linear-progress';\nexport function defineLinearProgressComponent() {\n    defineCustomElement(LinearProgressComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { MiniDrawerComponent } from './mini-drawer';\nexport * from './mini-drawer-constants';\nexport * from './mini-drawer';\nexport function defineMiniDrawerComponent() {\n    defineCustomElement(MiniDrawerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ModalDrawerComponent } from './modal-drawer';\nexport * from './modal-drawer-adapter';\nexport * from './modal-drawer-constants';\nexport * from './modal-drawer-foundation';\nexport * from './modal-drawer';\nexport function defineModalDrawerComponent() {\n    defineCustomElement(ModalDrawerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { OptionGroupComponent } from './option-group';\nexport * from './option-group-constants';\nexport * from './option-group';\nexport function defineOptionGroupComponent() {\n    defineCustomElement(OptionGroupComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { PageStateComponent } from './page-state';\nexport * from './page-state-constants';\nexport * from './page-state';\nexport function definePageStateComponent() {\n    defineCustomElement(PageStateComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { PopupComponent } from './popup';\nexport * from './popup-adapter';\nexport * from './popup-constants';\nexport * from './popup-foundation';\nexport * from './popup';\nexport function definePopupComponent() {\n    defineCustomElement(PopupComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ProductIconComponent } from './product-icon';\nexport * from './product-icon-adapter';\nexport * from './product-icon-constants';\nexport * from './product-icon-foundation';\nexport * from './product-icon';\nexport function defineProductIconComponent() {\n    defineCustomElement(ProductIconComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ProfileCardComponent } from './profile-card';\nexport * from './profile-card-adapter';\nexport * from './profile-card-constants';\nexport * from './profile-card-foundation';\nexport * from './profile-card';\nexport function defineProfileCardComponent() {\n    defineCustomElement(ProfileCardComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { QuantityFieldComponent } from './quantity-field';\nexport * from './quantity-field-adapter';\nexport * from './quantity-field-constants';\nexport * from './quantity-field-foundation';\nexport * from './quantity-field';\nexport * from './quantity-field-component-delegate';\nexport function defineQuantityFieldComponent() {\n    defineCustomElement(QuantityFieldComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { RippleComponent } from './ripple';\nexport * from './ripple-adapter';\nexport * from './ripple-constants';\nexport * from './ripple-foundation';\nexport * from './ripple';\nexport * from './forge-ripple';\nexport function defineRippleComponent() {\n    defineCustomElement(RippleComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ScaffoldComponent } from './scaffold';\nexport * from './scaffold-constants';\nexport * from './scaffold';\nexport function defineScaffoldComponent() {\n    defineCustomElement(ScaffoldComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SplitViewPanelComponent } from './split-view-panel';\nexport * from './split-view-panel-adapter';\nexport * from './split-view-panel-constants';\nexport * from './split-view-panel-foundation';\nexport * from './split-view-panel';\nexport * from './split-view-panel-utils';\nexport function defineSplitViewPanelComponent() {\n    defineCustomElement(SplitViewPanelComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SplitViewComponent } from './split-view';\nexport * from './split-view-adapter';\nexport * from './split-view-constants';\nexport * from './split-view-foundation';\nexport * from './split-view';\nexport function defineSplitViewComponent() {\n    defineCustomElement(SplitViewComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { StackComponent } from './stack';\nexport * from './stack-adapter';\nexport * from './stack-constants';\nexport * from './stack-foundation';\nexport * from './stack';\nexport function defineStackComponent() {\n    defineCustomElement(StackComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { StepComponent } from './step';\nexport * from './step-adapter';\nexport * from './step-constants';\nexport * from './step-foundation';\nexport * from './step';\nexport function defineStepComponent() {\n    defineCustomElement(StepComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { StepperComponent } from './stepper';\nexport * from './stepper';\nexport * from './stepper-adapter';\nexport * from './stepper-constants';\nexport * from './stepper-foundation';\nexport function defineStepperComponent() {\n    defineCustomElement(StepperComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { SwitchComponent } from './switch';\nexport * from './switch-constants';\nexport * from './switch';\nexport * from './switch-component-delegate';\nexport function defineSwitchComponent() {\n    defineCustomElement(SwitchComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TimePickerComponent } from './time-picker';\nexport * from './time-picker-adapter';\nexport * from './time-picker-component-delegate';\nexport * from './time-picker-constants';\nexport * from './time-picker-foundation';\nexport * from './time-picker-utils';\nexport * from './time-picker';\nexport function defineTimePickerComponent() {\n    defineCustomElement(TimePickerComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { TooltipComponent } from './tooltip';\nexport * from './tooltip-adapter';\nexport * from './tooltip-constants';\nexport * from './tooltip-foundation';\nexport * from './tooltip-utils';\nexport * from './tooltip';\nexport function defineTooltipComponent() {\n    defineCustomElement(TooltipComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ViewComponent } from './view';\nexport * from './view-constants';\nexport * from './view';\nexport function defineViewComponent() {\n    defineCustomElement(ViewComponent);\n}\n","/**\n * @license\n * Copyright 2023 Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { defineCustomElement } from '@tylertech/forge-core';\nimport { ViewSwitcherComponent } from './view-switcher';\nexport * from './view-switcher-adapter';\nexport * from './view-switcher-constants';\nexport * from './view-switcher-foundation';\nexport * from './view-switcher';\nexport * from './view';\nexport function defineViewSwitcherComponent() {\n    defineCustomElement(ViewSwitcherComponent);\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]}