{
  "version": 3,
  "sources": ["src/app/table-demo/table-demo.component.ts", "src/app/table-demo/table-demo.component.html"],
  "sourcesContent": ["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, inject, signal, viewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { finalize, fromEvent, tap, Subject, takeUntil, merge } from 'rxjs';\r\nimport { CdkDragDrop, DragDropModule, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { IColumnConfiguration, PopoverComponent, SortDirection } from '@tylertech/forge';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { ForgeCheckboxModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgePopoverModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { CallbackPipe } from 'src/app/shared/pipes/callback.pipe';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Component({\r\n  selector: 'app-table-demo',\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule,\r\n    ScrollingModule,\r\n    ForgeCheckboxModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeListItemModule,\r\n    ForgeListModule,\r\n    ForgePopoverModule,\r\n    ForgeToolbarModule,\r\n    TableDetailComponent,\r\n    CallbackPipe\r\n  ],\r\n  templateUrl: './table-demo.component.html',\r\n  styleUrls: ['./table-demo.component.scss']\r\n})\r\nexport class TableDemoComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private appDataService = inject(AppDataService);\r\n  private readonly tableElementRef = viewChild<ElementRef<HTMLTableElement>>('table');\r\n  private readonly columnHeaderPopover = viewChild<ElementRef<PopoverComponent>>('columnHeaderPopover');\r\n  private readonly virtualScrollViewport = viewChild(CdkVirtualScrollViewport);\r\n  private tableColumnResize$ = new Subject<void>();\r\n  private isColumnResizing = false;\r\n\r\n  public isBusy = false;\r\n  public filterCache = {\r\n    sort: {\r\n      property: 'lastName',\r\n      direction: SortDirection.Ascending\r\n    },\r\n    filters: [] as any[],\r\n    skip: 0,\r\n    take: 25\r\n  };\r\n  public recordset = signal<IPerson[]>([]);\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    { header: 'Id', property: 'id', width: 48 },\r\n    { header: 'First', property: 'firstName' },\r\n    { header: 'Last', property: 'lastName' },\r\n    { header: 'Gender', property: 'gender' },\r\n    { header: 'Occupation', property: 'occupation' }\r\n  ];\r\n  public tableHeaderOffset = signal(0);\r\n  public tableRowHeight = 56;\r\n  public expandedRows: any[] = [];\r\n  public id = Utils.elementId('app-');\r\n\r\n  public visibleColumns = (columns: IColumnConfiguration[]) => {\r\n    return columns.filter((c) => c.hidden !== true);\r\n  };\r\n\r\n  public recordsetTrackBy = (index: number, person: IPerson) => {\r\n    return person.id;\r\n  };\r\n\r\n  public ngOnInit() {\r\n    this.getRecords();\r\n    this.virtualScrollViewport().checkViewportSize();\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    this.virtualScrollViewport()?.renderedRangeStream.subscribe((o) => {\r\n      this.tableHeaderOffset.set(o.start);\r\n      if (!this.isBusy && o.start > 0 && o.end + 20 > this.recordset().length) {\r\n        this.isBusy = true;\r\n        this.appDataService\r\n          .getPeople({\r\n            sort: this.filterCache.sort\r\n          })\r\n          .pipe(finalize(() => (this.isBusy = false)))\r\n          .subscribe((result) => {\r\n            const startId = this.recordset().length + 1;\r\n            this.recordset.update((value) => {\r\n              return [\r\n                ...value,\r\n                ...result.data.map((p, i) => {\r\n                  p.id = startId + p.id;\r\n                  return p;\r\n                })\r\n              ];\r\n            });\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.tableColumnResize$.next();\r\n    this.tableColumnResize$.complete();\r\n  }\r\n\r\n  public onColumnHeaderDragStart() {\r\n    this.virtualScrollViewport()?.scrollToOffset(0);\r\n  }\r\n\r\n  public onColumnHeaderDragDrop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.tableColumns, event.previousIndex, event.currentIndex);\r\n    this.tableColumns = [...this.tableColumns];\r\n  }\r\n\r\n  public onColumnHeaderResize(event: MouseEvent, columnIndex: number, column: IColumnConfiguration) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    this.tableColumnResize$.next();\r\n\r\n    const tableElementRef = this.tableElementRef();\r\n    let columnHeaderElement = (tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll('thead tr th')[columnIndex] as HTMLTableCellElement;\r\n    let columnElements = (tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll(`tbody tr td:nth-child(${columnIndex + 1})`);\r\n\r\n    let positionX = event.clientX;\r\n    if (columnHeaderElement) {\r\n      this.isColumnResizing = true;\r\n      tableElementRef?.nativeElement.querySelector('.forge-table-head__row')?.classList.add('forge-table-head__row--resizing');\r\n      columnHeaderElement.classList.add('forge-table-head__cell--resizing');\r\n      columnElements.forEach((c) => c.classList.add('forge-table-body__cell--resizing'));\r\n\r\n      fromEvent<MouseEvent>(document.body, 'mousemove')\r\n        .pipe(\r\n          takeUntil(this.tableColumnResize$),\r\n          tap((event) => {\r\n            column.width = columnHeaderElement.offsetWidth + (event.clientX - positionX);\r\n            positionX = event.clientX;\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      const theadElement = tableElementRef?.nativeElement.querySelector('thead');\r\n      merge(fromEvent(theadElement, 'mouseup'), fromEvent(theadElement, 'mouseleave'))\r\n        .pipe(\r\n          finalize(() =>\r\n            requestAnimationFrame(() => {\r\n              this.isColumnResizing = false;\r\n              (columnHeaderElement as any) = undefined;\r\n              (columnElements as any) = undefined;\r\n            })\r\n          ),\r\n          takeUntil(this.tableColumnResize$),\r\n          tap((event) => {\r\n            this.tableColumnResize$.next();\r\n            this.tableElementRef()?.nativeElement.querySelector('.forge-table-head__row')?.classList.remove('forge-table-head__row--resizing');\r\n            columnHeaderElement.classList.remove('forge-table-head__cell--resizing');\r\n            columnElements.forEach((c) => c.classList.remove('forge-table-body__cell--resizing'));\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n  }\r\n\r\n  public onColumnHeaderRightClick(event: PointerEvent, columnIndex: number) {\r\n    event.preventDefault();\r\n    const columnHeaderPopover = this.columnHeaderPopover();\r\n    if (columnHeaderPopover.nativeElement.open) {\r\n      columnHeaderPopover.nativeElement.open = false;\r\n      requestAnimationFrame(() => {\r\n        this.columnHeaderPopover().nativeElement.anchor = '';\r\n      });\r\n    } else {\r\n      columnHeaderPopover.nativeElement.anchor = `th-${columnIndex}-${this.id}`;\r\n      requestAnimationFrame(() => {\r\n        this.columnHeaderPopover().nativeElement.open = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  public onColumnPopoverItemSelected(value: any) {\r\n    switch (value) {\r\n      case 'reset-column-width':\r\n        this.tableColumns.forEach((c) => (c.width = undefined));\r\n        break;\r\n      case 'freeze-column': {\r\n        const tableElementRef = this.tableElementRef();\r\n        const columnHeaderElement = (tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll('thead tr th')[0];\r\n        const columnElements = (tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll(`tbody tr td:nth-child(${1})`);\r\n        columnHeaderElement.classList.add('forge-table-head__cell--frozen');\r\n        columnElements.forEach((c) => c.classList.add('forge-table-body__cell--frozen'));\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        const tableColumn = this.tableColumns.find((c) => c.property === value.property);\r\n        if (tableColumn) {\r\n          // prevent hiding all columns\r\n          if (this.tableColumns.filter((c) => !c.hidden).length) {\r\n            tableColumn.hidden = isDefined(tableColumn.hidden) ? !tableColumn.hidden : true;\r\n            tableColumn.sortDirection = undefined;\r\n            this.tableColumns = [...this.tableColumns];\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    const columnHeaderPopover = this.columnHeaderPopover();\r\n    columnHeaderPopover.nativeElement.open = false;\r\n    columnHeaderPopover.nativeElement.anchor = '';\r\n  }\r\n\r\n  public onTableSort(event: MouseEvent, column: IColumnConfiguration) {\r\n    event.stopPropagation();\r\n    const columnHeaderPopover = this.columnHeaderPopover();\r\n    columnHeaderPopover.nativeElement.open = false;\r\n    columnHeaderPopover.nativeElement.anchor = '';\r\n\r\n    if (!this.isColumnResizing) {\r\n      this.tableColumns.filter((c) => c.property !== column.property).forEach((c) => (c.sortDirection = undefined));\r\n      if (column.sortDirection === SortDirection.Ascending) {\r\n        column.sortDirection = SortDirection.Descending;\r\n      } else if (column.sortDirection === SortDirection.Descending) {\r\n        column.sortDirection = undefined;\r\n      } else {\r\n        column.sortDirection = SortDirection.Ascending;\r\n      }\r\n\r\n      (this.filterCache as any).sort = column.sortDirection ? { property: column.property, direction: column.sortDirection } : undefined;\r\n      this.filterCache.skip = 0;\r\n      this.virtualScrollViewport()?.scrollToOffset(0);\r\n      this.expandedRows.length = 0;\r\n      this.getRecords();\r\n    }\r\n  }\r\n\r\n  public onTablePaginatorChange(detail: { pageIndex: number; pageSize: number }) {\r\n    this.filterCache.skip = detail.pageIndex * detail.pageSize;\r\n    this.filterCache.take = detail.pageSize;\r\n    this.expandedRows.length = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onExpandRow(index: number, value: any) {\r\n    if (this.expandedRows[index]) {\r\n      this.expandedRows[index] = undefined;\r\n    } else {\r\n      this.expandedRows[index] = value;\r\n    }\r\n  }\r\n\r\n  private getRecords() {\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort\r\n      })\r\n      .pipe(finalize(() => (this.isBusy = false)))\r\n      .subscribe((result) => {\r\n        this.recordset.set(result.data);\r\n      });\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Table demo</h2>\r\n</forge-toolbar>\r\n\r\n<forge-popover #columnHeaderPopover placement=\"right-end\" animation-type=\"none\" open=\"false\">\r\n  <forge-list class=\"column-popover\" (forge-list-item-select)=\"onColumnPopoverItemSelected($event.detail.value)\">\r\n    @for (column of tableColumns; track i; let i = $index) {\r\n      <forge-list-item [value]=\"column\">\r\n        <forge-icon slot=\"start\" [name]=\"column.hidden ? 'check_box_outline_blank' : 'check_box'\"></forge-icon>\r\n        <button type=\"button\">{{ column.header }}</button>\r\n      </forge-list-item>\r\n    }\r\n    <forge-divider></forge-divider>\r\n    <forge-list-item value=\"reset-column-width\">\r\n      <button type=\"button\">Reset column widths</button>\r\n    </forge-list-item>\r\n    <forge-list-item value=\"freeze-column\">\r\n      <button type=\"button\">Freeze column</button>\r\n    </forge-list-item>\r\n  </forge-list>\r\n</forge-popover>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__table\">\r\n    <cdk-virtual-scroll-viewport [itemSize]=\"tableRowHeight\">\r\n      <table #table class=\"forge-table forge-table--fixed\">\r\n        <thead [style.--table-header-offset]=\"tableHeaderOffset()\" [style.--table-header-translate-y]=\"tableHeaderOffset() * -tableRowHeight + 'px'\">\r\n          <tr class=\"forge-table-row forge-table-head__row\" cdkDropList (cdkDropListDropped)=\"onColumnHeaderDragDrop($event)\" cdkDropListOrientation=\"horizontal\">\r\n            <th class=\"forge-table-cell forge-table-head__cell forge-table-row__expander\"></th>\r\n            @for (col of tableColumns | appCallback: $any(visibleColumns); track colIndex; let colIndex = $index) {\r\n              <th\r\n                scope=\"col\"\r\n                class=\"forge-table-cell forge-table-head__cell forge-table-head__cell--sortable\"\r\n                cdkDrag\r\n                cdkDragLockAxis=\"x\"\r\n                (cdkDragStarted)=\"onColumnHeaderDragStart()\"\r\n                (click)=\"onTableSort($event, col)\"\r\n                (contextmenu)=\"onColumnHeaderRightClick($any($event), colIndex)\"\r\n                tabindex=\"-1\"\r\n                [style.--table-column-width]=\"col.width\"\r\n                [id]=\"'th-' + colIndex + '-' + id\"\r\n              >\r\n                <div class=\"forge-table-head__cell-container\">\r\n                  <span class=\"forge-table-head__cell-text\">{{ col.header }}</span>\r\n                  @if (col.sortDirection?.length) {\r\n                    <forge-icon [name]=\"col.sortDirection === 'DESC' ? 'arrow_downward' : col.sortDirection === 'ASC' ? 'arrow_upward' : ''\" class=\"forge-table-head__cell-sort-icon\" aria-hidden=\"true\"></forge-icon>\r\n                  }\r\n                </div>\r\n                <div class=\"forge-table-head__cell-actions\">\r\n                  <div class=\"forge-table-head__cell-dragger\" cdkDragHandle></div>\r\n                  <div class=\"forge-table-head__cell-resizer\" (mousedown)=\"onColumnHeaderResize($event, colIndex + 1, col)\"></div>\r\n                </div>\r\n              </th>\r\n            }\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ng-container *cdkVirtualFor=\"let record of recordset(); trackBy: recordsetTrackBy; let recordIndex = index\">\r\n            <tr class=\"forge-table-row forge-table-body__row\" [ngClass]=\"{ 'forge-table-row--expanded': expandedRows[recordIndex] }\">\r\n              <td class=\"forge-table-cell forge-table-body__cell forge-table-row__expander\">\r\n                <forge-icon-button (click)=\"onExpandRow(recordIndex, record)\" aria-label=\"Toggle details\">\r\n                  <forge-icon [name]=\"expandedRows[recordIndex] ? 'expand_less' : 'expand_more'\"></forge-icon>\r\n                </forge-icon-button>\r\n              </td>\r\n              @for (col of tableColumns | appCallback: $any(visibleColumns); track colIndex; let colIndex = $index) {\r\n                <td class=\"forge-table-cell forge-table-body__cell\">\r\n                  <div class=\"forge-table-cell__container\">\r\n                    {{ $any(record)[col.property] }}\r\n                  </div>\r\n                </td>\r\n              }\r\n            </tr>\r\n            @if (expandedRows[recordIndex]) {\r\n              <tr class=\"forge-table-row forge-table-body__row forge-table-row__expandable-content\">\r\n                <td class=\"forge-table-row__expandable-content-cell\" [attr.colspan]=\"(tableColumns | appCallback: $any(visibleColumns)).length + 1\">\r\n                  <app-table-detail [data]=\"expandedRows[recordIndex]\" [rowIndex]=\"recordIndex\"></app-table-detail>\r\n                </td>\r\n              </tr>\r\n            }\r\n          </ng-container>\r\n        </tbody>\r\n      </table>\r\n    </cdk-virtual-scroll-viewport>\r\n  </div>\r\n\r\n  <forge-toolbar inverted=\"true\">\r\n    <span slot=\"end\" class=\"forge-typography--label1\">Records: {{ recordset().length }}</span>\r\n    <!-- <forge-paginator slot=\"end\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordset().length\" (forge-paginator-change)=\"onTablePaginatorChange($event.detail)\"></forge-paginator> -->\r\n  </forge-toolbar>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "column_r2", "\u0275\u0275advance", "hidden", "\u0275\u0275textInterpolate", "header", "col_r5", "sortDirection", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onColumnHeaderDragStart", "$event", "$implicit", "onTableSort", "\u0275$index_44_r6", "$index", "onColumnHeaderRightClick", "\u0275\u0275template", "TableDemoComponent_For_24_Conditional_4_Template", "ctx_r6", "onColumnHeaderResize", "\u0275\u0275styleProp", "width", "id", "\u0275\u0275conditional", "length", "\u0275\u0275textInterpolate1", "record_r10", "col_r12", "property", "expandedRows", "recordIndex_r11", "\u0275\u0275elementContainerStart", "ctx_r8", "_r8", "index", "onExpandRow", "\u0275\u0275repeaterCreate", "TableDemoComponent_ng_container_27_For_6_Template", "\u0275\u0275repeaterTrackByIndex", "TableDemoComponent_ng_container_27_Conditional_8_Template", "\u0275\u0275pureFunction1", "_c2", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "tableColumns", "visibleColumns", "TableDemoComponent", "constructor", "appDataService", "inject", "AppDataService", "tableElementRef", "viewChild", "columnHeaderPopover", "virtualScrollViewport", "CdkVirtualScrollViewport", "tableColumnResize$", "Subject", "isColumnResizing", "isBusy", "filterCache", "sort", "direction", "SortDirection", "Ascending", "filters", "skip", "take", "recordset", "signal", "tableHeaderOffset", "tableRowHeight", "Utils", "elementId", "columns", "filter", "c", "recordsetTrackBy", "person", "ngOnInit", "getRecords", "checkViewportSize", "ngAfterViewInit", "renderedRangeStream", "subscribe", "o", "set", "start", "end", "getPeople", "pipe", "finalize", "result", "startId", "update", "value", "data", "map", "p", "i", "ngOnDestroy", "next", "complete", "scrollToOffset", "onColumnHeaderDragDrop", "event", "moveItemInArray", "previousIndex", "currentIndex", "columnIndex", "column", "stopPropagation", "preventDefault", "columnHeaderElement", "nativeElement", "querySelectorAll", "columnElements", "positionX", "clientX", "querySelector", "classList", "add", "forEach", "fromEvent", "document", "body", "takeUntil", "tap", "offsetWidth", "theadElement", "merge", "requestAnimationFrame", "undefined", "remove", "open", "anchor", "onColumnPopoverItemSelected", "tableColumn", "find", "isDefined", "Descending", "onTablePaginatorChange", "detail", "pageIndex", "pageSize", "selectors", "viewQuery", "rf", "ctx", "i0", "_r1", "TableDemoComponent_For_7_Template", "TableDemoComponent_For_24_Template", "TableDemoComponent_ng_container_27_Template", "CommonModule", "NgClass", "DragDropModule", "CdkDropList", "CdkDrag", "CdkDragHandle", "ScrollingModule", "CdkFixedSizeVirtualScroll", "CdkVirtualForOf", "ForgeCheckboxModule", "ForgeDividerModule", "DividerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeListItemModule", "ListItemComponent", "ForgeListModule", "ListComponent", "ForgePopoverModule", "PopoverComponent", "ForgeToolbarModule", "ToolbarComponent", "TableDetailComponent", "CallbackPipe", "styles"]
}
