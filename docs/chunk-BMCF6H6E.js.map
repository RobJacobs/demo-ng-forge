{
  "version": 3,
  "sources": ["src/app/shared/components/autocomplete-range/autocomplete-range.component.ts", "src/app/shared/components/autocomplete-range/autocomplete-range.component.html"],
  "sourcesContent": ["import {\r\n  AfterViewInit,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  NgZone,\r\n  inject,\r\n  input,\r\n  viewChild,\r\n  DestroyRef\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { Observable } from 'rxjs';\r\nimport { AutocompleteFilterCallback, IOption, IAutocompleteOptionGroup, AutocompleteSelectedTextBuilder, AutocompleteComponent } from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\nimport {\r\n  ForgeAutocompleteModule,\r\n  ForgeDividerModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeListItemModule,\r\n  ForgeListModule,\r\n  ForgeTextFieldModule\r\n} from '@tylertech/forge-angular';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\n\r\nimport { Utils } from 'src/utils';\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeListItemModule,\r\n    ForgeListModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AutocompleteRangeComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  private ngZone = inject(NgZone);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private destroyRef = inject(DestroyRef);\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur() {\r\n    this.onTouched();\r\n  }\r\n  private readonly autocompleteRef = viewChild<ElementRef>('rangeAutocomplete');\r\n  private readonly rangeTemplateRef = viewChild<TemplateRef<any>>('rangeTemplate');\r\n  private readonly filterInputRef = viewChild<ElementRef>('filterInput');\r\n\r\n  public readonly optionFilter = input<(filter: string) => Observable<IOption[]>>();\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  public readonly label = input<string>();\r\n  public readonly maxlength = input<number | null>(null);\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  public onChange = (fn: any) => {};\r\n  public onTouched = () => {};\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      const optionFilter = this.optionFilter();\r\n      if (optionFilter) {\r\n        optionFilter(this.filter)\r\n          .pipe(takeUntilDestroyed(this.destroyRef))\r\n          .subscribe({\r\n            next: (response) => {\r\n              const options: IOption[] = [];\r\n              response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n              resolve(options);\r\n            },\r\n            error: () => reject()\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement;\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef()?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  public writeValue(values: Array<IOption> | Array<string | string[] | number>) {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({\r\n            label: `${rangeOption[0]} to ${rangeOption[1]}`,\r\n            value: rangeOption\r\n          });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef() as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef() as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  public registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange() {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  public onAddRangeOption() {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label =\r\n      this.rangeMin?.length && this.rangeMax?.length\r\n        ? `${this.rangeMin} to ${this.rangeMax}`\r\n        : this.rangeMin?.length\r\n          ? `Greater than ${this.rangeMin}`\r\n          : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef() as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef()?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption) {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef() as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef()?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents() {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef()?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n", "<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\n  <forge-text-field>\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\" />\n    <label [attr.for]=\"elementId\">{{ label() }}</label>\n    <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n  </forge-text-field>\n</forge-autocomplete>\n\n<ng-template #rangeTemplate>\n  <div class=\"range\" tabindex=\"-1\">\n    <div class=\"range__input\">\n      <span class=\"forge-typography--subheading2 range__input__header\">Enter a search range</span>\n      <div class=\"range__input__body\">\n        <forge-text-field>\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength()\" [(ngModel)]=\"rangeMin\" />\n        </forge-text-field>\n        <span>to</span>\n        <forge-text-field>\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength()\" [(ngModel)]=\"rangeMax\" />\n        </forge-text-field>\n        <forge-icon-button aria-label=\"Add search range\" (click)=\"onAddRangeOption()\">\n          <forge-icon name=\"add\"></forge-icon>\n        </forge-icon-button>\n      </div>\n      @if (rangeMessage) {\n        <div class=\"forge-typography--label1\">{{ rangeMessage }}</div>\n      }\n    </div>\n    <forge-list class=\"range__options\">\n      @for (option of rangeOptions; track i; let i = $index) {\n        <forge-list-item>\n          <forge-icon-button slot=\"start\" aria-label=\"Delete search range\" (click)=\"onDeleteRangeOption(option)\">\n            <forge-icon name=\"delete\"></forge-icon>\n          </forge-icon-button>\n          {{ option.label }}\n        </forge-list-item>\n      }\n    </forge-list>\n    <forge-divider></forge-divider>\n  </div>\n</ng-template>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r2", "rangeMessage", "\u0275\u0275listener", "option_r5", "\u0275\u0275restoreView", "_r4", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onDeleteRangeOption", "\u0275\u0275element", "\u0275\u0275textInterpolate1", "label", "\u0275\u0275twoWayListener", "$event", "_r2", "i0", "\u0275\u0275twoWayBindingSet", "rangeMin", "rangeMax", "onAddRangeOption", "\u0275\u0275conditionalCreate", "AutocompleteRangeComponent_ng_template_8_Conditional_13_Template", "\u0275\u0275repeaterCreate", "AutocompleteRangeComponent_ng_template_8_For_16_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275twoWayProperty", "\u0275\u0275conditional", "\u0275\u0275repeater", "rangeOptions", "AutocompleteRangeComponent", "constructor", "ngZone", "inject", "NgZone", "viewContainerRef", "ViewContainerRef", "destroyRef", "DestroyRef", "autocompleteRef", "viewChild", "rangeTemplateRef", "filterInputRef", "optionFilter", "input", "valueChange", "EventEmitter", "maxlength", "elementId", "Utils", "uniqueId", "filter", "onChange", "fn", "onTouched", "onFilter", "Promise", "resolve", "reject", "pipe", "takeUntilDestroyed", "subscribe", "next", "response", "options", "forEach", "o", "isArray", "value", "push", "error", "optionHeaderBuilder", "run", "undefined", "rangeRef", "rootNodes", "selectedTextBuilder", "selectedOptions", "nativeElement", "open", "length", "optionCount", "rangeOptionCount", "autocompleteBlur", "values", "writeValue", "rangeOption", "isDefined", "window", "requestAnimationFrame", "ngAfterViewInit", "createEmbeddedView", "remove", "ngOnDestroy", "destroy", "registerOnChange", "registerOnTouched", "onAutocompleteChange", "emitChangeEvents", "isString", "trim", "comp", "comparator", "findIndex", "option", "focus", "optionIndex", "splice", "map", "emit", "selectors", "viewQuery", "rf", "ctx", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi", "decls", "vars", "consts", "template", "_r1", "\u0275\u0275template", "AutocompleteRangeComponent_ng_template_8_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "CommonModule", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ForgeAutocompleteModule", "AutocompleteComponent", "ForgeDividerModule", "DividerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeListItemModule", "ListItemComponent", "ForgeListModule", "ListComponent", "ForgeTextFieldModule", "TextFieldComponent", "styles", "_AutocompleteRangeComponent"]
}
