{
  "version": 3,
  "sources": ["src/app/test/test.component.ts", "src/app/test/test.component.html", "src/app/test/parent/parent.component.ts", "src/app/test/parent/parent.component.html", "src/app/test/child/child.component.ts", "src/app/test/child/child.component.html", "src/app/test/routes.ts"],
  "sourcesContent": ["import { AfterViewInit, Component, ContentChildren, ElementRef, inject, QueryList, ViewChildren } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CardComponent } from '../shared/components/card/card.component';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent implements AfterViewInit {\r\n  private elementRef = inject(ElementRef);\r\n  @ViewChildren(CardComponent)\r\n  public cardComponentViewChildren: QueryList<CardComponent>;\r\n\r\n  @ContentChildren(CardComponent, { descendants: true })\r\n  public cardComponentContentChildren: QueryList<CardComponent>;\r\n\r\n  public ngAfterViewInit(): void {\r\n    console.log(this.cardComponentContentChildren);\r\n    console.log(this.cardComponentViewChildren);\r\n  }\r\n\r\n  public onClick() {\r\n    console.log(this.cardComponentContentChildren);\r\n    console.log(this.cardComponentViewChildren);\r\n    const cardComponents = this.elementRef.nativeElement.querySelectorAll('app-card');\r\n  }\r\n}\r\n", "<button type=\"button\" (click)=\"onClick()\">Click</button>\r\n<router-outlet></router-outlet>\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap, takeUntil } from 'rxjs';\r\nimport { ForgeButtonModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\n\r\n@Component({\r\n  selector: 'app-test-parent',\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeToolbarModule, ForgeTextFieldModule, ForgeButtonModule],\r\n  templateUrl: './parent.component.html',\r\n  styleUrls: ['./parent.component.scss']\r\n})\r\nexport class ParentComponent {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  private appCache = inject(AppCacheService);\r\n\r\n  constructor() {}\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n\r\n  public onMakeRequest() {\r\n    this.getLongRequest().subscribe();\r\n  }\r\n\r\n  private getLongRequest(): Observable<any> {\r\n    return this.appDataService.getLongRequest().pipe(\r\n      tap({\r\n        next: (result) => console.log(result),\r\n        error: (error) => console.log(error)\r\n      }),\r\n      takeUntil(this.appCache.cancelHttpRequests)\r\n    );\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Parent</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <p>Parent content</p>\r\n  <forge-button variant=\"raised\" (click)=\"onNavigate('test/child')\">View child</forge-button>\r\n  <forge-button style=\"margin: 16px\" variant=\"raised\" (click)=\"onMakeRequest()\">Make request</forge-button>\r\n</div>\r\n", "import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, Component, ContentChildren, inject, QueryList, ViewChildren } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ForgeButtonModule, ForgeCheckboxModule, ForgeIconButtonModule, ForgeIconModule, ForgeOptionModule, ForgeSelectModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { AutoFocusDirective } from 'src/app/shared/directives/auto-focus/auto-focus.directive';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { CardComponent } from 'src/app/shared/components/card/card.component';\r\n\r\n@Component({\r\n  selector: 'app-test-child',\r\n  standalone: true,\r\n  imports: [CommonModule, A11yModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeToolbarModule, ForgeTextFieldModule, ForgeSelectModule, ForgeOptionModule, ForgeCheckboxModule, AutoFocusDirective, CardComponent],\r\n  templateUrl: './child.component.html',\r\n  styleUrls: ['./child.component.scss']\r\n})\r\nexport class ChildComponent implements AfterViewInit {\r\n  private router = inject(Router);\r\n\r\n  @ViewChildren(CardComponent)\r\n  public cardComponentViewChildren: QueryList<CardComponent>;\r\n\r\n  @ContentChildren(CardComponent, { descendants: true })\r\n  public cardComponentContentChildren: QueryList<CardComponent>;\r\n\r\n  public ngAfterViewInit(): void {\r\n    // console.log(this.cardComponentContentChildren);\r\n    // console.log(this.cardComponentViewChildren);\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button (click)=\"onNavigate('test/parent')\" aria-label=\"Go back\">\r\n      <forge-icon name=\"arrow_back\"></forge-icon>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--subheading4\">Child</h2>\r\n  </div>\r\n</forge-toolbar>\r\n<div class=\"body\" cdkTrapFocus>\r\n  <forge-button variant=\"raised\" appAutoFocus>Focus</forge-button>\r\n  <forge-text-field>\r\n    <input type=\"text\" id=\"test--child--name\" />\r\n    <label for=\"test--child--name\" slot=\"label\">Name</label>\r\n  </forge-text-field>\r\n  <forge-select label=\"Pet\">\r\n    <forge-option value=\"cat\">Cat</forge-option>\r\n    <forge-option value=\"dog\">Dog</forge-option>\r\n    <forge-option value=\"rock\">Rock</forge-option>\r\n  </forge-select>\r\n  <forge-checkbox>Include</forge-checkbox>\r\n  <input type=\"text\" />\r\n  <input type=\"text\" />\r\n\r\n  <app-card border=\"raised\">\r\n    <div app-card-header>Outer card</div>\r\n    <div style=\"display: flex; flex-direction: row; gap: 16px\">\r\n      <app-card border=\"outlined\">\r\n        <div app-card-header>Card A - 01</div>\r\n        <div style=\"display: flex; flex-direction: column; gap: 16px\">\r\n          <app-card border=\"outlined\">\r\n            <div app-card-header>Card A - 01 - 01</div>\r\n          </app-card>\r\n          <app-card border=\"outlined\">\r\n            <div app-card-header>Card B - 01 - 02</div>\r\n          </app-card>\r\n        </div>\r\n      </app-card>\r\n      <app-card border=\"outlined\">\r\n        <div app-card-header>Card B - 01</div>\r\n        <div style=\"display: flex; flex-direction: column; gap: 16px\">\r\n          <app-card border=\"outlined\">\r\n            <div app-card-header>Card B - 01 - 01</div>\r\n          </app-card>\r\n          <app-card border=\"outlined\">\r\n            <div app-card-header>Card B - 01 - 02</div>\r\n          </app-card>\r\n        </div>\r\n      </app-card>\r\n    </div>\r\n  </app-card>\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\n\r\nimport { TestComponent } from './test.component';\r\nimport { ParentComponent } from './parent/parent.component';\r\nimport { ChildComponent } from './child/child.component';\r\n\r\nexport const TEST_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: TestComponent,\r\n    children: [\r\n      { path: 'parent', component: ParentComponent },\r\n      { path: 'child', component: ChildComponent },\r\n      { path: '', redirectTo: 'parent', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n"],
  "mappings": "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",
  "names": ["TestComponent", "constructor", "elementRef", "inject", "ElementRef", "ngAfterViewInit", "console", "log", "cardComponentContentChildren", "cardComponentViewChildren", "onClick", "cardComponents", "nativeElement", "querySelectorAll", "selectors", "contentQueries", "rf", "ctx", "dirIndex", "CardComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "RouterOutlet", "styles", "ParentComponent", "constructor", "router", "inject", "Router", "appDataService", "AppDataService", "appCache", "AppCacheService", "onNavigate", "route", "navigate", "onMakeRequest", "getLongRequest", "subscribe", "pipe", "tap", "next", "result", "console", "log", "error", "takeUntil", "cancelHttpRequests", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "CommonModule", "ForgeToolbarModule", "ToolbarComponent", "ForgeTextFieldModule", "ForgeButtonModule", "ButtonComponent", "styles", "ChildComponent", "constructor", "router", "inject", "Router", "ngAfterViewInit", "onNavigate", "route", "navigate", "selectors", "contentQueries", "rf", "ctx", "dirIndex", "CardComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "CommonModule", "A11yModule", "CdkTrapFocus", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeToolbarModule", "ToolbarComponent", "ForgeTextFieldModule", "TextFieldComponent", "ForgeSelectModule", "SelectComponent", "OptionComponent", "ForgeOptionModule", "ForgeCheckboxModule", "CheckboxComponent", "AutoFocusDirective", "styles", "TEST_ROUTES", "path", "component", "TestComponent", "children", "ParentComponent", "ChildComponent", "redirectTo", "pathMatch"]
}
