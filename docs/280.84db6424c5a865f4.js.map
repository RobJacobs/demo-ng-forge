{"version":3,"file":"280.84db6424c5a865f4.js","mappings":"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","names":["Utils","sortData","data","key","type","direction","length","slice","sort","a","b","getPropertyValue","this","comparator","groupData","property","isArray","reduce","previousValue","currentValue","push","filterData","filters","map","f","isString","value","operator","substring","Object","defineProperty","toLowerCase","filter","rec","every","strict","indexOf","isDefined","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","elementId","prefix","Math","random","toString","replace","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","merge","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","mergeAll","from","EMPTY","timer","dueTime","intervalOrScheduler","asyncScheduler","intervalDuration","isScheduler","due","isValidDate","now","n","schedule","closed","complete","debounceTime","operate","source","activeTask","lastValue","lastTime","emit","unsubscribe","emitWhenIdle","targetTime","subscribe","createOperatorSubscriber","distinctUntilChanged","keySelector","identity","defaultCompare","previousKey","first","currentKey","ReplaySubject","Subject","constructor","_bufferSize","_windowTime","_timestampProvider","dateTimestampProvider","super","_buffer","_infiniteTimeWindow","max","isStopped","_trimBuffer","_subscribe","_throwIfClosed","subscription","_innerSubscribe","copy","i","_checkFinalizedStatuses","adjustedBufferSize","splice","last","handleReset","reset","onSubscriber","SafeSubscriber","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","error","err","Action","Subscription","work","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","id","recycleAsyncId","requestAsyncId","_id","flush","bind","_scheduler","execute","Error","_execute","_delay","errorValue","errored","e","actions","arrRemove","Scheduler","schedulerActionCtor","AsyncScheduler","SchedulerAction","_active","action","shift","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","timestamp","animationFrameScheduler","AnimationFrameScheduler","flushId","_scheduled","AnimationFrameAction","async","DIR_DOCUMENT","InjectionToken","providedIn","factory","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","Directionality","_document","change","EventEmitter","_resolveDirectionality","rawValue","test","body","dir","documentElement","ngOnDestroy","static","ɵfac","t","i0","ɵprov","token","BidiModule","ɵmod","ɵinj","coerceBooleanProperty","coerceNumberProperty","fallbackValue","_isNumberValue","Number","coerceArray","Array","coerceElement","elementOrRef","ElementRef","nativeElement","extendStyles","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","parseCssPropertyValue","computedStyle","name","split","part","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","handleScroll","event","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_initialTransform","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","disableHandle","enableHandle","delete","withDirection","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","isFakeMousedownFromScreenReader","buttons","detail","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","find","prop","propertyIndex","rawDurations","rawDelays","propertyName","clearTimeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","config","_clearGlobalListeners","streams","observer","eventOptions","instance","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","i1","CDK_DRAG_PARENT","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","ɵdir","selectors","hostAttrs","inputs","None","standalone","features","provide","useExisting","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CDK_DRAG_PREVIEW","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","closest","_getBoundaryElement","boundary","ref","startEvent","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","startWith","tap","childHandleElements","switchMap","handleInstance","dragRef","i1$1","contentQueries","rf","ctx","dirIndex","_t","hostVars","hostBindings","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","DragDropModule","providers","imports","CdkScrollableModule","hasV8BreakIterator","Intl","v8BreakIterator","supportsPassiveEvents","rtlScrollAxisType","scrollBehaviorSupported","shadowDomIsSupported","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","supportsPassiveEventListeners","supportsScrollBehavior","Element","scrollToFunction","prototype","scrollTo","getRtlScrollAxisType","scrollContainer","containerStyle","overflow","visibility","content","contentStyle","_supportsShadowDom","head","createShadowRoot","attachShadow","rootNode","ShadowRoot","composedPath","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","clearImmediate","immediateProvider","asapScheduler","AsapScheduler","AsapAction","auditTime","audit","durationSelector","hasValue","durationSubscriber","isComplete","endDuration","cleanupDuration","DataSource","ArrayDataSource","_data","connect","isObservable","of","disconnect","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","view","operation","_insertView","viewArgsFactory","_detachAndCacheView","_moveView","detach","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","move","pop","insert","_VIEW_REPEATER_STRATEGY","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","useFactory","deps","forwardRef","ScrollDispatcher","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","register","elementScrolled","deregister","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","_","ancestorScrolled","elementOrElementRef","ancestors","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","scrollableElement","CdkScrollable","elementRef","scrollDispatcher","ngZone","_elementScrolled","ngOnInit","el","isRtl","_applyScrollToOptions","LEFT","RIGHT","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","appendOnly","_appendOnly","viewportRuler","_detachedSubject","_renderedRangeSubject","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","axis","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","runAfterChangeDetection","fn","ɵcmp","viewQuery","virtualScrollable","Optional","Inject","ngContentSelectors","decls","vars","consts","encapsulation","changeDetection","getOffset","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ConnectableObservable","_dataSourceChanges","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","_differs","viewChange","pairwise","prev","hasPrev","cur","_changeDataSource","_differ","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","create","oldDs","newDs","count","_updateComputedContextProperties","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","even","odd","useClass","ScrollingModule"],"sourceRoot":"webpack:///","sources":["./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/@angular/cdk/fesm2022/a11y.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/platform.mjs","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js"],"sourcesContent":["import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DIR_DOCUMENT]\n                }] }]; } });\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, PAGE_DOWN, PAGE_UP, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        /** Map of all registered message elements that have been placed into the document. */\n        this._messageRegistry = new Map();\n        /** Container for all registered messages. */\n        this._messagesContainer = null;\n        /** Unique ID for the service. */\n        this._id = `${nextId++}`;\n        this._document = _document;\n        this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message, this._id);\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!this._messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = this._messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (this._messagesContainer?.childNodes.length === 0) {\n            this._messagesContainer.remove();\n            this._messagesContainer = null;\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        this._messagesContainer?.remove();\n        this._messagesContainer = null;\n        this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement, this._id);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        this._messagesContainer.appendChild(messageElement);\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        this._messageRegistry.get(key)?.messageElement?.remove();\n        this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (this._messagesContainer) {\n            return;\n        }\n        const containerClassName = 'cdk-describedby-message-container';\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n        for (let i = 0; i < serverContainers.length; i++) {\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            serverContainers[i].remove();\n        }\n        const messagesContainer = this._document.createElement('div');\n        // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n        messagesContainer.style.visibility = 'hidden';\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n        messagesContainer.classList.add(containerClassName);\n        messagesContainer.classList.add('cdk-visually-hidden');\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\n        if (this._platform && !this._platform.isBrowser) {\n            messagesContainer.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(messagesContainer);\n        this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = this._messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: AriaDescriber, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: AriaDescriber, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.Platform }]; } });\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n    }\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        this._pageUpAndDown = { enabled: false, delta: 10 };\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            this._itemChangesSubscription = _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\n            .subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /** Cancels the current typeahead sequence. */\n    cancelTypeahead() {\n        this._pressedLetters = [];\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n     * respectively when the Page-Up or Page-Down key is pressed.\n     * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n     * @param delta Whether pressing the Home or End key activates the first/last item.\n     */\n    withPageUpDown(enabled = true, delta = 10) {\n        this._pageUpAndDown = { enabled, delta };\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_UP:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n                    this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_DOWN:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n                    const itemsLength = this._getItemsArray().length;\n                    this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /** Cleans up the key manager. */\n    destroy() {\n        this._typeaheadSubscription.unsubscribe();\n        this._itemChangesSubscription?.unsubscribe();\n        this._letterKeyStream.complete();\n        this.tabOut.complete();\n        this.change.complete();\n        this._pressedLetters = [];\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return (isPotentiallyFocusable(element) &&\n            !this.isDisabled(element) &&\n            (config?.ignoreVisibility || this.isVisible(element)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth ||\n        element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return (nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea');\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return (inputType === 'text' ||\n        inputType === 'password' ||\n        nodeName === 'select' ||\n        nodeName === 'textarea');\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return (isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element));\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            startAnchor.remove();\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            endAnchor.remove();\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            for (let i = 0; i < markers.length; i++) {\n                // @breaking-change 8.0.0\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                        `attribute will be removed in 8.0.0.`, markers[i]);\n                }\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                        `will be removed in 8.0.0.`, markers[i]);\n                }\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length\n            ? markers[markers.length - 1]\n            : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild?.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getFirstTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        const children = root.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getLastTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap.enabled;\n    }\n    set enabled(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() {\n        return this._autoCapture;\n    }\n    set autoCapture(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n    }\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange &&\n            !autoCaptureChange.firstChange &&\n            this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTrapFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTrapFocus]',\n                    exportAs: 'cdkTrapFocus',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['cdkTrapFocus']\n            }], autoCapture: [{\n                type: Input,\n                args: ['cdkTrapFocusAutoCapture']\n            }] } });\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    /** Whether the FocusTrap is enabled. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_TRAP_INERT_STRATEGY]\n                }] }]; } });\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n    // `event.detail` is zero depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `detail` works on Chrome, but fails on Firefox.\n    return event.buttons === 0 || event.detail === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = {\n            ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n            ...options,\n        };\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: InputModalityDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n                }] }]; } });\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nlet uniqueIds = 0;\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        if (this._liveElement.id) {\n            this._exposeAnnouncerToModals(this._liveElement.id);\n        }\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._currentPromise) {\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n            }\n            clearTimeout(this._previousTimeout);\n            this._previousTimeout = setTimeout(() => {\n                this._liveElement.textContent = message;\n                if (typeof duration === 'number') {\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\n                }\n                this._currentResolve();\n                this._currentPromise = this._currentResolve = undefined;\n            }, 100);\n            return this._currentPromise;\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        this._liveElement?.remove();\n        this._liveElement = null;\n        this._currentResolve?.();\n        this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].remove();\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live announcer element if there is an\n     * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live announcer element.\n     */\n    _exposeAnnouncerToModals(id) {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `SnakBarContainer` and other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: LiveAnnouncer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n        return this._politeness;\n    }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkAriaLive, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"], duration: [\"cdkAriaLiveDuration\", \"duration\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAriaLive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAriaLive]',\n                    exportAs: 'cdkAriaLive',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }]; }, propDecorators: { politeness: [{\n                type: Input,\n                args: ['cdkAriaLive']\n            }], duration: [{\n                type: Input,\n                args: ['cdkAriaLiveDuration']\n            }] } });\n\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                if (event.type === 'focus') {\n                    this._onFocus(event, element);\n                }\n                else {\n                    this._onBlur(event, element);\n                }\n            }\n        };\n        this._document = document;\n        this._detectionMode = options?.detectionMode || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            // Note: we don't want the observable to emit at all so we don't pass any parameters.\n            return of();\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode,\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        // If the interaction is coming from an input label, we consider it a mouse interactions.\n        // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n        // our detection, because all our assumptions are for `mousedown`. We need to handle this\n        // special case, because it's very common for checkboxes and radio buttons.\n        if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n            return 'mouse';\n        }\n        return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ ||\n            !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        element.classList.toggle('cdk-focused', !!origin);\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n        element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo ||\n            (elementInfo.checkChildren &&\n                event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n        if (info.subject.observers.length) {\n            this._ngZone.run(() => info.subject.next(origin));\n        }\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => {\n                this._setOrigin(modality, true /* isFromInteraction */);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n        const { _mostRecentTarget: mostRecentTarget, mostRecentModality } = this._inputModalityDetector;\n        // If the last interaction used the mouse on an element contained by one of the labels\n        // of an `input`/`textarea` that is currently focused, it is very likely that the\n        // user redirected focus using the label.\n        if (mostRecentModality !== 'mouse' ||\n            !mostRecentTarget ||\n            mostRecentTarget === focusEventTarget ||\n            (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n            focusEventTarget.disabled) {\n            return false;\n        }\n        const labels = focusEventTarget.labels;\n        if (labels) {\n            for (let i = 0; i < labels.length; i++) {\n                if (labels[i].contains(mostRecentTarget)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FocusMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._focusOrigin = null;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    get focusOrigin() {\n        return this._focusOrigin;\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => {\n            this._focusOrigin = origin;\n            this.cdkFocusChange.emit(origin);\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, exportAs: [\"cdkMonitorFocus\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n                    exportAs: 'cdkMonitorFocus',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusMonitor }]; }, propDecorators: { cdkFocusChange: [{\n                type: Output\n            }] } });\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n        this._breakpointSubscription = inject(BreakpointObserver)\n            .observe('(forced-colors: active)')\n            .subscribe(() => {\n            if (this._hasCheckedHighContrastMode) {\n                this._hasCheckedHighContrastMode = false;\n                this._applyBodyHighContrastModeCssClasses();\n            }\n        });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* HighContrastMode.NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\n            ? documentWindow.getComputedStyle(testElement)\n            : null;\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\n        testElement.remove();\n        switch (computedColor) {\n            // Pre Windows 11 dark theme.\n            case 'rgb(0,0,0)':\n            // Windows 11 dark themes.\n            case 'rgb(45,50,54)':\n            case 'rgb(32,32,32)':\n                return 2 /* HighContrastMode.WHITE_ON_BLACK */;\n            // Pre Windows 11 light theme.\n            case 'rgb(255,255,255)':\n            // Windows 11 light theme.\n            case 'rgb(255,250,239)':\n                return 1 /* HighContrastMode.BLACK_ON_WHITE */;\n        }\n        return 0 /* HighContrastMode.NONE */;\n    }\n    ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: A11yModule, declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], imports: [ObserversModule], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: A11yModule, imports: [ObserversModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: A11yModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ObserversModule],\n                    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                }]\n        }], ctorParameters: function () { return [{ type: HighContrastModeDetector }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, addAriaReferencedId, getAriaReferenceIds, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, removeAriaReferencedId };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId\n            ? isPlatformBrowser(this._platformId)\n            : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser &&\n            !!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) &&\n            !this.BLINK &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\n\nclass PlatformModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => (supportsPassiveEvents = true),\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* RtlScrollAxisType.NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* RtlScrollAxisType.NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* RtlScrollAxisType.NEGATED */ : 2 /* RtlScrollAxisType.INVERTED */;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n    // We can't use `declare const` because it causes conflicts inside Google with the real typings\n    // for these symbols and we can't read them off the global object, because they don't appear to\n    // be attached there for some runners like Jest.\n    // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n    return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(value))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            for (let selectedValue of this._selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n"],"x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]}