{
  "version": 3,
  "sources": ["src/app/people/people.component.ts", "src/app/people/people.component.html", "src/app/shared/table/utils.ts", "src/app/shared/table/base-table.component.ts", "src/app/shared/components/routerlink-button/routerlink-button.component.ts", "src/app/shared/components/routerlink-button/routerlink-button.component.html", "src/app/shared/components/filter-chips/filter-chips.component.ts", "src/app/shared/components/filter-chips/filter-chips.component.html", "src/app/people/people-cache.service.ts", "src/app/people/home/filter/filter.component.ts", "src/app/people/home/filter/filter.component.html", "src/app/people/home/home.component.ts", "src/app/people/home/home.component.html", "src/app/people/detail/detail.component.ts", "src/app/people/detail/detail.component.html", "src/app/people/routes.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-people',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './people.component.html',\r\n  styleUrls: ['./people.component.scss']\r\n})\r\nexport class PeopleComponent {}\r\n", "<router-outlet></router-outlet>\n", "import { isDefined } from '@tylertech/forge-core';\r\nimport { TableComponent, IMenuOption, MenuComponent, ButtonVariant } from '@tylertech/forge';\r\nimport { ViewContainerRef, ComponentRef, EmbeddedViewRef, Type } from '@angular/core';\r\n\r\nexport class TableUtils {\r\n  public static createButton(label: string, variant: ButtonVariant, clickHandler: (event: Event) => void): HTMLButtonElement {\r\n    const buttonElement = document.createElement('forge-button');\r\n    buttonElement.innerText = label;\r\n    buttonElement.setAttribute('variant', variant);\r\n    buttonElement.addEventListener('click', clickHandler);\r\n\r\n    return buttonElement as unknown as HTMLButtonElement;\r\n  }\r\n\r\n  public static createIconButton(icon: string, clickHandler: (event: Event) => void, title: string): HTMLElement {\r\n    const containerElement = document.createElement('div');\r\n\r\n    const iconButtonElement = document.createElement('forge-icon-button');\r\n    iconButtonElement.setAttribute('aria-label', title);\r\n    iconButtonElement.addEventListener('click', (event) => {\r\n      event.stopPropagation();\r\n      clickHandler(event);\r\n    });\r\n    containerElement.appendChild(iconButtonElement);\r\n\r\n    const iconElement = document.createElement('forge-icon');\r\n    iconElement.setAttribute('name', icon);\r\n    iconButtonElement.appendChild(iconElement);\r\n\r\n    const tooltipElement = document.createElement('forge-tooltip');\r\n    tooltipElement.innerHTML = title;\r\n    containerElement.appendChild(tooltipElement);\r\n\r\n    return containerElement;\r\n  }\r\n\r\n  public static createMenuButton(icon: string, selectHandler: (event: Event) => void, options: IMenuOption[], title: string): HTMLElement {\r\n    const menuElement = document.createElement('forge-menu') as MenuComponent;\r\n    menuElement.options = options;\r\n    menuElement.addEventListener('forge-menu-select', selectHandler);\r\n\r\n    menuElement.appendChild(this.createIconButton(icon, () => {}, title));\r\n\r\n    return menuElement;\r\n  }\r\n\r\n  public static createExpanderRow<T>(\r\n    rowIndex: number,\r\n    tableElement: TableComponent,\r\n    viewContainerRef: ViewContainerRef,\r\n    component: Type<T>,\r\n    title: string,\r\n    data?: any,\r\n    callback?: (value?: any) => any\r\n  ): HTMLElement {\r\n    let componentRef: ComponentRef<any> | null;\r\n\r\n    const expanderElement = TableUtils.createIconButton(\r\n      'expand_more',\r\n      () => {\r\n        const isExpanded = tableElement.isRowExpanded(rowIndex);\r\n        expanderElement.querySelector('forge-icon')?.setAttribute('name', isExpanded ? 'expand_more' : 'expand_less');\r\n        if (isExpanded) {\r\n          tableElement.collapseRow(rowIndex).then(() => {\r\n            componentRef?.destroy();\r\n            componentRef = null;\r\n          });\r\n        } else {\r\n          tableElement.expandRow(rowIndex, () => {\r\n            componentRef = viewContainerRef.createComponent(component);\r\n            componentRef.instance.rowIndex = rowIndex;\r\n            if (isDefined(data)) {\r\n              componentRef.instance.data = data;\r\n            }\r\n            if (isDefined(callback)) {\r\n              componentRef.instance.callback = callback;\r\n            }\r\n            const rootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n            return rootNode;\r\n          });\r\n        }\r\n      },\r\n      title\r\n    );\r\n\r\n    return expanderElement;\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { isArray, isDefined } from '@tylertech/forge-core';\r\nimport {\r\n  FormFieldComponentDelegate,\r\n  IColumnConfiguration,\r\n  IPaginatorChangeEventData,\r\n  ITableFilterEventData,\r\n  ITableSortEventData,\r\n  ITableSortMultipleEventData,\r\n  SortDirection\r\n} from '@tylertech/forge';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport abstract class BaseTableComponent {\r\n  public recordCount = 0;\r\n  public abstract tableColumns: IColumnConfiguration[];\r\n\r\n  private setTableFiltersAF?: number;\r\n\r\n  public abstract filterCache: IFilterParameter;\r\n\r\n  public initializeSort() {\r\n    this.tableColumns\r\n      .filter((c) => c.initialSort || isDefined(c.sortDirection))\r\n      .forEach((c) => {\r\n        c.initialSort = false;\r\n        c.sortDirection = SortDirection.Unset;\r\n      });\r\n\r\n    if (this.filterCache?.sort?.property.length && this.filterCache.sort.direction !== SortDirection.Unset) {\r\n      const column = this.tableColumns.find((c) => c.property === this.filterCache?.sort?.property) as IColumnConfiguration;\r\n      if (isDefined(column)) {\r\n        column.sortDirection = this.filterCache?.sort?.direction;\r\n        column.initialSort = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public initializeFilter() {\r\n    this.filterCache.filters?.forEach((f) => {\r\n      const tableColumn = this.tableColumns.find((tc) => tc.property === f.property && isDefined(tc.filterDelegate));\r\n      if (tableColumn) {\r\n        (tableColumn.filterDelegate as FormFieldComponentDelegate<any, any>).value = f.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  public get isFiltered(): boolean {\r\n    return this.filterCache?.filters?.length ? true : false;\r\n  }\r\n\r\n  public getColumnIndex(property: string): number {\r\n    return this.tableColumns.findIndex((c) => c.property === property);\r\n  }\r\n\r\n  public onTableSort(event: CustomEvent<ITableSortEventData | ITableSortMultipleEventData>) {\r\n    let sort = {} as ITableSortEventData;\r\n    if (isArray(event.detail)) {\r\n      sort = (event.detail as ITableSortMultipleEventData)[0];\r\n    } else {\r\n      sort = event.detail as ITableSortEventData;\r\n    }\r\n    const columnProperty = this.getColumnFromEventIndex(sort.columnIndex).property as string;\r\n    this.filterCache.sort = {\r\n      property: columnProperty,\r\n      direction: sort.direction\r\n    };\r\n    this.filterCache.skip = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTablePaginatorChange(event: CustomEvent<IPaginatorChangeEventData>) {\r\n    this.filterCache.skip = event.detail.pageIndex * event.detail.pageSize;\r\n    this.filterCache.take = event.detail.pageSize;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTableFilter(event: CustomEvent<ITableFilterEventData>) {\r\n    const value = event.detail.value?.trim();\r\n    const column = this.getColumnFromEventIndex(event.detail.columnIndex);\r\n    if (column?.property?.length) {\r\n      const filterIndex = this.filterCache.filters?.findIndex((f) => f.property === column.property) as number;\r\n      if (filterIndex !== -1) {\r\n        if (!value?.length) {\r\n          this.filterCache.filters?.splice(filterIndex, 1);\r\n        } else {\r\n          this.filterCache.filters![filterIndex].value = value;\r\n        }\r\n      } else if (value.length) {\r\n        if (!this.filterCache.filters?.length) {\r\n          this.filterCache.filters = [{ property: column.property, value: value }];\r\n        } else {\r\n          this.filterCache.filters.push({\r\n            property: column.property,\r\n            value: value\r\n          });\r\n        }\r\n      }\r\n      this.getRecords();\r\n    }\r\n  }\r\n\r\n  protected destroy() {\r\n    if (this.setTableFiltersAF) {\r\n      window.cancelAnimationFrame(this.setTableFiltersAF);\r\n    }\r\n  }\r\n\r\n  protected resetTable() {\r\n    this.filterCache.filters = undefined;\r\n    this.filterCache.skip = 0;\r\n  }\r\n\r\n  private getColumnFromEventIndex(index: number): IColumnConfiguration {\r\n    return this.tableColumns.filter((c) => !c.hidden)[index];\r\n  }\r\n\r\n  protected abstract getRecords(): void;\r\n}\r\n", "import { CommonModule } from '@angular/common';\nimport { Component, Input, input } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule } from '@tylertech/forge-angular';\n\n@Component({\n  selector: 'app-routerlink-button',\n  templateUrl: './routerlink-button.component.html',\n  styleUrls: ['./routerlink-button.component.scss'],\n  imports: [CommonModule, RouterModule, ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule]\n})\nexport class RouterlinkButtonComponent {\n  public readonly route = input<string>();\n\n  public readonly queryParams = input<any>();\n\n  @Input()\n  public label?: string;\n\n  public readonly icon = input<string>();\n\n  public readonly disabled = input<boolean>();\n}\n", "<forge-icon-button role=\"presentation\" tabindex=\"-1\">\n  <a [routerLink]=\"route()\" [queryParams]=\"queryParams()\" [attr.aria-label]=\"label\" class=\"forge-icon-button\" [ngClass]=\"{ 'routerlink--disabled': disabled() }\">\n    <forge-icon [name]=\"icon()\"></forge-icon>\n  </a>\n</forge-icon-button>\n@if (label?.length) {\n  <forge-tooltip>{{ label }}</forge-tooltip>\n}\n", "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, input } from '@angular/core';\nimport { ForgeChipModule, ForgeChipSetModule } from '@tylertech/forge-angular';\n\n@Component({\n  selector: 'app-filter-chips',\n  templateUrl: './filter-chips.component.html',\n  styleUrls: ['./filter-chips.component.scss'],\n  imports: [CommonModule, ForgeChipModule, ForgeChipSetModule]\n})\nexport class FilterChipsComponent {\n  public readonly filters = input<\n    {\n      property: string;\n      value: string;\n      label: string;\n    }[]\n  >([]);\n\n  @Output()\n  public filter = new EventEmitter();\n\n  public onFilterDelete(event: CustomEvent) {\n    const filterIndex = this.filters().findIndex((f) => f.property === event.detail.value);\n    if (filterIndex !== -1) {\n      this.filters().splice(filterIndex, 1);\n      this.filter.emit();\n    }\n  }\n}\n", "<forge-chip-set type=\"input\" dense=\"true\" (forge-chip-delete)=\"onFilterDelete($event)\">\n  @for (filter of filters(); track i; let i = $index) {\n    <forge-chip [value]=\"filter.property\">{{ filter.label }}</forge-chip>\n  }\n</forge-chip-set>\n", "import { Injectable } from '@angular/core';\nimport { SortDirection } from '@tylertech/forge';\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\n\n@Injectable()\nexport class PeopleCacheService {\n  public people?: IPerson[];\n  public homeView = {\n    storageKey: 'people-home',\n    showFilter: false,\n    filter: {\n      sort: {\n        property: 'lastName',\n        direction: SortDirection.Ascending\n      },\n      filters: [] as any[],\n      skip: 0,\n      take: 25\n    }\n  };\n}\n", "import { Component, OnInit, Output, EventEmitter, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { IOption } from '@tylertech/forge';\r\nimport {\r\n  ForgeButtonModule,\r\n  ForgeDividerModule,\r\n  ForgeDrawerModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeSelectModule,\r\n  ForgeTextFieldModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components/autocomplete-range/autocomplete-range.component';\r\nimport { PeopleCacheService } from '../../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-home-filter',\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDividerModule,\r\n    ForgeDrawerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeSelectModule,\r\n    ForgeTextFieldModule,\r\n    AutocompleteRangeComponent\r\n  ],\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnInit {\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public viewCache = this.cache.homeView;\r\n  public formGroup = new FormGroup({\r\n    firstName: new FormControl(),\r\n    lastName: new FormControl(),\r\n    gender: new FormControl(),\r\n    occupation: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public genderOptions: IOption[] = [\r\n    { label: 'Male', value: 'male' },\r\n    { label: 'Female', value: 'female' },\r\n    { label: 'Undecided', value: 'undecided' }\r\n  ];\r\n\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    const options = [];\r\n    for (let index = 0; index < 20; index++) {\r\n      options.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n    return of(options);\r\n  };\r\n\r\n  public ngOnInit() {\r\n    this.loadForm(this.cache.homeView.filter.filters);\r\n  }\r\n\r\n  public onClearFilter() {\r\n    this.formGroup.reset();\r\n    this.cache.homeView.filter.filters = [];\r\n  }\r\n\r\n  public onApplyFilter() {\r\n    this.cache.homeView.filter.filters =\r\n      Object.entries(Utils.objectReduce(this.formGroup.value)).map((e) => ({\r\n        property: e[0],\r\n        value: e[1],\r\n        label: this.propertyLabel(e[0])\r\n      })) || [];\r\n    this.filter.emit();\r\n  }\r\n\r\n  public loadForm(filters: any[]) {\r\n    this.formGroup.reset();\r\n    filters.forEach((f) => {\r\n      const formControl = this.formGroup.get(f.property);\r\n      if (formControl) {\r\n        formControl.setValue(f.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private propertyLabel(property: string): string {\r\n    switch (property) {\r\n      case 'firstName':\r\n        return 'First name';\r\n      case 'lastName':\r\n        return 'Last name';\r\n      case 'gender':\r\n        return 'Gender';\r\n      case 'occupation':\r\n        return 'Occupation';\r\n      case 'facet':\r\n        return 'Facet';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n", "<forge-drawer direction=\"right\" [open]=\"viewCache.showFilter\" open=\"false\" (forge-drawer-close)=\"viewCache.showFilter = false\">\n  <div slot=\"header\" class=\"header\">\n    <span class=\"header__title forge-typography--subheading2\">Filter people</span>\n    <forge-icon-button class=\"app--flex-right\" aria-label=\"Close\" (click)=\"viewCache.showFilter = false\">\n      <forge-icon name=\"close\"></forge-icon>\n    </forge-icon-button>\n  </div>\n\n  <form class=\"body\" [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" (ngSubmit)=\"onApplyFilter()\">\n    <forge-text-field>\n      <input type=\"text\" id=\"people--home--filter--first-name\" formControlName=\"firstName\" />\n      <label for=\"people--home--filter--first-name\" slot=\"label\">First name</label>\n    </forge-text-field>\n    <forge-text-field>\n      <input type=\"text\" id=\"people--home--filter--last-name\" formControlName=\"lastName\" />\n      <label for=\"people--home--filter--last-name\" slot=\"label\">Last name</label>\n    </forge-text-field>\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\" multiple=\"true\"></forge-select>\n    <forge-text-field>\n      <input type=\"text\" id=\"people--home--filter--occupation\" formControlName=\"occupation\" />\n      <label for=\"people--home--filter--occupation\" slot=\"label\">Occupation</label>\n    </forge-text-field>\n    <forge-divider></forge-divider>\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\n  </form>\n\n  <div slot=\"footer\" class=\"footer\">\n    <forge-button variant=\"outlined\" (click)=\"onClearFilter()\">Clear</forge-button>\n    <forge-button variant=\"raised\" type=\"submit\" (click)=\"onApplyFilter()\">Apply</forge-button>\n  </div>\n</forge-drawer>\n", "import { Component, DestroyRef, NgZone, OnDestroy, OnInit, ViewContainerRef, inject, viewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { finalize } from 'rxjs';\r\nimport { isArray } from '@tylertech/forge-core';\r\nimport { CellAlign, IColumnConfiguration, TableComponent, TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport {\r\n  ForgeBadgeModule,\r\n  ForgeButtonModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeOptionModule,\r\n  ForgePaginatorModule,\r\n  ForgeSelectDropdownModule,\r\n  ForgeSkeletonModule,\r\n  ForgeTableModule,\r\n  ForgeToolbarModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { TableUtils } from 'src/app/shared/table/utils';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { BaseTableComponent } from 'src/app/shared/table/base-table.component';\r\nimport { RouterlinkButtonComponent } from 'src/app/shared/components/routerlink-button/routerlink-button.component';\r\nimport { FilterChipsComponent } from 'src/app/shared/components/filter-chips/filter-chips.component';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { FilterComponent } from './filter/filter.component';\r\n\r\n@Component({\r\n  selector: 'app-people-home',\r\n  imports: [\r\n    CommonModule,\r\n    ForgeBadgeModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeOptionModule,\r\n    ForgePaginatorModule,\r\n    ForgeSelectDropdownModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule,\r\n    RouterlinkButtonComponent,\r\n    FilterChipsComponent,\r\n    FilterComponent\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseTableComponent implements OnInit, OnDestroy {\r\n  private destroyRef = inject(DestroyRef);\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private ngZone = inject(NgZone);\r\n\r\n  private readonly peopleTable = viewChild<TableComponent>('peopleTable');\r\n  private readonly peopleFilter = viewChild(FilterComponent);\r\n\r\n  public isBusy = false;\r\n  public recordset: Array<IPerson> = [];\r\n  public filterCache = this.cache.homeView.filter;\r\n  public viewCache = this.cache.homeView;\r\n  public optionalTableColumns = [\r\n    { property: 'image', header: 'Image', hidden: false },\r\n    { property: 'firstName', header: 'First', hidden: false },\r\n    { property: 'lastName', header: 'Last', hidden: false },\r\n    { property: 'gender', header: 'Gender', hidden: false },\r\n    { property: 'occupation', header: 'Occupation', hidden: false }\r\n  ];\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    {\r\n      property: 'image',\r\n      width: 48,\r\n      align: CellAlign.Center,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        const imgElement = document.createElement('img') as HTMLImageElement;\r\n        imgElement.src = `mock-data/${Utils.formatNumber(data.id, '2.0-0')}-small.png`;\r\n        imgElement.setAttribute('alt', '');\r\n        imgElement.classList.add('forge-table-cell__image');\r\n        return imgElement;\r\n      }\r\n    },\r\n    {\r\n      header: 'Id',\r\n      property: 'id',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Dd');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'First',\r\n      property: 'firstName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'First Nmae');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Last',\r\n      property: 'lastName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Last Nmae');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Gender',\r\n      property: 'gender',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Gender');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Occupation',\r\n      property: 'occupation',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Occupation');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Actions',\r\n      align: CellAlign.Right,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: IPerson) => {\r\n        this.ngZone.run(() => {\r\n          cellElement.appendChild(\r\n            TableUtils.createExpanderRow(\r\n              rowIndex,\r\n              this.peopleTable() as TableComponent,\r\n              this.viewContainerRef,\r\n              TableDetailComponent,\r\n              'Toggle table detail',\r\n              data\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createMenuButton(\r\n              'more_vert',\r\n              (event: Event) => {\r\n                console.log(event);\r\n              },\r\n              [\r\n                {\r\n                  value: 1,\r\n                  label: 'Edit',\r\n                  leadingIcon: 'edit',\r\n                  leadingIconType: 'component'\r\n                },\r\n                {\r\n                  value: 2,\r\n                  label: 'Add',\r\n                  leadingIcon: 'add',\r\n                  leadingIconType: 'component'\r\n                },\r\n                {\r\n                  value: 3,\r\n                  label: 'Delete',\r\n                  leadingIcon: 'delete',\r\n                  leadingIconType: 'component'\r\n                }\r\n              ],\r\n              'More options'\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createIconButton(\r\n              'keyboard_arrow_right',\r\n              (event: Event) => {\r\n                this.ngZone.run(() => {\r\n                  this.router.navigate([`people/detail/${data.id}/${data.firstName}/${data.lastName}`]);\r\n                });\r\n              },\r\n              'View person details'\r\n            )\r\n          );\r\n\r\n          // const componentRef = this.viewContainerRef.createComponent(RouterlinkButtonComponent);\r\n          // componentRef.instance.route = '/profile';\r\n          // componentRef.instance.queryParams = { id: data.id };\r\n          // componentRef.instance.icon = 'person';\r\n          // componentRef.instance.tooltip = 'Show profile';\r\n          // const linkButtonNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n          // cellElement.appendChild(linkButtonNode);\r\n        });\r\n\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n  public selectedPeople: IPerson[] = [];\r\n  public get selectedTableColumns() {\r\n    return this.optionalTableColumns.filter((c) => !c.hidden).map((c) => c.property);\r\n  }\r\n\r\n  public ngOnInit() {\r\n    const storageColumns = localStorage.getItem(this.cache.homeView.storageKey);\r\n    if (storageColumns?.length) {\r\n      const columns = JSON.parse(storageColumns) as {\r\n        property: string;\r\n        hidden: boolean;\r\n      }[];\r\n      if (isArray(columns)) {\r\n        this.optionalTableColumns.forEach((c) => {\r\n          const storedColumn = columns.find((sc) => sc.property === c.property);\r\n          if (storedColumn) {\r\n            c.hidden = storedColumn.hidden;\r\n          }\r\n        });\r\n        this.setTableColumnsVisibilty();\r\n      }\r\n    }\r\n\r\n    this.initializeSort();\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.destroy();\r\n  }\r\n\r\n  public onPeopleSelected(clearSelection = false) {\r\n    if (clearSelection) {\r\n      this.selectedPeople.length = 0;\r\n      this.peopleTable()?.clearSelections();\r\n    } else {\r\n      this.selectedPeople = this.peopleTable()?.getSelectedRows() as IPerson[];\r\n    }\r\n  }\r\n\r\n  public onTableOptionSelected(columns: string[]) {\r\n    this.optionalTableColumns = this.optionalTableColumns.map((c) => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    this.setTableColumnsVisibilty();\r\n    localStorage.setItem(\r\n      this.cache.homeView.storageKey,\r\n      JSON.stringify(\r\n        this.optionalTableColumns.map((c) => ({\r\n          property: c.property,\r\n          hidden: c.hidden\r\n        }))\r\n      )\r\n    );\r\n  }\r\n\r\n  public onTableShowFilter() {\r\n    this.viewCache.showFilter = !this.viewCache.showFilter;\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n  }\r\n\r\n  public onApplyFilter(reloadFilter: boolean) {\r\n    this.getRecords();\r\n    if (reloadFilter) {\r\n      (this.peopleFilter() as FilterComponent).loadForm(this.filterCache.filters);\r\n    }\r\n  }\r\n\r\n  protected getRecords() {\r\n    this.onPeopleSelected(true);\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort,\r\n        filters: this.filterCache.filters,\r\n        skip: this.filterCache.skip,\r\n        take: this.filterCache.take\r\n      })\r\n      .pipe(\r\n        takeUntilDestroyed(this.destroyRef),\r\n        finalize(() => (this.isBusy = false))\r\n      )\r\n      .subscribe({\r\n        next: (result) => {\r\n          this.recordset = result.data;\r\n          this.recordCount = result.count;\r\n        }\r\n      });\r\n  }\r\n\r\n  private setTableColumnsVisibilty() {\r\n    this.tableColumns.forEach((tc) => {\r\n      const optionalTableColumn = this.optionalTableColumns.find((otc) => otc.property === tc.property);\r\n      if (optionalTableColumn && tc.hidden !== optionalTableColumn.hidden) {\r\n        tc.hidden = optionalTableColumn.hidden;\r\n        const colIndex = this.getColumnIndex(tc.property as string);\r\n        if (tc.hidden) {\r\n          this.peopleTable()?.hideColumn(colIndex);\r\n        } else {\r\n          this.peopleTable()?.showColumn(colIndex);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">People</h2>\n  <app-routerlink-button slot=\"end\" route=\"/profile\" icon=\"person\" label=\"View profile\"></app-routerlink-button>\n</forge-toolbar>\n\n<div class=\"body\">\n  <div class=\"body__left\">\n    <div [ngClass]=\"{ 'app--hidden': isBusy }\" class=\"table\">\n      <div class=\"table__header\" [ngClass]=\"{ 'table__header-action': selectedPeople.length }\">\n        @if (!selectedPeople.length) {\n          <app-filter-chips [filters]=\"filterCache.filters\" (filter)=\"onApplyFilter(true)\"></app-filter-chips>\n          <forge-button class=\"app--flex-right\" variant=\"outlined\" (click)=\"onTableShowFilter()\">\n            @if (filterCache.filters.length) {\n              <forge-badge class=\"table__header__filter-count\" theme=\"info-primary\">{{ filterCache.filters.length }}</forge-badge>\n            } @else {\n              <forge-icon name=\"filter_list\"></forge-icon>\n            }\n            <span>Filter</span>\n          </forge-button>\n          <forge-icon-button id=\"people--home--column-select\" class=\"table__header__columns\" aria-label=\"Choose table columns\">\n            <forge-icon name=\"view_column\"></forge-icon>\n          </forge-icon-button>\n          <forge-select-dropdown target=\"#people--home--column-select\" multiple [value]=\"selectedTableColumns\" (change)=\"onTableOptionSelected($event.detail)\">\n            @for (column of optionalTableColumns; track i; let i = $index) {\n              <forge-option [value]=\"column.property\">\n                {{ column.header }}\n              </forge-option>\n            }\n          </forge-select-dropdown>\n        } @else {\n          <span>{{ selectedPeople.length }} people selected</span>\n        }\n      </div>\n\n      <forge-table\n        #peopleTable\n        class=\"table__body\"\n        [ngClass]=\"{ 'app--hidden': !recordCount }\"\n        [data]=\"recordset\"\n        [columnConfigurations]=\"tableColumns\"\n        (forge-table-sort)=\"onTableSort($event)\"\n        select-key=\"id\"\n        (forge-table-select)=\"onPeopleSelected()\"\n        (forge-table-select-all)=\"onPeopleSelected()\"\n        fixed-headers=\"true\"\n        [filter]=\"viewCache.showFilter\"\n        (forge-table-filter)=\"onTableFilter($event)\"\n      ></forge-table>\n\n      @if (recordCount) {\n        <div class=\"table__footer\">\n          <forge-paginator class=\"app--flex-right\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event)\"></forge-paginator>\n        </div>\n      }\n    </div>\n\n    @if (!isBusy && !recordCount) {\n      <div class=\"empty-state\">\n        <img src=\"https://cdn.forge.tylertech.com/v1/images/spot-hero/general-empty-state-spot-hero.svg\" alt />\n        <div>No people found.</div>\n      </div>\n    }\n\n    @if (isBusy) {\n      <div class=\"busy-state\">\n        <forge-skeleton list-item></forge-skeleton>\n        <forge-skeleton list-item></forge-skeleton>\n        <forge-skeleton list-item></forge-skeleton>\n      </div>\n    }\n  </div>\n\n  <app-people-home-filter (filter)=\"onApplyFilter(false)\"></app-people-home-filter>\n</div>\n", "import { Component, DestroyRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-detail',\r\n  imports: [CommonModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule],\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent {\r\n  private destroyRef = inject(DestroyRef);\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public appCache = inject(AppCacheService);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  public person?: IPerson;\r\n  public imageUrl?: string;\r\n  public index = 0;\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  constructor() {\r\n    const id = this.route.snapshot.params['id'];\r\n    if (isDefined(id)) {\r\n      this.appDataService\r\n        .getPerson(id)\r\n        .pipe(takeUntilDestroyed(this.destroyRef))\r\n        .subscribe({\r\n          next: (r) => {\r\n            this.person = r;\r\n            this.imageUrl = `mock-data/${Utils.formatNumber(this.person?.id as number, '2.0-0')}.png`;\r\n          }\r\n        });\r\n    } else {\r\n      this.router.navigate(['people/home']);\r\n    }\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    switch (route) {\r\n      case 'back':\r\n        this.router.navigate(['people/home']);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onViewWiki() {\r\n    window.open(this.person?.url, '_blank');\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button (click)=\"onNavigate('back')\" aria-label=\"Go back\">\r\n      <forge-icon name=\"arrow_back\"></forge-icon>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--subheading4\">\r\n      {{ person?.firstName + ' ' + person?.lastName }}\r\n    </h2>\r\n  </div>\r\n  <div slot=\"end\">\r\n    <forge-button variant=\"outlined\" (click)=\"onViewWiki()\" [disabled]=\"!person?.url?.length\">View wiki</forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <forge-label-value>\r\n      <span slot=\"label\">Gender</span>\r\n      <span slot=\"value\">{{ person?.gender }}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Occupation</span>\r\n      <span slot=\"value\">{{ person?.occupation }}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Quote</span>\r\n      <span slot=\"value\">{{ person?.quote }}</span>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <div class=\"body__right\">\r\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt />\r\n  </div>\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\nimport { PeopleComponent } from './people.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { PeopleCacheService } from './people-cache.service';\r\n\r\nexport const PEOPLE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: PeopleComponent,\r\n    providers: [PeopleCacheService],\r\n    children: [\r\n      { path: 'home', component: HomeComponent },\r\n      { path: 'detail', component: DetailComponent },\r\n      { path: 'detail/:id/:firstName/:lastName', component: DetailComponent },\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n    ]\r\n  },\r\n  { path: '**', redirectTo: 'home', pathMatch: 'full' }\r\n];\r\n"],
  "mappings": "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",
  "names": ["PeopleComponent", "selectors", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "styles", "_PeopleComponent", "TableUtils", "createButton", "label", "variant", "clickHandler", "buttonElement", "document", "createElement", "innerText", "setAttribute", "addEventListener", "createIconButton", "icon", "title", "containerElement", "iconButtonElement", "event", "stopPropagation", "appendChild", "iconElement", "tooltipElement", "innerHTML", "createMenuButton", "selectHandler", "options", "menuElement", "createExpanderRow", "rowIndex", "tableElement", "viewContainerRef", "component", "data", "callback", "componentRef", "expanderElement", "isExpanded", "isRowExpanded", "querySelector", "collapseRow", "then", "destroy", "expandRow", "createComponent", "instance", "isDefined", "hostView", "rootNodes", "BaseTableComponent", "constructor", "recordCount", "initializeSort", "tableColumns", "filter", "c", "initialSort", "isDefined", "sortDirection", "forEach", "SortDirection", "Unset", "filterCache", "sort", "property", "length", "direction", "column", "find", "initializeFilter", "filters", "f", "tableColumn", "tc", "filterDelegate", "value", "isFiltered", "getColumnIndex", "findIndex", "onTableSort", "event", "isArray", "detail", "columnProperty", "getColumnFromEventIndex", "columnIndex", "skip", "getRecords", "onTablePaginatorChange", "pageIndex", "pageSize", "take", "onTableFilter", "trim", "filterIndex", "splice", "push", "destroy", "setTableFiltersAF", "window", "cancelAnimationFrame", "resetTable", "undefined", "index", "hidden", "factory", "\u0275fac", "_BaseTableComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "label", "RouterlinkButtonComponent", "constructor", "route", "input", "queryParams", "icon", "disabled", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275conditionalCreate", "RouterlinkButtonComponent_Conditional_3_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275conditional", "length", "CommonModule", "NgClass", "RouterModule", "RouterLink", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeTooltipModule", "TooltipComponent", "styles", "_RouterlinkButtonComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "filter_r1", "property", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "label", "FilterChipsComponent", "constructor", "filters", "input", "filter", "EventEmitter", "onFilterDelete", "event", "filterIndex", "findIndex", "f", "detail", "value", "splice", "emit", "selectors", "inputs", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275repeaterCreate", "FilterChipsComponent_For_2_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "CommonModule", "ForgeChipModule", "ChipComponent", "ForgeChipSetModule", "ChipSetComponent", "styles", "_FilterChipsComponent", "PeopleCacheService", "constructor", "homeView", "storageKey", "showFilter", "filter", "sort", "property", "direction", "SortDirection", "Ascending", "filters", "skip", "take", "factory", "\u0275fac", "_PeopleCacheService", "FilterComponent", "constructor", "appCache", "inject", "AppCacheService", "cache", "PeopleCacheService", "filter", "EventEmitter", "viewCache", "homeView", "formGroup", "FormGroup", "firstName", "FormControl", "lastName", "gender", "occupation", "facet", "genderOptions", "label", "value", "facetFilter", "options", "index", "push", "of", "ngOnInit", "loadForm", "filters", "onClearFilter", "reset", "onApplyFilter", "Object", "entries", "Utils", "objectReduce", "map", "e", "property", "propertyLabel", "emit", "forEach", "f", "formControl", "get", "setValue", "selectors", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "showFilter", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275advance", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "ForgeButtonModule", "ButtonComponent", "ForgeDividerModule", "DividerComponent", "ForgeDrawerModule", "DrawerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeSelectModule", "SelectValueAccessor", "SelectComponent", "ForgeTextFieldModule", "TextFieldComponent", "AutocompleteRangeComponent", "styles", "_FilterComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r2", "filterCache", "filters", "length", "\u0275\u0275element", "\u0275\u0275property", "column_r4", "property", "\u0275\u0275textInterpolate1", "header", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onApplyFilter", "onTableShowFilter", "\u0275\u0275conditionalCreate", "HomeComponent_Conditional_8_Conditional_2_Template", "HomeComponent_Conditional_8_Conditional_3_Template", "$event", "onTableOptionSelected", "detail", "\u0275\u0275repeaterCreate", "HomeComponent_Conditional_8_For_10_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275conditional", "selectedTableColumns", "\u0275\u0275repeater", "optionalTableColumns", "selectedPeople", "_r5", "onTablePaginatorChange", "skip", "take", "recordCount", "HomeComponent", "BaseTableComponent", "constructor", "destroyRef", "inject", "DestroyRef", "router", "Router", "appDataService", "AppDataService", "cache", "PeopleCacheService", "viewContainerRef", "ViewContainerRef", "ngZone", "NgZone", "peopleTable", "viewChild", "peopleFilter", "FilterComponent", "isBusy", "recordset", "homeView", "filter", "viewCache", "hidden", "tableColumns", "width", "align", "CellAlign", "Center", "template", "rowIndex", "cellElement", "data", "imgElement", "document", "createElement", "src", "Utils", "formatNumber", "id", "setAttribute", "classList", "add", "sortable", "filterDelegate", "delegate", "TextFieldComponentDelegate", "inputElement", "Right", "run", "appendChild", "TableUtils", "createExpanderRow", "TableDetailComponent", "createMenuButton", "event", "console", "log", "value", "label", "leadingIcon", "leadingIconType", "createIconButton", "navigate", "firstName", "lastName", "c", "map", "ngOnInit", "storageColumns", "localStorage", "getItem", "storageKey", "columns", "JSON", "parse", "isArray", "forEach", "storedColumn", "find", "sc", "setTableColumnsVisibilty", "initializeSort", "showFilter", "initializeFilter", "getRecords", "ngOnDestroy", "destroy", "onPeopleSelected", "clearSelection", "clearSelections", "getSelectedRows", "includes", "setItem", "stringify", "reloadFilter", "loadForm", "getPeople", "sort", "pipe", "takeUntilDestroyed", "finalize", "subscribe", "next", "result", "count", "tc", "optionalTableColumn", "otc", "colIndex", "getColumnIndex", "hideColumn", "showColumn", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "HomeComponent_Conditional_8_Template", "HomeComponent_Conditional_9_Template", "i0", "_r1", "onTableSort", "onTableFilter", "HomeComponent_Conditional_12_Template", "HomeComponent_Conditional_13_Template", "HomeComponent_Conditional_14_Template", "\u0275\u0275pureFunction1", "_c1", "_c2", "CommonModule", "NgClass", "ForgeBadgeModule", "BadgeComponent", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeOptionModule", "OptionComponent", "ForgePaginatorModule", "PaginatorComponent", "ForgeSelectDropdownModule", "SelectDropdownComponent", "ForgeSkeletonModule", "SkeletonComponent", "ForgeTableModule", "TableComponent", "ForgeToolbarModule", "ToolbarComponent", "RouterlinkButtonComponent", "FilterChipsComponent", "styles", "_HomeComponent", "DetailComponent", "constructor", "destroyRef", "inject", "DestroyRef", "route", "ActivatedRoute", "router", "Router", "appCache", "AppCacheService", "appDataService", "AppDataService", "cache", "PeopleCacheService", "index", "noImageUrl", "id", "snapshot", "params", "isDefined", "getPerson", "pipe", "takeUntilDestroyed", "subscribe", "next", "r", "person", "imageUrl", "Utils", "formatNumber", "navigate", "onNavigate", "onViewWiki", "window", "open", "url", "onImageError", "event", "targetElement", "target", "src", "includes", "onerror", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "$event", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "firstName", "lastName", "\u0275\u0275property", "length", "\u0275\u0275textInterpolate", "gender", "occupation", "quote", "\u0275\u0275sanitizeUrl", "CommonModule", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeLabelValueModule", "LabelValueComponent", "ForgeToolbarModule", "ToolbarComponent", "styles", "_DetailComponent", "PEOPLE_ROUTES", "path", "component", "PeopleComponent", "providers", "PeopleCacheService", "children", "HomeComponent", "DetailComponent", "redirectTo", "pathMatch"]
}
