{"version":3,"file":"898.c7ce008e4b03b9c8.js","mappings":"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","names":["AppDataService","constructor","this","httpClient","inject","HttpClient","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","providedIn","PeopleComponent","core","VBU","selectors","standalone","features","i0","decls","vars","template","rf","ctx","RouterOutlet","styles","TableUtils","createLinkButton","label","clickHandler","linkElement","document","createElement","classList","add","innerText","type","style","minWidth","addEventListener","createIconButton","icon","title","containerElement","iconButtonElement","setAttribute","event","stopPropagation","appendChild","iconElement","tooltipElement","innerHTML","createMenuButton","selectHandler","options","menuElement","createExpanderRow","rowIndex","tableElement","viewContainerRef","component","callback","componentRef","expanderElement","isExpanded","isRowExpanded","querySelector","collapseRow","then","destroy","expandRow","createComponent","instance","hostView","rootNodes","BaseTableComponent","recordCount","initializeSort","tableColumns","c","initialSort","sortDirection","forEach","undefined","filterCache","column","initializeFilter","tableColumn","tc","filterDelegate","isFiltered","getColumnIndex","findIndex","onTableSort","columnProperty","getColumnFromEventIndex","columnIndex","getRecords","onTablePaginatorChange","detail","pageIndex","pageSize","onTableFilter","trim","filterIndex","splice","push","header","setTableFiltersAF","window","cancelAnimationFrame","resetTable","index","hidden","ctx_r0","RouterlinkButtonComponent","inputs","route","queryParams","disabled","consts","RouterlinkButtonComponent_Conditional_3_Template","_c0","CommonModule","i1","RouterModule","i2","ForgeIconButtonModule","i3","ForgeIconModule","ForgeTooltipModule","filter_r1","FilterChipsComponent","EventEmitter","onFilterDelete","emit","outputs","$event","FilterChipsComponent_For_2_Template","ForgeChipModule","ForgeChipSetModule","PeopleCacheService","homeView","storageKey","showFilter","SortDirection","Ascending","FilterComponent","appCache","AppCacheService","cache","viewCache","formGroup","FormGroup","firstName","FormControl","lastName","gender","occupation","facet","genderOptions","facetFilter","of","ngOnInit","loadForm","onClearFilter","reset","onApplyFilter","Object","entries","reduceObject","e","propertyLabel","formControl","setValue","ReactiveFormsModule","ForgeButtonModule","ForgeDividerModule","ForgeDrawerModule","ForgeSelectModule","ForgeTextFieldModule","AutocompleteRangeComponent","ctx_r2","column_r4","_r2","onTableShowFilter","HomeComponent_Conditional_8_Conditional_2_Template","HomeComponent_Conditional_8_Conditional_3_Template","onTableOptionSelected","HomeComponent_Conditional_8_For_10_Template","selectedTableColumns","optionalTableColumns","selectedPeople","_r5","HomeComponent","super","router","Router","appDataService","ViewContainerRef","ngZone","NgZone","isBusy","recordset","width","align","CellAlign","Center","cellElement","imgElement","src","formatNumber","sortable","TextFieldComponentDelegate","Right","run","peopleTable","TableDetailComponent","console","log","navigate","storageColumns","columns","isArray","storedColumn","sc","setTableColumnsVisibilty","ngOnDestroy","onPeopleSelected","clearSelection","clearSelections","getSelectedRows","includes","reloadFilter","peopleFilter","finalize","subscribe","result","optionalTableColumn","otc","colIndex","hideColumn","showColumn","viewQuery","HomeComponent_Conditional_8_Template","HomeComponent_Conditional_9_Template","_r1","HomeComponent_Conditional_12_Template","HomeComponent_Conditional_13_Template","HomeComponent_Conditional_14_Template","_c1","_c2","ForgeBadgeModule","ForgeOptionModule","ForgePaginatorModule","ForgeSelectDropdownModule","ForgeSkeletonModule","ForgeTableModule","ForgeToolbarModule","DetailComponent","ActivatedRoute","noImageUrl","snapshot","params","person","imageUrl","onNavigate","onViewWiki","open","url","onImageError","targetElement","target","onerror","quote","ForgeLabelValueModule","PEOPLE_ROUTES","path","providers","children","redirectTo","pathMatch","CardComponent","border","raisedClass","outlinedClass","_angular_core__WEBPACK_IMPORTED_MODULE_0__","hostVars","hostBindings","a","b","getPropertyValue","comparator","groupData","reduce","previousValue","currentValue","isString","operator","substring","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","sensitivity","numeric","navigateBack","location","fallbackRoute","getState","navigationId","back","elementId","prefix","Math","random","replace","formatDate","format","uniqueId","parseQueryStringParameters","queryIndex","href","httpParams","HttpParams","fromString","keys","k","getAll","enumerable","writable","object","reduced"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/people/people.component.ts","./src/app/people/people.component.html","./src/app/shared/table/utils.ts","./src/app/shared/table/base-table.component.ts","./src/app/shared/components/routerlink-button/routerlink-button.component.html","./src/app/shared/components/routerlink-button/routerlink-button.component.ts","./src/app/shared/components/filter-chips/filter-chips.component.html","./src/app/shared/components/filter-chips/filter-chips.component.ts","./src/app/people/people-cache.service.ts","./src/app/people/home/filter/filter.component.ts","./src/app/people/home/filter/filter.component.html","./src/app/people/home/home.component.html","./src/app/people/home/home.component.ts","./src/app/people/detail/detail.component.ts","./src/app/people/detail/detail.component.html","./src/app/people/routes.ts","./src/app/shared/components/card/card.component.ts","./src/app/shared/components/card/card.component.html","./src/utils.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-people',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet\r\n  ],\r\n  templateUrl: './people.component.html',\r\n  styleUrls: ['./people.component.scss']\r\n})\r\nexport class PeopleComponent {\r\n}\r\n","<router-outlet></router-outlet>","import { isDefined } from '@tylertech/forge-core';\r\nimport { TableComponent, IMenuOption, MenuComponent } from '@tylertech/forge';\r\nimport { ViewContainerRef, ComponentRef, EmbeddedViewRef, Type } from '@angular/core';\r\n\r\nexport class TableUtils {\r\n  public static createLinkButton(label: string | number, clickHandler: (event: Event) => void): HTMLButtonElement {\r\n    const linkElement = document.createElement('button');\r\n    linkElement.classList.add('forge-hyperlink');\r\n    linkElement.innerText = label.toString();\r\n    linkElement.type = 'button';\r\n    linkElement.style.minWidth = '36px';\r\n    linkElement.addEventListener('click', clickHandler);\r\n    return linkElement;\r\n  }\r\n\r\n  public static createIconButton(icon: string, clickHandler: (event: Event) => void, title: string): HTMLElement {\r\n    const containerElement = document.createElement('div');\r\n\r\n    const iconButtonElement = document.createElement('forge-icon-button');\r\n    iconButtonElement.setAttribute('aria-label', title);\r\n    iconButtonElement.addEventListener('click', (event) => {\r\n      event.stopPropagation();\r\n      clickHandler(event);\r\n    });\r\n    containerElement.appendChild(iconButtonElement)\r\n\r\n    const iconElement = document.createElement('forge-icon');\r\n    iconElement.setAttribute('name', icon);\r\n    iconButtonElement.appendChild(iconElement);\r\n\r\n    const tooltipElement = document.createElement('forge-tooltip');\r\n    tooltipElement.innerHTML = title;\r\n    containerElement.appendChild(tooltipElement);\r\n\r\n    return containerElement;\r\n  }\r\n\r\n  public static createMenuButton(icon: string, selectHandler: (event: Event) => void, options: IMenuOption[], title: string): HTMLElement {\r\n    const menuElement = document.createElement('forge-menu') as MenuComponent;\r\n    menuElement.options = options;\r\n    menuElement.addEventListener('forge-menu-select', selectHandler);\r\n\r\n    menuElement.appendChild(this.createIconButton(icon, () => { }, title));\r\n\r\n    return menuElement;\r\n  }\r\n\r\n  public static createExpanderRow<T>(\r\n    rowIndex: number,\r\n    tableElement: TableComponent,\r\n    viewContainerRef: ViewContainerRef,\r\n    component: Type<T>,\r\n    title: string,\r\n    data?: any,\r\n    callback?: (value?: any) => any\r\n  ): HTMLElement {\r\n    let componentRef: ComponentRef<any> | null;\r\n\r\n    const expanderElement = TableUtils.createIconButton(\r\n      'expand_more',\r\n      () => {\r\n        const isExpanded = tableElement.isRowExpanded(rowIndex);\r\n        expanderElement.querySelector('forge-icon')?.setAttribute('name', isExpanded ? 'expand_more' : 'expand_less');\r\n        if (isExpanded) {\r\n          tableElement.collapseRow(rowIndex).then(() => {\r\n            componentRef?.destroy();\r\n            componentRef = null;\r\n          });\r\n        } else {\r\n          tableElement.expandRow(rowIndex, () => {\r\n            componentRef = viewContainerRef.createComponent(component);\r\n            componentRef.instance.rowIndex = rowIndex;\r\n            if (isDefined(data)) {\r\n              componentRef.instance.data = data;\r\n            }\r\n            if (isDefined(callback)) {\r\n              componentRef.instance.callback = callback;\r\n            }\r\n            const rootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n            return rootNode;\r\n          });\r\n        }\r\n      },\r\n      title\r\n    );\r\n\r\n    return expanderElement;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { BaseComponentDelegate, FormFieldComponentDelegate, IColumnConfiguration, SortDirection } from '@tylertech/forge';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport abstract class BaseTableComponent {\r\n  public recordCount = 0;\r\n  public abstract tableColumns: IColumnConfiguration[];\r\n\r\n  private setTableFiltersAF?: number;\r\n\r\n  public abstract filterCache: IFilterParameter;\r\n\r\n  constructor() { }\r\n\r\n  public initializeSort() {\r\n    this.tableColumns.filter((c) => c.initialSort || isDefined(c.sortDirection)).forEach((c) => {\r\n      c.initialSort = false;\r\n      c.sortDirection = undefined;\r\n    });\r\n    if (this.filterCache?.sort?.property.length) {\r\n      const column = this.tableColumns.find((c) => c.property === this.filterCache?.sort?.property) as IColumnConfiguration;\r\n      if (isDefined(column)) {\r\n        column.sortDirection = this.filterCache?.sort?.direction;\r\n        column.initialSort = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public initializeFilter() {\r\n    this.filterCache.filters?.forEach(f => {\r\n      const tableColumn = this.tableColumns.find(tc => tc.property === f.property && isDefined(tc.filterDelegate));\r\n      if (tableColumn) {\r\n        (tableColumn.filterDelegate as FormFieldComponentDelegate<any, any>).value = f.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  public get isFiltered(): boolean {\r\n    return this.filterCache?.filters?.length ? true : false;\r\n  }\r\n\r\n  public getColumnIndex(property: string): number {\r\n    return this.tableColumns.findIndex(c => c.property === property);\r\n  }\r\n\r\n  public onTableSort(sort: { columnIndex: number; direction: SortDirection }) {\r\n    const columnProperty = this.getColumnFromEventIndex(sort.columnIndex).property as string;\r\n    this.filterCache.sort = { property: columnProperty, direction: sort.direction };\r\n    this.filterCache.skip = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTablePaginatorChange(detail: { pageIndex: number; pageSize: number }) {\r\n    this.filterCache.skip = detail.pageIndex * detail.pageSize;\r\n    this.filterCache.take = detail.pageSize;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTableFilter(detail: { value: string; columnIndex: number }) {\r\n    detail.value = detail.value?.trim();\r\n    const column = this.getColumnFromEventIndex(detail.columnIndex);\r\n    if (column?.property?.length) {\r\n      const filterIndex = this.filterCache.filters?.findIndex(f => f.property === column.property) as number;\r\n      if (filterIndex !== -1) {\r\n        if (!detail.value?.length) {\r\n          this.filterCache.filters?.splice(filterIndex, 1);\r\n        } else {\r\n          this.filterCache.filters![filterIndex].value = detail.value;\r\n        }\r\n      } else if (detail.value.length) {\r\n        if (!this.filterCache.filters?.length) {\r\n          this.filterCache.filters = [{ property: column.property, value: detail.value, label: column.header }];\r\n        } else {\r\n          this.filterCache.filters.push({ property: column.property, value: detail.value, label: column.header });\r\n        }\r\n      }\r\n      this.getRecords();\r\n    }\r\n  }\r\n\r\n  protected destroy() {\r\n    if (this.setTableFiltersAF) {\r\n      window.cancelAnimationFrame(this.setTableFiltersAF);\r\n    }\r\n  }\r\n\r\n  protected resetTable() {\r\n    this.filterCache.filters = undefined;\r\n    this.filterCache.skip = 0;\r\n  }\r\n\r\n  private getColumnFromEventIndex(index: number): IColumnConfiguration {\r\n    return this.tableColumns.filter((c) => !c.hidden)[index];\r\n  }\r\n\r\n  protected abstract getRecords(): void;\r\n}\r\n","<forge-icon-button role=\"presentation\" tabindex=\"-1\">\r\n  <a [routerLink]=\"route\" [queryParams]=\"queryParams\" [attr.aria-label]=\"label\" class=\"forge-icon-button\" [ngClass]=\"{'routerlink--disabled': disabled}\">\r\n    <forge-icon [name]=\"icon\"></forge-icon>\r\n  </a>\r\n</forge-icon-button>\r\n@if (label?.length) {\r\n<forge-tooltip>{{label}}</forge-tooltip>\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-routerlink-button',\r\n  templateUrl: './routerlink-button.component.html',\r\n  styleUrls: ['./routerlink-button.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeTooltipModule\r\n  ]\r\n})\r\nexport class RouterlinkButtonComponent {\r\n  @Input()\r\n  public route?: string;\r\n\r\n  @Input()\r\n  public queryParams?: any;\r\n\r\n  @Input()\r\n  public label?: string;\r\n\r\n  @Input()\r\n  public icon?: string;\r\n\r\n  @Input()\r\n  public disabled?: boolean;\r\n}\r\n","<forge-chip-set type=\"input\" dense=\"true\" (forge-chip-delete)=\"onFilterDelete($event)\">\r\n  @for (filter of filters; track i; let i = $index) {\r\n  <forge-chip [value]=\"filter.property\">{{filter.label}}</forge-chip>\r\n  }\r\n</forge-chip-set>","import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ForgeChipModule, ForgeChipSetModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-filter-chips',\r\n  templateUrl: './filter-chips.component.html',\r\n  styleUrls: ['./filter-chips.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeChipModule,\r\n    ForgeChipSetModule\r\n  ],\r\n})\r\nexport class FilterChipsComponent {\r\n  @Input()\r\n  public filters: { property: string; value: string; label: string }[] = [];\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public onFilterDelete(event: CustomEvent) {\r\n    const filterIndex = this.filters.findIndex((f) => f.property === event.detail.value);\r\n    if (filterIndex !== -1) {\r\n      this.filters.splice(filterIndex, 1);\r\n      this.filter.emit();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SortDirection } from '@tylertech/forge';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\n\r\n@Injectable()\r\nexport class PeopleCacheService {\r\n  public people?: IPerson[];\r\n  public homeView = {\r\n    storageKey: 'people-home',\r\n    showFilter: false,\r\n    filter: {\r\n      sort: {\r\n        property: 'lastName',\r\n        direction: SortDirection.Ascending\r\n      },\r\n      filters: [] as any[],\r\n      skip: 0,\r\n      take: 25\r\n    }\r\n  };\r\n}\r\n","import { Component, OnInit, Output, EventEmitter, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { IOption } from '@tylertech/forge';\r\nimport { ForgeButtonModule, ForgeDividerModule, ForgeDrawerModule, ForgeIconButtonModule, ForgeIconModule, ForgeSelectModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components/autocomplete-range/autocomplete-range.component';\r\nimport { PeopleCacheService } from '../../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-home-filter',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDividerModule,\r\n    ForgeDrawerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeSelectModule,\r\n    ForgeTextFieldModule,\r\n    AutocompleteRangeComponent\r\n  ],\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnInit {\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public viewCache = this.cache.homeView;\r\n  public formGroup = new FormGroup({\r\n    firstName: new FormControl(),\r\n    lastName: new FormControl(),\r\n    gender: new FormControl(),\r\n    occupation: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public genderOptions: IOption[] = [\r\n    { label: 'Male', value: 'male' },\r\n    { label: 'Female', value: 'female' },\r\n    { label: 'Undecided', value: 'undecided' }\r\n  ];\r\n\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    const options = [];\r\n    for (let index = 0; index < 20; index++) {\r\n      options.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n    return of(options);\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.loadForm(this.cache.homeView.filter.filters);\r\n  }\r\n\r\n  public onClearFilter() {\r\n    this.formGroup.reset();\r\n    this.cache.homeView.filter.filters = [];\r\n  }\r\n\r\n  public onApplyFilter() {\r\n    this.cache.homeView.filter.filters = Object.entries(Utils.reduceObject(this.formGroup.value)).map(e => ({ property: e[0], value: e[1], label: this.propertyLabel(e[0]) })) || [];\r\n    this.filter.emit();\r\n  }\r\n\r\n  public loadForm(filters: any[]) {\r\n    this.formGroup.reset();\r\n    filters.forEach((f) => {\r\n      const formControl = this.formGroup.get(f.property);\r\n      if (formControl) {\r\n        formControl.setValue(f.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private propertyLabel(property: string): string {\r\n    switch (property) {\r\n      case 'firstName':\r\n        return 'First name';\r\n      case 'lastName':\r\n        return 'Last name';\r\n      case 'gender':\r\n        return 'Gender';\r\n      case 'occupation':\r\n        return 'Occupation';\r\n      case 'facet':\r\n        return 'Facet';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n}\r\n","<forge-drawer direction=\"right\" [open]=\"viewCache.showFilter\" open=\"false\" (forge-drawer-close)=\"viewCache.showFilter = false\">\r\n  <div slot=\"header\" class=\"header\">\r\n    <span class=\"header__title forge-typography--subheading2\">Filter people</span>\r\n    <forge-icon-button class=\"app--flex-right\" aria-label=\"Close\" (click)=\"viewCache.showFilter = false\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </forge-icon-button>\r\n  </div>\r\n\r\n  <form class=\"body\" [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" (ngSubmit)=\"onApplyFilter()\">\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--first-name\" formControlName=\"firstName\">\r\n      <label for=\"people--home--filter--first-name\" slot=\"label\">First name</label>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--last-name\" formControlName=\"lastName\">\r\n      <label for=\"people--home--filter--last-name\" slot=\"label\">Last name</label>\r\n    </forge-text-field>\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\" multiple=\"true\"></forge-select>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--occupation\" formControlName=\"occupation\">\r\n      <label for=\"people--home--filter--occupation\" slot=\"label\">Occupation</label>\r\n    </forge-text-field>\r\n    <forge-divider></forge-divider>\r\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\r\n  </form>\r\n\r\n  <div slot=\"footer\" class=\"footer\">\r\n    <forge-button variant=\"outlined\" (click)=\"onClearFilter()\">\r\n      Clear\r\n    </forge-button>\r\n    <forge-button variant=\"raised\" type=\"submit\" (click)=\"onApplyFilter()\">\r\n      Apply\r\n    </forge-button>\r\n  </div>\r\n</forge-drawer>\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">People</h2>\r\n  <app-routerlink-button slot=\"end\" route=\"/profile\" icon=\"person\" label=\"View profile\"></app-routerlink-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <div [ngClass]=\"{'app--hidden': isBusy}\" class=\"table\">\r\n      <div class=\"table__header\" [ngClass]=\"{'table__header-action': selectedPeople.length}\">\r\n        @if (!selectedPeople.length) {\r\n        <app-filter-chips [filters]=\"filterCache.filters\" (filter)=\"onApplyFilter(true)\"></app-filter-chips>\r\n        <forge-button class=\"app--flex-right\" variant=\"outlined\" (click)=\"onTableShowFilter()\">\r\n          @if (filterCache.filters.length) {\r\n          <forge-badge class=\"table__header__filter-count\" theme=\"info-primary\">{{filterCache.filters.length}}</forge-badge>\r\n          } @else {\r\n          <forge-icon name=\"filter_list\"></forge-icon>\r\n          }\r\n          <span>Filter</span>\r\n        </forge-button>\r\n        <forge-icon-button id=\"people--home--column-select\" class=\"table__header__columns\" aria-label=\"Choose table columns\">\r\n          <forge-icon name=\"view_column\"></forge-icon>\r\n        </forge-icon-button>\r\n        <forge-select-dropdown target=\"#people--home--column-select\" multiple [value]=\"selectedTableColumns\" (change)=\"onTableOptionSelected($event.detail)\">\r\n          @for (column of optionalTableColumns; track i; let i = $index) {\r\n          <forge-option [value]=\"column.property\">\r\n            {{column.header}}\r\n          </forge-option>\r\n          }\r\n        </forge-select-dropdown>\r\n        } @else {\r\n        <span>{{selectedPeople.length}} people selected</span>\r\n        }\r\n      </div>\r\n\r\n      <forge-table #peopleTable class=\"table__body\" [ngClass]=\"{'app--hidden': !recordCount}\" [data]=\"recordset\" [columnConfigurations]=\"tableColumns\" (forge-table-sort)=\"onTableSort($any($event).detail)\" select-key=\"id\" (forge-table-select)=\"onPeopleSelected()\" (forge-table-select-all)=\"onPeopleSelected()\" fixed-headers=\"true\" [filter]=\"viewCache.showFilter\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n      @if (recordCount) {\r\n      <div class=\"table__footer\">\r\n        <forge-paginator class=\"app--flex-right\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event.detail)\"></forge-paginator>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    @if (!isBusy && !recordCount) {\r\n    <div class=\"empty-state\">\r\n      <img src=\"https://cdn.forge.tylertech.com/v1/images/spot-hero/general-empty-state-spot-hero.svg\" alt>\r\n      <div>No people found.</div>\r\n    </div>\r\n    }\r\n\r\n    @if (isBusy) {\r\n    <div class=\"busy-state\">\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n    </div>\r\n    }\r\n  </div>\r\n\r\n  <app-people-home-filter (filter)=\"onApplyFilter(false)\"></app-people-home-filter>\r\n</div>\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs';\r\nimport { isArray } from '@tylertech/forge-core';\r\nimport { CellAlign, IColumnConfiguration, TableComponent, TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { ForgeBadgeModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeOptionModule, ForgePaginatorModule, ForgeSelectDropdownModule, ForgeSkeletonModule, ForgeTableModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { TableUtils } from 'src/app/shared/table/utils';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { BaseTableComponent } from 'src/app/shared/table/base-table.component';\r\nimport { RouterlinkButtonComponent } from 'src/app/shared/components/routerlink-button/routerlink-button.component';\r\nimport { FilterChipsComponent } from 'src/app/shared/components/filter-chips/filter-chips.component';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { FilterComponent } from './filter/filter.component';\r\n\r\n@Component({\r\n  selector: 'app-people-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeBadgeModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeOptionModule,\r\n    ForgePaginatorModule,\r\n    ForgeSelectDropdownModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule,\r\n    RouterlinkButtonComponent,\r\n    FilterChipsComponent,\r\n    FilterComponent\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseTableComponent implements OnInit, OnDestroy {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private ngZone = inject(NgZone);\r\n\r\n  @ViewChild('peopleTable', { static: true })\r\n  private peopleTable?: TableComponent;\r\n  @ViewChild(FilterComponent)\r\n  private peopleFilter?: FilterComponent;\r\n\r\n  public isBusy = false;\r\n  public recordset: Array<IPerson> = [];\r\n  public filterCache = this.cache.homeView.filter;\r\n  public viewCache = this.cache.homeView;\r\n  public optionalTableColumns = [\r\n    { property: 'image', header: 'Image', hidden: false },\r\n    { property: 'firstName', header: 'First', hidden: false },\r\n    { property: 'lastName', header: 'Last', hidden: false },\r\n    { property: 'gender', header: 'Gender', hidden: false },\r\n    { property: 'occupation', header: 'Occupation', hidden: false }\r\n  ];\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    {\r\n      property: 'image',\r\n      width: 48,\r\n      align: CellAlign.Center,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        const imgElement = document.createElement('img') as HTMLImageElement;\r\n        imgElement.src = `mock-data/${Utils.formatNumber(data.id, '2.0-0')}-small.png`;\r\n        imgElement.setAttribute('alt', '');\r\n        imgElement.classList.add('forge-table-cell__image');\r\n        return imgElement;\r\n      }\r\n    },\r\n    {\r\n      header: 'Id', property: 'id', sortable: true, filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'First',\r\n      property: 'firstName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Last',\r\n      property: 'lastName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Gender',\r\n      property: 'gender',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Occupation',\r\n      property: 'occupation',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      align: CellAlign.Right,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        this.ngZone.run(() => {\r\n          cellElement.appendChild(\r\n            TableUtils.createExpanderRow(\r\n              rowIndex,\r\n              this.peopleTable as TableComponent,\r\n              this.viewContainerRef,\r\n              TableDetailComponent,\r\n              'Toggle table detail',\r\n              data\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(TableUtils.createMenuButton(\r\n            'more_vert',\r\n            (event: Event) => {\r\n              console.log(event);\r\n            },\r\n            [\r\n              { value: 1, label: 'Option 1' },\r\n              { value: 2, label: 'Option 2' },\r\n              { value: 3, label: 'Option 3' }\r\n            ],\r\n            'More options'\r\n          ));\r\n\r\n          cellElement.appendChild(TableUtils.createIconButton(\r\n            'keyboard_arrow_right',\r\n            (event: Event) => {\r\n              this.ngZone.run(() => {\r\n                this.router.navigate([`people/detail/${data.id}`]);\r\n              });\r\n            },\r\n            'View person details'\r\n          ));\r\n\r\n          // const componentRef = this.viewContainerRef.createComponent(RouterlinkButtonComponent);\r\n          // componentRef.instance.route = '/profile';\r\n          // componentRef.instance.queryParams = { id: data.id };\r\n          // componentRef.instance.icon = 'person';\r\n          // componentRef.instance.tooltip = 'Show profile';\r\n          // const linkButtonNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n          // cellElement.appendChild(linkButtonNode);\r\n        });\r\n\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n  public selectedPeople: IPerson[] = [];\r\n  public get selectedTableColumns() {\r\n    return this.optionalTableColumns.filter(c => !c.hidden).map(c => c.property);\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const storageColumns = localStorage.getItem(this.cache.homeView.storageKey);\r\n    if (storageColumns?.length) {\r\n      const columns = JSON.parse(storageColumns) as { property: string; hidden: boolean; }[];\r\n      if (isArray(columns)) {\r\n        this.optionalTableColumns.forEach(c => {\r\n          const storedColumn = columns.find((sc) => sc.property === c.property);\r\n          if (storedColumn) {\r\n            c.hidden = storedColumn.hidden;\r\n          }\r\n        });\r\n        this.setTableColumnsVisibilty();\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.initializeSort();\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.destroy();\r\n  }\r\n\r\n  public onPeopleSelected(clearSelection = false) {\r\n    if (clearSelection) {\r\n      this.selectedPeople.length = 0;\r\n      this.peopleTable?.clearSelections();\r\n    } else {\r\n      this.selectedPeople = this.peopleTable?.getSelectedRows() as IPerson[];\r\n    }\r\n  }\r\n\r\n  public onTableOptionSelected(columns: string[]) {\r\n    this.optionalTableColumns = this.optionalTableColumns.map(c => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    this.setTableColumnsVisibilty();\r\n    localStorage.setItem(\r\n      this.cache.homeView.storageKey,\r\n      JSON.stringify(this.optionalTableColumns.map((c) => ({ property: c.property, hidden: c.hidden })))\r\n    );\r\n  }\r\n\r\n  public onTableShowFilter() {\r\n    this.viewCache.showFilter = !this.viewCache.showFilter;\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n  }\r\n\r\n  public onApplyFilter(reloadFilter: boolean) {\r\n    this.getRecords();\r\n    if (reloadFilter) {\r\n      (this.peopleFilter as FilterComponent).loadForm(this.filterCache.filters);\r\n    }\r\n  }\r\n\r\n  protected getRecords() {\r\n    this.onPeopleSelected(true);\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort,\r\n        filters: this.filterCache.filters,\r\n        skip: this.filterCache.skip,\r\n        take: this.filterCache.take\r\n      }).pipe(\r\n        finalize(() => this.isBusy = false)\r\n      )\r\n      .subscribe((result) => {\r\n        this.recordset = result.data;\r\n        this.recordCount = result.count;\r\n      });\r\n  }\r\n\r\n  private setTableColumnsVisibilty() {\r\n    this.tableColumns.forEach(tc => {\r\n      const optionalTableColumn = this.optionalTableColumns.find(otc => otc.property === tc.property);\r\n      if (optionalTableColumn && tc.hidden !== optionalTableColumn.hidden) {\r\n        tc.hidden = optionalTableColumn.hidden;\r\n        const colIndex = this.getColumnIndex(tc.property as string);\r\n        if (tc.hidden) {\r\n          this.peopleTable?.hideColumn(colIndex);\r\n        } else {\r\n          this.peopleTable?.showColumn(colIndex);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-people-detail',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeLabelValueModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent {\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public appCache = inject(AppCacheService);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  public person?: IPerson;\r\n  public imageUrl?: string;\r\n  public index = 0;\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  constructor() {\r\n    const id = this.route.snapshot.params['id'];\r\n    if (isDefined(id)) {\r\n      this.appDataService.getPerson(id).subscribe((r) => {\r\n        this.person = r;\r\n        this.imageUrl = `mock-data/${Utils.formatNumber(this.person?.id as number, '2.0-0')}.png`;\r\n      });\r\n    } else {\r\n      this.router.navigate(['people/home']);\r\n    }\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    switch (route) {\r\n      case 'back':\r\n        this.router.navigate(['people/home']);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onViewWiki() {\r\n    window.open(this.person?.url, '_blank');\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button (click)=\"onNavigate('back')\" aria-label=\"Go back\">\r\n      <forge-icon name=\"arrow_back\"></forge-icon>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--subheading4\">{{person?.firstName + ' ' + person?.lastName}}</h2>\r\n  </div>\r\n  <div slot=\"end\">\r\n    <forge-button variant=\"outlined\" (click)=\"onViewWiki()\" [disabled]=\"!person?.url?.length\">\r\n      View wiki\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <forge-label-value>\r\n      <span slot=\"label\">Gender</span>\r\n      <span slot=\"value\">{{person?.gender}}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Occupation</span>\r\n      <span slot=\"value\">{{person?.occupation}}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Quote</span>\r\n      <span slot=\"value\">{{person?.quote}}</span>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <div class=\"body__right\">\r\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt>\r\n  </div>\r\n</div>","import { Routes } from '@angular/router';\r\nimport { PeopleComponent } from './people.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { PeopleCacheService } from './people-cache.service';\r\n\r\nexport const PEOPLE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: PeopleComponent,\r\n    providers: [\r\n      PeopleCacheService\r\n    ],\r\n    children: [\r\n      { path: 'home', component: HomeComponent },\r\n      { path: 'detail', component: DetailComponent },\r\n      { path: 'detail/:id', component: DetailComponent },\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, HostBinding, Input } from '@angular/core';\r\nimport { ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeToolbarModule\r\n  ]\r\n})\r\nexport class CardComponent {\r\n  @HostBinding('class.app-card--raised')\r\n  public get raisedClass() { return this.border === 'raised'; }\r\n  @HostBinding('class.app-card--outlined')\r\n  public get outlinedClass() { return this.border === 'outlined'; }\r\n\r\n  @Input()\r\n  public border: 'raised' | 'outlined' = 'raised';\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <ng-content select=\"[app-card-header]\"></ng-content>\r\n</forge-toolbar>\r\n<div class=\"body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<forge-toolbar class=\"footer\" inverted=\"true\">\r\n  <ng-content select=\"[app-card-footer]\"></ng-content>\r\n</forge-toolbar>\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { sensitivity: 'base' });\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]) {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}