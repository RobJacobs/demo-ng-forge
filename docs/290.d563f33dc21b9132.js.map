{"version":3,"file":"290.d563f33dc21b9132.js","mappings":"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","names":["AppDataService","constructor","this","httpClient","inject","HttpClient","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","jDH","factory","Éµfac","providedIn","i0","col_r4","sortDirection","_r2","ctx_r2","onColumnHeaderDragStart","$implicit","columnHeaderPopup_r5","close","onTableSort","$event","onColumnHeaderRightClick","TableDemoComponent_For_12_Conditional_5_Template","ctx_r5","colIndex_r7","$index","onColumnHeaderResize","width","columnHeaderPopupTemplate_r8","header","record_r11","col_r13","expandedRows","recordIndex_r12","ctx_r9","_r9","index","onExpandRow","TableDemoComponent_ng_container_15_For_7_Template","TableDemoComponent_ng_container_15_Conditional_9_Template","_c2","tableColumns","visibleColumns","column_r15","hidden","_r14","onColumnPopupItemSelected","detail","TableDemoComponent_ng_template_19_For_2_Template","TableDemoComponent","appDataService","tableColumnResize$","Subject","isColumnResizing","isBusy","filterCache","SortDirection","Ascending","recordset","recordset$","BehaviorSubject","recordCount","tableHeaderOffset","columns","c","recordsetTrackBy","person","ngOnInit","getRecords","ngAfterViewInit","virtualScrollViewport","renderedRangeStream","subscribe","start","end","finalize","result","startId","i","ngOnDestroy","scrollToOffset","onColumnHeaderDragDrop","event","moveItemInArray","previousIndex","currentIndex","columnIndex","column","stopPropagation","preventDefault","columnHeaderElement","tableElementRef","nativeElement","querySelectorAll","columnElements","positionX","clientX","querySelector","classList","add","forEach","fromEvent","document","body","takeUntil","tap","offsetWidth","theadElement","merge","requestAnimationFrame","undefined","remove","columnHeaderPopupDirective","popupElement","open","tableColumn","Descending","onTablePaginatorChange","pageIndex","pageSize","VBU","selectors","viewQuery","rf","ctx","PopupDirective","CdkVirtualScrollViewport","_r1","TableDemoComponent_For_12_Template","TableDemoComponent_ng_container_15_Template","TableDemoComponent_ng_template_19_Template","CommonModule","i1","DragDropModule","i2","ScrollingModule","i3","ForgeCheckboxModule","i4","ForgeDividerModule","ForgeIconButtonModule","ForgeIconModule","ForgeListItemModule","ForgeListModule","ForgePopupModule","ForgeToolbarModule","TableDetailComponent","CallbackPipe","styles"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/table-demo/table-demo.component.html","./src/app/table-demo/table-demo.component.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Table demo</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__table\">\r\n    <cdk-virtual-scroll-viewport itemSize=\"48\">\r\n      <table #table class=\"forge-table forge-table--fixed\">\r\n        <thead [style.--table-header-offset]=\"tableHeaderOffset\" [style.--table-header-translate-y]=\"(tableHeaderOffset * -48) + 'px'\">\r\n          <tr class=\"forge-table-row forge-table-head__row\" cdkDropList (cdkDropListDropped)=\"onColumnHeaderDragDrop($event)\" cdkDropListOrientation=\"horizontal\">\r\n            <th class=\"forge-table-cell forge-table-head__cell forge-table-row__expander\"></th>\r\n            @for (col of tableColumns | appCallback:$any(visibleColumns); track colIndex; let colIndex = $index) {\r\n            <th scope=\"col\" class=\"forge-table-cell forge-table-head__cell forge-table-head__cell--sortable\" cdkDrag cdkDragLockAxis=\"x\" (cdkDragStarted)=\"onColumnHeaderDragStart()\" (click)=\"columnHeaderPopup.close(); onTableSort(col)\" #columnHeaderPopup=\"forgePopup\" [forgePopup]=\"columnHeaderPopupTemplate\" [forgePopupPlacement]=\"'right-end'\" (contextmenu)=\"onColumnHeaderRightClick($any($event))\" tabindex=\"-1\" [style.--table-column-width]=\"col.width\">\r\n              <div class=\"forge-table-head__cell-container\">\r\n                <span class=\"forge-table-head__cell-text\">{{col.header}}</span>\r\n                @if (col.sortDirection?.length) {\r\n                <forge-icon [name]=\"col.sortDirection === 'DESC' ? 'arrow_downward' : col.sortDirection === 'ASC' ? 'arrow_upward' : ''\" class=\"forge-table-head__cell-sort-icon\" aria-hidden=\"true\"></forge-icon>\r\n                }\r\n              </div>\r\n              <div class=\"forge-table-head__cell-actions\">\r\n                <div class=\"forge-table-head__cell-dragger\" cdkDragHandle></div>\r\n                <div class=\"forge-table-head__cell-resizer\" (mousedown)=\"onColumnHeaderResize($event, colIndex + 1, col)\"></div>\r\n              </div>\r\n            </th>\r\n            }\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ng-container *cdkVirtualFor=\"let record of recordset$; trackBy: recordsetTrackBy; let recordIndex = index\">\r\n            <tr class=\"forge-table-row forge-table-body__row\" [ngClass]=\"{'forge-table-row--expanded': expandedRows[recordIndex]}\">\r\n              <td class=\"forge-table-cell forge-table-body__cell forge-table-row__expander\">\r\n                <forge-icon-button>\r\n                  <button type=\"button\" (click)=\"onExpandRow(recordIndex, record)\" aria-label=\"Toggle details\">\r\n                    <forge-icon [name]=\"expandedRows[recordIndex] ? 'expand_less' : 'expand_more'\"></forge-icon>\r\n                  </button>\r\n                </forge-icon-button>\r\n              </td>\r\n              @for (col of tableColumns | appCallback:$any(visibleColumns); track colIndex; let colIndex = $index) {\r\n              <td class=\"forge-table-cell forge-table-body__cell\">\r\n                <div class=\"forge-table-cell__container\">\r\n                  {{$any(record)[col.property]}}\r\n                </div>\r\n              </td>\r\n              }\r\n            </tr>\r\n            @if (expandedRows[recordIndex]) {\r\n            <tr class=\"forge-table-row forge-table-body__row forge-table-row__expandable-content\">\r\n              <td class=\"forge-table-row__expandable-content-cell\" [attr.colspan]=\"(tableColumns | appCallback:$any(visibleColumns)).length + 1\">\r\n                <app-table-detail [data]=\"expandedRows[recordIndex]\" [rowIndex]=\"recordIndex\"></app-table-detail>\r\n              </td>\r\n            </tr>\r\n            }\r\n          </ng-container>\r\n        </tbody>\r\n      </table>\r\n    </cdk-virtual-scroll-viewport>\r\n  </div>\r\n\r\n  <forge-toolbar inverted=\"true\">\r\n    <span slot=\"end\" class=\"forge-typography--caption\">Records: {{recordCount}}</span>\r\n    <!-- <forge-paginator slot=\"end\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event.detail)\"></forge-paginator> -->\r\n  </forge-toolbar>\r\n</div>\r\n\r\n<ng-template #columnHeaderPopupTemplate>\r\n  <forge-list class=\"column-popup\" (forge-list-item-select)=\"onColumnPopupItemSelected($event.detail.value)\">\r\n    @for (column of tableColumns; track i; let i = $index) {\r\n    <forge-list-item [value]=\"column\">\r\n      <forge-checkbox slot=\"leading\">\r\n        <input type=\"checkbox\" checked aria-label=\"Show/hide table column\" [checked]=\"!column.hidden\" />\r\n      </forge-checkbox>\r\n      <span>{{column.header}}</span>\r\n    </forge-list-item>\r\n    }\r\n    <forge-divider></forge-divider>\r\n    <forge-list-item value=\"reset-column-width\">\r\n      <span>Reset column widths</span>\r\n    </forge-list-item>\r\n    <forge-list-item value=\"freeze-column\">\r\n      <span>Freeze column</span>\r\n    </forge-list-item>\r\n  </forge-list>\r\n</ng-template>","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { finalize, fromEvent, tap, Subject, takeUntil, merge, BehaviorSubject } from 'rxjs';\r\nimport { CdkDragDrop, DragDropModule, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { IColumnConfiguration, SortDirection } from '@tylertech/forge';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { ForgeCheckboxModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgePopupModule, ForgeToolbarModule, PopupDirective } from '@tylertech/forge-angular';\r\n\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { AutoFocusDirective } from 'src/app/shared/directives/auto-focus/auto-focus.directive';\r\nimport { CallbackPipe } from 'src/app/shared/pipes/callback.pipe';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\n\r\n@Component({\r\n  selector: 'app-table-demo',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule,\r\n    ScrollingModule,\r\n    ForgeCheckboxModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeListItemModule,\r\n    ForgeListModule,\r\n    ForgePopupModule,\r\n    ForgeToolbarModule,\r\n    TableDetailComponent,\r\n    AutoFocusDirective,\r\n    CallbackPipe\r\n  ],\r\n  templateUrl: './table-demo.component.html',\r\n  styleUrls: ['./table-demo.component.scss']\r\n})\r\nexport class TableDemoComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private appDataService = inject(AppDataService);\r\n\r\n  @ViewChild('table', { static: true })\r\n  private tableElementRef?: ElementRef;\r\n  @ViewChild('columnHeaderPopup', { read: PopupDirective })\r\n  private columnHeaderPopupDirective?: PopupDirective;\r\n  @ViewChild(CdkVirtualScrollViewport)\r\n  public virtualScrollViewport?: CdkVirtualScrollViewport;\r\n  private tableColumnResize$ = new Subject<void>();\r\n  private isColumnResizing = false;\r\n\r\n  public isBusy = false;\r\n  public filterCache = {\r\n    sort: {\r\n      property: 'lastName',\r\n      direction: SortDirection.Ascending\r\n    },\r\n    filters: [] as any[],\r\n    skip: 0,\r\n    take: 25\r\n  }\r\n  public recordset: IPerson[] = [];\r\n  public recordset$ = new BehaviorSubject<IPerson[]>([]);\r\n  public recordCount = 0;\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    { header: 'Id', property: 'id', width: 48 },\r\n    { header: 'First', property: 'firstName' },\r\n    { header: 'Last', property: 'lastName' },\r\n    { header: 'Gender', property: 'gender' },\r\n    { header: 'Occupation', property: 'occupation' }\r\n  ];\r\n  public tableHeaderOffset = 0;\r\n  public expandedRows: any[] = [];\r\n\r\n  public visibleColumns = (columns: IColumnConfiguration[]) => {\r\n    return columns.filter(c => c.hidden !== true);\r\n  }\r\n\r\n  public recordsetTrackBy = (index: number, person: IPerson) => {\r\n    return person.id;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    this.virtualScrollViewport?.renderedRangeStream.subscribe(o => {\r\n      this.tableHeaderOffset = o.start;\r\n      if (!this.isBusy && o.start > 0 && o.end + 67 > this.recordCount) {\r\n        this.isBusy = true;\r\n        this.appDataService\r\n          .getPeople({\r\n            sort: this.filterCache.sort\r\n          }).pipe(\r\n            finalize(() => this.isBusy = false)\r\n          )\r\n          .subscribe((result) => {\r\n            const startId = this.recordset.length + 1;\r\n            this.recordset = [...this.recordset, ...result.data.map((p, i) => {\r\n              p.id = startId + p.id;\r\n              return p;\r\n            })];\r\n            this.recordCount = this.recordset.length;\r\n            this.recordset$.next(this.recordset);\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.tableColumnResize$.next();\r\n    this.tableColumnResize$.complete();\r\n  }\r\n\r\n  public onColumnHeaderDragStart() {\r\n    this.virtualScrollViewport?.scrollToOffset(0);\r\n  }\r\n\r\n  public onColumnHeaderDragDrop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.tableColumns, event.previousIndex, event.currentIndex);\r\n    this.tableColumns = [...this.tableColumns];\r\n  }\r\n\r\n  public onColumnHeaderResize(event: MouseEvent, columnIndex: number, column: IColumnConfiguration) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    this.tableColumnResize$.next();\r\n\r\n    let columnHeaderElement = (this.tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll('thead tr th')[columnIndex] as HTMLTableCellElement;\r\n    let columnElements = (this.tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll(`tbody tr td:nth-child(${columnIndex + 1})`);\r\n\r\n    let positionX = event.clientX;\r\n    if (columnHeaderElement) {\r\n      this.isColumnResizing = true;\r\n      this.tableElementRef?.nativeElement.querySelector('.forge-table-head__row')?.classList.add('forge-table-head__row--resizing');\r\n      columnHeaderElement.classList.add('forge-table-head__cell--resizing');\r\n      columnElements.forEach(c => c.classList.add('forge-table-body__cell--resizing'));\r\n\r\n      fromEvent<MouseEvent>(document.body, 'mousemove')\r\n        .pipe(\r\n          takeUntil(this.tableColumnResize$),\r\n          tap((event) => {\r\n            column.width = columnHeaderElement.offsetWidth + (event.clientX - positionX);\r\n            positionX = event.clientX;\r\n          })\r\n        ).subscribe();\r\n\r\n      const theadElement = this.tableElementRef?.nativeElement.querySelector('thead');\r\n      merge(\r\n        fromEvent(theadElement, 'mouseup'),\r\n        fromEvent(theadElement, 'mouseleave')\r\n      )\r\n        .pipe(\r\n          finalize(() =>\r\n            requestAnimationFrame(() => {\r\n              this.isColumnResizing = false;\r\n              (columnHeaderElement as any) = undefined;\r\n              (columnElements as any) = undefined;\r\n            })\r\n          ),\r\n          takeUntil(this.tableColumnResize$),\r\n          tap((event) => {\r\n            this.tableColumnResize$.next();\r\n            this.tableElementRef?.nativeElement.querySelector('.forge-table-head__row')?.classList.remove('forge-table-head__row--resizing');\r\n            columnHeaderElement.classList.remove('forge-table-head__cell--resizing');\r\n            columnElements.forEach(c => c.classList.remove('forge-table-body__cell--resizing'));\r\n          })\r\n        ).subscribe();\r\n    }\r\n  }\r\n\r\n  public onColumnHeaderRightClick(event: PointerEvent) {\r\n    event.preventDefault();\r\n    if (this.columnHeaderPopupDirective?.popupElement) {\r\n      this.columnHeaderPopupDirective.close();\r\n    } else {\r\n      this.columnHeaderPopupDirective?.open();\r\n    }\r\n  }\r\n\r\n  public onColumnPopupItemSelected(value: any) {\r\n    switch (value) {\r\n      case 'reset-column-width':\r\n        this.tableColumns.forEach(c => c.width = undefined);\r\n        break;\r\n      case 'freeze-column': {\r\n        const columnHeaderElement = (this.tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll('thead tr th')[0];\r\n        const columnElements = (this.tableElementRef?.nativeElement as HTMLTableElement).querySelectorAll(`tbody tr td:nth-child(${1})`);\r\n        columnHeaderElement.classList.add('forge-table-head__cell--frozen');\r\n        columnElements.forEach(c => c.classList.add('forge-table-body__cell--frozen'));\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        const tableColumn = this.tableColumns.find(c => c.property === value.property);\r\n        if (tableColumn) {\r\n          // prevent hiding all columns\r\n          if (this.tableColumns.filter(c => !c.hidden).length) {\r\n            tableColumn.hidden = isDefined(tableColumn.hidden) ? !tableColumn.hidden : true;\r\n            tableColumn.sortDirection = undefined;\r\n            this.tableColumns = [...this.tableColumns];\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.columnHeaderPopupDirective?.close();\r\n  }\r\n\r\n  public onTableSort(column: IColumnConfiguration) {\r\n    if (!this.isColumnResizing) {\r\n      this.tableColumns.filter(c => c.property !== column.property).forEach(c => c.sortDirection = undefined);\r\n      if (column.sortDirection === SortDirection.Ascending) {\r\n        column.sortDirection = SortDirection.Descending;\r\n      } else if (column.sortDirection === SortDirection.Descending) {\r\n        column.sortDirection = undefined;\r\n      } else {\r\n        column.sortDirection = SortDirection.Ascending;\r\n      }\r\n\r\n      (this.filterCache as any).sort = column.sortDirection ? { property: column.property, direction: column.sortDirection } : undefined;\r\n      this.filterCache.skip = 0;\r\n      this.virtualScrollViewport?.scrollToOffset(0);\r\n      this.expandedRows.length = 0;\r\n      this.getRecords();\r\n    }\r\n  }\r\n\r\n  public onTablePaginatorChange(detail: { pageIndex: number; pageSize: number }) {\r\n    this.filterCache.skip = detail.pageIndex * detail.pageSize;\r\n    this.filterCache.take = detail.pageSize;\r\n    this.expandedRows.length = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onExpandRow(index: number, value: any) {\r\n    if (this.expandedRows[index]) {\r\n      this.expandedRows[index] = undefined;\r\n    } else {\r\n      this.expandedRows[index] = value;\r\n    }\r\n  }\r\n\r\n  private getRecords() {\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort\r\n      }).pipe(\r\n        finalize(() => this.isBusy = false)\r\n      )\r\n      .subscribe((result) => {\r\n        this.recordset = result.data;\r\n        this.recordCount = result.count;\r\n        this.recordset$.next(this.recordset);\r\n      });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}