{
  "version": 3,
  "sources": ["src/app/app-data.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\n\r\nimport { SHOW_BUSY_INDICATOR } from 'src/app/shared/interceptors/busy.interceptor';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      delay(1000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request', {\r\n      context: new HttpContext().set(SHOW_BUSY_INDICATOR, true)\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "kNAeA,IAAaA,GAAc,IAAA,CAArB,IAAOA,EAAP,MAAOA,CAAc,CAH3BC,aAAA,CAIU,KAAAC,WAAaC,EAAOC,CAAU,EAE/BC,YAAU,CACf,OAAO,KAAKH,WAAWI,IAAc,wBAAwB,CAC/D,CAEOC,UAAUC,EAAyB,CACxC,OAAO,KAAKN,WAAWI,IAAoB,uBAAuB,EAAEG,KAClEC,EAAM,GAAI,EACVC,EAAKC,GAAK,CACR,IAAIC,EAAQD,EAAEE,OACd,OAAIN,IACEA,EAAOO,SAASD,SAClBF,EAAII,EAAMC,WACRL,EACAJ,EAAOO,QAAQJ,IAAKO,IAAO,CAAEC,IAAKD,EAAEE,SAAUC,MAAOH,EAAEG,MAAOC,OAAQJ,EAAEE,WAAa,UAAYF,EAAEE,WAAa,IAAI,EAAG,CAAC,EAE1HP,EAAQD,EAAEE,QAGRN,EAAOe,OACTX,EAAII,EAAMQ,SAASZ,EAAGJ,EAAOe,KAAKH,SAAU,SAAUZ,EAAOe,KAAKE,SAAS,GAGzEC,EAASlB,EAAOmB,IAAI,GAAKD,EAASlB,EAAOoB,IAAI,IAC/ChB,EAAIA,EAAEiB,MAAMrB,EAAOmB,KAAMnB,EAAOmB,KAAOnB,EAAOoB,IAAI,IAG/C,CAAEf,MAAAA,EAAOiB,KAAMlB,CAAC,CACzB,CAAC,CAAC,CAEN,CAEOmB,UAAUC,EAAU,CACzB,OAAO,KAAK9B,WAAWI,IAAI,uBAAuB,EAAEG,KAAKE,EAAKC,GAAOA,EAAgBqB,KAAMC,GAAMA,EAAEF,GAAGG,SAAQ,IAAOH,EAAGG,SAAQ,CAAE,CAAC,CAAC,CACtI,CAEOC,YAAYjB,EAAW,CAC5B,OAAO,IAAIkB,EAAuBC,GAAK,CACrC,IAAIC,EAAWC,aAAaC,QAAQtB,CAAG,EACnCuB,EAAUH,CAAQ,IACpBA,EAAWI,KAAKC,MAAML,CAAkB,GAE1CD,EAAEO,KAAKN,CAAe,EACtBD,EAAEQ,SAAQ,CACZ,CAAC,CACH,CAEOC,aAAa5B,EAAaoB,EAAmB,CAClD,OAAO,IAAIF,EAAqBC,GAAK,CACnCE,aAAaQ,QAAQ7B,EAAKwB,KAAKM,UAAUV,CAAQ,CAAC,EAClDD,EAAEO,KAAK,EAAI,EACXP,EAAEQ,SAAQ,CACZ,CAAC,CACH,CAEOI,gBAAc,CACnB,OAAO,KAAKhD,WAAWI,IAAY,qCAAsC,CACvE6C,QAAS,IAAIC,EAAW,EAAGC,IAAIC,EAAqB,EAAI,EACzD,CACH,yCA7DWtD,EAAc,wBAAdA,EAAcuD,QAAdvD,EAAcwD,UAAAC,WAFb,MAAM,CAAA,EAEd,IAAOzD,EAAP0D,SAAO1D,CAAc,GAAA",
  "names": ["AppDataService", "constructor", "httpClient", "inject", "HttpClient", "getProfile", "get", "getPeople", "filter", "pipe", "delay", "map", "r", "count", "length", "filters", "Utils", "filterData", "f", "key", "property", "value", "strict", "sort", "sortData", "direction", "isNumber", "skip", "take", "slice", "data", "getPerson", "id", "find", "p", "toString", "getSearches", "Observable", "o", "searches", "localStorage", "getItem", "isDefined", "JSON", "parse", "next", "complete", "saveSearches", "setItem", "stringify", "getLongRequest", "context", "HttpContext", "set", "SHOW_BUSY_INDICATOR", "factory", "\u0275fac", "providedIn", "_AppDataService"]
}
