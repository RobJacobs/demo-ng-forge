{"version":3,"file":"440.07e901c5b9edd4c9.js","mappings":"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","names":["i0","SearchSaveComponent","constructor","dialogConfig","dialogRef","this","formGroup","FormGroup","name","FormControl","validators","Validators","required","description","isDefault","isPublic","record","data","patchValue","onSave","close","parseFormGroup","onCancel","id","value","filters","t","i1","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","tmp_b_0","get","updateValueAndValidity","SearchSaveComponent_span_13_Template","_c0","invalid","touched","_classPrivateFieldInitSpec","obj","privateMap","_checkPrivateRedeclaration","privateCollection","has","TypeError","set","_classExtractFieldDescriptor","receiver","action","_classPrivateFieldSet","_classApplyDescriptorSet","descriptor","call","writable","_classPrivateFieldGet","_classApplyDescriptorGet","INDETERMINATE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","IndeterminateDirective","multi","_value","WeakMap","_indeterminateEnabled","elementChange","isDefined","elementRef","nativeElement","indeterminate","checked","change","onTouched","elementBlur","appIndeterminate","toString","onChange","_","writeValue","registerOnChange","fn","registerOnTouched","lG2","hostBindings","ctx_r0","searchName","searchDescription","$event","search_r12","_r14","$implicit","ctx_r13","onSearchAction","ctx_r15","_r17","ctx_r16","detail","SearchComponent_ng_template_24_forge_list_item_5_Template","ctx_r3","searchCache","searches","name_r18","_r21","_r19","ctx_r20","onOperatorPopupOpen","_c1","tmp_0_0","ctx_r8","operator","_r9","SearchComponent_ng_template_65_forge_list_item_1_forge_icon_3_Template","option_r23","ctx_r22","operatorPopupFormGroup","label","_r26","ctx_r25","onOperatorSelected","SearchComponent_ng_template_65_forge_list_item_1_Template","ctx_r10","operatorOptions","routes","path","component","SearchComponent","dialogService","toastService","dataService","storageKey","activeSearchId","undefined","dateOfBirth","address","include","facet","facetOptions","nameFilter","filter","lastValueFrom","getPeople","pipe","map","r","p","firstName","toLocaleLowerCase","includes","lastName","facetFilter","of","getSearches","subscribe","result","index","push","ngOnInit","activeSearch","find","s","onSearch","onSaveSearch","search","sub","show","backdropClose","escapeClose","afterClosed","unsubscribe","searchIndex","findIndex","length","Math","max","saveSearches","next","message","error","onClearSearch","setValue","reset","event","stopPropagation","searchesPopup","copySearch","JSON","parse","stringify","splice","popup","operatorPopup","open","parseInt","i2","viewQuery","SearchComponent_ng_container_4_Template","_r27","_r1","SearchComponent_ng_template_24_Template","_r4","_r5","SearchComponent_ng_container_54_Template","SearchComponent_ng_template_63_Template","SearchComponent_ng_template_65_Template","_r2","tmp_4_0","tmp_6_0","_r7","_c2","SearchModule","oAB","cJS","CommonModule","RouterModule","forChild","AppFormsModule","AutocompleteRangeComponent"],"sourceRoot":"webpack:///","sources":["./src/app/search/save/search-save.component.html","./src/app/search/save/search-save.component.ts","./node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","./node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js","./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js","./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js","./src/app/shared/directives/indeterminate/indeterminate.directive.ts","./src/app/search/search.component.html","./src/app/search/search.module.ts","./src/app/search/search.component.ts"],"sourcesContent":["<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">Save search</span>\r\n  <forge-icon-button class=\"forge-flex-item--right\">\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onCancel()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  <form class=\"form-grid\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <forge-text-field required [invalid]=\"[formGroup.get('name').invalid, formGroup.get('name').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" appAutoFocus id=\"search-save-name\" formControlName=\"name\" (blur)=\"formGroup.get('name')?.updateValueAndValidity()\">\r\n      <label for=\"search-save-name\" slot=\"label\">Name</label>\r\n      <span *ngIf=\"[formGroup.get('name').invalid, formGroup.get('name').touched] | appFormControlInvalid\" slot=\"helper-text\">A name is required</span>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"search-save-description\" formControlName=\"description\">\r\n      <label for=\"search-save-description\" slot=\"label\">Description</label>\r\n    </forge-text-field>\r\n    <forge-checkbox>\r\n      <input type=\"checkbox\" id=\"search-save-default\" formControlName=\"isDefault\">\r\n      <label for=\"search-save-default\">Make this your default search</label>\r\n    </forge-checkbox>\r\n    <forge-checkbox>\r\n      <input type=\"checkbox\" id=\"search-save-public\" formControlName=\"isPublic\">\r\n      <label for=\"search-save-public\">Make this search public</label>\r\n    </forge-checkbox>\r\n  </form>\r\n</div>\r\n\r\n<div class=\"dialog__footer\">\r\n  <forge-button type=\"outlined\" class=\"forge-flex-item--right\">\r\n    <button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n  </forge-button>\r\n  <forge-button type=\"raised\">\r\n    <button type=\"button\" (click)=\"onSave()\" [disabled]=\"formGroup.invalid\">Save</button>\r\n  </forge-button>\r\n</div>","import { Component } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-search-save',\r\n  templateUrl: './search-save.component.html',\r\n  styleUrls: ['./search-save.component.scss']\r\n})\r\nexport class SearchSaveComponent {\r\n  public record: {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    isDefault: boolean;\r\n    isPublic: boolean;\r\n    filters: { property: string; value: string }[];\r\n  };\r\n  public formGroup = new FormGroup({\r\n    name: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n    description: new FormControl(),\r\n    isDefault: new FormControl(),\r\n    isPublic: new FormControl()\r\n  });\r\n\r\n  constructor(\r\n    public dialogConfig: DialogConfig,\r\n    private dialogRef: DialogRef\r\n  ) {\r\n    this.record = dialogConfig.data;\r\n    this.formGroup.patchValue(this.record);\r\n  }\r\n\r\n  public onSave() {\r\n    this.dialogRef.close(this.parseFormGroup());\r\n  }\r\n\r\n  public onCancel() {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  private parseFormGroup() {\r\n    return {\r\n      id: this.record.id,\r\n      name: this.formGroup.value.name,\r\n      description: this.formGroup.value.description,\r\n      isDefault: this.formGroup.value.isDefault,\r\n      isPublic: this.formGroup.value.isPublic,\r\n      filters: this.record.filters\r\n    };\r\n  }\r\n}\r\n","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}","import { Directive, ElementRef, forwardRef, HostListener, Input } from '@angular/core';\r\nimport { StaticProvider } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { isDefined } from '@tylertech/forge-core';\r\n\r\nexport const INDETERMINATE_VALUE_ACCESSOR: StaticProvider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => IndeterminateDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[appIndeterminate]',\r\n  standalone: true,\r\n  providers: [INDETERMINATE_VALUE_ACCESSOR]\r\n})\r\nexport class IndeterminateDirective implements ControlValueAccessor {\r\n  #value: boolean | null;\r\n  #indeterminateEnabled = true;\r\n\r\n  @HostListener('change')\r\n  public elementChange() {\r\n    if (this.#indeterminateEnabled) {\r\n      if (!isDefined(this.#value)) {\r\n        this.#value = true;\r\n      } else if (this.#value) {\r\n        this.#value = false;\r\n      } else {\r\n        this.#value = null;\r\n      }\r\n      (this.elementRef.nativeElement as HTMLInputElement).indeterminate = !isDefined(this.#value);\r\n      (this.elementRef.nativeElement as HTMLInputElement).checked = this.#value ? true : false;\r\n    } else {\r\n      this.#value = (this.elementRef.nativeElement as HTMLInputElement).checked;\r\n    }\r\n\r\n    this.change(this.#value);\r\n    this.onTouched();\r\n  }\r\n  @HostListener('blur')\r\n  public elementBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input()\r\n  public set appIndeterminate(value: boolean) {\r\n    this.#indeterminateEnabled = value?.toString() === 'false' ? false : true;\r\n    if (!this.#indeterminateEnabled && (this.elementRef.nativeElement as HTMLInputElement).indeterminate) {\r\n      (this.elementRef.nativeElement as HTMLInputElement).indeterminate = false;\r\n      (this.elementRef.nativeElement as HTMLInputElement).checked = false;\r\n      this.#value = false;\r\n      this.change(this.#value);\r\n    }\r\n  }\r\n\r\n  public onChange = (_: any) => { };\r\n  public onTouched = () => { };\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  public writeValue(value: any): void {\r\n    if (this.#value !== value) {\r\n      this.#value = value;\r\n      if (this.#indeterminateEnabled) {\r\n        (this.elementRef.nativeElement as HTMLInputElement).indeterminate = !isDefined(this.#value);\r\n      }\r\n      (this.elementRef.nativeElement as HTMLInputElement).checked = this.#value ? true : false;\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: (_: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public change(value: boolean | null): void {\r\n    this.onChange(value);\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <h2 class=\"forge-typography--title\">Search</h2>\r\n    <ng-container *ngIf=\"searchCache.activeSearchId\">\r\n      <forge-divider vertical></forge-divider>\r\n      <span class=\"forge-typography--subtitle1-secondary\">{{searchName}}</span>\r\n      <span class=\"forge-typography--subtitle2-secondary\">{{searchDescription}}</span>\r\n    </ng-container>\r\n  </div>\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onSaveSearch()\">\r\n        <span>Save search</span>\r\n      </button>\r\n    </forge-button>\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" #searchesPopup=\"forgePopup\" [forgePopup]=\"searchesPopupTemplate\" placement=\"bottom-start\" (click)=\"searchesPopup.open()\">\r\n        <span>Saved searches</span>\r\n        <forge-icon name=\"arrow_drop_down\"></forge-icon>\r\n      </button>\r\n    </forge-button>\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onClearSearch()\">\r\n        <span>Clear all</span>\r\n      </button>\r\n    </forge-button>\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onSearch()\">\r\n        <span>Search</span>\r\n      </button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<ng-template #searchesPopupTemplate>\r\n  <forge-list class=\"searches-popup\" (forge-list-item-select)=\"onSearchAction($event, 'search', $event.detail.value)\">\r\n    <forge-list-item>\r\n      <span>Add new search</span>\r\n    </forge-list-item>\r\n    <forge-divider></forge-divider>\r\n    <forge-list-item *ngFor=\"let search of searchCache.searches\" [value]=\"search.id\">\r\n      <span>{{search.name}}</span>\r\n      <div slot=\"trailing\">\r\n        <forge-icon-button>\r\n          <button (click)=\"onSearchAction($event, 'edit', search.id)\">\r\n            <forge-icon name=\"edit\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n        <forge-icon-button>\r\n          <button (click)=\"onSearchAction($event, 'delete', search.id)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n    </forge-list-item>\r\n  </forge-list>\r\n</ng-template>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"formGroup\" class=\"form\" (ngSubmit)=\"onSearch()\">\r\n    <ng-container formGroupName=\"name\">\r\n      <forge-autocomplete multiple=\"true\" formControlName=\"value\" [filter]=\"nameFilter\" allow-unmatched=\"true\">\r\n        <forge-text-field>\r\n          <input type=\"text\" id=\"app--search--name\" />\r\n          <label for=\"app--search--name\">Name</label>\r\n          <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n          <forge-icon-button slot=\"addon-end\" class=\"operator__addon\" [ngClass]=\"{'operator__addon--selected': formGroup.get('name')?.value.operator}\">\r\n            <button type=\"button\" #nameOperatorPopup=\"forgePopup\" [forgePopup]=\"operatorPopupTemplate\" (click)=\"onOperatorPopupOpen($event, nameOperatorPopup, 'name')\">\r\n              <forge-icon name=\"bolt\"></forge-icon>\r\n            </button>\r\n          </forge-icon-button>\r\n        </forge-text-field>\r\n      </forge-autocomplete>\r\n    </ng-container>\r\n\r\n    <ng-container formGroupName=\"dateOfBirth\">\r\n      <forge-date-picker formControlName=\"value\">\r\n        <forge-text-field>\r\n          <input type=\"text\" id=\"app--search--date-of-birth\" />\r\n          <label for=\"app--search--date-of-birth\">Date</label>\r\n          <forge-icon-button slot=\"addon-end\" class=\"operator__addon\" [ngClass]=\"{'operator__addon--selected': formGroup.get('dateOfBirth')?.value.operator}\">\r\n            <button type=\"button\" #dateOfBirthOperatorPopup=\"forgePopup\" [forgePopup]=\"operatorPopupTemplate\" (click)=\"onOperatorPopupOpen($event, dateOfBirthOperatorPopup, 'dateOfBirth')\">\r\n              <forge-icon name=\"bolt\"></forge-icon>\r\n            </button>\r\n          </forge-icon-button>\r\n        </forge-text-field>\r\n      </forge-date-picker>\r\n    </ng-container>\r\n\r\n    <ng-container formGroupName=\"address\">\r\n      <forge-text-field>\r\n        <input type=\"text\" id=\"app--search--address\" formControlName=\"value\" />\r\n        <label for=\"app--search--address\" slot=\"label\">Address</label>\r\n        <ng-container *ngTemplateOutlet=\"opertatorAddonTemplate, context: { name: 'address' }\"></ng-container>\r\n      </forge-text-field>\r\n    </ng-container>\r\n\r\n    <forge-checkbox>\r\n      <input type=\"checkbox\" id=\"app--search--include\" formControlName=\"include\" appIndeterminate />\r\n      <label for=\"app--search--include\">Include</label>\r\n    </forge-checkbox>\r\n\r\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\r\n  </form>\r\n\r\n  <p>{{formGroup.value | json}}</p>\r\n</div>\r\n\r\n<ng-template #opertatorAddonTemplate let-name=\"name\">\r\n  <forge-icon-button slot=\"addon-end\" class=\"operator__addon\" [ngClass]=\"{'operator__addon--selected': formGroup.get(name)?.value.operator}\">\r\n    <button type=\"button\" #operatorPopup=\"forgePopup\" [forgePopup]=\"operatorPopupTemplate\" (click)=\"onOperatorPopupOpen($event, operatorPopup, name)\">\r\n      <forge-icon name=\"bolt\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</ng-template>\r\n\r\n<ng-template #operatorPopupTemplate>\r\n  <forge-list class=\"operator-popup\" (forge-list-item-select)=\"onOperatorSelected($event.detail.value)\">\r\n    <forge-list-item *ngFor=\"let option of operatorOptions\" [value]=\"option.value\" [selected]=\"operatorPopupFormGroup.value.operator === option.value\">\r\n      <span>{{option.label}}</span>\r\n      <forge-icon name=\"check\" slot=\"trailing\" *ngIf=\"operatorPopupFormGroup.value.operator === option.value\"></forge-icon>\r\n    </forge-list-item>\r\n  </forge-list>\r\n</ng-template>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormControlInvalidPipe } from 'src/app/shared/pipes/form-control-invalid.pipe';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components/autocomplete-range/autocomplete-range.component';\r\nimport { IndeterminateDirective } from 'src/app/shared/directives/indeterminate/indeterminate.directive';\r\nimport { AutoFocusDirective } from 'src/app/shared/directives/auto-focus/auto-focus.directive';\r\nimport { SearchComponent } from './search.component';\r\nimport { SearchSaveComponent } from './save/search-save.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: SearchComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SearchComponent,\r\n    SearchSaveComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormControlInvalidPipe,\r\n    AutocompleteRangeComponent,\r\n    IndeterminateDirective,\r\n    AutoFocusDirective\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SearchModule { }\r\n","import { Component, ViewChild, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\r\nimport { PopupDirective, DialogService, ToastService } from '@tylertech/forge-angular';\r\nimport { Observable, lastValueFrom, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n// TODO import service\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { SearchSaveComponent } from './save/search-save.component';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.scss']\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  @ViewChild('searchesPopup', { static: false })\r\n  private searchesPopup?: PopupDirective;\r\n  private storageKey = 'search-searches';\r\n  private operatorPopup?: PopupDirective;\r\n\r\n  public searchName?: string;\r\n  public searchDescription?: string;\r\n  // TODO consider moving to a cache service\r\n  public searchCache: { activeSearchId?: number; searches: ISearch[] } = {\r\n    activeSearchId: undefined,\r\n    searches: []\r\n  };\r\n  // TODO consider moving to a cache service\r\n  public formGroup = new FormGroup({\r\n    name: new FormGroup({\r\n      value: new FormControl(),\r\n      operator: new FormControl()\r\n    }),\r\n    dateOfBirth: new FormGroup({\r\n      value: new FormControl(),\r\n      operator: new FormControl()\r\n    }),\r\n    address: new FormGroup({\r\n      value: new FormControl(),\r\n      operator: new FormControl()\r\n    }),\r\n    include: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public facetOptions: { label: string; value: number }[] = [];\r\n  public operatorOptions = [\r\n    { value: null, label: 'None' },\r\n    // { value: 0, label: 'Equal' },\r\n    { value: 1, label: 'Not equal' },\r\n    { value: 2, label: 'Greater than' },\r\n    { value: 3, label: 'Less than' },\r\n    // { value: 4, label: 'Greater than equal to' },\r\n    // { value: 5, label: 'Less than equal to' },\r\n    // { value: 6, label: 'Range' },\r\n    { value: 7, label: 'Contains' },\r\n    { value: 8, label: 'Not contains' },\r\n    // { value: 9, label: 'Empty' }\r\n  ];\r\n  public operatorPopupFormGroup?: FormGroup;\r\n  public nameFilter: AutocompleteFilterCallback = (filter: string) => lastValueFrom(this.dataService.getPeople().pipe(\r\n    map(r => r.data\r\n      .filter(p => p.firstName.toLocaleLowerCase().includes(filter.toLocaleLowerCase()) || p.lastName.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\r\n      .map(p => ({ label: `${p.firstName} ${p.lastName}`, value: p.id }))\r\n    )\r\n  ));\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    return of(this.facetOptions);\r\n  }\r\n\r\n  constructor(private dialogService: DialogService, private toastService: ToastService, private dataService: AppDataService) {\r\n    this.dataService.getSearches(this.storageKey).subscribe((result) => {\r\n      this.searchCache.searches = result || [];\r\n    });\r\n    for (let index = 0; index < 20; index++) {\r\n      this.facetOptions.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    const activeSearch = this.searchCache.searches.find((s) => s.id === this.searchCache.activeSearchId);\r\n    if (isDefined(activeSearch)) {\r\n      this.searchName = activeSearch?.name;\r\n      this.searchDescription = activeSearch?.description;\r\n      this.formGroup.patchValue(activeSearch?.filters);\r\n    }\r\n  }\r\n\r\n  public onSearch() {\r\n    // TODO implement search action\r\n  }\r\n\r\n  public onSaveSearch(search?: {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    isDefault: boolean;\r\n    isPublic: boolean;\r\n    filters: { property: string; value: string }[];\r\n  }) {\r\n    const activeSearch = isDefined(search) ? search : this.searchCache.searches.find((s) => s.id === this.searchCache.activeSearchId);\r\n    const record = {\r\n      id: activeSearch?.id,\r\n      name: activeSearch?.name,\r\n      description: activeSearch?.description,\r\n      isDefault: activeSearch?.isDefault,\r\n      isPublic: activeSearch?.isPublic,\r\n      filters: this.formGroup.value\r\n    };\r\n    const dialogRef = this.dialogService.show(SearchSaveComponent, { backdropClose: false, escapeClose: false }, { data: record });\r\n    const sub = dialogRef.afterClosed.subscribe((result) => {\r\n      sub.unsubscribe();\r\n      if (result) {\r\n        if (isDefined(result.id)) {\r\n          const searchIndex = this.searchCache.searches.findIndex((s) => s.id === result.id);\r\n          if (searchIndex !== -1) {\r\n            this.searchCache.searches[searchIndex] = result;\r\n          }\r\n        } else {\r\n          result.id = this.searchCache.searches.length ? Math.max(...this.searchCache.searches.map((s) => s.id)) + 1 : 1;\r\n          this.searchCache.searches.push(result);\r\n        }\r\n\r\n        this.dataService.saveSearches(this.storageKey, this.searchCache.searches).subscribe(\r\n          {\r\n            next: () => {\r\n              this.searchCache.activeSearchId = result.id;\r\n              this.searchName = result.name;\r\n              this.searchDescription = result.description;\r\n              this.toastService.show({ message: 'Search saved' });\r\n            },\r\n            error: () => this.toastService.show({ message: 'Search save failed' })\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  public onClearSearch() {\r\n    this.formGroup.get('include')?.setValue(null);\r\n    this.formGroup.reset();\r\n  }\r\n\r\n  public onSearchAction(event: CustomEvent, action: string, id: number) {\r\n    event.stopPropagation();\r\n    this.searchesPopup?.close();\r\n\r\n    if (!isDefined(id)) {\r\n      this.searchCache.activeSearchId = undefined;\r\n      this.searchName = '';\r\n      this.searchDescription = '';\r\n      this.formGroup.reset();\r\n    } else {\r\n      const search = this.searchCache.searches.find((s) => s.id === id);\r\n      if (isDefined(search)) {\r\n        switch (action) {\r\n          case 'search':\r\n            this.searchCache.activeSearchId = search?.id;\r\n            this.searchName = search?.name;\r\n            this.searchDescription = search?.description;\r\n            this.onSearch();\r\n            break;\r\n          case 'edit':\r\n            this.searchCache.activeSearchId = search?.id;\r\n            this.searchName = search?.name;\r\n            this.searchDescription = search?.description;\r\n            this.formGroup.patchValue(search?.filters);\r\n            break;\r\n          case 'copy': {\r\n            const copySearch = JSON.parse(JSON.stringify(search));\r\n            copySearch.id = undefined;\r\n            copySearch.name = `${copySearch.name} copy`;\r\n            copySearch.isDefault = false;\r\n            this.onSaveSearch(copySearch);\r\n            break;\r\n          }\r\n          case 'delete': {\r\n            const searchIndex = this.searchCache.searches.findIndex((s) => s.id === search?.id);\r\n            if (searchIndex !== -1) {\r\n              this.searchCache.searches.splice(searchIndex, 1);\r\n              this.dataService.saveSearches(this.storageKey, this.searchCache.searches).subscribe((result) => { });\r\n            }\r\n\r\n            if (this.searchCache.activeSearchId === search?.id) {\r\n              this.searchCache.activeSearchId = undefined;\r\n              this.searchName = '';\r\n              this.searchDescription = '';\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public onOperatorPopupOpen(event: Event, popup: PopupDirective, name: string) {\r\n    event.stopPropagation();\r\n    this.operatorPopupFormGroup = this.formGroup.get(name) as FormGroup;\r\n    this.operatorPopup = popup;\r\n    this.operatorPopup.open();\r\n  }\r\n\r\n  public onOperatorSelected(value: string | number) {\r\n    value = parseInt(value as string, 10);\r\n    this.operatorPopupFormGroup?.get('operator')?.setValue(value);\r\n    this.operatorPopup?.close();\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[2,3,4,5,6,7,8]}