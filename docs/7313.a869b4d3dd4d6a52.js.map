{"version":3,"file":"7313.a869b4d3dd4d6a52.js","mappings":"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","names":["ExamplesComponent","constructor","t","core","Xpm","selectors","decls","vars","template","rf","ctx","i0","ExamplesService","this","mockData","index","push","id","code","Utils","description","getSingleSelectOptions","filterText","value","take","Observable","o","setTimeout","records","length","filter","d","toLocaleLowerCase","includes","slice","toString","next","complete","getMutlipleSelectOptions","values","Set","map","v","Yz7","factory","ɵfac","providedIn","AutocompleteComponent","moduleService","formGroup","FormGroup","autocomplete01","FormControl","autocomplete02","label","autocomplete03","autocomplete04","autocomplete05","autocomplete06","autocomplete07","optionBuilder","option","parentElement","titleSpan","document","createElement","setAttribute","innerText","appendChild","subTitleSpan","selectedTextBuilder","options","singleSelectPrimitiveFilter","lastValueFrom","undefined","pipe","result","singleSelectObjectFilter","multipleSelectFilter","onAutocompleteChange","event","detail","i1","consts","$event","item_r6","item_r7","DragDropComponent","items01","items02","onDrop","previousContainer","container","moveItemInArray","data","previousIndex","currentIndex","transferArrayItem","DragDropComponent_forge_list_item_6_Template","DragDropComponent_forge_list_item_7_Template","DragDropComponent_forge_list_item_13_Template","DragDropComponent_forge_list_item_14_Template","_c0","_r3","_r0","option_r1","SelectComponent","objectOptions","select01","select02","select03","select04","select05","select06","select07","onSelectChange","SelectComponent_forge_option_2_Template","ChildComponent","nameChange","EventEmitter","onNameChange","emit","name","inputs","outputs","BindingComponent","ArrayFindPipe","transform","source","filterProperty","returnProperty","sourceValue","find","isDeepEqual","Yjl","pure","standalone","variable_r2","routes","path","component","children","MiscComponent","MiscComponent_ng_template_12_Template","_c1","redirectTo","pathMatch","ExamplesModule","oAB","cJS","CommonModule","RouterModule","DragDropModule","AppFormsModule","CardComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FormsModule","ReactiveFormsModule","ForgeModule"],"sourceRoot":"webpack:///","sources":["./src/app/examples/examples.component.ts","./src/app/examples/examples.component.html","./src/app/examples/examples.service.ts","./src/app/examples/autocomplete/autocomplete.component.ts","./src/app/examples/autocomplete/autocomplete.component.html","./src/app/examples/drag-drop/drag-drop.component.html","./src/app/examples/drag-drop/drag-drop.component.ts","./src/app/examples/select/select.component.html","./src/app/examples/select/select.component.ts","./src/app/examples/binding/child/child.component.ts","./src/app/examples/binding/child/child.component.html","./src/app/examples/binding/binding.component.ts","./src/app/examples/binding/binding.component.html","./src/app/shared/pipes/array-find.pipe.ts","./src/app/examples/misc/misc.component.html","./src/app/examples/examples.module.ts","./src/app/examples/misc/misc.component.ts","./src/app/shared/app-forms.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-examples',\n  templateUrl: './examples.component.html',\n  styleUrls: ['./examples.component.scss']\n})\nexport class ExamplesComponent {\n\n  constructor() { }\n\n}\n","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Utils } from 'src/utils';\n\nexport interface IRecord {\n  id: number;\n  code: string;\n  description: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExamplesService {\n  public mockData: IRecord[] = [];\n\n  constructor() {\n    for (let index = 0; index < 300; index++) {\n      this.mockData.push({ id: index, code: Utils.formatNumber(index, '3.0'), description: `Item ${Utils.formatNumber(index, '3.0')}` });\n    }\n  }\n\n  public getSingleSelectOptions(filterText?: string, value?: string | number | null, take = 100): Observable<IRecord[]> {\n    // NOTES\n    // if there is filter text, query records with case insensitive include - sort, take\n    // if there is a value, query records for value match, return single result as []\n    // if there is no value or filter text query top - sort, take\n    return new Observable((o) => {\n      setTimeout(() => {\n        let records = [];\n        if (filterText?.length) {\n          records = this.mockData.filter(d => d.description.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).slice(0, take);\n        } else if (value) {\n          records = this.mockData.filter(d => d.id.toString() === value.toString());\n        } else {\n          records = this.mockData.slice(0, take);\n        }\n        o.next(records);\n        o.complete();\n      }, 1000);\n    });\n  }\n\n  public getMutlipleSelectOptions(filterText?: string, values?: string[] | number[] | null, take = 100): Observable<IRecord[]> {\n    // NOTES\n    // if there is filter text, query records with case insensitive include - sort, take\n    // if there are values and no filter text, query records for values and top - sort by selected, take\n    // if there are no values or filter text query top - sort, take\n    return new Observable((o) => {\n      setTimeout(() => {\n        let records = [];\n        if (filterText?.length) {\n          records = this.mockData.filter(d => d.description.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).slice(0, take);\n        } else {\n          if (values?.length) {\n            records = [...new Set([...this.mockData.filter(d => values.map(v => v.toString()).includes(d.id.toString())), ...this.mockData.slice(0, take)])];\n          } else {\n            records = this.mockData.slice(0, take);\n          }\n        }\n\n        o.next(records);\n        o.complete();\n      }, 1000);\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { lastValueFrom } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AutocompleteFilterCallback, AutocompleteOptionBuilder, AutocompleteSelectedTextBuilder, IOption } from '@tylertech/forge';\n\nimport { ExamplesService, IRecord } from '../examples.service';\n\n@Component({\n  selector: 'app-examples-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss']\n})\nexport class AutocompleteComponent {\n  public formGroup = new FormGroup({\n    autocomplete01: new FormControl(1),\n    autocomplete02: new FormControl({ value: { id: 2, code: '002', description: 'Item 002' }, label: 'Item 002' }),\n    autocomplete03: new FormControl([3, 4, 5]),\n    autocomplete04: new FormControl(),\n    autocomplete05: new FormControl()\n  });\n  public autocomplete06 = 6;\n  public autocomplete07 = 7;\n\n  public optionBuilder: AutocompleteOptionBuilder = (option: IOption, filterText: string, parentElement: HTMLElement) => {\n    const titleSpan = document.createElement('span');\n    titleSpan.setAttribute('slot', 'title');\n    titleSpan.innerText = option.value.description;\n    parentElement.appendChild(titleSpan);\n\n    const subTitleSpan = document.createElement('span');\n    subTitleSpan.setAttribute('slot', 'subtitle');\n    subTitleSpan.innerText = option.value.code;\n    parentElement.appendChild(subTitleSpan);\n\n    return undefined as unknown as HTMLElement;\n  };\n\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (options: IOption[]): string => {\n    return options[0] ? `${options[0].value} - ${options[0]?.label}` : '';\n  };\n\n  public singleSelectPrimitiveFilter: AutocompleteFilterCallback = (filterText: string, value: string) => {\n    if (value) {\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(undefined, value).pipe(map(result => result.map(d => ({ value: d.id, label: d.description })))));\n    } else {\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(filterText).pipe(map(result => result.map(d => ({ value: d.id, label: d.description })))));\n    }\n  };\n\n  public singleSelectObjectFilter: AutocompleteFilterCallback = (filterText: string, value: IOption) => {\n    if (value) {\n      return [{ label: value.label, value }];\n    } else {\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(filterText).pipe(map(result => result.map(d => ({ label: d.description, value: d })))));\n    }\n  };\n\n  public multipleSelectFilter: AutocompleteFilterCallback = (filterText: string, value: string) => {\n    if (value) {\n      return [];\n    } else {\n      return lastValueFrom(this.moduleService.getMutlipleSelectOptions(filterText, this.formGroup.value.autocomplete03).pipe(map(result => result.map((d: IRecord) => ({ value: d.id, label: d.description })) as IOption[])));\n    }\n  };\n\n  constructor(\n    public moduleService: ExamplesService\n  ) { }\n\n  public onAutocompleteChange(event: CustomEvent) {\n    this.autocomplete07 = event.detail;\n  }\n\n}\n","<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" class=\"form-grid\">\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" formControlName=\"autocomplete01\">\n    <forge-text-field>\n      <input id=\"autocomplete01\" type=\"text\" />\n      <label for=\"autocomplete01\">Autocomplete01 - single primitive</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <forge-autocomplete [filter]=\"singleSelectObjectFilter\" formControlName=\"autocomplete02\">\n    <forge-text-field>\n      <input id=\"autocomplete01\" type=\"text\" />\n      <label for=\"autocomplete01\">Autocomplete02 - single object</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <forge-autocomplete [filter]=\"multipleSelectFilter\" formControlName=\"autocomplete03\" multiple>\n    <forge-text-field>\n      <input id=\"autocomplete01\" type=\"text\" />\n      <label for=\"autocomplete01\">Autocomplete03 - multiple select</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <forge-autocomplete [filter]=\"singleSelectObjectFilter\" formControlName=\"autocomplete04\" [optionBuilder]=\"optionBuilder\">\n    <forge-text-field>\n      <input id=\"autocomplete04\" type=\"text\" />\n      <label for=\"autocomplete04\">Autocomplete04 - option builder</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" formControlName=\"autocomplete05\" [selectedTextBuilder]=\"selectedTextBuilder\">\n    <forge-text-field>\n      <input id=\"autocomplete05\" type=\"text\" />\n      <label for=\"autocomplete05\">Autocomplete05 - selected text builder</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <p class=\"form-grid--col-span\">{{formGroup.value | json}}</p>\n</form>\n\n<forge-divider></forge-divider>\n\n<div class=\"form-grid\">\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" [(ngModel)]=\"autocomplete06\">\n    <forge-text-field>\n      <input id=\"autocomplete06\" type=\"text\" />\n      <label for=\"autocomplete06\">Autocomplete06 - ngModel binding</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n      <span slot=\"helper-text\">selected value: {{autocomplete06}}</span>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" [value]=\"autocomplete07\" (forge-autocomplete-change)=\"onAutocompleteChange($event)\">\n    <forge-text-field>\n      <input id=\"autocomplete07\" type=\"text\" />\n      <label for=\"autocomplete07\">Autocomplete07 - value binding</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n      <span slot=\"helper-text\">selected value: {{autocomplete07}}</span>\n    </forge-text-field>\n  </forge-autocomplete>\n</div>","<div class=\"card-container\" cdkDropListGroup>\n  <div class=\"card\">\n    <div class=\"title\">List 1</div>\n\n    <forge-list cdkDropList #item01List=\"cdkDropList\" [cdkDropListData]=\"items01\" [cdkDropListConnectedTo]=\"[item02List]\" (cdkDropListDropped)=\"onDrop($event)\">\n      <forge-list-item *ngFor=\"let item of items01\" cdkDrag>\n        <span class=\"cdk-drag__content\">{{ item }}</span>\n      </forge-list-item>\n      <forge-list-item class=\"cdk-drag-placeholder\" *cdkDragPlaceholder></forge-list-item>\n    </forge-list>\n\n  </div>\n\n  <div class=\"card\">\n    <div class=\"title\">List 2</div>\n\n    <forge-list cdkDropList #item02List=\"cdkDropList\" [cdkDropListData]=\"items02\" [cdkDropListConnectedTo]=\"[item01List]\" (cdkDropListDropped)=\"onDrop($event)\">\n      <forge-list-item *ngFor=\"let item of items02\" cdkDrag>\n        <span class=\"cdk-drag__content\">{{ item }}</span>\n      </forge-list-item>\n      <forge-list-item class=\"cdk-drag-placeholder\" *cdkDragPlaceholder></forge-list-item>\n    </forge-list>\n\n  </div>\n</div>","import { Component } from '@angular/core';\n\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'app-examples-drag-drop',\n  templateUrl: './drag-drop.component.html',\n  styleUrls: ['./drag-drop.component.scss']\n})\nexport class DragDropComponent {\n  public items01 = [\n    'List 1 - item 01',\n    'List 1 - item 02',\n    'List 1 - item 03',\n    'List 1 - item 04'\n  ];\n  public items02 = [\n    'List 2 - item 01',\n    'List 2 - item 02',\n    'List 2 - item 03',\n    'List 2 - item 04'\n  ];\n\n  constructor() { }\n\n  public onDrop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    }\n  }\n\n}\n","<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" class=\"form-grid\">\n  <forge-select formControlName=\"select01\" label=\"Select01 - single primitive\">\n    <forge-option *ngFor=\"let option of options\" [value]=\"option.value\">{{option.label}}</forge-option>\n  </forge-select>\n\n  <forge-select label=\"Select02 - single object\" [options]=\"objectOptions\" formControlName=\"select02\"></forge-select>\n\n  <forge-select label=\"Select03 - multiple select\" [options]=\"options\" multiple formControlName=\"select03\"></forge-select>\n\n  <forge-select label=\"Select04 - option builder\" [options]=\"objectOptions\" formControlName=\"select04\" [optionBuilder]=\"optionBuilder\"></forge-select>\n\n  <forge-select label=\"Select05 - selected text builder\" [options]=\"options\" formControlName=\"select05\" [selectedTextBuilder]=\"selectedTextBuilder\"></forge-select>\n\n  <p class=\"form-grid--col-span\">{{formGroup.value | json}}</p>\n</form>\n\n<forge-divider></forge-divider>\n\n<div class=\"form-grid\">\n  <forge-select label=\"Select06 - ngModel binding\" [options]=\"options\" [(ngModel)]=\"select06\">\n    <span slot=\"helper-text\">selected value: {{select06}}</span>\n  </forge-select>\n  <forge-select label=\"Select07 - value binding\" [options]=\"options\" [value]=\"select07\" (change)=\"onSelectChange($event)\">\n    <span slot=\"helper-text\">selected value: {{select07}}</span>\n  </forge-select>\n</div>","import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { IOption, SelectOptionBuilder, SelectSelectedTextBuilder } from '@tylertech/forge';\nimport { ExamplesService } from '../examples.service';\n\n@Component({\n  selector: 'app-examples-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent {\n  public options = this.moduleService.mockData.slice(0, 20).map(d => ({ value: d.id, label: d.description }));\n  public objectOptions = this.moduleService.mockData.slice(0, 20).map(d => ({ value: d, label: d.description }));\n  public formGroup = new FormGroup({\n    select01: new FormControl(1),\n    select02: new FormControl(this.objectOptions[2].value),\n    // select02: new FormControl({ id: 2, code: '002', description: 'Item 002' }),\n    select03: new FormControl([3, 4, 5]),\n    select04: new FormControl(),\n    select05: new FormControl()\n  });\n  public select06 = 6;\n  public select07 = 7;\n\n  public optionBuilder: SelectOptionBuilder = (option: IOption, parentElement: HTMLElement) => {\n    const titleSpan = document.createElement('span');\n    titleSpan.setAttribute('slot', 'title');\n    titleSpan.innerText = option.value.description;\n    parentElement.appendChild(titleSpan);\n\n    const subTitleSpan = document.createElement('span');\n    subTitleSpan.setAttribute('slot', 'subtitle');\n    subTitleSpan.innerText = option.value.code;\n    parentElement.appendChild(subTitleSpan);\n\n    return undefined as unknown as HTMLElement;\n  };\n\n  public selectedTextBuilder: SelectSelectedTextBuilder = (options: IOption[]): string => {\n    return options[0] ? `${options[0].value} - ${options[0]?.label}` : '';\n  };\n\n  constructor(\n    public moduleService: ExamplesService\n  ) { }\n\n  public onSelectChange(event: CustomEvent) {\n    this.select07 = event.detail;\n  }\n\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-examples-binding-child',\n  templateUrl: './child.component.html',\n  styleUrls: ['./child.component.scss']\n})\nexport class ChildComponent {\n  @Input()\n  public name?: string;\n\n  // must be named the same as the input property with 'Change' suffix\n  @Output()\n  public nameChange = new EventEmitter<string>();\n\n  constructor() { }\n\n  public onNameChange() {\n    this.nameChange.emit(this.name);\n  }\n}\n","<forge-text-field>\n  <input type=\"text\" id=\"examples--binding--child--name\" [(ngModel)]=\"name\" (input)=\"onNameChange()\" />\n  <label for=\"examples--binding--child--name\" slot=\"label\">Child component</label>\n</forge-text-field>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-examples-binding',\n  templateUrl: './binding.component.html',\n  styleUrls: ['./binding.component.scss']\n})\nexport class BindingComponent {\n\n  public name = 'two way binding example';\n\n  constructor() { }\n\n}\n","<div class=\"two-way-binding\">\n  <forge-text-field>\n    <input type=\"text\" id=\"examples--binding--name\" [(ngModel)]=\"name\" />\n    <label for=\"examples--binding--name\" slot=\"label\">Parent component</label>\n  </forge-text-field>\n  <app-examples-binding-child [(name)]=\"name\"></app-examples-binding-child>\n</div>","\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { isDeepEqual } from '@tylertech/forge-core';\r\n\r\n@Pipe({\r\n  name: 'appArrayFind',\r\n  standalone: true\r\n})\r\nexport class ArrayFindPipe implements PipeTransform {\r\n  transform(value: string | number, source: any[], filterProperty: string, returnProperty = null) {\r\n    if (!value?.toString().length || !source.length || !filterProperty.length) {\r\n      return;\r\n    }\r\n    const sourceValue = source.find(o => isDeepEqual(o[filterProperty], value));\r\n    if (!sourceValue) {\r\n      return;\r\n    }\r\n\r\n    return returnProperty ? sourceValue[returnProperty] : sourceValue;\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\n  <h2 slot=\"start\" class=\"forge-typography--title\">Misc examples</h2>\n</forge-toolbar>\n\n<div class=\"body\">\n\n  <app-card border=\"outlined\">\n    <div app-card-header slot=\"start\">\n      <span>Card header</span>\n    </div>\n    <div app-card-header slot=\"end\">\n      <forge-icon-button>\n        <button type=\"button\">\n          <forge-icon name=\"close\"></forge-icon>\n        </button>\n      </forge-icon-button>\n    </div>\n\n    <ng-template #variableTemplate [ngTemplateOutlet]=\"variableTemplate\" [ngTemplateOutletContext]=\"{ $implicit: { cats: 1, dogs: 2 } }\" let-variable>\n      <p>{{variable | json}}</p>\n    </ng-template>\n\n    <div>{{0 | appArrayFind:data:'value':'label'}}</div>\n    <div>{{1 | appArrayFind:data:'value' | json}}</div>\n\n    <div app-card-footer slot=\"end\">\n      <forge-button type=\"outlined\">\n        <button type=\"button\">Cancel</button>\n      </forge-button>\n      <forge-button type=\"raised\">\n        <button type=\"button\">Save</button>\n      </forge-button>\n    </div>\n  </app-card>\n\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\nimport { CardComponent } from 'src/app/shared/components/card/card.component';\nimport { ArrayFindPipe } from 'src/app/shared/pipes/array-find.pipe';\nimport { ExamplesComponent } from './examples.component';\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component';\nimport { DragDropComponent } from './drag-drop/drag-drop.component';\nimport { SelectComponent } from './select/select.component';\nimport { BindingComponent } from './binding/binding.component';\nimport { ChildComponent } from './binding/child/child.component';\nimport { MiscComponent } from './misc/misc.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: ExamplesComponent,\n    children: [\n      { path: 'autocomplete', component: AutocompleteComponent },\n      { path: 'drag-drop', component: DragDropComponent },\n      { path: 'select', component: SelectComponent },\n      { path: 'binding', component: BindingComponent },\n      { path: 'misc', component: MiscComponent },\n      { path: '', redirectTo: 'autocomplete', pathMatch: 'full' }\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    ExamplesComponent,\n    AutocompleteComponent,\n    DragDropComponent,\n    SelectComponent,\n    BindingComponent,\n    ChildComponent,\n    MiscComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    DragDropModule,\n    AppFormsModule,\n    CardComponent,\n    ArrayFindPipe\n  ],\n  exports: [\n    RouterModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class ExamplesModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-examples-misc',\n  templateUrl: './misc.component.html',\n  styleUrls: ['./misc.component.scss']\n})\nexport class MiscComponent {\n  public data = [\n    { value: 0, label: 'Item 0' },\n    { value: 1, label: 'Item 1' },\n    { value: 2, label: 'Item 2' },\n    { value: 3, label: 'Item 3' },\n    { value: 4, label: 'Item 4' },\n    { value: 5, label: 'Item 5' },\n    { value: 6, label: 'Item 6' },\n    { value: 7, label: 'Item 7' },\n    { value: 8, label: 'Item 8' },\n    { value: 9, label: 'Item 9' }\n  ];\n\n  constructor() { }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }"],"x_google_ignoreList":[]}