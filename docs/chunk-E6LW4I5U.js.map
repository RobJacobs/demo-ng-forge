{
  "version": 3,
  "sources": ["src/app/people/people.component.ts", "src/app/people/people.component.html", "src/app/shared/table/utils.ts", "src/app/shared/table/base-table.component.ts", "src/app/shared/components/routerlink-button/routerlink-button.component.ts", "src/app/shared/components/routerlink-button/routerlink-button.component.html", "src/app/shared/components/filter-chips/filter-chips.component.ts", "src/app/shared/components/filter-chips/filter-chips.component.html", "src/app/people/people-cache.service.ts", "src/app/people/home/filter/filter.component.ts", "src/app/people/home/filter/filter.component.html", "src/app/people/home/home.component.ts", "src/app/people/home/home.component.html", "src/app/people/detail/detail.component.ts", "src/app/people/detail/detail.component.html", "src/app/people/routes.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-people',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './people.component.html',\r\n  styleUrls: ['./people.component.scss']\r\n})\r\nexport class PeopleComponent {}\r\n", "<router-outlet></router-outlet>\r\n", "import { isDefined } from '@tylertech/forge-core';\r\nimport { TableComponent, IMenuOption, MenuComponent } from '@tylertech/forge';\r\nimport { ViewContainerRef, ComponentRef, EmbeddedViewRef, Type } from '@angular/core';\r\n\r\nexport class TableUtils {\r\n  public static createLinkButton(label: string | number, clickHandler: (event: Event) => void): HTMLButtonElement {\r\n    const linkElement = document.createElement('button');\r\n    linkElement.classList.add('forge-hyperlink');\r\n    linkElement.innerText = label.toString();\r\n    linkElement.type = 'button';\r\n    linkElement.style.minWidth = '36px';\r\n    linkElement.addEventListener('click', clickHandler);\r\n    return linkElement;\r\n  }\r\n\r\n  public static createIconButton(icon: string, clickHandler: (event: Event) => void, title: string): HTMLElement {\r\n    const containerElement = document.createElement('div');\r\n\r\n    const iconButtonElement = document.createElement('forge-icon-button');\r\n    iconButtonElement.setAttribute('aria-label', title);\r\n    iconButtonElement.addEventListener('click', (event) => {\r\n      event.stopPropagation();\r\n      clickHandler(event);\r\n    });\r\n    containerElement.appendChild(iconButtonElement);\r\n\r\n    const iconElement = document.createElement('forge-icon');\r\n    iconElement.setAttribute('name', icon);\r\n    iconButtonElement.appendChild(iconElement);\r\n\r\n    const tooltipElement = document.createElement('forge-tooltip');\r\n    tooltipElement.innerHTML = title;\r\n    containerElement.appendChild(tooltipElement);\r\n\r\n    return containerElement;\r\n  }\r\n\r\n  public static createMenuButton(icon: string, selectHandler: (event: Event) => void, options: IMenuOption[], title: string): HTMLElement {\r\n    const menuElement = document.createElement('forge-menu') as MenuComponent;\r\n    menuElement.options = options;\r\n    menuElement.addEventListener('forge-menu-select', selectHandler);\r\n\r\n    menuElement.appendChild(this.createIconButton(icon, () => {}, title));\r\n\r\n    return menuElement;\r\n  }\r\n\r\n  public static createExpanderRow<T>(rowIndex: number, tableElement: TableComponent, viewContainerRef: ViewContainerRef, component: Type<T>, title: string, data?: any, callback?: (value?: any) => any): HTMLElement {\r\n    let componentRef: ComponentRef<any> | null;\r\n\r\n    const expanderElement = TableUtils.createIconButton(\r\n      'expand_more',\r\n      () => {\r\n        const isExpanded = tableElement.isRowExpanded(rowIndex);\r\n        expanderElement.querySelector('forge-icon')?.setAttribute('name', isExpanded ? 'expand_more' : 'expand_less');\r\n        if (isExpanded) {\r\n          tableElement.collapseRow(rowIndex).then(() => {\r\n            componentRef?.destroy();\r\n            componentRef = null;\r\n          });\r\n        } else {\r\n          tableElement.expandRow(rowIndex, () => {\r\n            componentRef = viewContainerRef.createComponent(component);\r\n            componentRef.instance.rowIndex = rowIndex;\r\n            if (isDefined(data)) {\r\n              componentRef.instance.data = data;\r\n            }\r\n            if (isDefined(callback)) {\r\n              componentRef.instance.callback = callback;\r\n            }\r\n            const rootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n            return rootNode;\r\n          });\r\n        }\r\n      },\r\n      title\r\n    );\r\n\r\n    return expanderElement;\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { BaseComponentDelegate, FormFieldComponentDelegate, IColumnConfiguration, SortDirection } from '@tylertech/forge';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport abstract class BaseTableComponent {\r\n  public recordCount = 0;\r\n  public abstract tableColumns: IColumnConfiguration[];\r\n\r\n  private setTableFiltersAF?: number;\r\n\r\n  public abstract filterCache: IFilterParameter;\r\n\r\n  constructor() {}\r\n\r\n  public initializeSort() {\r\n    this.tableColumns\r\n      .filter((c) => c.initialSort || isDefined(c.sortDirection))\r\n      .forEach((c) => {\r\n        c.initialSort = false;\r\n        c.sortDirection = undefined;\r\n      });\r\n    if (this.filterCache?.sort?.property.length) {\r\n      const column = this.tableColumns.find((c) => c.property === this.filterCache?.sort?.property) as IColumnConfiguration;\r\n      if (isDefined(column)) {\r\n        column.sortDirection = this.filterCache?.sort?.direction;\r\n        column.initialSort = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public initializeFilter() {\r\n    this.filterCache.filters?.forEach((f) => {\r\n      const tableColumn = this.tableColumns.find((tc) => tc.property === f.property && isDefined(tc.filterDelegate));\r\n      if (tableColumn) {\r\n        (tableColumn.filterDelegate as FormFieldComponentDelegate<any, any>).value = f.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  public get isFiltered(): boolean {\r\n    return this.filterCache?.filters?.length ? true : false;\r\n  }\r\n\r\n  public getColumnIndex(property: string): number {\r\n    return this.tableColumns.findIndex((c) => c.property === property);\r\n  }\r\n\r\n  public onTableSort(sort: { columnIndex: number; direction: SortDirection }) {\r\n    const columnProperty = this.getColumnFromEventIndex(sort.columnIndex).property as string;\r\n    this.filterCache.sort = { property: columnProperty, direction: sort.direction };\r\n    this.filterCache.skip = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTablePaginatorChange(detail: { pageIndex: number; pageSize: number }) {\r\n    this.filterCache.skip = detail.pageIndex * detail.pageSize;\r\n    this.filterCache.take = detail.pageSize;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTableFilter(detail: { value: string; columnIndex: number }) {\r\n    detail.value = detail.value?.trim();\r\n    const column = this.getColumnFromEventIndex(detail.columnIndex);\r\n    if (column?.property?.length) {\r\n      const filterIndex = this.filterCache.filters?.findIndex((f) => f.property === column.property) as number;\r\n      if (filterIndex !== -1) {\r\n        if (!detail.value?.length) {\r\n          this.filterCache.filters?.splice(filterIndex, 1);\r\n        } else {\r\n          this.filterCache.filters![filterIndex].value = detail.value;\r\n        }\r\n      } else if (detail.value.length) {\r\n        if (!this.filterCache.filters?.length) {\r\n          this.filterCache.filters = [{ property: column.property, value: detail.value, label: column.header }];\r\n        } else {\r\n          this.filterCache.filters.push({ property: column.property, value: detail.value, label: column.header });\r\n        }\r\n      }\r\n      this.getRecords();\r\n    }\r\n  }\r\n\r\n  protected destroy() {\r\n    if (this.setTableFiltersAF) {\r\n      window.cancelAnimationFrame(this.setTableFiltersAF);\r\n    }\r\n  }\r\n\r\n  protected resetTable() {\r\n    this.filterCache.filters = undefined;\r\n    this.filterCache.skip = 0;\r\n  }\r\n\r\n  private getColumnFromEventIndex(index: number): IColumnConfiguration {\r\n    return this.tableColumns.filter((c) => !c.hidden)[index];\r\n  }\r\n\r\n  protected abstract getRecords(): void;\r\n}\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-routerlink-button',\r\n  templateUrl: './routerlink-button.component.html',\r\n  styleUrls: ['./routerlink-button.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule]\r\n})\r\nexport class RouterlinkButtonComponent {\r\n  @Input()\r\n  public route?: string;\r\n\r\n  @Input()\r\n  public queryParams?: any;\r\n\r\n  @Input()\r\n  public label?: string;\r\n\r\n  @Input()\r\n  public icon?: string;\r\n\r\n  @Input()\r\n  public disabled?: boolean;\r\n}\r\n", "<forge-icon-button role=\"presentation\" tabindex=\"-1\">\r\n  <a [routerLink]=\"route\" [queryParams]=\"queryParams\" [attr.aria-label]=\"label\" class=\"forge-icon-button\" [ngClass]=\"{ 'routerlink--disabled': disabled }\">\r\n    <forge-icon [name]=\"icon\"></forge-icon>\r\n  </a>\r\n</forge-icon-button>\r\n@if (label?.length) {\r\n  <forge-tooltip>{{ label }}</forge-tooltip>\r\n}\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ForgeChipModule, ForgeChipSetModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-filter-chips',\r\n  templateUrl: './filter-chips.component.html',\r\n  styleUrls: ['./filter-chips.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeChipModule, ForgeChipSetModule]\r\n})\r\nexport class FilterChipsComponent {\r\n  @Input()\r\n  public filters: { property: string; value: string; label: string }[] = [];\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public onFilterDelete(event: CustomEvent) {\r\n    const filterIndex = this.filters.findIndex((f) => f.property === event.detail.value);\r\n    if (filterIndex !== -1) {\r\n      this.filters.splice(filterIndex, 1);\r\n      this.filter.emit();\r\n    }\r\n  }\r\n}\r\n", "<forge-chip-set type=\"input\" dense=\"true\" (forge-chip-delete)=\"onFilterDelete($event)\">\r\n  @for (filter of filters; track i; let i = $index) {\r\n    <forge-chip [value]=\"filter.property\">{{ filter.label }}</forge-chip>\r\n  }\r\n</forge-chip-set>\r\n", "import { Injectable } from '@angular/core';\nimport { SortDirection } from '@tylertech/forge';\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\n\n@Injectable()\nexport class PeopleCacheService {\n  public people?: IPerson[];\n  public homeView = {\n    storageKey: 'people-home',\n    showFilter: false,\n    filter: {\n      sort: {\n        property: 'lastName',\n        direction: SortDirection.Ascending\n      },\n      filters: [] as any[],\n      skip: 0,\n      take: 25\n    }\n  };\n}\n", "import { Component, OnInit, Output, EventEmitter, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { IOption } from '@tylertech/forge';\r\nimport { ForgeButtonModule, ForgeDividerModule, ForgeDrawerModule, ForgeIconButtonModule, ForgeIconModule, ForgeSelectModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components/autocomplete-range/autocomplete-range.component';\r\nimport { PeopleCacheService } from '../../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-home-filter',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, ForgeButtonModule, ForgeDividerModule, ForgeDrawerModule, ForgeIconButtonModule, ForgeIconModule, ForgeSelectModule, ForgeTextFieldModule, AutocompleteRangeComponent],\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnInit {\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public viewCache = this.cache.homeView;\r\n  public formGroup = new FormGroup({\r\n    firstName: new FormControl(),\r\n    lastName: new FormControl(),\r\n    gender: new FormControl(),\r\n    occupation: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public genderOptions: IOption[] = [\r\n    { label: 'Male', value: 'male' },\r\n    { label: 'Female', value: 'female' },\r\n    { label: 'Undecided', value: 'undecided' }\r\n  ];\r\n\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    const options = [];\r\n    for (let index = 0; index < 20; index++) {\r\n      options.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n    return of(options);\r\n  };\r\n\r\n  public ngOnInit() {\r\n    this.loadForm(this.cache.homeView.filter.filters);\r\n  }\r\n\r\n  public onClearFilter() {\r\n    this.formGroup.reset();\r\n    this.cache.homeView.filter.filters = [];\r\n  }\r\n\r\n  public onApplyFilter() {\r\n    this.cache.homeView.filter.filters = Object.entries(Utils.objectReduce(this.formGroup.value)).map((e) => ({ property: e[0], value: e[1], label: this.propertyLabel(e[0]) })) || [];\r\n    this.filter.emit();\r\n  }\r\n\r\n  public loadForm(filters: any[]) {\r\n    this.formGroup.reset();\r\n    filters.forEach((f) => {\r\n      const formControl = this.formGroup.get(f.property);\r\n      if (formControl) {\r\n        formControl.setValue(f.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private propertyLabel(property: string): string {\r\n    switch (property) {\r\n      case 'firstName':\r\n        return 'First name';\r\n      case 'lastName':\r\n        return 'Last name';\r\n      case 'gender':\r\n        return 'Gender';\r\n      case 'occupation':\r\n        return 'Occupation';\r\n      case 'facet':\r\n        return 'Facet';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n", "<forge-drawer direction=\"right\" [open]=\"viewCache.showFilter\" open=\"false\" (forge-drawer-close)=\"viewCache.showFilter = false\">\r\n  <div slot=\"header\" class=\"header\">\r\n    <span class=\"header__title forge-typography--subheading2\">Filter people</span>\r\n    <forge-icon-button class=\"app--flex-right\" aria-label=\"Close\" (click)=\"viewCache.showFilter = false\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </forge-icon-button>\r\n  </div>\r\n\r\n  <form class=\"body\" [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" (ngSubmit)=\"onApplyFilter()\">\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--first-name\" formControlName=\"firstName\" />\r\n      <label for=\"people--home--filter--first-name\" slot=\"label\">First name</label>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--last-name\" formControlName=\"lastName\" />\r\n      <label for=\"people--home--filter--last-name\" slot=\"label\">Last name</label>\r\n    </forge-text-field>\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\" multiple=\"true\"></forge-select>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--occupation\" formControlName=\"occupation\" />\r\n      <label for=\"people--home--filter--occupation\" slot=\"label\">Occupation</label>\r\n    </forge-text-field>\r\n    <forge-divider></forge-divider>\r\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\r\n  </form>\r\n\r\n  <div slot=\"footer\" class=\"footer\">\r\n    <forge-button variant=\"outlined\" (click)=\"onClearFilter()\"> Clear </forge-button>\r\n    <forge-button variant=\"raised\" type=\"submit\" (click)=\"onApplyFilter()\"> Apply </forge-button>\r\n  </div>\r\n</forge-drawer>\r\n", "import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs';\r\nimport { isArray } from '@tylertech/forge-core';\r\nimport { CellAlign, IColumnConfiguration, TableComponent, TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport {\r\n  ForgeBadgeModule,\r\n  ForgeButtonModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeOptionModule,\r\n  ForgePaginatorModule,\r\n  ForgeSelectDropdownModule,\r\n  ForgeSkeletonModule,\r\n  ForgeTableModule,\r\n  ForgeToolbarModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { TableUtils } from 'src/app/shared/table/utils';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { BaseTableComponent } from 'src/app/shared/table/base-table.component';\r\nimport { RouterlinkButtonComponent } from 'src/app/shared/components/routerlink-button/routerlink-button.component';\r\nimport { FilterChipsComponent } from 'src/app/shared/components/filter-chips/filter-chips.component';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { FilterComponent } from './filter/filter.component';\r\n\r\n@Component({\r\n  selector: 'app-people-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeBadgeModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeOptionModule,\r\n    ForgePaginatorModule,\r\n    ForgeSelectDropdownModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule,\r\n    RouterlinkButtonComponent,\r\n    FilterChipsComponent,\r\n    FilterComponent\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseTableComponent implements OnInit, OnDestroy {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private ngZone = inject(NgZone);\r\n\r\n  @ViewChild('peopleTable', { static: true })\r\n  private peopleTable?: TableComponent;\r\n  @ViewChild(FilterComponent)\r\n  private peopleFilter?: FilterComponent;\r\n\r\n  public isBusy = false;\r\n  public recordset: Array<IPerson> = [];\r\n  public filterCache = this.cache.homeView.filter;\r\n  public viewCache = this.cache.homeView;\r\n  public optionalTableColumns = [\r\n    { property: 'image', header: 'Image', hidden: false },\r\n    { property: 'firstName', header: 'First', hidden: false },\r\n    { property: 'lastName', header: 'Last', hidden: false },\r\n    { property: 'gender', header: 'Gender', hidden: false },\r\n    { property: 'occupation', header: 'Occupation', hidden: false }\r\n  ];\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    {\r\n      property: 'image',\r\n      width: 48,\r\n      align: CellAlign.Center,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        const imgElement = document.createElement('img') as HTMLImageElement;\r\n        imgElement.src = `mock-data/${Utils.formatNumber(data.id, '2.0-0')}-small.png`;\r\n        imgElement.setAttribute('alt', '');\r\n        imgElement.classList.add('forge-table-cell__image');\r\n        return imgElement;\r\n      }\r\n    },\r\n    {\r\n      header: 'Id',\r\n      property: 'id',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'First',\r\n      property: 'firstName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Last',\r\n      property: 'lastName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Gender',\r\n      property: 'gender',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      header: 'Occupation',\r\n      property: 'occupation',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: new TextFieldComponentDelegate()\r\n    },\r\n    {\r\n      align: CellAlign.Right,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        this.ngZone.run(() => {\r\n          cellElement.appendChild(TableUtils.createExpanderRow(rowIndex, this.peopleTable as TableComponent, this.viewContainerRef, TableDetailComponent, 'Toggle table detail', data));\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createMenuButton(\r\n              'more_vert',\r\n              (event: Event) => {\r\n                console.log(event);\r\n              },\r\n              [\r\n                { value: 1, label: 'Edit', leadingIcon: 'edit', leadingIconType: 'component' },\r\n                { value: 2, label: 'Add', leadingIcon: 'add', leadingIconType: 'component' },\r\n                { value: 3, label: 'Delete', leadingIcon: 'delete', leadingIconType: 'component' }\r\n              ],\r\n              'More options'\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createIconButton(\r\n              'keyboard_arrow_right',\r\n              (event: Event) => {\r\n                this.ngZone.run(() => {\r\n                  this.router.navigate([`people/detail/${data.id}`]);\r\n                });\r\n              },\r\n              'View person details'\r\n            )\r\n          );\r\n\r\n          // const componentRef = this.viewContainerRef.createComponent(RouterlinkButtonComponent);\r\n          // componentRef.instance.route = '/profile';\r\n          // componentRef.instance.queryParams = { id: data.id };\r\n          // componentRef.instance.icon = 'person';\r\n          // componentRef.instance.tooltip = 'Show profile';\r\n          // const linkButtonNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n          // cellElement.appendChild(linkButtonNode);\r\n        });\r\n\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n  public selectedPeople: IPerson[] = [];\r\n  public get selectedTableColumns() {\r\n    return this.optionalTableColumns.filter((c) => !c.hidden).map((c) => c.property);\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const storageColumns = localStorage.getItem(this.cache.homeView.storageKey);\r\n    if (storageColumns?.length) {\r\n      const columns = JSON.parse(storageColumns) as { property: string; hidden: boolean }[];\r\n      if (isArray(columns)) {\r\n        this.optionalTableColumns.forEach((c) => {\r\n          const storedColumn = columns.find((sc) => sc.property === c.property);\r\n          if (storedColumn) {\r\n            c.hidden = storedColumn.hidden;\r\n          }\r\n        });\r\n        this.setTableColumnsVisibilty();\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.initializeSort();\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.destroy();\r\n  }\r\n\r\n  public onPeopleSelected(clearSelection = false) {\r\n    if (clearSelection) {\r\n      this.selectedPeople.length = 0;\r\n      this.peopleTable?.clearSelections();\r\n    } else {\r\n      this.selectedPeople = this.peopleTable?.getSelectedRows() as IPerson[];\r\n    }\r\n  }\r\n\r\n  public onTableOptionSelected(columns: string[]) {\r\n    this.optionalTableColumns = this.optionalTableColumns.map((c) => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    this.setTableColumnsVisibilty();\r\n    localStorage.setItem(this.cache.homeView.storageKey, JSON.stringify(this.optionalTableColumns.map((c) => ({ property: c.property, hidden: c.hidden }))));\r\n  }\r\n\r\n  public onTableShowFilter() {\r\n    this.viewCache.showFilter = !this.viewCache.showFilter;\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n  }\r\n\r\n  public onApplyFilter(reloadFilter: boolean) {\r\n    this.getRecords();\r\n    if (reloadFilter) {\r\n      (this.peopleFilter as FilterComponent).loadForm(this.filterCache.filters);\r\n    }\r\n  }\r\n\r\n  protected getRecords() {\r\n    this.onPeopleSelected(true);\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort,\r\n        filters: this.filterCache.filters,\r\n        skip: this.filterCache.skip,\r\n        take: this.filterCache.take\r\n      })\r\n      .pipe(finalize(() => (this.isBusy = false)))\r\n      .subscribe((result) => {\r\n        this.recordset = result.data;\r\n        this.recordCount = result.count;\r\n      });\r\n  }\r\n\r\n  private setTableColumnsVisibilty() {\r\n    this.tableColumns.forEach((tc) => {\r\n      const optionalTableColumn = this.optionalTableColumns.find((otc) => otc.property === tc.property);\r\n      if (optionalTableColumn && tc.hidden !== optionalTableColumn.hidden) {\r\n        tc.hidden = optionalTableColumn.hidden;\r\n        const colIndex = this.getColumnIndex(tc.property as string);\r\n        if (tc.hidden) {\r\n          this.peopleTable?.hideColumn(colIndex);\r\n        } else {\r\n          this.peopleTable?.showColumn(colIndex);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">People</h2>\r\n  <app-routerlink-button slot=\"end\" route=\"/profile\" icon=\"person\" label=\"View profile\"></app-routerlink-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <div [ngClass]=\"{ 'app--hidden': isBusy }\" class=\"table\">\r\n      <div class=\"table__header\" [ngClass]=\"{ 'table__header-action': selectedPeople.length }\">\r\n        @if (!selectedPeople.length) {\r\n          <app-filter-chips [filters]=\"filterCache.filters\" (filter)=\"onApplyFilter(true)\"></app-filter-chips>\r\n          <forge-button class=\"app--flex-right\" variant=\"outlined\" (click)=\"onTableShowFilter()\">\r\n            @if (filterCache.filters.length) {\r\n              <forge-badge class=\"table__header__filter-count\" theme=\"info-primary\">{{ filterCache.filters.length }}</forge-badge>\r\n            } @else {\r\n              <forge-icon name=\"filter_list\"></forge-icon>\r\n            }\r\n            <span>Filter</span>\r\n          </forge-button>\r\n          <forge-icon-button id=\"people--home--column-select\" class=\"table__header__columns\" aria-label=\"Choose table columns\">\r\n            <forge-icon name=\"view_column\"></forge-icon>\r\n          </forge-icon-button>\r\n          <forge-select-dropdown target=\"#people--home--column-select\" multiple [value]=\"selectedTableColumns\" (change)=\"onTableOptionSelected($event.detail)\">\r\n            @for (column of optionalTableColumns; track i; let i = $index) {\r\n              <forge-option [value]=\"column.property\">\r\n                {{ column.header }}\r\n              </forge-option>\r\n            }\r\n          </forge-select-dropdown>\r\n        } @else {\r\n          <span>{{ selectedPeople.length }} people selected</span>\r\n        }\r\n      </div>\r\n\r\n      <forge-table\r\n        #peopleTable\r\n        class=\"table__body\"\r\n        [ngClass]=\"{ 'app--hidden': !recordCount }\"\r\n        [data]=\"recordset\"\r\n        [columnConfigurations]=\"tableColumns\"\r\n        (forge-table-sort)=\"onTableSort($any($event).detail)\"\r\n        select-key=\"id\"\r\n        (forge-table-select)=\"onPeopleSelected()\"\r\n        (forge-table-select-all)=\"onPeopleSelected()\"\r\n        fixed-headers=\"true\"\r\n        [filter]=\"viewCache.showFilter\"\r\n        (forge-table-filter)=\"onTableFilter($event.detail)\"\r\n      ></forge-table>\r\n\r\n      @if (recordCount) {\r\n        <div class=\"table__footer\">\r\n          <forge-paginator class=\"app--flex-right\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event.detail)\"></forge-paginator>\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    @if (!isBusy && !recordCount) {\r\n      <div class=\"empty-state\">\r\n        <img src=\"https://cdn.forge.tylertech.com/v1/images/spot-hero/general-empty-state-spot-hero.svg\" alt />\r\n        <div>No people found.</div>\r\n      </div>\r\n    }\r\n\r\n    @if (isBusy) {\r\n      <div class=\"busy-state\">\r\n        <forge-skeleton list-item></forge-skeleton>\r\n        <forge-skeleton list-item></forge-skeleton>\r\n        <forge-skeleton list-item></forge-skeleton>\r\n      </div>\r\n    }\r\n  </div>\r\n\r\n  <app-people-home-filter (filter)=\"onApplyFilter(false)\"></app-people-home-filter>\r\n</div>\r\n", "import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-people-detail',\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule],\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent {\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public appCache = inject(AppCacheService);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  public person?: IPerson;\r\n  public imageUrl?: string;\r\n  public index = 0;\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  constructor() {\r\n    const id = this.route.snapshot.params['id'];\r\n    if (isDefined(id)) {\r\n      this.appDataService.getPerson(id).subscribe((r) => {\r\n        this.person = r;\r\n        this.imageUrl = `mock-data/${Utils.formatNumber(this.person?.id as number, '2.0-0')}.png`;\r\n      });\r\n    } else {\r\n      this.router.navigate(['people/home']);\r\n    }\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    switch (route) {\r\n      case 'back':\r\n        this.router.navigate(['people/home']);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onViewWiki() {\r\n    window.open(this.person?.url, '_blank');\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button (click)=\"onNavigate('back')\" aria-label=\"Go back\">\r\n      <forge-icon name=\"arrow_back\"></forge-icon>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--subheading4\">{{ person?.firstName + \" \" + person?.lastName }}</h2>\r\n  </div>\r\n  <div slot=\"end\">\r\n    <forge-button variant=\"outlined\" (click)=\"onViewWiki()\" [disabled]=\"!person?.url?.length\"> View wiki </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <forge-label-value>\r\n      <span slot=\"label\">Gender</span>\r\n      <span slot=\"value\">{{ person?.gender }}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Occupation</span>\r\n      <span slot=\"value\">{{ person?.occupation }}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Quote</span>\r\n      <span slot=\"value\">{{ person?.quote }}</span>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <div class=\"body__right\">\r\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt />\r\n  </div>\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\nimport { PeopleComponent } from './people.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { PeopleCacheService } from './people-cache.service';\r\n\r\nexport const PEOPLE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: PeopleComponent,\r\n    providers: [PeopleCacheService],\r\n    children: [\r\n      { path: 'home', component: HomeComponent },\r\n      { path: 'detail', component: DetailComponent },\r\n      { path: 'detail/:id', component: DetailComponent },\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n"],
  "mappings": "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",
  "names": ["PeopleComponent", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "styles", "TableUtils", "createLinkButton", "label", "clickHandler", "linkElement", "document", "createElement", "classList", "add", "innerText", "toString", "type", "style", "minWidth", "addEventListener", "createIconButton", "icon", "title", "containerElement", "iconButtonElement", "setAttribute", "event", "stopPropagation", "appendChild", "iconElement", "tooltipElement", "innerHTML", "createMenuButton", "selectHandler", "options", "menuElement", "createExpanderRow", "rowIndex", "tableElement", "viewContainerRef", "component", "data", "callback", "componentRef", "expanderElement", "isExpanded", "isRowExpanded", "querySelector", "collapseRow", "then", "destroy", "expandRow", "createComponent", "instance", "isDefined", "hostView", "rootNodes", "BaseTableComponent", "constructor", "recordCount", "initializeSort", "tableColumns", "filter", "c", "initialSort", "isDefined", "sortDirection", "forEach", "undefined", "filterCache", "sort", "property", "length", "column", "find", "direction", "initializeFilter", "filters", "f", "tableColumn", "tc", "filterDelegate", "value", "isFiltered", "getColumnIndex", "findIndex", "onTableSort", "columnProperty", "getColumnFromEventIndex", "columnIndex", "skip", "getRecords", "onTablePaginatorChange", "detail", "pageIndex", "pageSize", "take", "onTableFilter", "trim", "filterIndex", "splice", "push", "label", "header", "destroy", "setTableFiltersAF", "window", "cancelAnimationFrame", "resetTable", "index", "hidden", "factory", "\u0275fac", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "label", "RouterlinkButtonComponent", "selectors", "inputs", "route", "queryParams", "icon", "disabled", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275template", "RouterlinkButtonComponent_Conditional_3_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275conditional", "length", "CommonModule", "NgClass", "RouterModule", "RouterLink", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeTooltipModule", "TooltipComponent", "styles", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "filter_r1", "property", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "label", "FilterChipsComponent", "constructor", "filters", "filter", "EventEmitter", "onFilterDelete", "event", "filterIndex", "findIndex", "f", "detail", "value", "splice", "emit", "selectors", "inputs", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "\u0275\u0275repeaterCreate", "FilterChipsComponent_For_2_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "CommonModule", "ForgeChipModule", "ChipComponent", "ForgeChipSetModule", "ChipSetComponent", "styles", "PeopleCacheService", "constructor", "homeView", "storageKey", "showFilter", "filter", "sort", "property", "direction", "SortDirection", "Ascending", "filters", "skip", "take", "factory", "\u0275fac", "FilterComponent", "constructor", "appCache", "inject", "AppCacheService", "cache", "PeopleCacheService", "filter", "EventEmitter", "viewCache", "homeView", "formGroup", "FormGroup", "firstName", "FormControl", "lastName", "gender", "occupation", "facet", "genderOptions", "label", "value", "facetFilter", "options", "index", "push", "of", "ngOnInit", "loadForm", "filters", "onClearFilter", "reset", "onApplyFilter", "Object", "entries", "Utils", "objectReduce", "map", "e", "property", "propertyLabel", "emit", "forEach", "f", "formControl", "get", "setValue", "selectors", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "showFilter", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275advance", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "ForgeButtonModule", "ButtonComponent", "ForgeDividerModule", "DividerComponent", "ForgeDrawerModule", "DrawerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeSelectModule", "SelectValueAccessor", "SelectComponent", "ForgeTextFieldModule", "TextFieldComponent", "AutocompleteRangeComponent", "styles", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r2", "filterCache", "filters", "length", "\u0275\u0275element", "\u0275\u0275property", "column_r4", "property", "\u0275\u0275textInterpolate1", "header", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onApplyFilter", "onTableShowFilter", "\u0275\u0275template", "HomeComponent_Conditional_8_Conditional_2_Template", "HomeComponent_Conditional_8_Conditional_3_Template", "$event", "onTableOptionSelected", "detail", "\u0275\u0275repeaterCreate", "HomeComponent_Conditional_8_For_10_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275conditional", "selectedTableColumns", "\u0275\u0275repeater", "optionalTableColumns", "selectedPeople", "_r5", "onTablePaginatorChange", "skip", "take", "recordCount", "HomeComponent", "BaseTableComponent", "filter", "c", "hidden", "map", "constructor", "router", "inject", "Router", "appDataService", "AppDataService", "cache", "PeopleCacheService", "viewContainerRef", "ViewContainerRef", "ngZone", "NgZone", "isBusy", "recordset", "homeView", "viewCache", "tableColumns", "width", "align", "CellAlign", "Center", "template", "rowIndex", "cellElement", "data", "imgElement", "document", "createElement", "src", "Utils", "formatNumber", "id", "setAttribute", "classList", "add", "sortable", "filterDelegate", "TextFieldComponentDelegate", "Right", "run", "appendChild", "TableUtils", "createExpanderRow", "peopleTable", "TableDetailComponent", "createMenuButton", "event", "console", "log", "value", "label", "leadingIcon", "leadingIconType", "createIconButton", "navigate", "storageColumns", "localStorage", "getItem", "storageKey", "columns", "JSON", "parse", "isArray", "forEach", "storedColumn", "find", "sc", "setTableColumnsVisibilty", "ngOnInit", "initializeSort", "showFilter", "initializeFilter", "getRecords", "ngOnDestroy", "destroy", "onPeopleSelected", "clearSelection", "clearSelections", "getSelectedRows", "includes", "setItem", "stringify", "reloadFilter", "peopleFilter", "loadForm", "getPeople", "sort", "pipe", "finalize", "subscribe", "result", "count", "tc", "optionalTableColumn", "otc", "colIndex", "getColumnIndex", "hideColumn", "showColumn", "selectors", "viewQuery", "rf", "ctx", "FilterComponent", "HomeComponent_Conditional_8_Template", "HomeComponent_Conditional_9_Template", "i0", "_r1", "onTableSort", "onTableFilter", "HomeComponent_Conditional_12_Template", "HomeComponent_Conditional_13_Template", "HomeComponent_Conditional_14_Template", "\u0275\u0275pureFunction1", "_c1", "_c2", "CommonModule", "NgClass", "ForgeBadgeModule", "BadgeComponent", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeOptionModule", "OptionComponent", "ForgePaginatorModule", "PaginatorComponent", "ForgeSelectDropdownModule", "SelectDropdownComponent", "ForgeSkeletonModule", "SkeletonComponent", "ForgeTableModule", "TableComponent", "ForgeToolbarModule", "ToolbarComponent", "RouterlinkButtonComponent", "FilterChipsComponent", "styles", "DetailComponent", "constructor", "route", "inject", "ActivatedRoute", "router", "Router", "appCache", "AppCacheService", "appDataService", "AppDataService", "cache", "PeopleCacheService", "index", "noImageUrl", "id", "snapshot", "params", "isDefined", "getPerson", "subscribe", "r", "person", "imageUrl", "Utils", "formatNumber", "navigate", "onNavigate", "onViewWiki", "window", "open", "url", "onImageError", "event", "targetElement", "target", "src", "includes", "onerror", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "$event", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "firstName", "lastName", "\u0275\u0275property", "length", "gender", "occupation", "quote", "\u0275\u0275sanitizeUrl", "CommonModule", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeLabelValueModule", "LabelValueComponent", "ForgeToolbarModule", "ToolbarComponent", "styles", "PEOPLE_ROUTES", "path", "component", "PeopleComponent", "providers", "PeopleCacheService", "children", "HomeComponent", "DetailComponent", "redirectTo", "pathMatch"]
}
