{"version":3,"file":"3216.d0d3e6dcbb0454bd.js","mappings":"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","names":["AppDataService","constructor","httpClient","this","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","f","key","property","value","strict","sort","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Yz7","factory","ɵfac","providedIn","DeactivateGuard","canDeactivate","component","currentRoute","currentState","nextState","console","warn","ɵprov","token","_r2","ctx_r1","onClose","ctx_r3","ConfirmDialogComponent","dialogConfig","dialogRef","title","message","showFooter","response","close","core","Xpm","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ConfirmDialogComponent_div_8_Template","CommonModule","i2","AutoFocusDirective","styles","AppToastService","toastService","show","toast","actionHandler","hide","placement","duration","ProfileCacheService","formGroup","FormGroup","personalFormGroup","firstName","FormControl","validators","Validators","lastName","gender","email","phone","dateOfBirth","comment","rank","size","friends","FormArray","addressFormGroup","name","street","city","state","zip","$event","_r4","onImageError","ctx_r0","imageUrl","i_r7","option_r6","label","PersonalComponent_div_50_span_3_Template","i_r9","_r12","index","ctx_r11","onDeleteFriend","ctx_r5","friendOptions","_c0","friend_r8","invalid","touched","routes","path","ProfileComponent","cache","router","appDataService","dialogService","appToastService","noImageUrl","activeTab","profile","loadForm","arg","dirty","s","dialogSub","backdropClose","escapeClose","afterClosed","subscribe","result","unsubscribe","reset","onLoadProfile","onTabSelected","route","markAsTouched","navigate","onSave","parseForm","markAsPristine","onCancel","undefined","event","targetElement","target","src","includes","onerror","clear","patchValue","address","i3","i4","i5","ProfileComponent_img_4_Template","ProfileComponent_forge_icon_12_Template","ProfileComponent_forge_icon_16_Template","children","AddressComponent","AddressComponent_span_6_Template","AddressComponent_span_13_Template","AddressComponent_span_20_Template","AddressComponent_span_28_Template","AddressComponent_span_35_Template","PersonalComponent","friendsFormArray","genderOptions","sizeOptions","onAddFriend","push","removeAt","PersonalComponent_span_7_Template","PersonalComponent_span_14_Template","PersonalComponent_span_22_Template","PersonalComponent_span_29_Template","PersonalComponent_forge_radio_46_Template","PersonalComponent_div_50_Template","tmp_12_0","controls","redirectTo","pathMatch","ProfileModule","oAB","cJS","imports","RouterModule","AppFormsModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FormsModule","ReactiveFormsModule","ForgeModule","static","type","a","b","getPropertyValue","comparator","isArray","reduce","previousValue","currentValue","isString","operator","substring","Object","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","location","fallbackRoute","getState","navigationId","back","prefix","Math","random","replace","format","formatDate","formatNumber","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","object","reduced","trim"],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./node_modules/@tylertech/angular-core/fesm2020/tylertech-angular-core.mjs","./src/app/shared/components/confirm-dialog/confirm-dialog.component.html","./src/app/shared/components/confirm-dialog/confirm-dialog.component.ts","./src/app/app-toast.service.ts","./src/app/profile/profile-cache.service.ts","./src/app/profile/profile.component.html","./src/app/profile/address/address.component.html","./src/app/profile/personal/personal.component.html","./src/app/profile/profile.module.ts","./src/app/profile/profile.component.ts","./src/app/profile/address/address.component.ts","./src/app/profile/personal/personal.component.ts","./src/app/shared/app-forms.module.ts","./src/utils.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule, forwardRef, HostListener, EventEmitter, Output, HostBinding, Injectable, Pipe } from '@angular/core';\nimport { isDefined, ForgeResizeObserver, ScrollAxisObserver, ScrollEvents, isDeepEqual, isArray, isString, isObject, isValidDate } from '@tylertech/forge-core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormGroup, FormArray, NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '@angular/forms';\nimport { startWith, throttleTime, map, filter, takeUntil, shareReplay } from 'rxjs/operators';\nimport { timer, Subscription, Observable, BehaviorSubject, Subject, fromEvent, of } from 'rxjs';\n\nclass TylAttributeDirective {\n    constructor(_element, _renderer) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._stateMap = new Map();\n    }\n    ngDoCheck() {\n        if (this.attributes instanceof Map) {\n            for (const [name, value] of this.attributes) {\n                this._updateState(name, value);\n            }\n        }\n        else if (isDefined(this.attributes)) {\n            for (const [name, value] of Object.entries(this.attributes)) {\n                this._updateState(name, value);\n            }\n        }\n        this._applyStateDiff();\n    }\n    _updateState(name, value) {\n        const state = this._stateMap.get(name);\n        if (state !== undefined) {\n            if (state.value !== value) {\n                state.changed = true;\n                state.value = value;\n            }\n            state.touched = true;\n        }\n        else {\n            this._stateMap.set(name, { value, changed: true, touched: true });\n        }\n    }\n    _applyStateDiff() {\n        for (const [name, state] of this._stateMap) {\n            if (state.changed) {\n                this._applyAttribute(name, state);\n                state.changed = false;\n            }\n            else if (!state.touched) {\n                this._removeAttribute(name);\n                this._stateMap.delete(name);\n            }\n            state.touched = false;\n        }\n    }\n    _applyAttribute(name, state) {\n        if (!state.value) {\n            this._removeAttribute(name);\n            return;\n        }\n        this._setAttribute(name, state.value.toString());\n    }\n    _removeAttribute(name) {\n        this._renderer.removeAttribute(this._element.nativeElement, name);\n    }\n    _setAttribute(name, value) {\n        this._renderer.setAttribute(this._element.nativeElement, name, value);\n    }\n}\n/** @nocollapse */ TylAttributeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylAttributeDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylAttributeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylAttributeDirective, selector: \"[tylAttribute]\", inputs: { attributes: [\"tylAttribute\", \"attributes\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylAttributeDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylAttribute]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { attributes: [{\n                type: Input,\n                args: ['tylAttribute']\n            }] } });\n\nclass AttributeModule {\n}\n/** @nocollapse */ AttributeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AttributeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ AttributeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: AttributeModule, declarations: [TylAttributeDirective], imports: [CommonModule], exports: [TylAttributeDirective] });\n/** @nocollapse */ AttributeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AttributeModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AttributeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylAttributeDirective],\n                    imports: [CommonModule],\n                    exports: [TylAttributeDirective]\n                }]\n        }] });\n\nclass TylAutofocusDirective {\n    constructor(_element) {\n        this._element = _element;\n        this.enabled = true;\n    }\n    ngAfterViewInit() {\n        if (this.enabled === false || this.enabled === 'false') {\n            return;\n        }\n        window.requestAnimationFrame(() => {\n            this._element.nativeElement.focus();\n        });\n    }\n}\n/** @nocollapse */ TylAutofocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylAutofocusDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylAutofocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylAutofocusDirective, selector: \"[tylAutofocus]\", inputs: { enabled: [\"tylAutofocus\", \"enabled\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylAutofocusDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylAutofocus]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['tylAutofocus']\n            }] } });\n\nclass AutofocusModule {\n}\n/** @nocollapse */ AutofocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ AutofocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofocusModule, declarations: [TylAutofocusDirective], imports: [CommonModule], exports: [TylAutofocusDirective] });\n/** @nocollapse */ AutofocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofocusModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AutofocusModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylAutofocusDirective],\n                    imports: [CommonModule],\n                    exports: [TylAutofocusDirective]\n                }]\n        }] });\n\nclass InputTrimDirective {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        const cleanValue = this._getCleanValue(value);\n        this._setValue(cleanValue);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    handleInput(value) {\n        const cleanValue = this._getCleanValue(value);\n        this.onChange(cleanValue);\n        this._setValue(cleanValue);\n    }\n    blur(event) {\n        this.onTouched();\n    }\n    _getCleanValue(value) {\n        return !!value ? value.trim() : '';\n    }\n    _setValue(value) {\n        const inputEle = this._elementRef.nativeElement;\n        this._renderer.setProperty(inputEle, 'value', value);\n    }\n}\n/** @nocollapse */ InputTrimDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ InputTrimDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: InputTrimDirective, selector: \"[tylInputTrim]\", host: { listeners: { \"input\": \"handleInput($event.target.value)\", \"focusout\": \"blur($event)\" } }, providers: [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef((() => InputTrimDirective)),\n            multi: true\n        }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylInputTrim]',\n                    providers: [{\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef((() => InputTrimDirective)),\n                            multi: true\n                        }]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { handleInput: [{\n                type: HostListener,\n                args: ['input', ['$event.target.value']]\n            }], blur: [{\n                type: HostListener,\n                args: ['focusout', ['$event']]\n            }] } });\n\nclass InputTrimModule {\n}\n/** @nocollapse */ InputTrimModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ InputTrimModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimModule, declarations: [InputTrimDirective], imports: [CommonModule], exports: [InputTrimDirective] });\n/** @nocollapse */ InputTrimModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputTrimModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [InputTrimDirective],\n                    imports: [CommonModule],\n                    exports: [InputTrimDirective]\n                }]\n        }] });\n\nclass TylRepeatContext {\n    constructor(tylRepeat, index) {\n        this.tylRepeat = tylRepeat;\n        this.index = index;\n    }\n    get count() {\n        return this.tylRepeat.count;\n    }\n    get first() {\n        return this.index === 0;\n    }\n    get last() {\n        return this.index === this.tylRepeat.count - 1;\n    }\n    get even() {\n        return this.index % 2 === 0;\n    }\n    get odd() {\n        return !this.even;\n    }\n}\nclass TylRepeatDirective {\n    constructor(_template, _viewContainer) {\n        this._template = _template;\n        this._viewContainer = _viewContainer;\n        this._count = 0;\n    }\n    set count(value) {\n        this._applyCount(value);\n    }\n    get count() {\n        return this._count;\n    }\n    _applyCount(value) {\n        const count = isNaN(value) ? 0 : Math.max(value, 0);\n        const diff = count - this._count;\n        if (diff > 0) {\n            this._addViews(diff);\n        }\n        else if (diff < 0) {\n            this._removeViews(diff * -1);\n        }\n        this._count = count;\n    }\n    _addViews(count) {\n        for (let i = 0; i < count; i++) {\n            const indexInContainer = this._viewContainer.length;\n            this._viewContainer.createEmbeddedView(this._template, new TylRepeatContext(this, indexInContainer));\n        }\n    }\n    _removeViews(count) {\n        for (let i = 0; i < count; i++) {\n            this._viewContainer.remove();\n        }\n    }\n}\n/** @nocollapse */ TylRepeatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylRepeatDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylRepeatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylRepeatDirective, selector: \"[tylRepeat]\", inputs: { count: [\"tylRepeat\", \"count\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylRepeatDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[tylRepeat]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { count: [{\n                type: Input,\n                args: ['tylRepeat']\n            }] } });\n\nclass RepeatModule {\n}\n/** @nocollapse */ RepeatModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: RepeatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ RepeatModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: RepeatModule, declarations: [TylRepeatDirective], imports: [CommonModule], exports: [TylRepeatDirective] });\n/** @nocollapse */ RepeatModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: RepeatModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: RepeatModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylRepeatDirective],\n                    imports: [CommonModule],\n                    exports: [TylRepeatDirective]\n                }]\n        }] });\n\n/**\n * Returns all invalid inputs in the scope.\n * @param containerId The ID of the DOM container to query (optional, queries the entire document if not provided).\n * @returns All invalid form elements or an empty array.\n */\nfunction getAllInvalidInputs(containerId) {\n    const container = containerId ? document.getElementById(containerId) : document;\n    const nodes = container?.querySelectorAll('.ng-invalid');\n    if (!nodes) {\n        return [];\n    }\n    return Array.from(nodes);\n}\n\n/**\n * Gets the value changes observable of a form control, group, or array, starting with the initial value.\n * @param control An abstract control.\n * @returns An observable of type any.\n */\nfunction getControlValueObservable(control) {\n    return control.valueChanges.pipe(startWith(control.value));\n}\n\n/**\n * Returns the first invalid input in the scope.\n * @param containerId The ID of the DOM container to query (optional, queries the entire document if not provided).\n * @returns The first invalid form element if it exists or null otherwise.\n */\nfunction focusFirstInvalidInput(containerId) {\n    const container = containerId ? document.getElementById(containerId) : document;\n    const el = container?.querySelector('.ng-invalid');\n    if (!el) {\n        return null;\n    }\n    return el;\n}\n\n/**\n * Enables or disables a form control, group, or array.\n * @param control An abstract control.\n * @param disabled Whether the control should be disabled or enabled.\n * @param options A configuration supplied to the native disable and enable functions.\n */\nfunction setControlDisabled(control, disabled, options = {}) {\n    if (disabled) {\n        control.disable(options);\n    }\n    else {\n        control.enable(options);\n    }\n}\n\n/**\n * Recursively updates the value and validity of a form group or array and all its children.\n * @param form A form group or array.\n * @param options A configuration supplied to the native updateValueAndValidity function.\n */\nfunction updateFormValidity(form, options = {}) {\n    Object.keys(form.controls).forEach((key) => {\n        const control = form.controls[key];\n        if (control instanceof FormGroup || control instanceof FormArray) {\n            updateFormValidity(control, options);\n        }\n        else {\n            control.updateValueAndValidity(options);\n        }\n    });\n}\n\n;\nconst tylAutoCancelableTargetMap = new Map();\nfunction tylAutoCancelable(options) {\n    const takeLatest = options?.takeLatest ?? true;\n    const timeout = options?.timeout;\n    const timeoutCallback = options?.timeoutCallback;\n    return function (target, _, descriptor) {\n        const original = descriptor.value;\n        const originalOnDestroy = target.ngOnDestroy;\n        let subscription;\n        let timerSubscription;\n        if (!(typeof originalOnDestroy === 'function')) {\n            console.error(`Target class ${target.name} must implement OnDestroy to use tylAutoCancelable in production builds`);\n        }\n        // Store the cancel function in the target map\n        function addSubscriptionToMap() {\n            const cancelRefs = tylAutoCancelableTargetMap.get(target) ?? [];\n            cancelRefs.push(cancel);\n            tylAutoCancelableTargetMap.set(target, cancelRefs);\n        }\n        // Unsubscribe from the stored subscription\n        function cancel() {\n            if (subscription && !subscription.closed) {\n                subscription.unsubscribe();\n            }\n            clearTimer();\n        }\n        // Set a timeout observable\n        function setTimer() {\n            timerSubscription = timer(timeout).subscribe(() => {\n                cancel();\n                if (typeof timeoutCallback === 'function') {\n                    timeoutCallback();\n                }\n            });\n        }\n        // Cancel the timeout observable\n        function clearTimer() {\n            if (timerSubscription && !timerSubscription.closed) {\n                timerSubscription.unsubscribe();\n            }\n        }\n        // Override the original function\n        descriptor.value = function autoCancelable(...args) {\n            if (takeLatest && subscription) {\n                cancel();\n            }\n            subscription = original.apply(this, args);\n            if (!(subscription instanceof Subscription)) {\n                try {\n                    throw new Error(`Function ${original.name} must return a Subscription`);\n                }\n                catch (error) {\n                    console.error(error);\n                    return subscription;\n                }\n            }\n            if (isDefined(timeout)) {\n                if (!isNaN(timeout)) {\n                    setTimer();\n                }\n                else {\n                    console.error('Timeout must be a number or undefined', timeout);\n                }\n            }\n            return subscription;\n        };\n        // Replace the target component's OnDestroy function\n        if (!tylAutoCancelableTargetMap.has(target)) {\n            Object.defineProperty(target, 'ngOnDestroy', {\n                value: function ngOnDestroy() {\n                    // Cancel subscriptions on the target\n                    tylAutoCancelableTargetMap.get(target).forEach(cancelRef => {\n                        cancelRef();\n                    });\n                    // Remove the target from the map\n                    tylAutoCancelableTargetMap.delete(target);\n                    // Call the original ngOnDestroy if it exists\n                    if (typeof originalOnDestroy === 'function') {\n                        originalOnDestroy();\n                    }\n                }\n            });\n        }\n        addSubscriptionToMap();\n        return descriptor;\n    };\n}\n\nfunction resizeObservable(el) {\n    return new Observable((subscriber) => {\n        ForgeResizeObserver.observe(el, entry => subscriber.next(entry));\n        return () => {\n            ForgeResizeObserver.unobserve(el);\n        };\n    });\n}\n\n// TODO: explore using a single global resize observer for performance benefits\nclass TylResizeObserverDirective {\n    constructor(_element, _zone) {\n        this._element = _element;\n        this._zone = _zone;\n        this.tylResizeThrottle = 0;\n        this.tylResize = new EventEmitter();\n        this._resizeObservable = resizeObservable(this._element.nativeElement);\n        this._resizeListener = evt => this._onResize(evt);\n    }\n    ngOnInit() {\n        this._subscribe();\n    }\n    ngOnChanges(changes) {\n        for (const property in changes) {\n            switch (property) {\n                case 'tylResizeThrottle':\n                    const change = changes['tylResizeThrottle'];\n                    if (!change.firstChange) {\n                        this._subscribe();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._resizeSubscription?.unsubscribe();\n    }\n    _onResize(evt) {\n        this._zone.run(() => this.tylResize.emit(evt));\n    }\n    _subscribe() {\n        this._resizeSubscription?.unsubscribe();\n        this._resizeSubscription = this._resizeObservable.pipe(throttleTime(this.tylResizeThrottle ?? 0, undefined, { leading: true, trailing: true })).subscribe(this._resizeListener);\n    }\n}\n/** @nocollapse */ TylResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylResizeObserverDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylResizeObserverDirective, selector: \"[tylResizeObserver]\", inputs: { tylResizeThrottle: \"tylResizeThrottle\" }, outputs: { tylResize: \"tylResize\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylResizeObserverDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[tylResizeObserver]' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { tylResizeThrottle: [{\n                type: Input\n            }], tylResize: [{\n                type: Output\n            }] } });\n\nclass ResizeObserverModule {\n}\n/** @nocollapse */ ResizeObserverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ResizeObserverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ResizeObserverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ResizeObserverModule, declarations: [TylResizeObserverDirective], imports: [CommonModule], exports: [TylResizeObserverDirective] });\n/** @nocollapse */ ResizeObserverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ResizeObserverModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ResizeObserverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylResizeObserverDirective],\n                    imports: [CommonModule],\n                    exports: [TylResizeObserverDirective]\n                }]\n        }] });\n\nclass TylScrollObserverDirective {\n    constructor(_element, _zone) {\n        this._element = _element;\n        this._zone = _zone;\n        // Inputs\n        this.tylScrollAxis = 'vertical';\n        // Shared-axis inputs\n        this.tylThrottle = false;\n        this.tylScrollThrottle = 0;\n        // Vertical inputs\n        this.tylVerticalScrollThreshold = 0;\n        this.tylHorizontalScrollThreshold = 0;\n        // Vertical outputs\n        this.tylScrollVertical = new EventEmitter();\n        this.tylScrolledVertical = new EventEmitter();\n        this.tylScrolledStartVertical = new EventEmitter();\n        this.tylScrolledEndVertical = new EventEmitter();\n        // Horizontal outputs\n        this.tylScrollHorizontal = new EventEmitter();\n        this.tylScrolledHorizontal = new EventEmitter();\n        this.tylScrolledStartHorizontal = new EventEmitter();\n        this.tylScrolledEndHorizontal = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this.tylScrollAxis === 'both' || this.tylScrollAxis === 'vertical') {\n            const scrollObserverConfig = {\n                axis: 'vertical',\n                scrollThreshold: this.tylVerticalScrollThreshold,\n                throttle: this.tylThrottle,\n                throttleTime: this.tylScrollThrottle\n            };\n            this._verticalScrollObserver = new ScrollAxisObserver(this._element.nativeElement, scrollObserverConfig);\n            this._verticalScrollListener = evt => this._onScrollVertical(evt.data);\n            this._verticalScrolledListener = evt => this._onScrolledVertical(evt.data);\n            this._verticalScrolledStartListener = () => this._onScrolledStartVertical();\n            this._verticalScrolledEndListener = () => this._onScrolledEndVertical();\n            this._zone.runOutsideAngular(() => {\n                this._verticalScrollObserver.addListener(ScrollEvents.Scroll, this._verticalScrollListener);\n                this._verticalScrollObserver.addListener(ScrollEvents.Scrolled, this._verticalScrolledListener);\n                this._verticalScrollObserver.addListener(ScrollEvents.ScrolledEnd, this._verticalScrolledEndListener);\n                this._verticalScrollObserver.addListener(ScrollEvents.ScrolledStart, this._verticalScrolledStartListener);\n            });\n        }\n        if (this.tylScrollAxis === 'both' || this.tylScrollAxis === 'horizontal') {\n            const scrollObserverConfig = {\n                axis: 'horizontal',\n                scrollThreshold: this.tylHorizontalScrollThreshold,\n                throttle: this.tylThrottle,\n                throttleTime: this.tylScrollThrottle\n            };\n            this._horizontalScrollObserver = new ScrollAxisObserver(this._element.nativeElement, scrollObserverConfig);\n            this._horizontalScrollListener = evt => this._onScrollHorizontal(evt.data);\n            this._horizontalScrolledListener = evt => this._onScrolledHorizontal(evt.data);\n            this._horizontalScrolledStartListener = () => this._onScrolledStartHorizontal();\n            this._horizontalScrolledEndListener = () => this._onScrolledEndHorizontal();\n            this._zone.runOutsideAngular(() => {\n                this._horizontalScrollObserver.addListener(ScrollEvents.Scroll, this._horizontalScrollListener);\n                this._horizontalScrollObserver.addListener(ScrollEvents.Scrolled, this._horizontalScrolledListener);\n                this._horizontalScrollObserver.addListener(ScrollEvents.ScrolledEnd, this._horizontalScrolledEndListener);\n                this._horizontalScrollObserver.addListener(ScrollEvents.ScrolledStart, this._horizontalScrolledStartListener);\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._verticalScrollObserver) {\n            this._verticalScrollObserver.destroy();\n            this._verticalScrollObserver = undefined;\n        }\n        if (this._horizontalScrollObserver) {\n            this._horizontalScrollObserver.destroy();\n            this._horizontalScrollObserver = undefined;\n        }\n    }\n    get scrollPositionVertical() {\n        return this._verticalScrollObserver.scrollPosition;\n    }\n    get isScrolledStartVertical() {\n        return this._verticalScrollObserver.isScrolledStart;\n    }\n    get scrollPositionHorizontal() {\n        return this._horizontalScrollObserver.scrollPosition;\n    }\n    get isScrolledStartHorizontal() {\n        return this._horizontalScrollObserver.isScrolledStart;\n    }\n    stopVertical() {\n        this._verticalScrollObserver.stop();\n    }\n    startVertical() {\n        this._verticalScrollObserver.start();\n    }\n    stopHorizontal() {\n        this._horizontalScrollObserver.stop();\n    }\n    startHorizontal() {\n        this._horizontalScrollObserver.start();\n    }\n    setVerticalScrollPosition(position) {\n        this._verticalScrollObserver.setScrollPosition(position);\n    }\n    setHorizontalScrollPosition(position) {\n        this._horizontalScrollObserver.setScrollPosition(position);\n    }\n    _onScrollVertical(scrollInfo) {\n        this._zone.run(() => this.tylScrollVertical.emit(scrollInfo));\n    }\n    _onScrolledVertical(scrolled) {\n        this._zone.run(() => this.tylScrolledVertical.emit(scrolled));\n    }\n    _onScrolledStartVertical() {\n        this._zone.run(() => this.tylScrolledStartVertical.emit());\n    }\n    _onScrolledEndVertical() {\n        this._zone.run(() => this.tylScrolledEndVertical.emit());\n    }\n    _onScrollHorizontal(scrollInfo) {\n        this._zone.run(() => this.tylScrollHorizontal.emit(scrollInfo));\n    }\n    _onScrolledHorizontal(scrolled) {\n        this._zone.run(() => this.tylScrolledHorizontal.emit(scrolled));\n    }\n    _onScrolledStartHorizontal() {\n        this._zone.run(() => this.tylScrolledStartHorizontal.emit());\n    }\n    _onScrolledEndHorizontal() {\n        this._zone.run(() => this.tylScrolledEndHorizontal.emit());\n    }\n}\n/** @nocollapse */ TylScrollObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylScrollObserverDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylScrollObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylScrollObserverDirective, selector: \"[tylScrollObserver]\", inputs: { tylScrollAxis: \"tylScrollAxis\", tylThrottle: \"tylThrottle\", tylScrollThrottle: \"tylScrollThrottle\", tylVerticalScrollThreshold: \"tylVerticalScrollThreshold\", tylHorizontalScrollThreshold: \"tylHorizontalScrollThreshold\" }, outputs: { tylScrollVertical: \"tylScrollVertical\", tylScrolledVertical: \"tylScrolledVertical\", tylScrolledStartVertical: \"tylScrolledStartVertical\", tylScrolledEndVertical: \"tylScrolledEndVertical\", tylScrollHorizontal: \"tylScrollHorizontal\", tylScrolledHorizontal: \"tylScrolledHorizontal\", tylScrolledStartHorizontal: \"tylScrolledStartHorizontal\", tylScrolledEndHorizontal: \"tylScrolledEndHorizontal\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylScrollObserverDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylScrollObserver]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { tylScrollAxis: [{\n                type: Input\n            }], tylThrottle: [{\n                type: Input\n            }], tylScrollThrottle: [{\n                type: Input\n            }], tylVerticalScrollThreshold: [{\n                type: Input\n            }], tylHorizontalScrollThreshold: [{\n                type: Input\n            }], tylScrollVertical: [{\n                type: Output\n            }], tylScrolledVertical: [{\n                type: Output\n            }], tylScrolledStartVertical: [{\n                type: Output\n            }], tylScrolledEndVertical: [{\n                type: Output\n            }], tylScrollHorizontal: [{\n                type: Output\n            }], tylScrolledHorizontal: [{\n                type: Output\n            }], tylScrolledStartHorizontal: [{\n                type: Output\n            }], tylScrolledEndHorizontal: [{\n                type: Output\n            }] } });\n\nclass ScrollObserverModule {\n}\n/** @nocollapse */ ScrollObserverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollObserverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ScrollObserverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollObserverModule, declarations: [TylScrollObserverDirective], imports: [CommonModule], exports: [TylScrollObserverDirective] });\n/** @nocollapse */ ScrollObserverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollObserverModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollObserverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylScrollObserverDirective],\n                    imports: [CommonModule],\n                    exports: [TylScrollObserverDirective]\n                }]\n        }] });\n\n/**\n *  Add this directive to an element to turn it into a dropzone for drag and drop of files.\n *  Example:\n *\n *  <div tylDropZone (fileDropped)=\"onDrop($event)\"></div>\n *\n *  Any files dropped onto the region are then\n *  returned as a Javascript array of file objects.\n *  Which in TypeScript is `Array<File>\n */\nclass TylDropZoneDirective {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n        /*\n         * The directive emits a `fileDropped` event\n         * with the list of files dropped on the element\n         * as an JS array of `File` objects.\n         */\n        this.fileDropped = new EventEmitter();\n        /*\n         * Disable dropping on the body of the document.\n         * This prevents the browser from loading the dropped files\n         * using it's default behavior if the user misses the drop zone.\n         * Set this input to false if you want the browser default behavior.\n         */\n        this.preventBodyDrop = true;\n        /*\n         * The `data-drop-zone-active` attribute is applied to the host\n         * element when a drag is currently over the target.\n         */\n        this.active = false;\n    }\n    onDrop(event) {\n        event.preventDefault();\n        this.active = false;\n        const { dataTransfer } = event;\n        const { files } = dataTransfer;\n        this.fileDropped.emit(Array.from(files));\n        if (dataTransfer.items) {\n            dataTransfer.items.clear();\n        }\n        else {\n            dataTransfer.clearData();\n        }\n    }\n    onDragOver(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.active = true;\n    }\n    onDragLeave(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        if (event.clientY < rect.top\n            || event.clientY >= rect.bottom\n            || event.clientX < rect.left\n            || event.clientX >= rect.right) {\n            this.active = false;\n        }\n    }\n    onBodyDragOver(event) {\n        if (this.preventBodyDrop) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    onBodyDrop(event) {\n        if (this.preventBodyDrop) {\n            event.preventDefault();\n        }\n    }\n}\n/** @nocollapse */ TylDropZoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylDropZoneDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ TylDropZoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TylDropZoneDirective, selector: \"[tylDropZone]\", inputs: { preventBodyDrop: \"preventBodyDrop\" }, outputs: { fileDropped: \"fileDropped\" }, host: { listeners: { \"drop\": \"onDrop($event)\", \"dragover\": \"onDragOver($event)\", \"dragleave\": \"onDragLeave($event)\", \"body:dragover\": \"onBodyDragOver($event)\", \"body:drop\": \"onBodyDrop($event)\" }, properties: { \"attr.data-drop-zone-active\": \"this.active\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TylDropZoneDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylDropZone]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fileDropped: [{\n                type: Output\n            }], preventBodyDrop: [{\n                type: Input\n            }], active: [{\n                type: HostBinding,\n                args: ['attr.data-drop-zone-active']\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }], onDragOver: [{\n                type: HostListener,\n                args: ['dragover', ['$event']]\n            }], onDragLeave: [{\n                type: HostListener,\n                args: ['dragleave', ['$event']]\n            }], onBodyDragOver: [{\n                type: HostListener,\n                args: ['body:dragover', ['$event']]\n            }], onBodyDrop: [{\n                type: HostListener,\n                args: ['body:drop', ['$event']]\n            }] } });\n\nclass DropZoneModule {\n}\n/** @nocollapse */ DropZoneModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DropZoneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ DropZoneModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: DropZoneModule, declarations: [TylDropZoneDirective], imports: [CommonModule], exports: [TylDropZoneDirective] });\n/** @nocollapse */ DropZoneModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DropZoneModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DropZoneModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TylDropZoneDirective],\n                    imports: [CommonModule],\n                    exports: [TylDropZoneDirective]\n                }]\n        }] });\n\nclass DeactivateGuard {\n    canDeactivate(component, currentRoute, currentState, nextState) {\n        if (!component.canDeactivate) {\n            console.warn('Component does not implement the TylCanDeactivate interface. Route navigation will proceed.');\n            return true;\n        }\n        const arg = { currentRoute, currentState, nextState };\n        return component.canDeactivate(arg);\n    }\n}\n/** @nocollapse */ DeactivateGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DeactivateGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ DeactivateGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DeactivateGuard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DeactivateGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nconst PIPE_PREFIX = 'tyl';\n\nclass ArrayFindPipe {\n    transform(value, array, inputProperty, outputProperty) {\n        const matchedItem = array.find(item => isDeepEqual(item[inputProperty], value));\n        return outputProperty ? matchedItem?.[outputProperty] : matchedItem;\n    }\n}\n/** @nocollapse */ ArrayFindPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ ArrayFindPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipe, name: \"tylArrayFind\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: `${PIPE_PREFIX}ArrayFind`\n                }]\n        }] });\n\nclass ArrayFindPipeModule {\n}\n/** @nocollapse */ ArrayFindPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ArrayFindPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipeModule, declarations: [ArrayFindPipe], exports: [ArrayFindPipe] });\n/** @nocollapse */ ArrayFindPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ArrayFindPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ArrayFindPipe],\n                    exports: [ArrayFindPipe],\n                }]\n        }] });\n\nclass FunctionPipe {\n    transform(value, fn, ...args) {\n        return fn.apply(null, [value, ...args]);\n    }\n}\n/** @nocollapse */ FunctionPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ FunctionPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipe, name: \"tylFunction\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: `${PIPE_PREFIX}Function` }]\n        }] });\n\nclass FunctionPipeModule {\n}\n/** @nocollapse */ FunctionPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ FunctionPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipeModule, declarations: [FunctionPipe], exports: [FunctionPipe] });\n/** @nocollapse */ FunctionPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FunctionPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FunctionPipe],\n                    exports: [FunctionPipe],\n                }]\n        }] });\n\nclass IsDefinedPipe {\n    transform(value) {\n        return isDefined(value);\n    }\n}\n/** @nocollapse */ IsDefinedPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ IsDefinedPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipe, name: \"tylIsDefined\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: `${PIPE_PREFIX}IsDefined` }]\n        }] });\n\nclass IsDefinedPipeModule {\n}\n/** @nocollapse */ IsDefinedPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ IsDefinedPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipeModule, declarations: [IsDefinedPipe], exports: [IsDefinedPipe] });\n/** @nocollapse */ IsDefinedPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsDefinedPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [IsDefinedPipe],\n                    exports: [IsDefinedPipe],\n                }]\n        }] });\n\n/**\n * Returns whether the input value's length or size is zero.\n *\n * @param value A string or object.\n * @returns Whether the value contains any items.\n */\nfunction isEmpty(value) {\n    if (isArray(value) || isString(value)) {\n        return !value.length;\n    }\n    if (value instanceof Map || value instanceof Set) {\n        return !value.size;\n    }\n    if (isObject(value)) {\n        return !Object.keys(value).length;\n    }\n    if (!isDefined(value)) {\n        return true;\n    }\n    console.error('Unable to determine whether unsupported type is empty', value);\n    throw new Error('Unable to determine whether unsupported type is empty');\n}\n\nclass IsEmptyPipe {\n    transform(value) {\n        return isEmpty(value);\n    }\n}\n/** @nocollapse */ IsEmptyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ IsEmptyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipe, name: \"tylIsEmpty\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: `${PIPE_PREFIX}IsEmpty` }]\n        }] });\n\nclass IsEmptyPipeModule {\n}\n/** @nocollapse */ IsEmptyPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ IsEmptyPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipeModule, declarations: [IsEmptyPipe], exports: [IsEmptyPipe] });\n/** @nocollapse */ IsEmptyPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IsEmptyPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [IsEmptyPipe],\n                    exports: [IsEmptyPipe],\n                }]\n        }] });\n\n/**\n * Gets the plural form of a word.\n * @param value The singular form of the word.\n * @param amount An amount. If 1 the singular form of the word is returned. (Optional)\n * @param pluralForm A word to be returned as the plural form. Useful when the word has an irregular plural form. (Optional)\n * @returns {string} The plural form of the word, or the singular form if the amount is 1.\n */\nfunction pluralize(value, amount, pluralForm) {\n    // An empty string has no plural form\n    if (!value) {\n        return '';\n    }\n    if (amount === 1) {\n        return value;\n    }\n    if (pluralForm) {\n        return pluralForm;\n    }\n    const esEndings = [\n        's',\n        'x',\n        'z',\n        'ch',\n        'sh'\n    ];\n    const vowelYEndings = [\n        'ay',\n        'ey',\n        'iy',\n        'oy',\n        'uy'\n    ];\n    const lastChar = value.slice(-1);\n    const lastTwoChars = value.slice(-2);\n    // -is => -es\n    if (lastTwoChars === 'is') {\n        return value.slice(0, -2) + 'es';\n    }\n    // -y => -ies or -<vowel>y => -<vowel>ys\n    if (lastChar === 'y') {\n        return vowelYEndings.includes(lastTwoChars) ? value + 's' : value.slice(0, -1) + 'ies';\n    }\n    // -s, -x, -z, -ch, -sh => -ses, -xes, -zes, -ches, -shes\n    if (esEndings.some(ending => lastChar === ending || lastTwoChars === ending)) {\n        return value + 'es';\n    }\n    // -* => -*s\n    return value + 's';\n}\n\nclass PluralPipe {\n    transform(value, amount, pluralForm) {\n        return pluralize(value, amount, pluralForm);\n    }\n}\n/** @nocollapse */ PluralPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ PluralPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipe, name: \"tylPlural\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: `${PIPE_PREFIX}Plural` }]\n        }] });\n\nclass PluralPipeModule {\n}\n/** @nocollapse */ PluralPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ PluralPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipeModule, declarations: [PluralPipe], exports: [PluralPipe] });\n/** @nocollapse */ PluralPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PluralPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PluralPipe],\n                    exports: [PluralPipe],\n                }]\n        }] });\n\nclass BreakPointChange {\n    constructor(isActive = false, mediaQuery = '', alias = '') {\n        this.isActive = isActive;\n        this.mediaQuery = mediaQuery;\n        this.alias = alias;\n    }\n}\n\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n    },\n];\n\nclass MediaObserverService {\n    constructor() {\n        this.breakPoints$ = new BehaviorSubject([]);\n        this._breakPoints = [...DEFAULT_BREAKPOINTS];\n        this._breakPointDictionary = new Map();\n        this._removeListener$ = new Subject();\n        this._initializeBreakPoints();\n    }\n    configureBreakPoints(breakPoints) {\n        if (!!breakPoints && breakPoints.length >= 2) {\n            this._breakPoints = [...breakPoints];\n            this.breakPoints$.next(this._breakPoints);\n            this._removeListener$.next();\n            this._initializeBreakPoints();\n        }\n        else {\n            console.error(`configureBreakPoints requires 2 or more breakPoints, got ${breakPoints?.length}`);\n        }\n    }\n    _initializeBreakPoints() {\n        this.breakPoints$.next(this._breakPoints);\n        this._breakPointDictionary = new Map();\n        this._breakPoints.forEach(b => this._breakPointDictionary[b.mediaQuery] = b);\n        const mqlList = this._breakPoints.map(b => this._constructMediaQueryList(b.mediaQuery));\n        const initialBreakPoint = mqlList.filter(m => m.matches)[0];\n        this.breakPointChange$ = fromEvent(mqlList, 'change').pipe(map((evt) => new BreakPointChange(evt.matches, evt.media, this._breakPointDictionary[evt.media].alias)), filter(breakPointChange => breakPointChange.isActive), startWith(new BreakPointChange(initialBreakPoint.matches, initialBreakPoint.media, this._breakPointDictionary[initialBreakPoint.media].alias)), takeUntil(this._removeListener$), shareReplay(1));\n    }\n    _constructMediaQueryList(query) {\n        const canListen = !!window.matchMedia('all').addEventListener;\n        const defaultMediaQueryList = {\n            matches: query === 'all' || query === '',\n            media: query,\n            addListener: () => {\n            },\n            removeListener: () => {\n            },\n            onchange: null,\n            addEventListener() {\n            },\n            removeEventListener() {\n            },\n            dispatchEvent() {\n                return false;\n            }\n        };\n        return canListen ? window.matchMedia(query) : defaultMediaQueryList;\n    }\n}\n/** @nocollapse */ MediaObserverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ MediaObserverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass MediaObserverModule {\n}\n/** @nocollapse */ MediaObserverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ MediaObserverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverModule, imports: [CommonModule] });\n/** @nocollapse */ MediaObserverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverModule, providers: [MediaObserverService], imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MediaObserverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [MediaObserverService],\n                    imports: [CommonModule],\n                }]\n        }] });\n\n/**\n * Async validator that requires the control's value to pass the supplied function.\n * @param fn A function that accepts the control and any number of arguments and returns an\n * `Observable` or `Promise` that emits a set of validation errors or `null`.\n * @param args Any number of arguments to pass to `fn`.\n * @returns A validator function that returns an `Observable` or `Promise` that emits a set of\n * validation errors if the validation check fails or `null` otherwise.\n */\nconst async = (fn, ...args) => (control) => {\n    return fn(control, args);\n};\n\nclass AsyncValidatorDirective {\n    get tylAsync() {\n        return this._fn;\n    }\n    set tylAsync(value) {\n        this._fn = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    get tylAsyncArgs() {\n        return this._args;\n    }\n    set tylAsyncArgs(value) {\n        this._args = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        console.log('Validation from directive');\n        return this._fn ? async(this._fn, ...(this._args ?? []))(control) : of(null);\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ AsyncValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AsyncValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ AsyncValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: AsyncValidatorDirective, selector: \"[tylAsync]\", inputs: { tylAsync: \"tylAsync\", tylAsyncArgs: \"tylAsyncArgs\" }, providers: [\n        {\n            provide: NG_ASYNC_VALIDATORS,\n            useExisting: forwardRef((() => AsyncValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AsyncValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylAsync]',\n                    providers: [\n                        {\n                            provide: NG_ASYNC_VALIDATORS,\n                            useExisting: forwardRef((() => AsyncValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylAsync: [{\n                type: Input\n            }], tylAsyncArgs: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be a valid date.\n * @returns A validator function that returns an error map with the `date` property if the\n * validation check fails, otherwise `null`.\n */\nconst date = (control) => {\n    if (!isDefined(control.value) || control.value === '') {\n        return;\n    }\n    return isValidDate(new Date(control.value)) ? null : { date: true };\n};\n\nclass DateValidatorDirective {\n    validate(control) {\n        return date(control);\n    }\n}\n/** @nocollapse */ DateValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DateValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ DateValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: DateValidatorDirective, selector: \"[tylDate]\", providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => DateValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DateValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylDate]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => DateValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }] });\n\n/**\n * Validator that requires the specfied child controls' values, if valid dates, to occur in order.\n * @param start A path to the form control that holds the start date.\n * @param end A path to the form control that holds the end date.\n * @returns A validator function that returns an error map with the `dateorder` property if the\n * validation check fails, otherwise `null`.\n */\nconst dateOrder = (start, end) => (control) => {\n    if (!(control instanceof FormGroup) && !(control instanceof FormArray)) {\n        return;\n    }\n    const startValue = control.get(start)?.value;\n    const endValue = control.get(end)?.value;\n    if (!isDefined(startValue) || !isDefined(endValue)) {\n        return;\n    }\n    const startDate = new Date(startValue);\n    const endDate = new Date(endValue);\n    if (!isValidDate(startDate) || !isValidDate(endDate)) {\n        return;\n    }\n    const diff = startDate.getTime() - endDate.getTime();\n    return diff <= 0 ? null : { dateOrder: { start: startDate, end: endDate } };\n};\n\nclass DateOrderValidatorDirective {\n    get tylDateOrderStart() {\n        return this._start;\n    }\n    set tylDateOrderStart(value) {\n        this._start = value;\n        this._onValidatorChange?.();\n    }\n    get tylDateOrderEnd() {\n        return this._end;\n    }\n    set tylDateOrderEnd(value) {\n        this._end = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        return this._start && this._end ? dateOrder(this._start, this._end)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ DateOrderValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DateOrderValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ DateOrderValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: DateOrderValidatorDirective, selector: \"[tylDateOrder]\", inputs: { tylDateOrderStart: \"tylDateOrderStart\", tylDateOrderEnd: \"tylDateOrderEnd\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => DateOrderValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DateOrderValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylDateOrder]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => DateOrderValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylDateOrderStart: [{\n                type: Input\n            }], tylDateOrderEnd: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to equal the given value.\n * @param expected The expected value.\n * @returns A validator function that returns an error map with the `equal` property if the\n * validation check fails, otherwise `null`.\n */\nconst equal = (expected) => (control) => {\n    if (!isDefined(control.value) || control.value === '') {\n        return;\n    }\n    return isDeepEqual(control.value, expected) ? null : { equal: { expected, actual: control.value } };\n};\n\nclass EqualValidatorDirective {\n    get tylEqual() {\n        return this._expected;\n    }\n    set tylEqual(value) {\n        this._expected = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        return isDefined(this._expected) ? equal(this._expected)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ EqualValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: EqualValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ EqualValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: EqualValidatorDirective, selector: \"[tylEqual]\", inputs: { tylEqual: \"tylEqual\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => EqualValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: EqualValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylEqual]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => EqualValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylEqual: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be an exact length. This is not invoked when the\n * value's length is 0.\n * @param length The expected length.\n * @returns A validator function that returns an error map with the `exactLength` property if the\n * validation check fails, otherwise `null`.\n */\nconst exactLength = (length) => (control) => {\n    if (!control.value?.length) {\n        return;\n    }\n    const valueLength = control.value.length;\n    return valueLength === length\n        ? null\n        : { exactLength: { expected: length, actual: valueLength } };\n};\n\nclass ExactLengthValidatorDirective {\n    get tylExactLength() {\n        return this._length;\n    }\n    set tylExactLength(value) {\n        this._length = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    validate(control) {\n        return this._length ? exactLength(this._length)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ ExactLengthValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ExactLengthValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ ExactLengthValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: ExactLengthValidatorDirective, selector: \"[tylExactLength]\", inputs: { tylExactLength: \"tylExactLength\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => ExactLengthValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ExactLengthValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylExactLength]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => ExactLengthValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylExactLength: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be present in a given array.\n * @param set The array to test against.\n * @returns A validator function that returns an error map with the `includedIn` property if the\n * validation check fails, otherwise `null`.\n */\nconst includedIn = (set) => (control) => {\n    if (!isDefined(control.value)) {\n        return;\n    }\n    return set.includes(control.value) ? null : { includedIn: true };\n};\n/**\n * Validator that requires the control's value to match against an element in a given array using\n * a provided testing function.\n * @param set The array to test against.\n * @param predicate The testing function to use.\n * @returns A validator function that returns an error map with the `includedInWhere` property if\n * the validation check fails, otherwise `null`.\n */\nconst includedInWhere = (set, predicate) => (control) => {\n    if (!isDefined(control.value)) {\n        return;\n    }\n    return set.some(obj => predicate(control.value, obj)) ? null : { includedInWhere: true };\n};\n\nclass IncludedInValidatorDirective {\n    get tylIncludedIn() {\n        return this._set;\n    }\n    set tylIncludedIn(value) {\n        this._set = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    get tylIncludedInFn() {\n        return this._predicate;\n    }\n    set tylIncludedInFn(value) {\n        this._predicate = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        if (!this._set?.length) {\n            return null;\n        }\n        return this._predicate ? includedInWhere(this._set, this._predicate)(control) : includedIn(this._set)(control);\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ IncludedInValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IncludedInValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ IncludedInValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: IncludedInValidatorDirective, selector: \"[tylIncludedIn]\", inputs: { tylIncludedIn: \"tylIncludedIn\", tylIncludedInFn: \"tylIncludedInFn\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => IncludedInValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IncludedInValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylIncludedIn]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => IncludedInValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylIncludedIn: [{\n                type: Input\n            }], tylIncludedInFn: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be a whole number.\n * @returns A validator function that returns an error map with the `integer` property if the\n * validation check fails, otherwise `null`.\n */\nconst integer = (control) => {\n    if (!isDefined(control.value)) {\n        return;\n    }\n    return Number.isInteger(+control.value) ? null : { integer: true };\n};\n\nclass IntegerValidatorDirective {\n    validate(control) {\n        return integer(control);\n    }\n}\n/** @nocollapse */ IntegerValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IntegerValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ IntegerValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: IntegerValidatorDirective, selector: \"[tylInteger]\", providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => IntegerValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: IntegerValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylInteger]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => IntegerValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }] });\n\n/**\n * Validator that requires the control's date value to occur before the specified max date.\n * @param max A maximum date value.\n * @returns A validator function that returns an error map with the `maxDate` property if the\n * validation check fails, otherwise `null`.\n */\nconst maxDate = (max) => (control) => {\n    if (!isValidDate(control.value)) {\n        return;\n    }\n    return control.value.getTime() <= max ? null : { maxDate: { max: new Date(max), actual: control.value } };\n};\n\nclass MaxDateValidatorDirective {\n    get tylMaxDate() {\n        return this._maxDate;\n    }\n    set tylMaxDate(value) {\n        this._maxDate = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    validate(control) {\n        return isDefined(this._maxDate) ? maxDate(this._maxDate)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ MaxDateValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MaxDateValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ MaxDateValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MaxDateValidatorDirective, selector: \"[tylMaxDate]\", inputs: { tylMaxDate: \"tylMaxDate\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => MaxDateValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MaxDateValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylMaxDate]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => MaxDateValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylMaxDate: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's date value to occur after the specified min date.\n * @param min A maximum date value.\n * @returns A validator function that returns an error map with the `minDate` property if the\n * validation check fails, otherwise `null`.\n */\nconst minDate = (min) => (control) => {\n    if (!isValidDate(control.value)) {\n        return;\n    }\n    return control.value.getTime() >= min ? null : { minDate: { min, actual: control.value } };\n};\n\nclass MinDateValidatorDirective {\n    get tylMinDate() {\n        return this._minDate;\n    }\n    set tylMinDate(value) {\n        this._minDate = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    validate(control) {\n        return isDefined(this._minDate) ? minDate(this._minDate)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ MinDateValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MinDateValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ MinDateValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MinDateValidatorDirective, selector: \"[tylMinDate]\", inputs: { tylMinDate: \"tylMinDate\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => MinDateValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MinDateValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylMinDate]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => MinDateValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylMinDate: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to not equal the given value.\n * @param disallowed The value to test against.\n * @returns A validator function that returns an error map with the `notEqual` property if the\n * validation check fails, otherwise `null`.\n */\nconst notEqual = (disallowed) => (control) => {\n    if (!isDefined(control.value) || control.value === '') {\n        return;\n    }\n    return !isDeepEqual(control.value, disallowed) ? null : { notEqual: { value: disallowed } };\n};\n\nclass NotEqualValidatorDirective {\n    get tylNotEqual() {\n        return this._disallowed;\n    }\n    set tylNotEqual(value) {\n        this._disallowed = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        return isDefined(this._disallowed) ? notEqual(this._disallowed)(control) : null;\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ NotEqualValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: NotEqualValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ NotEqualValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: NotEqualValidatorDirective, selector: \"[tylNotEqual]\", inputs: { tylNotEqual: \"tylNotEqual\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => NotEqualValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: NotEqualValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylNotEqual]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => NotEqualValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylNotEqual: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be absent from a given array.\n * @param set The array to test against.\n * @returns A validator function that returns an error map with the `notIncludedIn` property if the\n * validation check fails, otherwise `null`.\n */\nconst notIncludedIn = (set) => (control) => {\n    if (!isDefined(control.value)) {\n        return;\n    }\n    return !set.includes(control.value) ? null : { notIncludedIn: true };\n};\n/**\n * Validator that requires the control's value to match against no element in a given array using\n * a provided testing function.\n * @param set The array to test against.\n * @param predicate The testing function to use.\n * @returns A validator function that returns an error map with the `notIncludedInWhere` property\n * if the validation check fails, otherwise `null`.\n */\nconst notIncludedInWhere = (set, predicate) => (control) => {\n    if (!isDefined(control.value)) {\n        return;\n    }\n    return !set.some(obj => predicate(control.value, obj)) ? null : { notIncludedInWhere: true };\n};\n\nclass NotIncludedInValidatorDirective {\n    get tylNotIncludedIn() {\n        return this._set;\n    }\n    set tylNotIncludedIn(value) {\n        this._set = value;\n        this._onValidatorChange?.();\n    }\n    ;\n    get tylNotIncludedInFn() {\n        return this._predicate;\n    }\n    set tylNotIncludedInFn(value) {\n        this._predicate = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        if (!this._set?.length) {\n            return null;\n        }\n        return this._predicate ? notIncludedInWhere(this._set, this._predicate)(control) : notIncludedIn(this._set)(control);\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ NotIncludedInValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: NotIncludedInValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ NotIncludedInValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: NotIncludedInValidatorDirective, selector: \"[tylNotIncludedIn]\", inputs: { tylNotIncludedIn: \"tylNotIncludedIn\", tylNotIncludedInFn: \"tylNotIncludedInFn\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => NotIncludedInValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: NotIncludedInValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylNotIncludedIn]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => NotIncludedInValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylNotIncludedIn: [{\n                type: Input\n            }], tylNotIncludedInFn: [{\n                type: Input\n            }] } });\n\n/**\n * Validator that requires the control's value to be a multiple of a step.\n * @param step The increment amount.\n * @param start The amount to count from. Defaults to `0`.\n * @returns A validator function that returns an error map with the `step` property if the\n * validation check fails, otherwise `null`.\n */\nconst step = (step, start = 0) => (control) => {\n    if (isNaN(+control.value)) {\n        return;\n    }\n    return !!((+control.value - start) % step)\n        ? { step: { step, start, value: control.value } }\n        : null;\n};\n\nclass StepValidatorDirective {\n    get tylStep() {\n        return this._step;\n    }\n    set tylStep(value) {\n        this._step = value;\n        this._onValidatorChange?.();\n    }\n    get tylStepStart() {\n        return this._start;\n    }\n    set tylStepStart(value) {\n        this._start = value;\n        this._onValidatorChange?.();\n    }\n    validate(control) {\n        if (!isDefined(this._step)) {\n            return null;\n        }\n        return step(this._step, this._start ?? 0)(control);\n    }\n    registerOnValidatorChange(fn) {\n        this._onValidatorChange = fn;\n    }\n}\n/** @nocollapse */ StepValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: StepValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ StepValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: StepValidatorDirective, selector: \"[tylStep]\", inputs: { tylStep: \"tylStep\", tylStepStart: \"tylStepStart\" }, providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef((() => StepValidatorDirective)),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: StepValidatorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tylStep]',\n                    providers: [\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef((() => StepValidatorDirective)),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], propDecorators: { tylStep: [{\n                type: Input\n            }], tylStepStart: [{\n                type: Input\n            }] } });\n\nconst TylValidators = {\n    async,\n    date,\n    dateOrder,\n    equal,\n    exactLength,\n    includedIn,\n    includedInWhere,\n    integer,\n    maxDate,\n    minDate,\n    notEqual,\n    notIncludedIn,\n    notIncludedInWhere,\n    step\n};\nconst TylValidatorDirectives = [\n    AsyncValidatorDirective,\n    DateValidatorDirective,\n    DateOrderValidatorDirective,\n    EqualValidatorDirective,\n    ExactLengthValidatorDirective,\n    IncludedInValidatorDirective,\n    IntegerValidatorDirective,\n    MaxDateValidatorDirective,\n    MinDateValidatorDirective,\n    NotEqualValidatorDirective,\n    NotIncludedInValidatorDirective,\n    StepValidatorDirective\n];\nclass ValidatorsModule {\n}\n/** @nocollapse */ ValidatorsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ValidatorsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ValidatorsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ValidatorsModule, declarations: [AsyncValidatorDirective,\n        DateValidatorDirective,\n        DateOrderValidatorDirective,\n        EqualValidatorDirective,\n        ExactLengthValidatorDirective,\n        IncludedInValidatorDirective,\n        IntegerValidatorDirective,\n        MaxDateValidatorDirective,\n        MinDateValidatorDirective,\n        NotEqualValidatorDirective,\n        NotIncludedInValidatorDirective,\n        StepValidatorDirective], exports: [AsyncValidatorDirective,\n        DateValidatorDirective,\n        DateOrderValidatorDirective,\n        EqualValidatorDirective,\n        ExactLengthValidatorDirective,\n        IncludedInValidatorDirective,\n        IntegerValidatorDirective,\n        MaxDateValidatorDirective,\n        MinDateValidatorDirective,\n        NotEqualValidatorDirective,\n        NotIncludedInValidatorDirective,\n        StepValidatorDirective] });\n/** @nocollapse */ ValidatorsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ValidatorsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ValidatorsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [...TylValidatorDirectives],\n                    declarations: [...TylValidatorDirectives]\n                }]\n        }] });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayFindPipe, ArrayFindPipeModule, AsyncValidatorDirective, AttributeModule, AutofocusModule, BreakPointChange, DEFAULT_BREAKPOINTS, DateOrderValidatorDirective, DateValidatorDirective, DeactivateGuard, DropZoneModule, EqualValidatorDirective, ExactLengthValidatorDirective, FunctionPipe, FunctionPipeModule, IncludedInValidatorDirective, InputTrimDirective, InputTrimModule, IntegerValidatorDirective, IsDefinedPipe, IsDefinedPipeModule, IsEmptyPipe, IsEmptyPipeModule, MaxDateValidatorDirective, MediaObserverModule, MediaObserverService, MinDateValidatorDirective, NotEqualValidatorDirective, NotIncludedInValidatorDirective, PluralPipe, PluralPipeModule, RepeatModule, ResizeObserverModule, ScrollObserverModule, StepValidatorDirective, TylAttributeDirective, TylAutofocusDirective, TylDropZoneDirective, TylRepeatContext, TylRepeatDirective, TylResizeObserverDirective, TylScrollObserverDirective, TylValidators, ValidatorsModule, async, date, dateOrder, equal, exactLength, focusFirstInvalidInput, getAllInvalidInputs, getControlValueObservable, includedIn, includedInWhere, integer, isEmpty, maxDate, minDate, notEqual, notIncludedIn, notIncludedInWhere, pluralize, resizeObservable, setControlDisabled, step, tylAutoCancelable, updateFormValidity };\n","<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">{{title}}</span>\r\n  <forge-icon-button>\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  {{message}}\r\n</div>\r\n\r\n<div *ngIf=\"showFooter\" class=\"dialog__footer\">\r\n  <forge-button type=\"outlined\">\r\n    <button type=\"button\" (click)=\"onClose()\">Cancel</button>\r\n  </forge-button>\r\n  <forge-button type=\"raised\">\r\n    <button appAutoFocus type=\"button\" (click)=\"onClose(true)\">Ok</button>\r\n  </forge-button>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\nimport { AutoFocusDirective } from 'src/app/shared/directives/auto-focus/auto-focus.directive';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AutoFocusDirective\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ConfirmDialogComponent {\r\n  public title: string;\r\n  public message: string;\r\n  public showFooter?: boolean;\r\n\r\n  constructor(public dialogConfig: DialogConfig, private dialogRef: DialogRef) {\r\n    this.title = dialogConfig.data.title;\r\n    this.message = dialogConfig.data.message;\r\n    this.showFooter = isDefined(dialogConfig.data.showFooter) ? dialogConfig.data.showFooter : true;\r\n  }\r\n\r\n  public onClose(response = false): void {\r\n    this.dialogRef.close(response);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ToastService } from '@tylertech/forge-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppToastService {\r\n  constructor(private toastService: ToastService) { }\r\n\r\n  public show(message: string): void {\r\n    const toast = this.toastService.show({\r\n      message: `${message}`,\r\n      actionHandler: () => toast.hide(),\r\n      placement: 'bottom',\r\n      duration: 3000\r\n    });\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\n\r\nexport interface IPersonalFormGroup {\r\n  firstName: FormControl<string | null>;\r\n  lastName: FormControl<string | null>;\r\n  gender: FormControl<string | null>;\r\n  email: FormControl<string | null>;\r\n  phone: FormControl<string | null>;\r\n  dateOfBirth: FormControl<string | Date | null>;\r\n  comment: FormControl<string | null>;\r\n  rank: FormControl<number | null>;\r\n  size: FormControl<string | null>;\r\n  friends: FormArray<FormControl>;\r\n}\r\n\r\nexport interface IAddressFormGroup {\r\n  name: FormControl<string | null>;\r\n  street: FormControl<string | null>;\r\n  city: FormControl<string | null>;\r\n  state: FormControl<string | null>;\r\n  zip: FormControl<string | null>;\r\n}\r\n\r\n@Injectable()\r\nexport class ProfileCacheService {\r\n  public formGroup = new FormGroup({\r\n    personalFormGroup: new FormGroup<IPersonalFormGroup>({\r\n      firstName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      lastName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      gender: new FormControl<string | null>(null),\r\n      email: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      phone: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      dateOfBirth: new FormControl<string | Date | null>(null),\r\n      comment: new FormControl<string | null>(null),\r\n      rank: new FormControl<number>(0),\r\n      size: new FormControl<string | null>(null),\r\n      friends: new FormArray<FormControl>([])\r\n    }),\r\n    addressFormGroup: new FormGroup<IAddressFormGroup>({\r\n      name: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      street: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      city: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      state: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      zip: new FormControl<string | null>(null, { validators: [Validators.required] })\r\n    })\r\n  });\r\n  public profile?: IProfile;\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <h2 class=\"forge-typography--title\">Profile</h2>\r\n    <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt=\"\" />\r\n  </div>\r\n\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onLoadProfile()\">Load profile</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<forge-tab-bar [activeTab]=\"activeTab\">\r\n  <forge-tab (forge-tab-interacted)=\"onTabSelected('personal')\">\r\n    Personal\r\n    <forge-icon *ngIf=\"[personalFormGroup.invalid, personalFormGroup.touched] | appFormControlInvalid\" slot=\"trailing\" name=\"error\"></forge-icon>\r\n  </forge-tab>\r\n  <forge-tab (forge-tab-interacted)=\"onTabSelected('address')\">\r\n    Address\r\n    <forge-icon *ngIf=\"[addressFormGroup.invalid, addressFormGroup.touched] | appFormControlInvalid\" slot=\"trailing\" name=\"error\"></forge-icon>\r\n  </forge-tab>\r\n</forge-tab-bar>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"cache.formGroup\">\r\n    <router-outlet></router-outlet>\r\n    <p>\r\n      {{cache.formGroup.value | json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n    </forge-button>\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onSave()\" [disabled]=\"cache.formGroup.invalid || !cache.formGroup.dirty\">Save</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>","<div [formGroup]=\"formGroup\" class=\"form-grid\">\r\n  <forge-text-field required [invalid]=\"[formGroup.get('name').invalid, formGroup.get('name').touched] | appFormControlInvalid\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"address-form--name\" formControlName=\"name\" />\r\n    <label for=\"address-form--name\" slot=\"label\">Name</label>\r\n    <span slot=\"helper-text\" *ngIf=\"[formGroup.get('name').invalid, formGroup.get('name').touched] | appFormControlInvalid\">Name is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [invalid]=\"[formGroup.get('street').invalid, formGroup.get('street').touched] | appFormControlInvalid\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"address-form--street\" formControlName=\"street\" />\r\n    <label for=\"address-form--street\" slot=\"label\">Street</label>\r\n    <span slot=\"helper-text\" *ngIf=\"[formGroup.get('street').invalid, formGroup.get('street').touched] | appFormControlInvalid\">Street is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [invalid]=\"[formGroup.get('city').invalid, formGroup.get('city').touched] | appFormControlInvalid\">\r\n    <input type=\"text\" id=\"address-form--city\" formControlName=\"city\" />\r\n    <label for=\"address-form--city\" slot=\"label\">City</label>\r\n    <span slot=\"helper-text\" *ngIf=\"[formGroup.get('city').invalid, formGroup.get('city').touched] | appFormControlInvalid\">City is required</span>\r\n  </forge-text-field>\r\n\r\n  <div class=\"form-grid__state-zip\">\r\n    <forge-text-field required [invalid]=\"[formGroup.get('state').invalid, formGroup.get('state').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"address-form--state\" formControlName=\"state\" />\r\n      <label for=\"address-form--state\" slot=\"label\">State</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('state').invalid, formGroup.get('state').touched] | appFormControlInvalid\">State is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [invalid]=\"[formGroup.get('zip').invalid, formGroup.get('zip').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"address-form--zip\" formControlName=\"zip\" />\r\n      <label for=\"address-form--zip\" slot=\"label\">Zip code</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('zip').invalid, formGroup.get('zip').touched] | appFormControlInvalid\">Zip code is required</span>\r\n    </forge-text-field>\r\n  </div>\r\n</div>","<ng-container [formGroup]=\"formGroup\">\r\n  <div class=\"form-grid\">\r\n    <forge-text-field required [invalid]=\"[formGroup.get('firstName').invalid, formGroup.get('firstName').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"personal-form--first-name\" formControlName=\"firstName\" />\r\n      <label for=\"personal-form--first-name\" slot=\"label\">First Name</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('firstName').invalid, formGroup.get('firstName').touched] | appFormControlInvalid\">First name is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [invalid]=\"[formGroup.get('lastName').invalid, formGroup.get('lastName').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"personal-form--first-name\" formControlName=\"lastName\" />\r\n      <label for=\"personal-form--last-name\" slot=\"label\">Last Name</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('lastName').invalid, formGroup.get('lastName').touched] | appFormControlInvalid\">Last name is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\"></forge-select>\r\n\r\n    <forge-text-field required [invalid]=\"[formGroup.get('email').invalid, formGroup.get('email').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"personal-form--email\" formControlName=\"email\" />\r\n      <label for=\"personal-form--email\" slot=\"label\">Email</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('email').invalid, formGroup.get('email').touched] | appFormControlInvalid\">Email is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [invalid]=\"[formGroup.get('phone').invalid, formGroup.get('phone').touched] | appFormControlInvalid\">\r\n      <input type=\"text\" id=\"personal-form--phone\" formControlName=\"phone\" />\r\n      <label for=\"personal-form--phone\" slot=\"label\">Phone</label>\r\n      <span slot=\"helper-text\" *ngIf=\"[formGroup.get('phone').invalid, formGroup.get('phone').touched] | appFormControlInvalid\">Phone number is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-date-picker>\r\n      <forge-text-field>\r\n        <input type=\"text\" id=\"personal-form--dob\" formControlName=\"dateOfBirth\" />\r\n        <label for=\"personal-form--dob\">Date of birth</label>\r\n      </forge-text-field>\r\n    </forge-date-picker>\r\n\r\n    <forge-text-field class=\"form-grid__comment form-grid--col-span\">\r\n      <textarea type=\"text\" id=\"personal-form--comment\" formControlName=\"comment\" rows=\"4\"></textarea>\r\n      <label for=\"personal-form--comment\">Comment</label>\r\n    </forge-text-field>\r\n\r\n    <forge-label-value>\r\n      <span slot=\"label\">Rank {{formGroup?.value.rank}}</span>\r\n      <div slot=\"value\" style=\"margin: 0 -8px;\">\r\n        <forge-slider type=\"discrete\" min=\"0\" max=\"10\" formControlName=\"rank\"></forge-slider>\r\n      </div>\r\n    </forge-label-value>\r\n\r\n    <div role=\"radiogroup\" aria-label=\"Choose size option\">\r\n      <forge-radio *ngFor=\"let option of sizeOptions; index as i\">\r\n        <input type=\"radio\" id=\"personal-form--size-{{i}}\" formControlName=\"size\" value=\"{{option.value}}\" />\r\n        <label for=\"personal-form--size-{{i}}\">{{option.label}}</label>\r\n      </forge-radio>\r\n    </div>\r\n  </div>\r\n\r\n  <forge-divider></forge-divider>\r\n\r\n  <div class=\"friends\">\r\n    <ng-container formArrayName=\"friends\">\r\n      <div class=\"friend\" *ngFor=\"let friend of formGroup.get('friends')?.controls; index as i\">\r\n        <forge-select [options]=\"friendOptions\" [formControlName]=\"i\" label=\"Friend\" [invalid]=\"[friend.invalid, friend.touched] | appFormControlInvalid\">\r\n          <span slot=\"helper-text\" *ngIf=\"[friend.invalid, friend.touched] | appFormControlInvalid\">A friend is required</span>\r\n        </forge-select>\r\n        <forge-icon-button>\r\n          <button type=\"button\" aria-label=\"delete\" (click)=\"onDeleteFriend(i)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n      <forge-button type=\"raised\">\r\n        <button type=\"button\" (click)=\"onAddFriend()\">Add friend</button>\r\n      </forge-button>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DeactivateGuard } from '@tylertech/angular-core';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormControlInvalidPipe } from 'src/app/shared/pipes/form-control-invalid.pipe';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { ProfileCacheService } from './profile-cache.service';\r\nimport { AddressComponent } from './address/address.component';\r\nimport { PersonalComponent } from './personal/personal.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent,\r\n    canDeactivate: [DeactivateGuard],\r\n    children: [\r\n      { path: 'address', component: AddressComponent },\r\n      { path: 'personal', component: PersonalComponent },\r\n      { path: '', redirectTo: 'personal', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProfileComponent,\r\n    AddressComponent,\r\n    PersonalComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormControlInvalidPipe\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    ProfileCacheService,\r\n    DeactivateGuard\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ProfileModule { }\r\n","import { Component } from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogService } from '@tylertech/forge-angular';\r\nimport { ITylDeactivateGuardArg, TylCanDeactivate } from '@tylertech/angular-core';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { AppToastService } from 'src/app/app-toast.service';\r\nimport { IAddressFormGroup, IPersonalFormGroup, ProfileCacheService } from './profile-cache.service';\r\nimport { ConfirmDialogComponent } from '../shared/components/confirm-dialog/confirm-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements TylCanDeactivate {\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  public get personalFormGroup() {\r\n    return this.cache.formGroup.get('personalFormGroup') as FormGroup<IPersonalFormGroup>;\r\n  }\r\n  public get addressFormGroup() {\r\n    return this.cache.formGroup.get('addressFormGroup') as FormGroup<IAddressFormGroup>;\r\n  }\r\n  public activeTab = 0;\r\n  public imageUrl?: string;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private appDataService: AppDataService,\r\n    private dialogService: DialogService,\r\n    private appToastService: AppToastService,\r\n    public cache: ProfileCacheService\r\n  ) {\r\n    if (this.cache.profile) {\r\n      this.loadForm(this.cache.profile);\r\n    }\r\n  }\r\n\r\n  public canDeactivate(arg: ITylDeactivateGuardArg): boolean | Observable<boolean> {\r\n    if (!this.cache.formGroup.dirty) {\r\n      return true;\r\n    }\r\n\r\n    return new Observable<boolean>(s => {\r\n      const dialogRef = this.dialogService.show(\r\n        ConfirmDialogComponent,\r\n        { backdropClose: false, escapeClose: false },\r\n        { data: { title: 'Unsaved changes', message: 'You have unsaved changes which will be lost, do you want to continue?' } }\r\n      );\r\n      const dialogSub = dialogRef.afterClosed.subscribe((result) => {\r\n        dialogSub.unsubscribe();\r\n        if (result) {\r\n          this.cache.formGroup.reset();\r\n        }\r\n        s.next(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  public onLoadProfile() {\r\n    this.appDataService.getProfile().subscribe((result: IProfile) => {\r\n      this.cache.formGroup.reset();\r\n      this.cache.profile = result;\r\n      this.loadForm(this.cache.profile);\r\n    });\r\n  }\r\n\r\n  public onTabSelected(route: string) {\r\n    switch (this.activeTab) {\r\n      case 0:\r\n        this.personalFormGroup.markAsTouched();\r\n        break;\r\n      case 1:\r\n        this.addressFormGroup.markAsTouched();\r\n        break;\r\n    }\r\n\r\n    switch (route) {\r\n      case 'personal':\r\n        this.activeTab = 0;\r\n        break;\r\n      case 'address':\r\n        this.activeTab = 1;\r\n        break;\r\n    }\r\n    this.router.navigate([`profile/${route}`]);\r\n  }\r\n\r\n  public onSave() {\r\n    if (this.cache.formGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.cache.profile = this.parseForm(this.cache.profile?.id);\r\n    this.cache.formGroup.markAsPristine();\r\n    this.appToastService.show('Profile saved.');\r\n  }\r\n\r\n  public onCancel() {\r\n    this.cache.formGroup.reset();\r\n    this.imageUrl = undefined;\r\n    this.cache.profile = undefined;\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n\r\n  private loadForm(profile: IProfile) {\r\n    this.imageUrl = `mock-data/${Utils.formatNumber(this.cache.profile?.id as number, '2.0-0')}-small.png`;\r\n\r\n    (this.personalFormGroup.get('friends') as FormArray)?.clear();\r\n\r\n    this.personalFormGroup.patchValue(profile);\r\n    this.addressFormGroup.patchValue(profile.address as any);\r\n\r\n    // this.personalFormGroup.patchValue({\r\n    //   firstName: profile.firstName,\r\n    //   lastName: profile.lastName,\r\n    //   gender: profile.gender,\r\n    //   email: profile.email,\r\n    //   phone: profile.phone,\r\n    //   dateOfBirth: Utils.formatDate(profile.dateOfBirth as Date)\r\n    // });\r\n\r\n    // this.addressFormGroup.patchValue(profile.address as any);\r\n  }\r\n\r\n  private parseForm(id?: number): IProfile {\r\n    return {\r\n      id: id || -1,\r\n      firstName: this.personalFormGroup.value.firstName as string,\r\n      lastName: this.personalFormGroup.value.lastName as string,\r\n      gender: this.personalFormGroup.value.gender as any,\r\n      email: this.personalFormGroup.value.email as string,\r\n      phone: this.personalFormGroup.value.phone as string,\r\n      dateOfBirth: this.personalFormGroup.value.dateOfBirth as Date,\r\n      address: this.addressFormGroup.value as any\r\n    };\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { IAddressFormGroup, ProfileCacheService } from '../profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss']\r\n})\r\nexport class AddressComponent {\r\n  public get formGroup() {\r\n    return this.cache.formGroup.get('addressFormGroup') as FormGroup<IAddressFormGroup>;\r\n  }\r\n\r\n  constructor(public cache: ProfileCacheService) {\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IOption } from '@tylertech/forge';\r\n\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPersonalFormGroup, ProfileCacheService } from '../profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile-personal',\r\n  templateUrl: './personal.component.html',\r\n  styleUrls: ['./personal.component.scss']\r\n})\r\nexport class PersonalComponent {\r\n  public get formGroup() {\r\n    return this.cache.formGroup.get('personalFormGroup') as FormGroup<IPersonalFormGroup>;\r\n  }\r\n  public get friendsFormArray() {\r\n    return this.formGroup.get('friends') as FormArray;\r\n  }\r\n\r\n  public genderOptions: IOption[] = [\r\n    { label: '', value: null },\r\n    { label: 'Male', value: 'M' },\r\n    { label: 'Female', value: 'F' },\r\n    { label: 'Undecided', value: 'U' }\r\n  ];\r\n  public friendOptions: IOption[] = [];\r\n  public sizeOptions: IOption[] = [\r\n    { label: 'Small', value: 'sm' },\r\n    { label: 'Medium', value: 'md' },\r\n    { label: 'Large', value: 'lg' }\r\n  ];\r\n\r\n  constructor(\r\n    public cache: ProfileCacheService,\r\n    private appDataService: AppDataService\r\n  ) {\r\n    this.appDataService.getPeople().subscribe((result) => {\r\n      this.friendOptions = result.data.map((p) => ({ label: `${p.firstName} ${p.lastName}`, value: p.id }));\r\n    });\r\n  }\r\n\r\n  public onAddFriend() {\r\n    this.friendsFormArray.push(new FormControl(null, { validators: [Validators.required] }));\r\n  }\r\n\r\n  public onDeleteFriend(index: number) {\r\n    this.friendsFormArray.removeAt(index);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[1]}