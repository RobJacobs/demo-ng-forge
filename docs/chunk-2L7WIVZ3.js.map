{
  "version": 3,
  "sources": ["src/app/shared/components/menu/menu.component.ts", "src/app/shared/components/menu/menu.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, inject, input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  ForgeButtonModule,\n  ForgeDrawerModule,\n  ForgeExpansionPanelModule,\n  ForgeIconModule,\n  ForgeListItemModule,\n  ForgeListModule,\n  ForgeMenuModule,\n  ForgeMiniDrawerModule,\n  ForgeTooltipModule\n} from '@tylertech/forge-angular';\nimport { isDefined } from '@tylertech/forge-core';\nimport { AppCacheService } from 'src/app/app-cache.service';\n\n@Component({\n  selector: 'app-menu',\n  imports: [\n    CommonModule,\n    ForgeButtonModule,\n    ForgeDrawerModule,\n    ForgeMiniDrawerModule,\n    ForgeExpansionPanelModule,\n    ForgeIconModule,\n    ForgeListItemModule,\n    ForgeListModule,\n    ForgeMenuModule,\n    ForgeTooltipModule\n  ],\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent {\n  private router = inject(Router);\n  private elementRef = inject(ElementRef);\n  public appCache = inject(AppCacheService);\n\n  public readonly options = input<any[]>();\n  public readonly open = input(true);\n  public readonly selectedValue = input<string[]>();\n\n  public onMenuItemSelected(option: string) {\n    if (isDefined(option)) {\n      this.router.navigate([option]);\n    }\n  }\n\n  public onExpand() {\n    this.appCache.menu.open = !this.appCache.menu.open;\n    if (!this.appCache.menu.open) {\n      (this.elementRef.nativeElement as HTMLElement).querySelectorAll('forge-expansion-panel').forEach((element) => (element.open = false));\n    }\n  }\n}\n", "@if (appCache.menu.open) {\n  <forge-drawer slot=\"body-left\">\n    <ng-container *ngTemplateOutlet=\"rootTemplate\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"menuExpanderTemplate\"></ng-container>\n  </forge-drawer>\n} @else {\n  <forge-mini-drawer slot=\"body-left\">\n    <ng-container *ngTemplateOutlet=\"rootTemplate\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"menuExpanderTemplate\"></ng-container>\n  </forge-mini-drawer>\n}\n\n<ng-template #rootTemplate>\n  <nav>\n    <forge-list class=\"menu\" navlist (forge-list-item-select)=\"onMenuItemSelected($any($event.detail.value))\">\n      @for (o of options(); track i; let i = $index) {\n        <ng-container *ngTemplateOutlet=\"o.options?.length ? itemExpanderTemplate : itemTemplate; context: { option: o, index: i }\"> </ng-container>\n      }\n    </forge-list>\n  </nav>\n</ng-template>\n\n<ng-template #itemTemplate let-option=\"option\">\n  <forge-list-item class=\"menu__item\" [value]=\"option.value\" [selected]=\"option.value === $any(selectedValue())[0] || option.value === selectedValue()?.join('/')\">\n    @if (open()) {\n      <forge-icon slot=\"start\" [name]=\"option.icon\"></forge-icon>\n      <button type=\"button\">\n        {{ option.label }}\n      </button>\n    } @else {\n      <button type=\"button\">\n        <forge-icon [name]=\"option.icon\"></forge-icon>\n      </button>\n      @if (option.label?.length) {\n        <forge-tooltip>{{ option.label }}</forge-tooltip>\n      }\n    }\n  </forge-list-item>\n</ng-template>\n\n<ng-template #itemExpanderTemplate let-option=\"option\" let-index=\"index\">\n  @if (open()) {\n    <forge-expansion-panel>\n      <forge-list-item class=\"menu__item menu__item--expander\" slot=\"header\">\n        @if (option.icon) {\n          <forge-icon slot=\"start\" [name]=\"option.icon\"></forge-icon>\n        }\n        <span>{{ option.label }}</span>\n        <forge-open-icon slot=\"end\"></forge-open-icon>\n      </forge-list-item>\n      <forge-list class=\"menu__item menu__item--nested\">\n        @for (o of option.options; track i; let i = $index) {\n          <ng-container *ngTemplateOutlet=\"o.options?.length ? itemExpanderTemplate : itemTemplate; context: { option: o }\"> </ng-container>\n        }\n      </forge-list>\n    </forge-expansion-panel>\n  } @else {\n    <forge-menu [options]=\"option.options\" placement=\"right-start\" (forge-menu-select)=\"onMenuItemSelected($event.detail.value)\">\n      <forge-list-item class=\"menu__item\" [value]=\"option.value\" [selected]=\"option.value === selectedValue()?.join('/')\">\n        @if (option.icon) {\n          <forge-icon slot=\"start\" [name]=\"option.icon\"></forge-icon>\n        }\n      </forge-list-item>\n      @if (option.label?.length) {\n        <forge-tooltip>{{ option.label }}</forge-tooltip>\n      }\n    </forge-menu>\n  }\n</ng-template>\n\n<ng-template #menuExpanderTemplate>\n  <forge-button slot=\"footer\" class=\"menu-expander\" [ngClass]=\"{ 'menu-expander--open': appCache.menu.open }\" aria-label=\"Toggle menu\" (click)=\"onExpand()\">\n    <forge-icon [name]=\"appCache.menu.open ? 'chevron_left' : 'chevron_right'\"></forge-icon>\n  </forge-button>\n</ng-template>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementContainer", "\u0275\u0275elementStart", "\u0275\u0275template", "MenuComponent_Conditional_0_ng_container_1_Template", "MenuComponent_Conditional_0_ng_container_2_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "rootTemplate_r1", "menuExpanderTemplate_r2", "MenuComponent_Conditional_1_ng_container_1_Template", "MenuComponent_Conditional_1_ng_container_2_Template", "MenuComponent_ng_template_2_For_3_ng_container_0_Template", "o_r5", "options", "length", "itemExpanderTemplate_r8", "itemTemplate_r7", "\u0275\u0275pureFunction2", "_c0", "\u0275$index_29_r6", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onMenuItemSelected", "detail", "value", "\u0275\u0275repeaterCreate", "MenuComponent_ng_template_2_For_3_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "\u0275\u0275element", "\u0275\u0275text", "option_r9", "icon", "\u0275\u0275textInterpolate1", "label", "\u0275\u0275textInterpolate", "\u0275\u0275conditionalCreate", "MenuComponent_ng_template_4_Conditional_2_Conditional_2_Template", "\u0275\u0275conditional", "MenuComponent_ng_template_4_Conditional_1_Template", "MenuComponent_ng_template_4_Conditional_2_Template", "selectedValue", "tmp_7_0", "join", "open", "option_r10", "MenuComponent_ng_template_6_Conditional_0_For_8_ng_container_0_Template", "o_r11", "\u0275\u0275pureFunction1", "_c1", "MenuComponent_ng_template_6_Conditional_0_Conditional_2_Template", "MenuComponent_ng_template_6_Conditional_0_For_8_Template", "_r12", "MenuComponent_ng_template_6_Conditional_1_Conditional_2_Template", "MenuComponent_ng_template_6_Conditional_1_Conditional_3_Template", "tmp_10_0", "MenuComponent_ng_template_6_Conditional_0_Template", "MenuComponent_ng_template_6_Conditional_1_Template", "_r13", "onExpand", "_c2", "appCache", "menu", "MenuComponent", "constructor", "router", "inject", "Router", "elementRef", "ElementRef", "AppCacheService", "input", "option", "isDefined", "navigate", "nativeElement", "querySelectorAll", "forEach", "element", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "MenuComponent_Conditional_0_Template", "MenuComponent_Conditional_1_Template", "MenuComponent_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "MenuComponent_ng_template_4_Template", "MenuComponent_ng_template_6_Template", "MenuComponent_ng_template_8_Template", "CommonModule", "NgClass", "NgTemplateOutlet", "ForgeButtonModule", "ButtonComponent", "ForgeDrawerModule", "DrawerComponent", "ForgeMiniDrawerModule", "MiniDrawerComponent", "ForgeExpansionPanelModule", "ExpansionPanelComponent", "OpenIconComponent", "ForgeIconModule", "IconComponent", "ForgeListItemModule", "ListItemComponent", "ForgeListModule", "ListComponent", "ForgeMenuModule", "ForgeTooltipModule", "TooltipComponent", "styles", "_MenuComponent"]
}
