{"version":3,"file":"605.a5d209e74e7c062f.js","mappings":"yMAOaA,EAAiB,MAH9B,MAGaA,EAEXC,cACEC,KAAKC,YAAcC,OAAOC,OAAOC,GAAkBC,IAAKC,KAE7CC,MADID,EAAKE,KAAKC,MAAM,KAAKJ,IAAIK,GAAK,GAAGA,EAAEC,OAAO,GAAGC,gBAAgBF,EAAEG,MAAM,MAAMC,KAAK,KACvEC,MAAOT,EAAKE,KAAMQ,YAAaV,EAAKE,KAAMS,gBAAiB,eAEnFC,IAAaC,OAAOjB,OAAOC,OAAOC,GACpC,CAACgB,SAAApB,KAAA,mBAAAqB,iBARUvB,EAAiB,EAAAsB,SAAApB,KAAA,WAAAsB,EAAAC,IAAA,OAAjBzB,EAAiB0B,QAAjB1B,EAAiB2B,UAAAC,WAFhB,gBAED5B,CAAiB,6BCAxB6B,MAAA,wCAA2BA,MAAA,OAAAC,EAAAC,wCAQ7BF,MAAA,YACEA,MAAA,mBACAA,MAAA,YAAuCA,MAAA,GAAcA,oCADzCA,MAAA,GAAAA,MAAA,OAAAG,EAAAf,OAC2BY,MAAA,GAAAA,MAAAG,EAAAf,QCX7C,MAAMgB,EAAiB,CACrB,CAAEC,KAAM,KAAMC,UCEW,MAL3B,MAKaC,EAeXnC,YACSoC,GAAAnC,KAAAmC,cAbFnC,KAAAoC,iBAA+C,CAACC,EAAgBtB,IACjEA,EACK,CAACf,KAAKmC,YAAYlC,aAAaqC,KAAKC,GAAKA,EAAExB,QAAUA,IAExDsB,EAAOG,OACFxC,KAAKmC,YAAYlC,aAAaoC,OAAOE,GAAKA,EAAEhC,MAAMkC,oBAAoBC,SAASL,EAAOI,sBAAsB5B,MAAM,EAAG,KAErHb,KAAKmC,YAAYlC,aAAaY,MAAM,EAAG,IAOhD,CAEG8B,eAAe5B,GACpBf,KAAK6B,aAAe7B,KAAKmC,YAAYlC,aAAaqC,KAAKC,GAAKA,EAAExB,QAAUA,IAAQA,MAChF6B,QAAQC,IAAI7C,KAAK6B,aACnB,CAACT,SAAApB,KAAA,mBAAAqB,iBAtBUa,GAAcP,MAAAmB,GAAA,EAAA1B,SAAApB,KAAA,UAAAsB,EAAAyB,IAAA,MAAdb,EAAcc,UAAA,gBAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,gaAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IFT3B1B,MAAA,oBAAAA,CAA8B,UACqBA,MAAA,WAAKA,UAGxDA,MAAA,UAAAA,CAAkB,0BACgCA,MAAA,qCAAA4B,GAAA,OAA6BD,EAAAX,eAAAY,EAAAC,OAA6B,GACxG7B,MAAA,sBACEA,MAAA,EAAA8B,EAAA,oBACA9B,MAAA,aACAA,MAAA,aAA4BA,MAAA,UAAIA,QAChCA,MAAA,mBACFA,UAGFA,MAAA,YACEA,MAAA,GAAA+B,EAAA,aAIF/B,iBAdoBA,MAAA,GAAAA,MAAA,SAAA2B,EAAAlB,kBAEkCT,MAAA,GAAAA,MAAA,OAAA2B,EAAAzB,cAQjBF,MAAA,GAAAA,MAAA,UAAA2B,EAAAnB,YAAAlC,wnBEN1BiC,CAAc,ODDzB,IAeWyB,EAAW,MAbxB,MAaaA,EAAWvC,SAAApB,KAAA,mBAAAqB,iBAAXsC,EAAW,EAAAvC,SAAApB,KAAA,UAAAsB,EAAAsC,IAAA,MAAXD,IAAWvC,SAAApB,KAAA,UAAAsB,EAAAuC,IAAA,UARpBC,KACAC,KAAaC,SAASjC,GAGtBgC,eAISJ,CAAW","names":["IconsCacheService","constructor","this","iconOptions","Object","values","tylerIconsModule","map","icon","label","name","split","n","charAt","toUpperCase","slice","join","value","leadingIcon","leadingIconType","IconRegistry","define","static","t","core","Yz7","factory","Éµfac","providedIn","i0","ctx_r0","selectedIcon","icon_r2","routes","path","component","IconsComponent","moduleCache","iconOptionFilter","filter","find","o","length","toLocaleLowerCase","includes","onIconSelected","console","log","i1","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","detail","IconsComponent_forge_icon_6_Template","IconsComponent_div_12_Template","IconsModule","oAB","cJS","CommonModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./src/app/icons/icons-cache.service.ts","./src/app/icons/icons.component.html","./src/app/icons/icons.module.ts","./src/app/icons/icons.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IconRegistry, IOption } from '@tylertech/forge';\r\nimport * as tylerIconsModule from '@tylertech/tyler-icons/standard';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IconsCacheService {\r\n  public iconOptions?: IOption[];\r\n  constructor() {\r\n    this.iconOptions = Object.values(tylerIconsModule).map((icon: { name: string; data: string }) => {\r\n      const name = icon.name.split('_').map(n => `${n.charAt(0).toUpperCase()}${n.slice(1)}`).join(' ');\r\n      return { label: name, value: icon.name, leadingIcon: icon.name, leadingIconType: 'component' };\r\n    });\r\n    IconRegistry.define(Object.values(tylerIconsModule));\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Icons</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <forge-autocomplete [filter]=\"iconOptionFilter\" (forge-autocomplete-change)=\"onIconSelected($event.detail)\">\r\n    <forge-text-field>\r\n      <forge-icon slot=\"leading\" [name]=\"selectedIcon\" *ngIf=\"selectedIcon\"></forge-icon>\r\n      <input id=\"autocomplete01\" type=\"text\" />\r\n      <label for=\"autocomplete01\">Icon</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <div class=\"all-icons\">\r\n    <div class=\"icon\" *ngFor=\"let icon of moduleCache.iconOptions\">\r\n      <forge-icon [name]=\"icon.value\"></forge-icon>\r\n      <div class=\"forge-typography--caption\">{{icon.value}}</div>\r\n    </div>\r\n  </div>\r\n\r\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { IconsComponent } from './icons.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: IconsComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    IconsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class IconsModule { }\r\n","import { Component } from '@angular/core';\r\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\r\nimport { IconsCacheService } from './icons-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-icons',\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.scss']\r\n})\r\nexport class IconsComponent {\r\n  public selectedIcon?: IOption;\r\n\r\n  public iconOptionFilter: AutocompleteFilterCallback = (filter: string, value: string) => {\r\n    if (value) {\r\n      return [this.moduleCache.iconOptions?.find(o => o.value === value)] as IOption[];\r\n    } else {\r\n      if (filter.length) {\r\n        return this.moduleCache.iconOptions?.filter(o => o.label.toLocaleLowerCase().includes(filter.toLocaleLowerCase())).slice(0, 100) as IOption[];\r\n      } else {\r\n        return this.moduleCache.iconOptions?.slice(0, 100) as IOption[];\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    public moduleCache: IconsCacheService\r\n  ) { }\r\n\r\n  public onIconSelected(value: string) {\r\n    this.selectedIcon = this.moduleCache.iconOptions?.find(o => o.value === value)?.value;\r\n    console.log(this.selectedIcon);\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}