{
  "version": 3,
  "sources": ["src/app/people/people.component.ts", "src/app/people/people.component.html", "src/app/people/people-cache.service.ts", "src/app/people/home/filter/filter.component.ts", "src/app/people/home/filter/filter.component.html", "src/app/people/home/home.component.ts", "src/app/people/home/home.component.html", "src/app/people/detail/detail.component.ts", "src/app/people/detail/detail.component.html", "src/app/people/routes.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-people',\n  imports: [RouterOutlet],\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent {}\n", "<router-outlet></router-outlet>\n", "import { Injectable } from '@angular/core';\r\nimport { SortDirection } from '@tylertech/forge';\r\nimport { IPerson } from 'src/app/shared/interfaces';\r\n\r\n@Injectable()\r\nexport class PeopleCacheService {\r\n  public people?: IPerson[];\r\n  public homeView = {\r\n    storageKey: 'people-home',\r\n    showFilter: false,\r\n    filter: {\r\n      sort: {\r\n        property: 'lastName',\r\n        direction: SortDirection.Ascending\r\n      },\r\n      filters: [] as any[],\r\n      skip: 0,\r\n      take: 25\r\n    }\r\n  };\r\n}\r\n", "import { Component, OnInit, Output, EventEmitter, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { IOption } from '@tylertech/forge';\r\nimport {\r\n  ForgeButtonModule,\r\n  ForgeDividerModule,\r\n  ForgeDrawerModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeSelectModule,\r\n  ForgeTextFieldModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components';\r\nimport { PeopleCacheService } from '../../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-home-filter',\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDividerModule,\r\n    ForgeDrawerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeSelectModule,\r\n    ForgeTextFieldModule,\r\n    AutocompleteRangeComponent\r\n  ],\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnInit {\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public viewCache = this.cache.homeView;\r\n  public formGroup = new FormGroup({\r\n    firstName: new FormControl(),\r\n    lastName: new FormControl(),\r\n    gender: new FormControl(),\r\n    occupation: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public genderOptions: IOption[] = [\r\n    { label: 'Male', value: 'male' },\r\n    { label: 'Female', value: 'female' },\r\n    { label: 'Undecided', value: 'undecided' }\r\n  ];\r\n\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    const options = [];\r\n    for (let index = 0; index < 20; index++) {\r\n      options.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n    return of(options);\r\n  };\r\n\r\n  public ngOnInit() {\r\n    this.loadForm(this.cache.homeView.filter.filters);\r\n  }\r\n\r\n  public onClearFilter() {\r\n    this.formGroup.reset();\r\n    this.cache.homeView.filter.filters = [];\r\n  }\r\n\r\n  public onApplyFilter() {\r\n    this.cache.homeView.filter.filters =\r\n      Object.entries(Utils.objectReduce(this.formGroup.value)).map((e) => ({\r\n        property: e[0],\r\n        value: e[1],\r\n        label: this.propertyLabel(e[0])\r\n      })) || [];\r\n    this.filter.emit();\r\n  }\r\n\r\n  public loadForm(filters: any[]) {\r\n    this.formGroup.reset();\r\n    filters.forEach((f) => {\r\n      const formControl = this.formGroup.get(f.property);\r\n      if (formControl) {\r\n        formControl.setValue(f.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private propertyLabel(property: string): string {\r\n    switch (property) {\r\n      case 'firstName':\r\n        return 'First name';\r\n      case 'lastName':\r\n        return 'Last name';\r\n      case 'gender':\r\n        return 'Gender';\r\n      case 'occupation':\r\n        return 'Occupation';\r\n      case 'facet':\r\n        return 'Facet';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n", "<forge-drawer direction=\"right\" [open]=\"viewCache.showFilter\" open=\"false\" (forge-drawer-close)=\"viewCache.showFilter = false\">\r\n  <div slot=\"header\" class=\"header\">\r\n    <span class=\"header__title forge-typography--subheading2\">Filter people</span>\r\n    <forge-icon-button class=\"app--flex-right\" aria-label=\"Close\" (click)=\"viewCache.showFilter = false\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </forge-icon-button>\r\n  </div>\r\n\r\n  <form class=\"body\" [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" (ngSubmit)=\"onApplyFilter()\">\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--first-name\" formControlName=\"firstName\" />\r\n      <label for=\"people--home--filter--first-name\" slot=\"label\">First name</label>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--last-name\" formControlName=\"lastName\" />\r\n      <label for=\"people--home--filter--last-name\" slot=\"label\">Last name</label>\r\n    </forge-text-field>\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\" multiple=\"true\"></forge-select>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"people--home--filter--occupation\" formControlName=\"occupation\" />\r\n      <label for=\"people--home--filter--occupation\" slot=\"label\">Occupation</label>\r\n    </forge-text-field>\r\n    <forge-divider></forge-divider>\r\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\r\n  </form>\r\n\r\n  <div slot=\"footer\" class=\"footer\">\r\n    <forge-button variant=\"outlined\" (click)=\"onClearFilter()\">Clear</forge-button>\r\n    <forge-button variant=\"filled\" type=\"submit\" (click)=\"onApplyFilter()\">Apply</forge-button>\r\n  </div>\r\n</forge-drawer>\r\n", "import { Component, DestroyRef, NgZone, OnDestroy, OnInit, ViewContainerRef, inject, viewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { finalize } from 'rxjs';\r\nimport { isArray } from '@tylertech/forge-core';\r\nimport { CellAlign, IColumnConfiguration, TableComponent, TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport {\r\n  ForgeBadgeModule,\r\n  ForgeButtonModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeOptionModule,\r\n  ForgePaginatorModule,\r\n  ForgeSelectDropdownModule,\r\n  ForgeSkeletonModule,\r\n  ForgeTableModule,\r\n  ForgeToolbarModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport {\r\n  TableUtils,\r\n  BaseTableComponent,\r\n  TableDetailComponent,\r\n  TableMobileComponent,\r\n  FilterChipsComponent,\r\n  RouterlinkButtonComponent\r\n} from 'src/app/shared/components';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { FilterComponent } from './filter/filter.component';\r\n\r\n@Component({\r\n  selector: 'app-people-home',\r\n  imports: [\r\n    CommonModule,\r\n    ForgeBadgeModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeOptionModule,\r\n    ForgePaginatorModule,\r\n    ForgeSelectDropdownModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule,\r\n    RouterlinkButtonComponent,\r\n    FilterChipsComponent,\r\n    FilterComponent,\r\n    TableMobileComponent\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseTableComponent implements OnInit, OnDestroy {\r\n  private destroyRef = inject(DestroyRef);\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private ngZone = inject(NgZone);\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  private readonly peopleTable = viewChild<TableComponent>('peopleTable');\r\n  private readonly peopleFilter = viewChild(FilterComponent);\r\n\r\n  public isBusy = false;\r\n  public recordset: IPerson[] = [];\r\n  public filterCache = this.cache.homeView.filter;\r\n  public viewCache = this.cache.homeView;\r\n  public optionalTableColumns = [\r\n    { property: 'image', header: 'Image', hidden: false },\r\n    { property: 'firstName', header: 'First', hidden: false },\r\n    { property: 'lastName', header: 'Last', hidden: false },\r\n    { property: 'gender', header: 'Gender', hidden: false },\r\n    { property: 'occupation', header: 'Occupation', hidden: false }\r\n  ];\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    {\r\n      property: 'image',\r\n      width: 48,\r\n      align: CellAlign.Center,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n        const imgElement = document.createElement('img') as HTMLImageElement;\r\n        imgElement.src = `mock-data/${Utils.formatNumber(data.id, '2.0-0')}-small.png`;\r\n        imgElement.setAttribute('alt', '');\r\n        imgElement.classList.add('forge-table-cell__image');\r\n        return imgElement;\r\n      }\r\n    },\r\n    {\r\n      header: 'Id',\r\n      property: 'id',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Dd');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'First',\r\n      property: 'firstName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'First Nmae');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Last',\r\n      property: 'lastName',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Last Nmae');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Gender',\r\n      property: 'gender',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Gender');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Occupation',\r\n      property: 'occupation',\r\n      sortable: true,\r\n      filter: true,\r\n      filterDelegate: () => {\r\n        const delegate = new TextFieldComponentDelegate();\r\n        delegate.inputElement.setAttribute('aria-label', 'Occupation');\r\n        return delegate;\r\n      }\r\n    },\r\n    {\r\n      header: 'Actions',\r\n      align: CellAlign.Right,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: IPerson) => {\r\n        this.ngZone.run(() => {\r\n          cellElement.appendChild(\r\n            TableUtils.createExpanderRow(\r\n              rowIndex,\r\n              this.peopleTable() as TableComponent,\r\n              this.viewContainerRef,\r\n              TableDetailComponent,\r\n              'Toggle table detail',\r\n              data\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createMenuButton(\r\n              'more_vert',\r\n              (event: Event) => {\r\n                console.log(event);\r\n              },\r\n              [\r\n                {\r\n                  value: 1,\r\n                  label: 'Edit',\r\n                  leadingIcon: 'edit',\r\n                  leadingIconType: 'component'\r\n                },\r\n                {\r\n                  value: 2,\r\n                  label: 'Add',\r\n                  leadingIcon: 'add',\r\n                  leadingIconType: 'component'\r\n                },\r\n                {\r\n                  value: 3,\r\n                  label: 'Delete',\r\n                  leadingIcon: 'delete',\r\n                  leadingIconType: 'component'\r\n                }\r\n              ],\r\n              'More options'\r\n            )\r\n          );\r\n\r\n          cellElement.appendChild(\r\n            TableUtils.createIconButton(\r\n              'keyboard_arrow_right',\r\n              (event: Event) => {\r\n                this.ngZone.run(() => {\r\n                  this.router.navigate([`people/detail/${data.id}`]);\r\n                });\r\n              },\r\n              'View person details'\r\n            )\r\n          );\r\n\r\n          // const componentRef = this.viewContainerRef.createComponent(RouterlinkButtonComponent);\r\n          // componentRef.instance.route = '/profile';\r\n          // componentRef.instance.queryParams = { id: data.id };\r\n          // componentRef.instance.icon = 'person';\r\n          // componentRef.instance.tooltip = 'Show profile';\r\n          // const linkButtonNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n          // cellElement.appendChild(linkButtonNode);\r\n        });\r\n\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n  public selectedPeople: IPerson[] = [];\r\n  public get selectedTableColumns() {\r\n    return this.optionalTableColumns.filter((c) => !c.hidden).map((c) => c.property);\r\n  }\r\n\r\n  public ngOnInit() {\r\n    const storageColumns = localStorage.getItem(this.cache.homeView.storageKey);\r\n    if (storageColumns?.length) {\r\n      const columns = JSON.parse(storageColumns) as {\r\n        property: string;\r\n        hidden: boolean;\r\n      }[];\r\n      if (isArray(columns)) {\r\n        this.optionalTableColumns.forEach((c) => {\r\n          const storedColumn = columns.find((sc) => sc.property === c.property);\r\n          if (storedColumn) {\r\n            c.hidden = storedColumn.hidden;\r\n          }\r\n        });\r\n        this.setTableColumnsVisibilty();\r\n      }\r\n    }\r\n\r\n    this.initializeSort();\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.destroy();\r\n  }\r\n\r\n  public onPeopleSelected(clearSelection = false) {\r\n    if (clearSelection) {\r\n      this.selectedPeople.length = 0;\r\n      this.peopleTable()?.clearSelections();\r\n    } else {\r\n      this.selectedPeople = this.peopleTable()?.getSelectedRows() as IPerson[];\r\n    }\r\n  }\r\n\r\n  public onTableOptionSelected(columns: string[]) {\r\n    this.optionalTableColumns = this.optionalTableColumns.map((c) => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    this.setTableColumnsVisibilty();\r\n    localStorage.setItem(\r\n      this.cache.homeView.storageKey,\r\n      JSON.stringify(\r\n        this.optionalTableColumns.map((c) => ({\r\n          property: c.property,\r\n          hidden: c.hidden\r\n        }))\r\n      )\r\n    );\r\n  }\r\n\r\n  public onTableShowFilter() {\r\n    this.viewCache.showFilter = !this.viewCache.showFilter;\r\n    if (this.viewCache.showFilter) {\r\n      this.initializeFilter();\r\n    }\r\n  }\r\n\r\n  public onApplyFilter(reloadFilter: boolean) {\r\n    this.getRecords();\r\n    if (reloadFilter) {\r\n      (this.peopleFilter() as FilterComponent).loadForm(this.filterCache.filters);\r\n    }\r\n  }\r\n\r\n  protected getRecords() {\r\n    this.onPeopleSelected(true);\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort,\r\n        filters: this.filterCache.filters,\r\n        skip: this.filterCache.skip,\r\n        take: this.filterCache.take\r\n      })\r\n      .pipe(\r\n        takeUntilDestroyed(this.destroyRef),\r\n        finalize(() => (this.isBusy = false))\r\n      )\r\n      .subscribe({\r\n        next: (result) => {\r\n          this.recordset = result.data;\r\n          this.recordCount = result.count;\r\n        }\r\n      });\r\n  }\r\n\r\n  private setTableColumnsVisibilty() {\r\n    this.tableColumns.forEach((tc) => {\r\n      const optionalTableColumn = this.optionalTableColumns.find((otc) => otc.property === tc.property);\r\n      if (optionalTableColumn && tc.hidden !== optionalTableColumn.hidden) {\r\n        tc.hidden = optionalTableColumn.hidden;\r\n        const colIndex = this.getColumnIndex(tc.property as string);\r\n        if (tc.hidden) {\r\n          this.peopleTable()?.hideColumn(colIndex);\r\n        } else {\r\n          this.peopleTable()?.showColumn(colIndex);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">People</h2>\r\n  <app-routerlink-button slot=\"end\" route=\"/profile\" icon=\"person\" label=\"View profile\"></app-routerlink-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    @if (appCache.layoutMode === 'sm') {\r\n      @if (!isBusy) {\r\n        <app-table-mobile [data]=\"recordset\" [columnConfigurations]=\"tableColumns\"></app-table-mobile>\r\n      }\r\n    } @else {\r\n      <div [ngClass]=\"{ 'app--hidden': isBusy }\" class=\"table\">\r\n        <div class=\"table__header\" [ngClass]=\"{ 'table__header-action': selectedPeople.length }\">\r\n          @if (!selectedPeople.length) {\r\n            <app-filter-chips [filters]=\"filterCache.filters\" (filter)=\"onApplyFilter(true)\"></app-filter-chips>\r\n            <forge-button class=\"app--flex-right\" variant=\"outlined\" (click)=\"onTableShowFilter()\">\r\n              @if (filterCache.filters.length) {\r\n                <forge-badge class=\"table__header__filter-count\" theme=\"info-primary\">{{ filterCache.filters.length }}</forge-badge>\r\n              } @else {\r\n                <forge-icon name=\"filter_list\"></forge-icon>\r\n              }\r\n              <span>Filter</span>\r\n            </forge-button>\r\n            <forge-icon-button id=\"people--home--column-select\" class=\"table__header__columns\" aria-label=\"Choose table columns\">\r\n              <forge-icon name=\"view_column\"></forge-icon>\r\n            </forge-icon-button>\r\n            <forge-select-dropdown target=\"#people--home--column-select\" multiple [value]=\"selectedTableColumns\" (change)=\"onTableOptionSelected($event.detail)\">\r\n              @for (column of optionalTableColumns; track i; let i = $index) {\r\n                <forge-option [value]=\"column.property\">\r\n                  {{ column.header }}\r\n                </forge-option>\r\n              }\r\n            </forge-select-dropdown>\r\n          } @else {\r\n            <span>{{ selectedPeople.length }} people selected</span>\r\n          }\r\n        </div>\r\n\r\n        <forge-table\r\n          #peopleTable\r\n          class=\"table__body\"\r\n          [ngClass]=\"{ 'app--hidden': !recordCount }\"\r\n          [data]=\"recordset\"\r\n          [columnConfigurations]=\"tableColumns\"\r\n          (forge-table-sort)=\"onTableSort($event)\"\r\n          select-key=\"id\"\r\n          (forge-table-select)=\"onPeopleSelected()\"\r\n          (forge-table-select-all)=\"onPeopleSelected()\"\r\n          fixed-headers=\"true\"\r\n          [filter]=\"viewCache.showFilter\"\r\n          (forge-table-filter)=\"onTableFilter($event)\"\r\n        ></forge-table>\r\n      </div>\r\n    }\r\n\r\n    @if (isBusy) {\r\n      <div class=\"busy-state\">\r\n        <forge-skeleton list-item></forge-skeleton>\r\n        <forge-skeleton list-item></forge-skeleton>\r\n        <forge-skeleton list-item></forge-skeleton>\r\n      </div>\r\n    } @else {\r\n      @if (recordCount) {\r\n        <div class=\"table__footer\">\r\n          <forge-paginator class=\"app--flex-right\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event)\"></forge-paginator>\r\n        </div>\r\n      } @else {\r\n        <div class=\"empty-state\">\r\n          <img src=\"https://cdn.forge.tylertech.com/v1/images/spot-hero/general-empty-state-spot-hero.svg\" alt />\r\n          <div>No people found.</div>\r\n        </div>\r\n      }\r\n    }\r\n  </div>\r\n\r\n  <app-people-home-filter (filter)=\"onApplyFilter(false)\"></app-people-home-filter>\r\n</div>\r\n", "import { Component, DestroyRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-detail',\r\n  imports: [CommonModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule],\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent {\r\n  private destroyRef = inject(DestroyRef);\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public appCache = inject(AppCacheService);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  public person?: IPerson;\r\n  public imageUrl?: string;\r\n  public index = 0;\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  constructor() {\r\n    const id = this.route.snapshot.params['id'];\r\n    if (isDefined(id)) {\r\n      this.appDataService\r\n        .getPerson(id)\r\n        .pipe(takeUntilDestroyed(this.destroyRef))\r\n        .subscribe({\r\n          next: (r) => {\r\n            this.person = r;\r\n            this.imageUrl = `mock-data/${Utils.formatNumber(this.person?.id as number, '2.0-0')}.png`;\r\n          }\r\n        });\r\n    } else {\r\n      this.router.navigate(['people/home']);\r\n    }\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    switch (route) {\r\n      case 'back':\r\n        this.router.navigate(['people/home']);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onViewWiki() {\r\n    window.open(this.person?.url, '_blank');\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\n  <div slot=\"start\">\n    <forge-icon-button (click)=\"onNavigate('back')\" aria-label=\"Go back\">\n      <forge-icon name=\"arrow_back\"></forge-icon>\n    </forge-icon-button>\n    <h2 class=\"forge-typography--subheading4\">\n      {{ person?.firstName + ' ' + person?.lastName }}\n    </h2>\n  </div>\n  <div slot=\"end\">\n    <forge-button variant=\"outlined\" (click)=\"onViewWiki()\" [disabled]=\"!person?.url?.length\">View wiki</forge-button>\n  </div>\n</forge-toolbar>\n\n<div class=\"body\">\n  <div class=\"body__left\">\n    <forge-label-value>\n      <span slot=\"label\">Gender</span>\n      <span slot=\"value\">{{ person?.gender }}</span>\n    </forge-label-value>\n    <forge-label-value>\n      <span slot=\"label\">Occupation</span>\n      <span slot=\"value\">{{ person?.occupation }}</span>\n    </forge-label-value>\n    <forge-label-value>\n      <span slot=\"label\">Quote</span>\n      <span slot=\"value\">{{ person?.quote }}</span>\n    </forge-label-value>\n  </div>\n\n  <div class=\"body__right\">\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt />\n  </div>\n</div>\n", "import { Routes } from '@angular/router';\r\nimport { PeopleComponent } from './people.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { PeopleCacheService } from './people-cache.service';\r\n\r\nexport const PEOPLE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: PeopleComponent,\r\n    providers: [PeopleCacheService],\r\n    children: [\r\n      { path: 'home', component: HomeComponent },\r\n      { path: 'detail', component: DetailComponent },\r\n      { path: 'detail/:id', component: DetailComponent },\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n    ]\r\n  },\r\n  { path: '**', redirectTo: 'home', pathMatch: 'full' }\r\n];\r\n"],
  "mappings": "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",
  "names": ["PeopleComponent", "selectors", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "styles", "_PeopleComponent", "PeopleCacheService", "constructor", "homeView", "storageKey", "showFilter", "filter", "sort", "property", "direction", "SortDirection", "Ascending", "filters", "skip", "take", "factory", "\u0275fac", "_PeopleCacheService", "FilterComponent", "constructor", "appCache", "inject", "AppCacheService", "cache", "PeopleCacheService", "filter", "EventEmitter", "viewCache", "homeView", "formGroup", "FormGroup", "firstName", "FormControl", "lastName", "gender", "occupation", "facet", "genderOptions", "label", "value", "facetFilter", "options", "index", "push", "of", "ngOnInit", "loadForm", "filters", "onClearFilter", "reset", "onApplyFilter", "Object", "entries", "Utils", "objectReduce", "map", "e", "property", "propertyLabel", "emit", "forEach", "f", "formControl", "get", "setValue", "selectors", "outputs", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "showFilter", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275advance", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "ForgeButtonModule", "ButtonComponent", "ForgeDividerModule", "DividerComponent", "ForgeDrawerModule", "DrawerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeSelectModule", "SelectValueAccessor", "SelectComponent", "ForgeTextFieldModule", "TextFieldComponent", "AutocompleteRangeComponent", "styles", "_FilterComponent", "\u0275\u0275element", "\u0275\u0275property", "ctx_r0", "recordset", "tableColumns", "\u0275\u0275conditionalCreate", "HomeComponent_Conditional_6_Conditional_0_Template", "\u0275\u0275conditional", "isBusy", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "filterCache", "filters", "length", "column_r4", "property", "\u0275\u0275textInterpolate1", "header", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onApplyFilter", "onTableShowFilter", "HomeComponent_Conditional_7_Conditional_2_Conditional_2_Template", "HomeComponent_Conditional_7_Conditional_2_Conditional_3_Template", "$event", "onTableOptionSelected", "detail", "\u0275\u0275repeaterCreate", "HomeComponent_Conditional_7_Conditional_2_For_10_Template", "\u0275\u0275repeaterTrackByIndex", "selectedTableColumns", "\u0275\u0275repeater", "optionalTableColumns", "selectedPeople", "HomeComponent_Conditional_7_Conditional_2_Template", "HomeComponent_Conditional_7_Conditional_3_Template", "_r2", "onTableSort", "onPeopleSelected", "onTableFilter", "\u0275\u0275pureFunction1", "_c1", "_c2", "recordCount", "viewCache", "showFilter", "_r5", "onTablePaginatorChange", "skip", "take", "HomeComponent_Conditional_9_Conditional_0_Template", "HomeComponent_Conditional_9_Conditional_1_Template", "HomeComponent", "BaseTableComponent", "constructor", "destroyRef", "inject", "DestroyRef", "router", "Router", "appDataService", "AppDataService", "viewContainerRef", "ViewContainerRef", "ngZone", "NgZone", "appCache", "AppCacheService", "cache", "PeopleCacheService", "peopleTable", "viewChild", "peopleFilter", "FilterComponent", "homeView", "filter", "hidden", "width", "align", "CellAlign", "Center", "template", "rowIndex", "cellElement", "data", "imgElement", "document", "createElement", "src", "Utils", "formatNumber", "id", "setAttribute", "classList", "add", "sortable", "filterDelegate", "delegate", "TextFieldComponentDelegate", "inputElement", "Right", "run", "appendChild", "TableUtils", "createExpanderRow", "TableDetailComponent", "createMenuButton", "event", "console", "log", "value", "label", "leadingIcon", "leadingIconType", "createIconButton", "navigate", "c", "map", "ngOnInit", "storageColumns", "localStorage", "getItem", "storageKey", "columns", "JSON", "parse", "isArray", "forEach", "storedColumn", "find", "sc", "setTableColumnsVisibilty", "initializeSort", "initializeFilter", "getRecords", "ngOnDestroy", "destroy", "clearSelection", "clearSelections", "getSelectedRows", "includes", "setItem", "stringify", "reloadFilter", "loadForm", "getPeople", "sort", "pipe", "takeUntilDestroyed", "finalize", "subscribe", "next", "result", "count", "tc", "optionalTableColumn", "otc", "colIndex", "getColumnIndex", "hideColumn", "showColumn", "__ngFactoryType__", "selectors", "viewQuery", "rf", "ctx", "HomeComponent_Conditional_6_Template", "HomeComponent_Conditional_7_Template", "HomeComponent_Conditional_8_Template", "HomeComponent_Conditional_9_Template", "layoutMode", "CommonModule", "NgClass", "ForgeBadgeModule", "BadgeComponent", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeOptionModule", "OptionComponent", "ForgePaginatorModule", "PaginatorComponent", "ForgeSelectDropdownModule", "SelectDropdownComponent", "ForgeSkeletonModule", "SkeletonComponent", "ForgeTableModule", "TableComponent", "ForgeToolbarModule", "ToolbarComponent", "RouterlinkButtonComponent", "FilterChipsComponent", "TableMobileComponent", "styles", "_HomeComponent", "DetailComponent", "constructor", "destroyRef", "inject", "DestroyRef", "route", "ActivatedRoute", "router", "Router", "appCache", "AppCacheService", "appDataService", "AppDataService", "cache", "PeopleCacheService", "index", "noImageUrl", "id", "snapshot", "params", "isDefined", "getPerson", "pipe", "takeUntilDestroyed", "subscribe", "next", "r", "person", "imageUrl", "Utils", "formatNumber", "navigate", "onNavigate", "onViewWiki", "window", "open", "url", "onImageError", "event", "targetElement", "target", "src", "includes", "onerror", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "$event", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "firstName", "lastName", "\u0275\u0275property", "length", "\u0275\u0275textInterpolate", "gender", "occupation", "quote", "\u0275\u0275sanitizeUrl", "CommonModule", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeLabelValueModule", "LabelValueComponent", "ForgeToolbarModule", "ToolbarComponent", "styles", "_DetailComponent", "PEOPLE_ROUTES", "path", "component", "PeopleComponent", "providers", "PeopleCacheService", "children", "HomeComponent", "DetailComponent", "redirectTo", "pathMatch"]
}
