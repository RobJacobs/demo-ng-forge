{"version":3,"file":"common.4a68fb280fe7c3c9.js","mappings":"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","names":["i0","ctx_r2","rangeMessage","option_r5","_r4","$implicit","onDeleteRangeOption","label","$event","_r2","rangeMin","rangeMax","onAddRangeOption","AutocompleteRangeComponent_ng_template_8_Conditional_13_Template","AutocompleteRangeComponent_ng_template_8_For_16_Template","rangeOptions","AutocompleteRangeComponent","constructor","this","ngZone","inject","NgZone","viewContainerRef","ViewContainerRef","valueChange","EventEmitter","maxlength","elementId","Utils","uniqueId","filter","onChange","fn","onTouched","onFilter","Promise","resolve","reject","optionFilter","subscribe","next","response","options","forEach","o","isArray","value","push","error","optionHeaderBuilder","run","undefined","rangeRef","rootNodes","selectedTextBuilder","selectedOptions","autocompleteRef","nativeElement","open","length","optionCount","rangeOptionCount","autocompleteBlur","values","writeValue","rangeOption","isDefined","window","requestAnimationFrame","ngAfterViewInit","createEmbeddedView","rangeTemplateRef","remove","ngOnDestroy","destroy","registerOnChange","registerOnTouched","onAutocompleteChange","emitChangeEvents","isString","trim","comp","comparator","findIndex","filterInputRef","option","focus","optionIndex","splice","map","emit","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","VBU","selectors","viewQuery","rf","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","_r1","AutocompleteRangeComponent_ng_template_8_Template","CommonModule","FormsModule","i1","ForgeAutocompleteModule","i2","ForgeDividerModule","ForgeIconButtonModule","ForgeIconModule","ForgeListItemModule","ForgeListModule","ForgeTextFieldModule","styles","TableDetailComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","rowIndex","data","standalone","features","CardComponent","CallbackPipe","transform","callback","args","EJ8","pure","TextFieldComponentDelegate","FormFieldComponentDelegate","config","super","_build","textField","document","createElement","TEXT_FIELD_CONSTANTS","elementName","_inputElement","_buildInputElement","append","_configure","_config","id","_element","_createLabel","startElement","slot","leadingElement","endElement","trailingElement","accessoryElement","disabled","invalid","inputElement","labelElement","_labelElement","listener","addEventListener","evt","target","onFocus","onBlur","setLabel","text","textContent","setSupportText","_supportTextElement","setHelperText","setSupportTextEnd","_supportTextEndElement","floatLabel","htmlFor","type","placeholder","lastValueFrom","source","hasConfig","_value","_hasValue","complete","defaultValue","EmptyError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/autocomplete-range/autocomplete-range.component.html","./src/app/shared/components/autocomplete-range/autocomplete-range.component.ts","./src/app/shared/components/table-detail/table-detail.component.ts","./src/app/shared/components/table-detail/table-detail.component.html","./src/app/shared/pipes/callback.pipe.ts","./node_modules/@tylertech/forge/esm/text-field/text-field-component-delegate.js","./node_modules/rxjs/dist/esm/internal/lastValueFrom.js"],"sourcesContent":["<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\r\n  <forge-text-field>\r\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\">\r\n    <label [attr.for]=\"elementId\">{{label}}</label>\r\n    <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n  </forge-text-field>\r\n</forge-autocomplete>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"range\" tabindex=\"-1\">\r\n    <div class=\"range__input\">\r\n      <span class=\"forge-typography--subheading2 range__input__header\">Enter a search range</span>\r\n      <div class=\"range__input__body\">\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMin\">\r\n        </forge-text-field>\r\n        <span>to</span>\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMax\">\r\n        </forge-text-field>\r\n        <forge-icon-button aria-label=\"Add search range\" (click)=\"onAddRangeOption()\">\r\n          <forge-icon name=\"add\"></forge-icon>\r\n        </forge-icon-button>\r\n      </div>\r\n      @if (rangeMessage) {\r\n      <div class=\"forge-typography--label1\">{{rangeMessage}}</div>\r\n      }\r\n    </div>\r\n    <forge-list class=\"range__options\">\r\n      @for (option of rangeOptions; track i; let i = $index) {\r\n      <forge-list-item>\r\n        <forge-icon-button slot=\"start\" aria-label=\"Delete search range\" (click)=\"onDeleteRangeOption(option)\">\r\n          <forge-icon name=\"delete\"></forge-icon>\r\n        </forge-icon-button>\r\n        {{option.label}}\r\n      </forge-list-item>\r\n      }\r\n    </forge-list>\r\n    <forge-divider></forge-divider>\r\n  </div>\r\n</ng-template>","import {\r\n  AfterViewInit,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  NgZone,\r\n  inject\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  AutocompleteFilterCallback,\r\n  IOption,\r\n  IAutocompleteOptionGroup,\r\n  AutocompleteSelectedTextBuilder,\r\n  AutocompleteComponent\r\n} from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\nimport { ForgeAutocompleteModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\n\r\nimport { Utils } from 'src/utils';\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeListItemModule,\r\n    ForgeListModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteRangeComponent), multi: true }]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  private ngZone = inject(NgZone);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur() {\r\n    this.onTouched();\r\n  }\r\n  @ViewChild('rangeAutocomplete') autocompleteRef?: ElementRef;\r\n  @ViewChild('rangeTemplate') rangeTemplateRef?: TemplateRef<any>;\r\n  @ViewChild('filterInput') filterInputRef?: ElementRef;\r\n\r\n  @Input()\r\n  public optionFilter?: (filter: string) => Observable<IOption[]>;\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  @Input()\r\n  public label?: string;\r\n  @Input()\r\n  public maxlength: number | null = null;\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  public onChange = (fn: any) => { };\r\n  public onTouched = () => { };\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      if (this.optionFilter) {\r\n        this.optionFilter(this.filter).subscribe(\r\n          {\r\n            next: (response) => {\r\n              const options: IOption[] = [];\r\n              response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n              resolve(options);\r\n            },\r\n            error: () => reject()\r\n          }\r\n        );\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  public writeValue(values: Array<IOption> | Array<string | string[] | number>) {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({ label: `${rangeOption[0]} to ${rangeOption[1]}`, value: rangeOption });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  public registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange() {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  public onAddRangeOption() {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label =\r\n      this.rangeMin?.length && this.rangeMax?.length\r\n        ? `${this.rangeMin} to ${this.rangeMax}`\r\n        : this.rangeMin?.length\r\n          ? `Greater than ${this.rangeMin}`\r\n          : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption) {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents() {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { CardComponent } from 'src/app/shared/components/card/card.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-table-detail',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    CardComponent\r\n  ],\r\n  templateUrl: './table-detail.component.html',\r\n  styleUrls: ['./table-detail.component.scss']\r\n})\r\nexport class TableDetailComponent {\r\n  @Input()\r\n  public rowIndex?: number;\r\n\r\n  @Input()\r\n  public data?: any;\r\n}\r\n","<app-card>\r\n  <div app-card-header slot=\"start\">\r\n    <span>Table row detail {{rowIndex}}</span>\r\n  </div>\r\n\r\n  <p>{{ data | json}}</p>\r\n</app-card>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'appCallback',\r\n  standalone: true\r\n})\r\nexport class CallbackPipe implements PipeTransform {\r\n  transform(value: any, callback: (value: any, ...args: any[]) => boolean, ...args: any[]): any {\r\n    return callback(value, ...args);\r\n  }\r\n}","/**\n * @license\n * Copyright Tyler Technologies, Inc. \n * License: Apache-2.0\n */\nimport { FormFieldComponentDelegate } from '../core/delegates/form-field-component-delegate';\nimport { TEXT_FIELD_CONSTANTS } from './text-field-constants';\nexport class TextFieldComponentDelegate extends FormFieldComponentDelegate {\n    constructor(config) {\n        super(config);\n    }\n    _build() {\n        const textField = document.createElement(TEXT_FIELD_CONSTANTS.elementName);\n        this._inputElement = this._buildInputElement(textField);\n        textField.append(this._inputElement);\n        return textField;\n    }\n    _configure() {\n        if (this._config.options?.id) {\n            this._element.id = this._config.options.id;\n        }\n        if (this._config.options?.label) {\n            this._createLabel(this._config.options.label);\n        }\n        if (this._config.options?.startElement) {\n            this._config.options.startElement.slot = 'start';\n            this._element.append(this._config.options.startElement);\n        }\n        if (this._config.options?.leadingElement) {\n            this._config.options.leadingElement.slot = 'start';\n            this._element.append(this._config.options.leadingElement);\n        }\n        if (this._config.options?.endElement) {\n            this._config.options.endElement.slot = 'end';\n            this._element.append(this._config.options.endElement);\n        }\n        if (this._config.options?.trailingElement) {\n            this._config.options.trailingElement.slot = 'end';\n            this._element.append(this._config.options.trailingElement);\n        }\n        if (this._config.options?.accessoryElement) {\n            this._config.options.accessoryElement.slot = 'accessory';\n            this._element.append(this._config.options.accessoryElement);\n        }\n    }\n    get value() {\n        return this._inputElement.value;\n    }\n    set value(value) {\n        this._inputElement.value = value;\n    }\n    get disabled() {\n        return this._inputElement.disabled;\n    }\n    set disabled(value) {\n        this._inputElement.disabled = value;\n    }\n    get invalid() {\n        return this._element.invalid;\n    }\n    set invalid(value) {\n        this._element.invalid = value;\n    }\n    get inputElement() {\n        return this._inputElement;\n    }\n    get labelElement() {\n        return this._labelElement;\n    }\n    onChange(listener) {\n        this._inputElement.addEventListener('input', evt => listener(evt.target.value));\n    }\n    onFocus(listener) {\n        this._inputElement.addEventListener('focus', evt => listener(evt));\n    }\n    onBlur(listener) {\n        this._inputElement.addEventListener('blur', evt => listener(evt));\n    }\n    setLabel(text) {\n        if (text) {\n            if (this._labelElement) {\n                this._labelElement.textContent = text;\n            }\n            else {\n                this._createLabel(text);\n            }\n            return;\n        }\n        this._labelElement?.remove();\n        this._labelElement = undefined;\n    }\n    setSupportText(text) {\n        if (text) {\n            if (!this._supportTextElement) {\n                this._supportTextElement = document.createElement('span');\n                this._supportTextElement.slot = 'support-text';\n                this._element.append(this._supportTextElement);\n            }\n            this._supportTextElement.textContent = text;\n            return;\n        }\n        this._supportTextElement?.remove();\n        this._supportTextElement = undefined;\n    }\n    // Deprecated alias for `setSupportText`\n    setHelperText(text) {\n        this.setSupportText(text);\n    }\n    setSupportTextEnd(text) {\n        if (text) {\n            if (!this._supportTextEndElement) {\n                this._supportTextEndElement = document.createElement('span');\n                this._supportTextEndElement.slot = 'support-text-end';\n                this._element.append(this._supportTextEndElement);\n            }\n            this._supportTextEndElement.textContent = text;\n            return;\n        }\n        this._supportTextEndElement?.remove();\n        this._supportTextEndElement = undefined;\n    }\n    floatLabel(value) {\n        this._element.floatLabel = value;\n    }\n    _createLabel(text) {\n        this._labelElement = document.createElement('label');\n        this._labelElement.textContent = text;\n        this._labelElement.slot = 'label';\n        if (this._config.options?.id) {\n            this._labelElement.htmlFor = this._config.options.id;\n        }\n        this._element.append(this._labelElement);\n    }\n    _buildInputElement(textField) {\n        const inputElement = document.createElement('input');\n        inputElement.type = this._config.options?.type ?? 'text';\n        if (this._config.options?.value !== undefined) {\n            inputElement.value = this._config.options.value;\n        }\n        if (this._config.options?.id) {\n            inputElement.id = this._config.options.id;\n        }\n        if (this._config.options?.placeholder !== undefined) {\n            inputElement.placeholder = this._config.options.placeholder;\n        }\n        textField.append(inputElement);\n        return inputElement;\n    }\n}\n","import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        let _hasValue = false;\n        let _value;\n        source.subscribe({\n            next: (value) => {\n                _value = value;\n                _hasValue = true;\n            },\n            error: reject,\n            complete: () => {\n                if (_hasValue) {\n                    resolve(_value);\n                }\n                else if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n    });\n}\n"],"x_google_ignoreList":[5,6]}