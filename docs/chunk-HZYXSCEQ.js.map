{"version":3,"sources":["node_modules/ngx-quill/fesm2022/ngx-quill-config.mjs","node_modules/ngx-quill/fesm2022/ngx-quill.mjs","src/app/text-editor/text-editor.component.ts","src/app/text-editor/text-editor.component.html"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, makeEnvironmentProviders } from '@angular/core';\nconst defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'],\n  // toggled buttons\n  ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }],\n  // custom button values\n  [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }],\n  // superscript/subscript\n  [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }],\n  // outdent/indent\n  [{\n    direction: 'rtl'\n  }],\n  // text direction\n  [{\n    size: ['small', false, 'large', 'huge']\n  }],\n  // custom dropdown\n  [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }],\n  // dropdown with defaults from theme\n  [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'],\n  // remove formatting button\n  ['link', 'image', 'video'],\n  // link and image, video\n  ['table']]\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config', {\n  providedIn: 'root',\n  factory: () => ({\n    modules: defaultModules\n  })\n});\n\n/**\n * This `NgModule` provides a global Quill config on the root level, e.g., in `AppModule`.\n * But this eliminates the need to import the entire `ngx-quill` library into the main bundle.\n * The `quill-editor` itself may be rendered in any lazy-loaded module, but importing `QuillModule`\n * into the `AppModule` will bundle the `ngx-quill` into the vendor.\n */\nlet QuillConfigModule = /*#__PURE__*/(() => {\n  class QuillConfigModule {\n    static forRoot(config) {\n      return {\n        ngModule: QuillConfigModule,\n        providers: [{\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config\n        }]\n      };\n    }\n    static {\n      this.ɵfac = function QuillConfigModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillConfigModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: QuillConfigModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return QuillConfigModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provides Quill configuration at the root level:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideQuillConfig(...)]\n * });\n * ```\n */\nconst provideQuillConfig = config => makeEnvironmentProviders([{\n  provide: QUILL_CONFIG_TOKEN,\n  useValue: config\n}]);\n\n/*\n * Public API Surface of ngx-quill/config\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QUILL_CONFIG_TOKEN, QuillConfigModule, defaultModules, provideQuillConfig };\n","import { defaultModules, QUILL_CONFIG_TOKEN } from 'ngx-quill/config';\nconst _c0 = [[[\"\", \"above-quill-editor-toolbar\", \"\"]], [[\"\", \"quill-editor-toolbar\", \"\"]], [[\"\", \"below-quill-editor-toolbar\", \"\"]]];\nconst _c1 = [\"[above-quill-editor-toolbar]\", \"[quill-editor-toolbar]\", \"[below-quill-editor-toolbar]\"];\nfunction QuillEditorComponent_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 0);\n  }\n}\nfunction QuillEditorComponent_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 0);\n  }\n}\nexport * from 'ngx-quill/config';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, input, EventEmitter, signal, inject, ElementRef, ChangeDetectorRef, PLATFORM_ID, Renderer2, NgZone, DestroyRef, SecurityContext, Directive, Output, forwardRef, Component, ViewEncapsulation, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformServer, NgClass } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Observable, defer, isObservable, firstValueFrom, Subscription, fromEvent } from 'rxjs';\nimport { shareReplay, mergeMap, debounceTime } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst getFormat = (format, configFormat) => {\n  const passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\nconst raf$ = () => {\n  return new Observable(subscriber => {\n    const rafId = requestAnimationFrame(() => {\n      subscriber.next();\n      subscriber.complete();\n    });\n    return () => cancelAnimationFrame(rafId);\n  });\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nlet QuillService = /*#__PURE__*/(() => {\n  class QuillService {\n    constructor(injector, config) {\n      this.config = config;\n      this.quill$ = defer(async () => {\n        if (!this.Quill) {\n          // Quill adds events listeners on import https://github.com/quilljs/quill/blob/develop/core/emitter.js#L8\n          // We'd want to use the unpatched `addEventListener` method to have all event callbacks to be run outside of zone.\n          // We don't know yet if the `zone.js` is used or not, just save the value to restore it back further.\n          const maybePatchedAddEventListener = this.document.addEventListener;\n          // There're 2 types of Angular applications:\n          // 1) zone-full (by default)\n          // 2) zone-less\n          // The developer can avoid importing the `zone.js` package and tells Angular that he/she is responsible for running\n          // the change detection by himself. This is done by \"nooping\" the zone through `CompilerOptions` when bootstrapping\n          // the root module. We fallback to `document.addEventListener` if `__zone_symbol__addEventListener` is not defined,\n          // this means the `zone.js` is not imported.\n          // The `__zone_symbol__addEventListener` is basically a native DOM API, which is not patched by zone.js, thus not even going\n          // through the `zone.js` task lifecycle. You can also access the native DOM API as follows `target[Zone.__symbol__('methodName')]`.\n          this.document.addEventListener =\n          // eslint-disable-next-line @typescript-eslint/dot-notation\n          this.document['__zone_symbol__addEventListener'] || this.document.addEventListener;\n          const quillImport = await import('quill');\n          this.document.addEventListener = maybePatchedAddEventListener;\n          this.Quill =\n          // seems like esmodules have nested \"default\"\n          quillImport.default?.default ?? quillImport.default ?? quillImport;\n        }\n        // Only register custom options and modules once\n        this.config.customOptions?.forEach(customOption => {\n          const newCustomOption = this.Quill.import(customOption.import);\n          newCustomOption.whitelist = customOption.whitelist;\n          this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);\n        });\n        return await this.registerCustomModules(this.Quill, this.config.customModules, this.config.suppressGlobalRegisterWarning);\n      }).pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      this.document = injector.get(DOCUMENT);\n      if (!this.config) {\n        this.config = {\n          modules: defaultModules\n        };\n      }\n    }\n    getQuill() {\n      return this.quill$;\n    }\n    /**\n     * Marked as internal so it won't be available for `ngx-quill` consumers, this is only\n     * internal method to be used within the library.\n     *\n     * @internal\n     */\n    async registerCustomModules(Quill, customModules, suppressGlobalRegisterWarning) {\n      if (Array.isArray(customModules)) {\n        // eslint-disable-next-line prefer-const\n        for (let {\n          implementation,\n          path\n        } of customModules) {\n          // The `implementation` might be an observable that resolves the actual implementation,\n          // e.g. if it should be lazy loaded.\n          if (isObservable(implementation)) {\n            implementation = await firstValueFrom(implementation);\n          }\n          Quill.register(path, implementation, suppressGlobalRegisterWarning);\n        }\n      }\n      // Return `Quill` constructor so we'll be able to re-use its return value except of using\n      // `map` operators, etc.\n      return Quill;\n    }\n    static {\n      this.ɵfac = function QuillService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(QUILL_CONFIG_TOKEN, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: QuillService,\n        factory: QuillService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return QuillService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nlet QuillEditorBase = /*#__PURE__*/(() => {\n  class QuillEditorBase {\n    constructor() {\n      this.format = input(undefined);\n      this.theme = input(undefined);\n      this.modules = input(undefined);\n      this.debug = input(false);\n      this.readOnly = input(false);\n      this.placeholder = input(undefined);\n      this.maxLength = input(undefined);\n      this.minLength = input(undefined);\n      this.required = input(false);\n      this.formats = input(undefined);\n      this.customToolbarPosition = input('top');\n      this.sanitize = input(undefined);\n      this.beforeRender = input(undefined);\n      this.styles = input(null);\n      this.registry = input(undefined);\n      this.bounds = input(undefined);\n      this.customOptions = input([]);\n      this.customModules = input([]);\n      this.trackChanges = input(undefined);\n      this.classes = input(undefined);\n      this.trimOnValidation = input(false);\n      this.linkPlaceholder = input(undefined);\n      this.compareValues = input(false);\n      this.filterNull = input(false);\n      this.debounceTime = input(undefined);\n      /*\n      https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n             provide default empty value\n      by default null\n             e.g. defaultEmptyValue=\"\" - empty string\n             <quill-editor\n        defaultEmptyValue=\"\"\n        formControlName=\"message\"\n      ></quill-editor>\n      */\n      this.defaultEmptyValue = input(null);\n      this.onEditorCreated = new EventEmitter();\n      this.onEditorChanged = new EventEmitter();\n      this.onContentChanged = new EventEmitter();\n      this.onSelectionChanged = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onNativeFocus = new EventEmitter();\n      this.onNativeBlur = new EventEmitter();\n      this.disabled = false; // used to store initial value before ViewInit\n      this.toolbarPosition = signal('top');\n      this.subscription = null;\n      this.quillSubscription = null;\n      this.elementRef = inject(ElementRef);\n      this.document = inject(DOCUMENT);\n      this.cd = inject(ChangeDetectorRef);\n      this.domSanitizer = inject(DomSanitizer);\n      this.platformId = inject(PLATFORM_ID);\n      this.renderer = inject(Renderer2);\n      this.zone = inject(NgZone);\n      this.service = inject(QuillService);\n      this.destroyRef = inject(DestroyRef);\n      this.valueGetter = input(quillEditor => {\n        let html = quillEditor.getSemanticHTML();\n        if (this.isEmptyValue(html)) {\n          html = this.defaultEmptyValue();\n        }\n        let modelValue = html;\n        const format = getFormat(this.format(), this.service.config.format);\n        if (format === 'text') {\n          modelValue = quillEditor.getText();\n        } else if (format === 'object') {\n          modelValue = quillEditor.getContents();\n        } else if (format === 'json') {\n          try {\n            modelValue = JSON.stringify(quillEditor.getContents());\n          } catch (e) {\n            modelValue = quillEditor.getText();\n          }\n        }\n        return modelValue;\n      });\n      this.valueSetter = input((quillEditor, value) => {\n        const format = getFormat(this.format(), this.service.config.format);\n        if (format === 'html') {\n          const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : this.service.config.sanitize || false;\n          if (sanitize) {\n            value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n          }\n          return quillEditor.clipboard.convert({\n            html: value\n          });\n        } else if (format === 'json') {\n          try {\n            return JSON.parse(value);\n          } catch (e) {\n            return [{\n              insert: value\n            }];\n          }\n        }\n        return value;\n      });\n      this.selectionChangeHandler = (range, oldRange, source) => {\n        const trackChanges = this.trackChanges() || this.service.config.trackChanges;\n        const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all');\n        // only emit changes when there's any listener\n        if (!this.onBlur.observed && !this.onFocus.observed && !this.onSelectionChanged.observed && !shouldTriggerOnModelTouched) {\n          return;\n        }\n        this.zone.run(() => {\n          if (range === null) {\n            this.onBlur.emit({\n              editor: this.quillEditor,\n              source\n            });\n          } else if (oldRange === null) {\n            this.onFocus.emit({\n              editor: this.quillEditor,\n              source\n            });\n          }\n          this.onSelectionChanged.emit({\n            editor: this.quillEditor,\n            oldRange,\n            range,\n            source\n          });\n          if (shouldTriggerOnModelTouched) {\n            this.onModelTouched();\n          }\n          this.cd.markForCheck();\n        });\n      };\n      this.textChangeHandler = (delta, oldDelta, source) => {\n        // only emit changes emitted by user interactions\n        const text = this.quillEditor.getText();\n        const content = this.quillEditor.getContents();\n        let html = this.quillEditor.getSemanticHTML();\n        if (this.isEmptyValue(html)) {\n          html = this.defaultEmptyValue();\n        }\n        const trackChanges = this.trackChanges() || this.service.config.trackChanges;\n        const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange;\n        // only emit changes when there's any listener\n        if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n          return;\n        }\n        this.zone.run(() => {\n          if (shouldTriggerOnModelChange) {\n            const valueGetter = this.valueGetter();\n            this.onModelChange(valueGetter(this.quillEditor));\n          }\n          this.onContentChanged.emit({\n            content,\n            delta,\n            editor: this.quillEditor,\n            html,\n            oldDelta,\n            source,\n            text\n          });\n          this.cd.markForCheck();\n        });\n      };\n      // eslint-disable-next-line max-len\n      this.editorChangeHandler = (event, current, old, source) => {\n        // only emit changes when there's any listener\n        if (!this.onEditorChanged.observed) {\n          return;\n        }\n        // only emit changes emitted by user interactions\n        if (event === 'text-change') {\n          const text = this.quillEditor.getText();\n          const content = this.quillEditor.getContents();\n          let html = this.quillEditor.getSemanticHTML();\n          if (this.isEmptyValue(html)) {\n            html = this.defaultEmptyValue();\n          }\n          this.zone.run(() => {\n            this.onEditorChanged.emit({\n              content,\n              delta: current,\n              editor: this.quillEditor,\n              event,\n              html,\n              oldDelta: old,\n              source,\n              text\n            });\n            this.cd.markForCheck();\n          });\n        } else {\n          this.zone.run(() => {\n            this.onEditorChanged.emit({\n              editor: this.quillEditor,\n              event,\n              oldRange: old,\n              range: current,\n              source\n            });\n            this.cd.markForCheck();\n          });\n        }\n      };\n    }\n    static normalizeClassNames(classes) {\n      const classList = classes.trim().split(' ');\n      return classList.reduce((prev, cur) => {\n        const trimmed = cur.trim();\n        if (trimmed) {\n          prev.push(trimmed);\n        }\n        return prev;\n      }, []);\n    }\n    ngOnInit() {\n      this.toolbarPosition.set(this.customToolbarPosition());\n    }\n    ngAfterViewInit() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n      // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n      this.quillSubscription = this.service.getQuill().pipe(mergeMap(Quill => {\n        const promises = [this.service.registerCustomModules(Quill, this.customModules())];\n        const beforeRender = this.beforeRender() ?? this.service.config.beforeRender;\n        if (beforeRender) {\n          promises.push(beforeRender());\n        }\n        return Promise.all(promises).then(() => Quill);\n      })).subscribe(Quill => {\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n        const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n        const modules = Object.assign({}, this.modules() || this.service.config.modules);\n        if (toolbarElem) {\n          modules.toolbar = toolbarElem;\n        } else if (modules.toolbar === undefined) {\n          modules.toolbar = defaultModules.toolbar;\n        }\n        let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder;\n        if (placeholder === undefined) {\n          placeholder = 'Insert text here ...';\n        }\n        const styles = this.styles();\n        if (styles) {\n          Object.keys(styles).forEach(key => {\n            this.renderer.setStyle(this.editorElem, key, styles[key]);\n          });\n        }\n        if (this.classes()) {\n          this.addClasses(this.classes());\n        }\n        this.customOptions().forEach(customOption => {\n          const newCustomOption = Quill.import(customOption.import);\n          newCustomOption.whitelist = customOption.whitelist;\n          Quill.register(newCustomOption, true);\n        });\n        let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds();\n        if (!bounds) {\n          bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body;\n        }\n        let debug = this.debug();\n        if (!debug && debug !== false && this.service.config.debug) {\n          debug = this.service.config.debug;\n        }\n        let readOnly = this.readOnly();\n        if (!readOnly && this.readOnly() !== false) {\n          readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;\n        }\n        let formats = this.formats();\n        if (!formats && formats === undefined) {\n          formats = this.service.config.formats ? [...this.service.config.formats] : this.service.config.formats === null ? null : undefined;\n        }\n        this.zone.runOutsideAngular(() => {\n          this.quillEditor = new Quill(this.editorElem, {\n            bounds,\n            debug,\n            formats,\n            modules,\n            placeholder,\n            readOnly,\n            registry: this.registry(),\n            theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n          });\n          if (this.onNativeBlur.observed) {\n            // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n            this.quillEditor.scroll.domNode.addEventListener('blur', () => this.onNativeBlur.next({\n              editor: this.quillEditor,\n              source: 'dom'\n            }));\n            // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n            const toolbar = this.quillEditor.getModule('toolbar');\n            toolbar.container?.addEventListener('mousedown', e => e.preventDefault());\n          }\n          if (this.onNativeFocus.observed) {\n            this.quillEditor.scroll.domNode.addEventListener('focus', () => this.onNativeFocus.next({\n              editor: this.quillEditor,\n              source: 'dom'\n            }));\n          }\n          // Set optional link placeholder, Quill has no native API for it so using workaround\n          if (this.linkPlaceholder()) {\n            const tooltip = this.quillEditor?.theme?.tooltip;\n            const input = tooltip?.root?.querySelector('input[data-link]');\n            if (input?.dataset) {\n              input.dataset.link = this.linkPlaceholder();\n            }\n          }\n        });\n        if (this.content) {\n          const format = getFormat(this.format(), this.service.config.format);\n          if (format === 'text') {\n            this.quillEditor.setText(this.content, 'silent');\n          } else {\n            const valueSetter = this.valueSetter();\n            const newValue = valueSetter(this.quillEditor, this.content);\n            this.quillEditor.setContents(newValue, 'silent');\n          }\n          const history = this.quillEditor.getModule('history');\n          history.clear();\n        }\n        // initialize disabled status based on this.disabled as default value\n        this.setDisabledState();\n        this.addQuillEventListeners();\n        // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n        // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n        if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n          return;\n        }\n        // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n        // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n        // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n        raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n          if (this.onValidatorChanged) {\n            this.onValidatorChanged();\n          }\n          this.onEditorCreated.emit(this.quillEditor);\n        });\n      });\n    }\n    ngOnDestroy() {\n      this.dispose();\n      this.quillSubscription?.unsubscribe();\n      this.quillSubscription = null;\n    }\n    ngOnChanges(changes) {\n      if (!this.quillEditor) {\n        return;\n      }\n      /* eslint-disable @typescript-eslint/dot-notation */\n      if (changes.readOnly) {\n        this.quillEditor.enable(!changes.readOnly.currentValue);\n      }\n      if (changes.placeholder) {\n        this.quillEditor.root.dataset.placeholder = changes.placeholder.currentValue;\n      }\n      if (changes.styles) {\n        const currentStyling = changes.styles.currentValue;\n        const previousStyling = changes.styles.previousValue;\n        if (previousStyling) {\n          Object.keys(previousStyling).forEach(key => {\n            this.renderer.removeStyle(this.editorElem, key);\n          });\n        }\n        if (currentStyling) {\n          Object.keys(currentStyling).forEach(key => {\n            this.renderer.setStyle(this.editorElem, key, this.styles()[key]);\n          });\n        }\n      }\n      if (changes.classes) {\n        const currentClasses = changes.classes.currentValue;\n        const previousClasses = changes.classes.previousValue;\n        if (previousClasses) {\n          this.removeClasses(previousClasses);\n        }\n        if (currentClasses) {\n          this.addClasses(currentClasses);\n        }\n      }\n      // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n      // `debounceTime` operator or vice-versa remove it.\n      if (changes.debounceTime) {\n        this.addQuillEventListeners();\n      }\n      /* eslint-enable @typescript-eslint/dot-notation */\n    }\n    addClasses(classList) {\n      QuillEditorBase.normalizeClassNames(classList).forEach(c => {\n        this.renderer.addClass(this.editorElem, c);\n      });\n    }\n    removeClasses(classList) {\n      QuillEditorBase.normalizeClassNames(classList).forEach(c => {\n        this.renderer.removeClass(this.editorElem, c);\n      });\n    }\n    writeValue(currentValue) {\n      // optional fix for https://github.com/angular/angular/issues/14988\n      if (this.filterNull() && currentValue === null) {\n        return;\n      }\n      this.content = currentValue;\n      if (!this.quillEditor) {\n        return;\n      }\n      const format = getFormat(this.format(), this.service.config.format);\n      const valueSetter = this.valueSetter();\n      const newValue = valueSetter(this.quillEditor, currentValue);\n      if (this.compareValues()) {\n        const currentEditorValue = this.quillEditor.getContents();\n        if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n          return;\n        }\n      }\n      if (currentValue) {\n        if (format === 'text') {\n          this.quillEditor.setText(currentValue);\n        } else {\n          this.quillEditor.setContents(newValue);\n        }\n        return;\n      }\n      this.quillEditor.setText('');\n    }\n    setDisabledState(isDisabled = this.disabled) {\n      // store initial value to set appropriate disabled status after ViewInit\n      this.disabled = isDisabled;\n      if (this.quillEditor) {\n        if (isDisabled) {\n          this.quillEditor.disable();\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n        } else {\n          if (!this.readOnly()) {\n            this.quillEditor.enable();\n          }\n          this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        }\n      }\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    registerOnValidatorChange(fn) {\n      this.onValidatorChanged = fn;\n    }\n    validate() {\n      if (!this.quillEditor) {\n        return null;\n      }\n      const err = {};\n      let valid = true;\n      const text = this.quillEditor.getText();\n      // trim text if wanted + handle special case that an empty editor contains a new line\n      const textLength = this.trimOnValidation() ? text.trim().length : text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1;\n      const deltaOperations = this.quillEditor.getContents().ops;\n      const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString());\n      if (this.minLength() && textLength && textLength < this.minLength()) {\n        err.minLengthError = {\n          given: textLength,\n          minLength: this.minLength()\n        };\n        valid = false;\n      }\n      if (this.maxLength() && textLength > this.maxLength()) {\n        err.maxLengthError = {\n          given: textLength,\n          maxLength: this.maxLength()\n        };\n        valid = false;\n      }\n      if (this.required() && !textLength && onlyEmptyOperation) {\n        err.requiredError = {\n          empty: true\n        };\n        valid = false;\n      }\n      return valid ? null : err;\n    }\n    addQuillEventListeners() {\n      this.dispose();\n      // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n      // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n      // `zone.run` when we emit an event to the parent component.\n      this.zone.runOutsideAngular(() => {\n        this.subscription = new Subscription();\n        this.subscription.add(\n        // mark model as touched if editor lost focus\n        fromEvent(this.quillEditor, 'selection-change').subscribe(([range, oldRange, source]) => {\n          this.selectionChangeHandler(range, oldRange, source);\n        }));\n        // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n        // will be invoked upon subscription and teardown.\n        let textChange$ = fromEvent(this.quillEditor, 'text-change');\n        let editorChange$ = fromEvent(this.quillEditor, 'editor-change');\n        if (typeof this.debounceTime() === 'number') {\n          textChange$ = textChange$.pipe(debounceTime(this.debounceTime()));\n          editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()));\n        }\n        this.subscription.add(\n        // update model if text changes\n        textChange$.subscribe(([delta, oldDelta, source]) => {\n          this.textChangeHandler(delta, oldDelta, source);\n        }));\n        this.subscription.add(\n        // triggered if selection or text changed\n        editorChange$.subscribe(([event, current, old, source]) => {\n          this.editorChangeHandler(event, current, old, source);\n        }));\n      });\n    }\n    dispose() {\n      if (this.subscription !== null) {\n        this.subscription.unsubscribe();\n        this.subscription = null;\n      }\n    }\n    isEmptyValue(html) {\n      return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>';\n    }\n    static {\n      this.ɵfac = function QuillEditorBase_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillEditorBase)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: QuillEditorBase,\n        inputs: {\n          format: [1, \"format\"],\n          theme: [1, \"theme\"],\n          modules: [1, \"modules\"],\n          debug: [1, \"debug\"],\n          readOnly: [1, \"readOnly\"],\n          placeholder: [1, \"placeholder\"],\n          maxLength: [1, \"maxLength\"],\n          minLength: [1, \"minLength\"],\n          required: [1, \"required\"],\n          formats: [1, \"formats\"],\n          customToolbarPosition: [1, \"customToolbarPosition\"],\n          sanitize: [1, \"sanitize\"],\n          beforeRender: [1, \"beforeRender\"],\n          styles: [1, \"styles\"],\n          registry: [1, \"registry\"],\n          bounds: [1, \"bounds\"],\n          customOptions: [1, \"customOptions\"],\n          customModules: [1, \"customModules\"],\n          trackChanges: [1, \"trackChanges\"],\n          classes: [1, \"classes\"],\n          trimOnValidation: [1, \"trimOnValidation\"],\n          linkPlaceholder: [1, \"linkPlaceholder\"],\n          compareValues: [1, \"compareValues\"],\n          filterNull: [1, \"filterNull\"],\n          debounceTime: [1, \"debounceTime\"],\n          defaultEmptyValue: [1, \"defaultEmptyValue\"],\n          valueGetter: [1, \"valueGetter\"],\n          valueSetter: [1, \"valueSetter\"]\n        },\n        outputs: {\n          onEditorCreated: \"onEditorCreated\",\n          onEditorChanged: \"onEditorChanged\",\n          onContentChanged: \"onContentChanged\",\n          onSelectionChanged: \"onSelectionChanged\",\n          onFocus: \"onFocus\",\n          onBlur: \"onBlur\",\n          onNativeFocus: \"onNativeFocus\",\n          onNativeBlur: \"onNativeBlur\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return QuillEditorBase;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QuillEditorComponent = /*#__PURE__*/(() => {\n  class QuillEditorComponent extends QuillEditorBase {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵQuillEditorComponent_BaseFactory;\n        return function QuillEditorComponent_Factory(__ngFactoryType__) {\n          return (ɵQuillEditorComponent_BaseFactory || (ɵQuillEditorComponent_BaseFactory = i0.ɵɵgetInheritedFactory(QuillEditorComponent)))(__ngFactoryType__ || QuillEditorComponent);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: QuillEditorComponent,\n        selectors: [[\"quill-editor\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          multi: true,\n          provide: NG_VALUE_ACCESSOR,\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          useExisting: forwardRef(() => QuillEditorComponent)\n        }, {\n          multi: true,\n          provide: NG_VALIDATORS,\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          useExisting: forwardRef(() => QuillEditorComponent)\n        }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 5,\n        vars: 2,\n        consts: [[\"quill-editor-element\", \"\"]],\n        template: function QuillEditorComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c0);\n            i0.ɵɵtemplate(0, QuillEditorComponent_Conditional_0_Template, 1, 0, \"div\", 0);\n            i0.ɵɵprojection(1);\n            i0.ɵɵprojection(2, 1);\n            i0.ɵɵprojection(3, 2);\n            i0.ɵɵtemplate(4, QuillEditorComponent_Conditional_4_Template, 1, 0, \"div\", 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵconditional(ctx.toolbarPosition() !== \"top\" ? 0 : -1);\n            i0.ɵɵadvance(4);\n            i0.ɵɵconditional(ctx.toolbarPosition() === \"top\" ? 4 : -1);\n          }\n        },\n        styles: [\"[_nghost-%COMP%]{display:inline-block}\"]\n      });\n    }\n  }\n  return QuillEditorComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QuillViewHTMLComponent = /*#__PURE__*/(() => {\n  class QuillViewHTMLComponent {\n    constructor(sanitizer, service) {\n      this.sanitizer = sanitizer;\n      this.service = service;\n      this.content = input('');\n      this.theme = input(undefined);\n      this.sanitize = input(undefined);\n      this.innerHTML = signal('');\n      this.themeClass = signal('ql-snow');\n    }\n    ngOnChanges(changes) {\n      if (changes.theme) {\n        const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\n        this.themeClass.set(`ql-${theme} ngx-quill-view-html`);\n      } else if (!this.theme()) {\n        const theme = this.service.config.theme ? this.service.config.theme : 'snow';\n        this.themeClass.set(`ql-${theme} ngx-quill-view-html`);\n      }\n      if (changes.content) {\n        const content = changes.content.currentValue;\n        const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : this.service.config.sanitize || false;\n        const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content);\n        this.innerHTML.set(innerHTML);\n      }\n    }\n    static {\n      this.ɵfac = function QuillViewHTMLComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillViewHTMLComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(QuillService));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: QuillViewHTMLComponent,\n        selectors: [[\"quill-view-html\"]],\n        inputs: {\n          content: [1, \"content\"],\n          theme: [1, \"theme\"],\n          sanitize: [1, \"sanitize\"]\n        },\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n        decls: 2,\n        vars: 2,\n        consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n        template: function QuillViewHTMLComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"div\", 1);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngClass\", ctx.themeClass());\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"innerHTML\", ctx.innerHTML(), i0.ɵɵsanitizeHtml);\n          }\n        },\n        dependencies: [NgClass],\n        styles: [\".ql-container.ngx-quill-view-html{border:0}\\n\"],\n        encapsulation: 2\n      });\n    }\n  }\n  return QuillViewHTMLComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nlet QuillViewComponent = /*#__PURE__*/(() => {\n  class QuillViewComponent {\n    constructor(elementRef, renderer, zone, service, domSanitizer, platformId) {\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.service = service;\n      this.domSanitizer = domSanitizer;\n      this.platformId = platformId;\n      this.format = input(undefined);\n      this.theme = input(undefined);\n      this.modules = input(undefined);\n      this.debug = input(false);\n      this.formats = input(undefined);\n      this.sanitize = input(undefined);\n      this.beforeRender = input(undefined);\n      this.strict = input(true);\n      this.content = input();\n      this.customModules = input([]);\n      this.customOptions = input([]);\n      this.onEditorCreated = new EventEmitter();\n      this.quillSubscription = null;\n      this.destroyRef = inject(DestroyRef);\n      this.valueSetter = (quillEditor, value) => {\n        const format = getFormat(this.format(), this.service.config.format);\n        let content = value;\n        if (format === 'text') {\n          quillEditor.setText(content);\n        } else {\n          if (format === 'html') {\n            const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : this.service.config.sanitize || false;\n            if (sanitize) {\n              value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n            }\n            content = quillEditor.clipboard.convert({\n              html: value\n            });\n          } else if (format === 'json') {\n            try {\n              content = JSON.parse(value);\n            } catch (e) {\n              content = [{\n                insert: value\n              }];\n            }\n          }\n          quillEditor.setContents(content);\n        }\n      };\n    }\n    ngOnChanges(changes) {\n      if (!this.quillEditor) {\n        return;\n      }\n      if (changes.content) {\n        this.valueSetter(this.quillEditor, changes.content.currentValue);\n      }\n    }\n    ngAfterViewInit() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      this.quillSubscription = this.service.getQuill().pipe(mergeMap(Quill => {\n        const promises = [this.service.registerCustomModules(Quill, this.customModules())];\n        const beforeRender = this.beforeRender() ?? this.service.config.beforeRender;\n        if (beforeRender) {\n          promises.push(beforeRender());\n        }\n        return Promise.all(promises).then(() => Quill);\n      })).subscribe(Quill => {\n        const modules = Object.assign({}, this.modules() || this.service.config.modules);\n        modules.toolbar = false;\n        this.customOptions().forEach(customOption => {\n          const newCustomOption = Quill.import(customOption.import);\n          newCustomOption.whitelist = customOption.whitelist;\n          Quill.register(newCustomOption, true);\n        });\n        let debug = this.debug();\n        if (!debug && debug !== false && this.service.config.debug) {\n          debug = this.service.config.debug;\n        }\n        let formats = this.formats();\n        if (!formats && formats === undefined) {\n          formats = this.service.config.formats ? [...this.service.config.formats] : this.service.config.formats === null ? null : undefined;\n        }\n        const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n        this.zone.runOutsideAngular(() => {\n          this.quillEditor = new Quill(this.editorElem, {\n            debug,\n            formats,\n            modules,\n            readOnly: true,\n            strict: this.strict(),\n            theme\n          });\n        });\n        this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n        if (this.content()) {\n          this.valueSetter(this.quillEditor, this.content());\n        }\n        // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n        // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n        if (!this.onEditorCreated.observed) {\n          return;\n        }\n        // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n        // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n        // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n        raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n          this.onEditorCreated.emit(this.quillEditor);\n        });\n      });\n    }\n    ngOnDestroy() {\n      this.quillSubscription?.unsubscribe();\n      this.quillSubscription = null;\n    }\n    static {\n      this.ɵfac = function QuillViewComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(QuillService), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: QuillViewComponent,\n        selectors: [[\"quill-view\"]],\n        inputs: {\n          format: [1, \"format\"],\n          theme: [1, \"theme\"],\n          modules: [1, \"modules\"],\n          debug: [1, \"debug\"],\n          formats: [1, \"formats\"],\n          sanitize: [1, \"sanitize\"],\n          beforeRender: [1, \"beforeRender\"],\n          strict: [1, \"strict\"],\n          content: [1, \"content\"],\n          customModules: [1, \"customModules\"],\n          customOptions: [1, \"customOptions\"]\n        },\n        outputs: {\n          onEditorCreated: \"onEditorCreated\"\n        },\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"quill-view-element\", \"\"]],\n        template: function QuillViewComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0);\n          }\n        },\n        styles: [\".ql-container.ngx-quill-view{border:0}\\n\"],\n        encapsulation: 2\n      });\n    }\n  }\n  return QuillViewComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QuillModule = /*#__PURE__*/(() => {\n  class QuillModule {\n    static forRoot(config) {\n      return {\n        ngModule: QuillModule,\n        providers: [{\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config\n        }]\n      };\n    }\n    static {\n      this.ɵfac = function QuillModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuillModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: QuillModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return QuillModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-quill\n */\n// Re-export everything from the secondary entry-point so we can be backwards-compatible\n// and don't introduce breaking changes for consumers.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent };\n","import { CommonModule } from '@angular/common';\r\nimport { Component, ElementRef, inject } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { ForgeButtonModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { QuillModule, QuillModules } from 'ngx-quill';\r\n\r\n// https://quilljs.com/docs/\r\n// https://github.com/KillerCodeMonkey/ngx-quill\r\n\r\n@Component({\r\n  selector: 'app-text-editor',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, QuillModule, ForgeButtonModule, ForgeToolbarModule],\r\n  templateUrl: './text-editor.component.html',\r\n  styleUrls: ['./text-editor.component.scss']\r\n})\r\nexport class TextEditorComponent {\r\n  public elementRef = inject(ElementRef);\r\n\r\n  public textEditorFormControl = new FormControl();\r\n  public quillModules: QuillModules = {\r\n    toolbar: {\r\n      container: [\r\n        ['bold', 'italic', 'underline', 'strike', 'code'],\r\n        [{ align: [] }],\r\n        [{ list: 'ordered' }, { list: 'bullet' }],\r\n        [{ indent: '-1' }, { indent: '+1' }],\r\n        ['link'],\r\n        [{ color: [] }, { background: [] }],\r\n        ['clean'],\r\n        [{ font: [] }, { size: [] }, { header: [1, 2, 3, 4, 5, 6, false] }],\r\n        ['image']\r\n      ]\r\n      // handlers: {\r\n      //   'link': (value) => {\r\n      //     console.log(value);\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n\r\n  public onEditorCreated(quill: any) {\r\n    console.log(quill);\r\n    this.elementRef.nativeElement.querySelectorAll('.ql-toolbar button').forEach((el: HTMLElement) => (el.tabIndex = -1));\r\n    this.elementRef.nativeElement.querySelectorAll('.ql-toolbar [role=\"button\"]').forEach((el: HTMLElement) => (el.tabIndex = -1));\r\n  }\r\n\r\n  public onToggleState() {\r\n    this.textEditorFormControl.disabled ? this.textEditorFormControl.enable() : this.textEditorFormControl.disable();\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Text Editor</h2>\r\n  <forge-button slot=\"end\" variant=\"outlined\" (click)=\"onToggleState()\"> Toggle state </forge-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <quill-editor\r\n    [formControl]=\"textEditorFormControl\"\r\n    [sanitize]=\"true\"\r\n    placeholder\r\n    [modules]=\"quillModules\"\r\n    [bounds]=\"elementRef.nativeElement\"\r\n    #quillEditor\r\n    (keydown)=\"$event.stopPropagation()\"\r\n    (onEditorCreated)=\"onEditorCreated($event)\"\r\n  ></quill-editor>\r\n\r\n  <p>{{ textEditorFormControl.value }}</p>\r\n</div>\r\n"],"mappings":"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","names":["defaultModules","QUILL_CONFIG_TOKEN","InjectionToken","_c0","_c1","QuillEditorComponent_Conditional_0_Template","rf","ctx","ɵɵelement","QuillEditorComponent_Conditional_4_Template","getFormat","format","configFormat","raf$","Observable","subscriber","rafId","QuillService","injector","config","defer","__async","maybePatchedAddEventListener","quillImport","customOption","newCustomOption","shareReplay","DOCUMENT","defaultModules","Quill","customModules","suppressGlobalRegisterWarning","implementation","path","isObservable","firstValueFrom","__ngFactoryType__","ɵɵinject","Injector","QUILL_CONFIG_TOKEN","ɵɵdefineInjectable","QuillEditorBase","input","EventEmitter","signal","inject","ElementRef","ChangeDetectorRef","DomSanitizer","PLATFORM_ID","Renderer2","NgZone","DestroyRef","quillEditor","html","modelValue","value","SecurityContext","range","oldRange","source","trackChanges","shouldTriggerOnModelTouched","delta","oldDelta","text","content","shouldTriggerOnModelChange","valueGetter","event","current","old","classes","prev","cur","trimmed","isPlatformServer","mergeMap","promises","beforeRender","toolbarElem","modules","placeholder","styles","key","bounds","debug","readOnly","formats","e","newValue","takeUntilDestroyed","changes","currentStyling","previousStyling","currentClasses","previousClasses","classList","c","currentValue","currentEditorValue","isDisabled","fn","err","valid","textLength","deltaOperations","onlyEmptyOperation","Subscription","fromEvent","textChange$","editorChange$","debounceTime","ɵɵdefineDirective","ɵɵNgOnChangesFeature","QuillEditorComponent","ɵQuillEditorComponent_BaseFactory","ɵɵgetInheritedFactory","ɵɵdefineComponent","ɵɵProvidersFeature","NG_VALUE_ACCESSOR","forwardRef","NG_VALIDATORS","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","ɵɵprojectionDef","ɵɵtemplate","ɵɵprojection","ɵɵconditional","ɵɵadvance","QuillModule","config","QUILL_CONFIG_TOKEN","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","TextEditorComponent","constructor","elementRef","inject","ElementRef","textEditorFormControl","FormControl","quillModules","toolbar","container","align","list","indent","color","background","font","size","header","onEditorCreated","quill","console","log","nativeElement","querySelectorAll","forEach","el","tabIndex","onToggleState","disabled","enable","disable","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","i0","ɵɵrestoreView","_r1","ɵɵresetView","$event","stopPropagation","ɵɵadvance","ɵɵproperty","ɵɵtextInterpolate","value","CommonModule","ReactiveFormsModule","NgControlStatus","FormControlDirective","QuillModule","QuillEditorComponent","ForgeButtonModule","ButtonComponent","ForgeToolbarModule","ToolbarComponent","styles"],"x_google_ignoreList":[0,1]}