{
  "version": 3,
  "sources": ["src/app/shared/directives/checkbox-three-state/checkbox-three-state.directive.ts", "src/app/shared/directives/form-control-invalid/form-control-invalid.directive.ts", "src/app/shared/directives/auto-focus/auto-focus.directive.ts", "src/app/shared/directives/input-casing/input-casing.directive.ts"],
  "sourcesContent": ["import { Directive, ElementRef, HostListener, Input, Renderer2, StaticProvider, booleanAttribute, forwardRef, inject } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ICheckboxComponent } from '@tylertech/forge';\n\nexport const CHECKBOX_THREE_STATE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxThreeStateDirective),\n  multi: true\n};\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'forge-checkbox[formControlName],forge-checkbox[formControl],forge-checkbox[ngModel]',\n  providers: [CHECKBOX_THREE_STATE_VALUE_ACCESSOR]\n})\nexport class CheckboxThreeStateDirective implements ControlValueAccessor {\n  private renderer = inject(Renderer2);\n  private elementRef = inject(ElementRef<ICheckboxComponent>);\n  private value?: boolean | null;\n  private threeStateEnabled = false;\n\n  @HostListener('change', ['$event'])\n  public hostChange(evt: CustomEvent<void>) {\n    if (this.threeStateEnabled) {\n      this.value = this.value === true ? false : this.value === false ? null : true;\n      this.setCheckboxState();\n    } else {\n      this.value = this.elementRef.nativeElement.checked;\n    }\n    this.onChange(this.value);\n    this.onTouched();\n  }\n\n  @HostListener('blur')\n  public hostBlur() {\n    this.onTouched();\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set threeState(value: boolean) {\n    if (this.threeStateEnabled !== value) {\n      this.threeStateEnabled = value;\n      if (!this.threeStateEnabled && this.elementRef.nativeElement.indeterminate) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'indeterminate', false);\n        this.value = false;\n      }\n      this.setCheckboxState();\n    }\n  }\n\n  public onChange = (_: any) => {};\n  public onTouched = () => {};\n\n  public writeValue(value: boolean | null) {\n    if (this.value !== value) {\n      this.value = value;\n      this.setCheckboxState();\n    }\n  }\n\n  public registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  public setDisabledState?(value: boolean) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', value);\n  }\n\n  private setCheckboxState() {\n    if (this.threeStateEnabled) {\n      if (this.value === true) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'indeterminate', false);\n        requestAnimationFrame(() => {\n          this.renderer.setProperty(this.elementRef.nativeElement, 'checked', true);\n        });\n      } else if (this.value === false) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'indeterminate', false);\n        requestAnimationFrame(() => {\n          this.renderer.setProperty(this.elementRef.nativeElement, 'checked', false);\n        });\n      } else {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'checked', false);\n        requestAnimationFrame(() => {\n          this.renderer.setProperty(this.elementRef.nativeElement, 'indeterminate', true);\n        });\n      }\n    } else {\n      this.renderer.setProperty(this.elementRef.nativeElement, 'checked', !!this.value);\n    }\n  }\n}\n", "import { DestroyRef, Directive, ElementRef, OnInit, Renderer2, inject, input } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { combineLatest, delay, distinctUntilChanged, fromEvent, map, startWith } from 'rxjs';\n\n@Directive({\n  selector: '[appFormControlInvalid]'\n})\nexport class FormControlInvalidDirective implements OnInit {\n  private destroyRef = inject(DestroyRef);\n  private elementRef = inject(ElementRef<HTMLElement>);\n  private renderer = inject(Renderer2);\n\n  public readonly control = input.required<AbstractControl>({\n    alias: 'appFormControlInvalid'\n  });\n\n  public ngOnInit() {\n    if (!this.elementRef.nativeElement.querySelector('*[slot=\"support-text\"]:not(.app--form-control-invalid)')) {\n      this.elementRef.nativeElement.style.setProperty('--forge-field-support-text-margin-block', '0');\n    }\n    const blur$ = fromEvent<FocusEvent>(this.elementRef.nativeElement, 'focusout').pipe(delay(0));\n    const statusChanges$ = this.control().statusChanges.pipe(startWith(this.control().status));\n\n    combineLatest({ event: blur$, status: statusChanges$ })\n      .pipe(\n        map((value) => value.status === 'INVALID' && this.control().touched),\n        distinctUntilChanged(),\n        takeUntilDestroyed(this.destroyRef)\n      )\n      .subscribe({\n        next: (shouldMarkInvalid) => {\n          if (shouldMarkInvalid) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, 'invalid', '');\n            this.renderer.addClass(this.elementRef.nativeElement, 'app--form-control-invalid');\n            (this.elementRef.nativeElement as HTMLElement).style.removeProperty('--forge-field-support-text-margin-block');\n          } else {\n            this.renderer.removeAttribute(this.elementRef.nativeElement, 'invalid');\n            this.renderer.removeClass(this.elementRef.nativeElement, 'app--form-control-invalid');\n            if (!this.elementRef.nativeElement.querySelector('*[slot=\"support-text\"]:not(.app--form-control-invalid)')) {\n              this.elementRef.nativeElement.style.setProperty('--forge-field-support-text-margin-block', '0');\n            }\n          }\n        }\n      });\n  }\n}\n", "import { AfterViewInit, Directive, ElementRef, booleanAttribute, inject, input } from '@angular/core';\n\n@Directive({\n  selector: '[appAutoFocus]'\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  private element = inject(ElementRef);\n\n  public readonly appAutoFocus = input<boolean, unknown>(undefined, {\n    transform: booleanAttribute\n  });\n\n  public ngAfterViewInit() {\n    if (this.appAutoFocus() !== false) {\n      window.requestAnimationFrame(() => {\n        this.element.nativeElement.focus();\n      });\n    }\n  }\n}\n", "import { Directive, HostListener, forwardRef, Renderer2, ElementRef, input } from '@angular/core';\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[appInputCasing]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => InputCasingDirective)\n    }\n  ]\n})\nexport class InputCasingDirective extends DefaultValueAccessor {\n  @HostListener('input', ['$event'])\n  public inputHandler(event: InputEvent) {\n    const target = event.target as HTMLInputElement;\n    const start = target.selectionStart;\n\n    target.value = this.appInputCasing() === 'lower' ? target.value.toLowerCase() : target.value.toUpperCase();\n    target.setSelectionRange(start, start);\n\n    this.onChange(target.value);\n  }\n\n  public readonly appInputCasing = input<'upper' | 'lower'>('upper');\n}\n"],
  "mappings": "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",
  "names": ["CHECKBOX_THREE_STATE_VALUE_ACCESSOR", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "CheckboxThreeStateDirective", "multi", "constructor", "renderer", "inject", "Renderer2", "elementRef", "ElementRef", "threeStateEnabled", "onChange", "_", "onTouched", "hostChange", "evt", "value", "setCheckboxState", "nativeElement", "checked", "hostBlur", "threeState", "indeterminate", "setProperty", "writeValue", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "requestAnimationFrame", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "booleanAttribute", "features", "\u0275\u0275ProvidersFeature", "_CheckboxThreeStateDirective", "FormControlInvalidDirective", "constructor", "destroyRef", "inject", "DestroyRef", "elementRef", "ElementRef", "renderer", "Renderer2", "control", "input", "required", "alias", "ngOnInit", "nativeElement", "querySelector", "style", "setProperty", "blur$", "fromEvent", "pipe", "delay", "statusChanges$", "statusChanges", "startWith", "status", "combineLatest", "event", "map", "value", "touched", "distinctUntilChanged", "takeUntilDestroyed", "subscribe", "next", "shouldMarkInvalid", "setAttribute", "addClass", "removeProperty", "removeAttribute", "removeClass", "selectors", "inputs", "_FormControlInvalidDirective", "AutoFocusDirective", "constructor", "element", "inject", "ElementRef", "appAutoFocus", "input", "undefined", "transform", "booleanAttribute", "ngAfterViewInit", "window", "requestAnimationFrame", "nativeElement", "focus", "selectors", "inputs", "_AutoFocusDirective", "InputCasingDirective", "DefaultValueAccessor", "constructor", "appInputCasing", "input", "inputHandler", "event", "target", "start", "selectionStart", "value", "toLowerCase", "toUpperCase", "setSelectionRange", "onChange", "__ngFactoryType__", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "provide", "NG_VALUE_ACCESSOR", "multi", "useExisting", "forwardRef", "\u0275\u0275InheritDefinitionFeature", "_InputCasingDirective"]
}
