{
  "version": 3,
  "sources": ["src/app/re-captcha/re-captcha.component.ts", "src/app/re-captcha/re-captcha.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\r\nimport { Component, inject, NgZone } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport {\r\n  ForgeButtonModule,\r\n  ForgeTextFieldModule,\r\n  ForgeToolbarModule,\r\n  ForgeDividerModule,\r\n  ForgeLabelValueModule,\r\n  ToastService,\r\n  ForgeLinearProgressModule\r\n} from '@tylertech/forge-angular';\r\nimport { finalize } from 'rxjs';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { ReCaptchaService } from './re-captcha.service';\r\n\r\n@Component({\r\n  selector: 'app-re-captcha',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDividerModule,\r\n    ForgeLabelValueModule,\r\n    ForgeLinearProgressModule,\r\n    ForgeTextFieldModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  templateUrl: './re-captcha.component.html',\r\n  styleUrl: './re-captcha.component.scss'\r\n})\r\nexport class ReCaptchaComponent {\r\n  private ngZone = inject(NgZone);\r\n  private reCatpchaService = inject(ReCaptchaService);\r\n  private toastService = inject(ToastService);\r\n  public isBusy = false;\r\n  public isInitialized = false;\r\n\r\n  public formGroup = new FormGroup({\r\n    recaptchaAction: new FormControl<string | null>('TEST', { validators: [Validators.required] }),\r\n    recaptchaSiteKey: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n    googleAPIKey: new FormControl<string | null>(null, { validators: [Validators.required] })\r\n  });\r\n  public token?: string;\r\n  public assessment?: {\r\n    event: {\r\n      expectedAction: string;\r\n    };\r\n    riskAnalysis: {\r\n      challenge: string;\r\n      score: number;\r\n    };\r\n    tokenProperties: {\r\n      action: string;\r\n      createTime: string;\r\n      invalidReason: string;\r\n      valid: boolean;\r\n    };\r\n  };\r\n\r\n  public onInitialize() {\r\n    this.formGroup.controls.recaptchaSiteKey.disable();\r\n    this.isBusy = true;\r\n\r\n    // intialize would typically be done in component ngOnInit\r\n    // as the site key should already be known\r\n    this.reCatpchaService\r\n      .initialize(this.formGroup.getRawValue().recaptchaSiteKey)\r\n      .pipe(finalize(() => (this.isBusy = false)))\r\n      .subscribe({\r\n        next: () => {\r\n          this.ngZone.run(() => {\r\n            this.isInitialized = true;\r\n          });\r\n\r\n          this.toastService.show('Re-Captcha initialized.');\r\n        },\r\n        error: (err) => {\r\n          this.toastService.show('An error occurred initializing Re-Captcha, see console for details.');\r\n        }\r\n      });\r\n  }\r\n\r\n  public onExecute() {\r\n    this.token = undefined;\r\n    this.assessment = undefined;\r\n    this.isBusy = true;\r\n\r\n    this.reCatpchaService\r\n      .executeChallenge(this.formGroup.value.recaptchaAction)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.isBusy = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (result) => {\r\n          this.token = result;\r\n        },\r\n        error: (err) => {\r\n          console.log(err);\r\n          this.toastService.show('An error occurred, see console for details.');\r\n        }\r\n      });\r\n  }\r\n\r\n  public onAssess() {\r\n    this.assessment = undefined;\r\n    this.isBusy = true;\r\n\r\n    this.reCatpchaService\r\n      .assessToken(this.formGroup.value.googleAPIKey, this.token, this.formGroup.value.recaptchaAction)\r\n      .pipe(finalize(() => (this.isBusy = false)))\r\n      .subscribe({\r\n        next: (result) => {\r\n          this.assessment = {\r\n            event: {\r\n              expectedAction: result.event.expectedAction\r\n            },\r\n            riskAnalysis: {\r\n              challenge: result.riskAnalysis.challenge,\r\n              score: result.riskAnalysis.score\r\n            },\r\n            tokenProperties: {\r\n              action: result.tokenProperties.action,\r\n              createTime: Utils.formatDate(result.tokenProperties.createTime, 'MM/dd/yyyy hh:mm'),\r\n              invalidReason: result.tokenProperties.invalidReason,\r\n              valid: result.tokenProperties.valid\r\n            }\r\n          };\r\n          console.log(result);\r\n        },\r\n        error: (err) => {\r\n          console.log(err);\r\n          this.toastService.show('An error occurred, see console for details.');\r\n        }\r\n      });\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Google reCaptcha</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"formGroup\" class=\"form-grid\">\r\n    <div class=\"form-grid--col-span form-grid__resources\">\r\n      <forge-label-value>\r\n        <span slot=\"label\">Resources</span>\r\n        <div slot=\"value\" class=\"form-grid__resources--stacked\">\r\n          <a href=\"https://cloud.google.com/recaptcha/docs/setup-overview-web\" target=\"_blank\">reCaptcha website setup</a>\r\n          <a href=\"https://cloud.google.com/recaptcha/docs/apis\" target=\"_blank\">reCaptcha API reference</a>\r\n        </div>\r\n      </forge-label-value>\r\n    </div>\r\n\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"re-captcha--action\" formControlName=\"recaptchaAction\" />\r\n      <label for=\"re-captcha--action\" slot=\"label\">Action</label>\r\n    </forge-text-field>\r\n    <forge-text-field class=\"form-grid--col-span2\">\r\n      <input type=\"text\" id=\"re-captcha--site-key\" formControlName=\"recaptchaSiteKey\" />\r\n      <label for=\"re-captcha--site-key\" slot=\"label\">Site key</label>\r\n      <span slot=\"helper-text\" class=\"forge-typography--label2\">Site key can only be set once, refresh the page to change site key.</span>\r\n      <span slot=\"helper-text\" class=\"forge-typography--label2\">reCaptcha must be Intialized after setting site key.</span>\r\n      <span slot=\"helper-text\" class=\"forge-typography--label2\">Execute will generate a new token.</span>\r\n    </forge-text-field>\r\n    <forge-text-field class=\"form-grid--col-span2\">\r\n      <input type=\"text\" id=\"re-captcha--google-api-key\" formControlName=\"googleAPIKey\" />\r\n      <label for=\"re-captcha--google-api-key\" slot=\"label\">Google API key</label>\r\n      <span slot=\"helper-text\" class=\"forge-typography--label2\">Google API key is required to Assess a token.</span>\r\n      <span slot=\"helper-text\" class=\"forge-typography--label2\">Token may only be assessed once, then it will become invalid.</span>\r\n    </forge-text-field>\r\n    <div class=\"form-grid--col-span2 form-grid__actions\">\r\n      <forge-button variant=\"outlined\" (click)=\"onInitialize()\" [disabled]=\"formGroup.controls.recaptchaSiteKey.invalid || isInitialized\">Initialize</forge-button>\r\n      <forge-button variant=\"outlined\" class=\"form-grid--row-break\" (click)=\"onExecute()\" [disabled]=\"formGroup.controls.recaptchaAction.invalid || formGroup.controls.recaptchaSiteKey.invalid || !isInitialized || isBusy\">\r\n        Execute\r\n      </forge-button>\r\n      <forge-button variant=\"outlined\" (click)=\"onAssess()\" [disabled]=\"!token?.length || formGroup.invalid || isBusy\">Assess</forge-button>\r\n    </div>\r\n\r\n    <div class=\"form-grid--col-span\">\r\n      @if (isBusy) {\r\n        <forge-linear-progress class=\"form-grid--col-span\"></forge-linear-progress>\r\n      } @else {\r\n        <forge-divider></forge-divider>\r\n      }\r\n    </div>\r\n\r\n    <forge-label-value class=\"form-grid--col-span\">\r\n      <span slot=\"label\">Assessment</span>\r\n      <pre slot=\"value\" style=\"margin: 0\">{{ assessment | json }}</pre>\r\n    </forge-label-value>\r\n    <forge-label-value class=\"form-grid--col-span\">\r\n      <span slot=\"label\">Token</span>\r\n      <span slot=\"value\">{{ token }}</span>\r\n    </forge-label-value>\r\n  </form>\r\n</div>\r\n"],
  "mappings": "wgBC2CQA,EAAA,EAAA,wBAAA,EAAA,uBAEAA,EAAA,EAAA,eAAA,EDbR,IAAaC,IAAkB,IAAA,CAAzB,IAAOA,EAAP,MAAOA,CAAkB,CAf/BC,aAAA,CAgBU,KAAAC,OAASC,EAAOC,CAAM,EACtB,KAAAC,iBAAmBF,EAAOG,CAAgB,EAC1C,KAAAC,aAAeJ,EAAOK,CAAY,EACnC,KAAAC,OAAS,GACT,KAAAC,cAAgB,GAEhB,KAAAC,UAAY,IAAIC,EAAU,CAC/BC,gBAAiB,IAAIC,EAA2B,OAAQ,CAAEC,WAAY,CAACC,EAAWC,QAAQ,CAAC,CAAE,EAC7FC,iBAAkB,IAAIJ,EAA2B,KAAM,CAAEC,WAAY,CAACC,EAAWC,QAAQ,CAAC,CAAE,EAC5FE,aAAc,IAAIL,EAA2B,KAAM,CAAEC,WAAY,CAACC,EAAWC,QAAQ,CAAC,CAAE,EACzF,EAkBMG,cAAY,CACjB,KAAKT,UAAUU,SAASH,iBAAiBI,QAAO,EAChD,KAAKb,OAAS,GAId,KAAKJ,iBACFkB,WAAW,KAAKZ,UAAUa,YAAW,EAAGN,gBAAgB,EACxDO,KAAKC,EAAS,IAAO,KAAKjB,OAAS,EAAM,CAAC,EAC1CkB,UAAU,CACTC,KAAMA,IAAK,CACT,KAAK1B,OAAO2B,IAAI,IAAK,CACnB,KAAKnB,cAAgB,EACvB,CAAC,EAED,KAAKH,aAAauB,KAAK,yBAAyB,CAClD,EACAC,MAAQC,GAAO,CACb,KAAKzB,aAAauB,KAAK,qEAAqE,CAC9F,EACD,CACL,CAEOG,WAAS,CACd,KAAKC,MAAQC,OACb,KAAKC,WAAaD,OAClB,KAAK1B,OAAS,GAEd,KAAKJ,iBACFgC,iBAAiB,KAAK1B,UAAU2B,MAAMzB,eAAe,EACrDY,KACCC,EAAS,IAAK,CACZ,KAAKjB,OAAS,EAChB,CAAC,CAAC,EAEHkB,UAAU,CACTC,KAAOW,GAAU,CACf,KAAKL,MAAQK,CACf,EACAR,MAAQC,GAAO,CACbQ,QAAQC,IAAIT,CAAG,EACf,KAAKzB,aAAauB,KAAK,6CAA6C,CACtE,EACD,CACL,CAEOY,UAAQ,CACb,KAAKN,WAAaD,OAClB,KAAK1B,OAAS,GAEd,KAAKJ,iBACFsC,YAAY,KAAKhC,UAAU2B,MAAMnB,aAAc,KAAKe,MAAO,KAAKvB,UAAU2B,MAAMzB,eAAe,EAC/FY,KAAKC,EAAS,IAAO,KAAKjB,OAAS,EAAM,CAAC,EAC1CkB,UAAU,CACTC,KAAOW,GAAU,CACf,KAAKH,WAAa,CAChBQ,MAAO,CACLC,eAAgBN,EAAOK,MAAMC,gBAE/BC,aAAc,CACZC,UAAWR,EAAOO,aAAaC,UAC/BC,MAAOT,EAAOO,aAAaE,OAE7BC,gBAAiB,CACfC,OAAQX,EAAOU,gBAAgBC,OAC/BC,WAAYC,EAAMC,WAAWd,EAAOU,gBAAgBE,WAAY,kBAAkB,EAClFG,cAAef,EAAOU,gBAAgBK,cACtCC,MAAOhB,EAAOU,gBAAgBM,QAGlCf,QAAQC,IAAIF,CAAM,CACpB,EACAR,MAAQC,GAAO,CACbQ,QAAQC,IAAIT,CAAG,EACf,KAAKzB,aAAauB,KAAK,6CAA6C,CACtE,EACD,CACL,yCA1GW9B,EAAkB,sBAAlBA,EAAkBwD,UAAA,CAAA,CAAA,gBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,OAAA,QAAA,EAAA,+BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,aAAA,GAAA,eAAA,MAAA,EAAA,YAAA,EAAA,WAAA,EAAA,CAAA,EAAA,sBAAA,sBAAA,EAAA,CAAA,OAAA,OAAA,EAAA,CAAA,OAAA,QAAA,EAAA,+BAAA,EAAA,CAAA,OAAA,6DAAA,SAAA,QAAA,EAAA,CAAA,OAAA,+CAAA,SAAA,QAAA,EAAA,CAAA,OAAA,OAAA,KAAA,qBAAA,kBAAA,iBAAA,EAAA,CAAA,MAAA,qBAAA,OAAA,OAAA,EAAA,CAAA,EAAA,sBAAA,EAAA,CAAA,OAAA,OAAA,KAAA,uBAAA,kBAAA,kBAAA,EAAA,CAAA,MAAA,uBAAA,OAAA,OAAA,EAAA,CAAA,OAAA,cAAA,EAAA,0BAAA,EAAA,CAAA,OAAA,OAAA,KAAA,6BAAA,kBAAA,cAAA,EAAA,CAAA,MAAA,6BAAA,OAAA,OAAA,EAAA,CAAA,EAAA,uBAAA,oBAAA,EAAA,CAAA,UAAA,WAAA,EAAA,QAAA,UAAA,EAAA,CAAA,UAAA,WAAA,EAAA,uBAAA,EAAA,QAAA,UAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,OAAA,QAAA,EAAA,SAAA,GAAA,EAAA,CAAA,OAAA,OAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IChC/BE,EAAA,EAAA,gBAAA,CAAA,EAA8B,EAAA,KAAA,CAAA,EAC2BC,EAAA,EAAA,kBAAA,EAAgBC,EAAA,EAAK,EAG9EF,EAAA,EAAA,MAAA,CAAA,EAAkB,EAAA,OAAA,CAAA,EAC8D,EAAA,MAAA,CAAA,EACtB,EAAA,mBAAA,EACjC,EAAA,OAAA,CAAA,EACEC,EAAA,EAAA,WAAA,EAASC,EAAA,EAC5BF,EAAA,EAAA,MAAA,CAAA,EAAwD,GAAA,IAAA,CAAA,EAC+BC,EAAA,GAAA,yBAAA,EAAuBC,EAAA,EAC5GF,EAAA,GAAA,IAAA,CAAA,EAAuEC,EAAA,GAAA,yBAAA,EAAuBC,EAAA,EAAI,EAC9F,EACY,EAGtBF,EAAA,GAAA,kBAAA,EACEhE,EAAA,GAAA,QAAA,CAAA,EACAgE,EAAA,GAAA,QAAA,EAAA,EAA6CC,EAAA,GAAA,QAAA,EAAMC,EAAA,EAAQ,EAE7DF,EAAA,GAAA,mBAAA,EAAA,EACEhE,EAAA,GAAA,QAAA,EAAA,EACAgE,EAAA,GAAA,QAAA,EAAA,EAA+CC,EAAA,GAAA,UAAA,EAAQC,EAAA,EACvDF,EAAA,GAAA,OAAA,EAAA,EAA0DC,EAAA,GAAA,qEAAA,EAAmEC,EAAA,EAC7HF,EAAA,GAAA,OAAA,EAAA,EAA0DC,EAAA,GAAA,sDAAA,EAAoDC,EAAA,EAC9GF,EAAA,GAAA,OAAA,EAAA,EAA0DC,EAAA,GAAA,oCAAA,EAAkCC,EAAA,EAAO,EAErGF,EAAA,GAAA,mBAAA,EAAA,EACEhE,EAAA,GAAA,QAAA,EAAA,EACAgE,EAAA,GAAA,QAAA,EAAA,EAAqDC,EAAA,GAAA,gBAAA,EAAcC,EAAA,EACnEF,EAAA,GAAA,OAAA,EAAA,EAA0DC,EAAA,GAAA,+CAAA,EAA6CC,EAAA,EACvGF,EAAA,GAAA,OAAA,EAAA,EAA0DC,EAAA,GAAA,+DAAA,EAA6DC,EAAA,EAAO,EAEhIF,EAAA,GAAA,MAAA,EAAA,EAAqD,GAAA,eAAA,EAAA,EAClBG,EAAA,QAAA,UAAA,CAAA,OAASJ,EAAA1C,aAAA,CAAc,CAAA,EAA4E4C,EAAA,GAAA,YAAA,EAAUC,EAAA,EAC9IF,EAAA,GAAA,eAAA,EAAA,EAA8DG,EAAA,QAAA,UAAA,CAAA,OAASJ,EAAA7B,UAAA,CAAW,CAAA,EAChF+B,EAAA,GAAA,WAAA,EACFC,EAAA,EACAF,EAAA,GAAA,eAAA,EAAA,EAAiCG,EAAA,QAAA,UAAA,CAAA,OAASJ,EAAApB,SAAA,CAAU,CAAA,EAA6DsB,EAAA,GAAA,QAAA,EAAMC,EAAA,EAAe,EAGxIF,EAAA,GAAA,MAAA,EAAA,EACEI,EAAA,GAAAC,EAAA,EAAA,EAAA,wBAAA,EAAA,EAAc,GAAAC,EAAA,EAAA,EAAA,eAAA,EAKhBJ,EAAA,EAEAF,EAAA,GAAA,oBAAA,EAAA,EAA+C,GAAA,OAAA,CAAA,EAC1BC,EAAA,GAAA,YAAA,EAAUC,EAAA,EAC7BF,EAAA,GAAA,MAAA,EAAA,EAAoCC,EAAA,EAAA,eAAuBC,EAAA,EAAM,EAEnEF,EAAA,GAAA,oBAAA,EAAA,EAA+C,GAAA,OAAA,CAAA,EAC1BC,EAAA,GAAA,OAAA,EAAKC,EAAA,EACxBF,EAAA,GAAA,OAAA,EAAA,EAAmBC,EAAA,EAAA,EAAWC,EAAA,EAAO,EACnB,EACf,SApD6BK,EAAA,CAAA,EAAAC,EAAA,YAAAT,EAAAnD,SAAA,EA6B0B2D,EAAA,EAAA,EAAAC,EAAA,WAAAT,EAAAnD,UAAAU,SAAAH,iBAAAsD,SAAAV,EAAApD,aAAA,EAC0B4D,EAAA,CAAA,EAAAC,EAAA,WAAAT,EAAAnD,UAAAU,SAAAR,gBAAA2D,SAAAV,EAAAnD,UAAAU,SAAAH,iBAAAsD,SAAA,CAAAV,EAAApD,eAAAoD,EAAArD,MAAA,EAG9B6D,EAAA,CAAA,EAAAC,EAAA,WAAA,EAAAT,EAAA5B,OAAA,MAAA4B,EAAA5B,MAAAuC,SAAAX,EAAAnD,UAAA6D,SAAAV,EAAArD,MAAA,EAItD6D,EAAA,CAAA,EAAAI,EAAAZ,EAAArD,OAAA,GAAA,EAAA,EASoC6D,EAAA,CAAA,EAAAK,EAAAC,EAAA,GAAA,EAAAd,EAAA1B,UAAA,CAAA,EAIjBkC,EAAA,CAAA,EAAAK,EAAAb,EAAA5B,KAAA,kBDnCrB2C,EACAC,EAAmBC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACnBC,EAAiBC,EACjBC,EAAkBC,EAClBC,EAAqBC,EACrBC,EAAyBC,EACzBC,EAAoBC,EACpBC,EAAkBC,EAAAC,CAAA,EAAAC,OAAA,CAAA;;;;;;;8DAAA,CAAA,CAAA,EAKhB,IAAOlG,EAAPmG,SAAOnG,CAAkB,GAAA",
  "names": ["\u0275\u0275element", "ReCaptchaComponent", "constructor", "ngZone", "inject", "NgZone", "reCatpchaService", "ReCaptchaService", "toastService", "ToastService", "isBusy", "isInitialized", "formGroup", "FormGroup", "recaptchaAction", "FormControl", "validators", "Validators", "required", "recaptchaSiteKey", "googleAPIKey", "onInitialize", "controls", "disable", "initialize", "getRawValue", "pipe", "finalize", "subscribe", "next", "run", "show", "error", "err", "onExecute", "token", "undefined", "assessment", "executeChallenge", "value", "result", "console", "log", "onAssess", "assessToken", "event", "expectedAction", "riskAnalysis", "challenge", "score", "tokenProperties", "action", "createTime", "Utils", "formatDate", "invalidReason", "valid", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275conditionalCreate", "ReCaptchaComponent_Conditional_44_Template", "ReCaptchaComponent_Conditional_45_Template", "\u0275\u0275advance", "\u0275\u0275property", "invalid", "length", "\u0275\u0275conditional", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "CommonModule", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "ForgeButtonModule", "ButtonComponent", "ForgeDividerModule", "DividerComponent", "ForgeLabelValueModule", "LabelValueComponent", "ForgeLinearProgressModule", "LinearProgressComponent", "ForgeTextFieldModule", "TextFieldComponent", "ForgeToolbarModule", "ToolbarComponent", "JsonPipe", "styles", "_ReCaptchaComponent"]
}
