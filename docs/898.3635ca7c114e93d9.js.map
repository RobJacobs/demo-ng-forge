{"version":3,"file":"898.3635ca7c114e93d9.js","mappings":"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","names":["PeopleComponent","static","this","t","core","VBU","selectors","standalone","features","i0","decls","vars","template","rf","ctx","RouterOutlet","styles","TableUtils","createLinkButton","label","clickHandler","linkElement","document","createElement","classList","add","innerText","toString","type","style","minWidth","addEventListener","createIconButton","icon","title","iconButtonElement","buttonElement","iconElement","setAttribute","appendChild","tooltipElement","innerHTML","createMenuButton","selectHandler","options","menuElement","undefined","createExpanderRow","rowIndex","tableElement","viewContainerRef","component","data","callback","componentRef","expanderElement","isExpanded","isRowExpanded","querySelector","collapseRow","then","destroy","expandRow","createComponent","instance","isDefined","hostView","rootNodes","BaseTableComponent","constructor","recordCount","tableColumns","initializeSort","filterCache","sort","property","length","column","find","c","sortDirection","direction","initialSort","isFiltered","filters","getColumnIndex","findIndex","onTableSort","columnProperty","getColumnPropertyFromEventIndex","columnIndex","skip","getRecords","onTablePaginatorChange","detail","pageIndex","pageSize","take","setTableFiltersAF","window","cancelAnimationFrame","resetTable","index","filter","hidden","jDH","factory","ɵfac","ctx_r0","tooltip","RouterlinkButtonComponent","inputs","route","queryParams","disabled","consts","RouterlinkButtonComponent_Conditional_3_Template","_c0","CommonModule","i1","RouterModule","i2","ForgeIconButtonModule","i3","ForgeIconModule","ForgeTooltipModule","filter_r1","FilterChipsComponent","EventEmitter","onFilterDelete","event","filterIndex","f","value","splice","emit","outputs","$event","FilterChipsComponent_For_2_Template","ForgeChipModule","ForgeChipSetModule","PeopleCacheService","homeView","storageKey","showFilter","SortDirection","Ascending","FilterComponent","appCache","inject","AppCacheService","cache","viewCache","formGroup","FormGroup","firstName","FormControl","lastName","gender","occupation","facet","genderOptions","facetFilter","push","of","ngOnInit","loadForm","onClearFilter","reset","onApplyFilter","Object","entries","Utils","reduceObject","map","e","propertyLabel","forEach","formControl","get","setValue","ReactiveFormsModule","ForgeButtonModule","ForgeDividerModule","ForgeDrawerModule","ForgeSelectModule","ForgeTextFieldModule","AutocompleteRangeComponent","ctx_r2","column_r4","header","_r2","HomeComponent_Conditional_8_Conditional_3_Template","HomeComponent_Conditional_8_Conditional_4_Template","onTableOptionSelected","HomeComponent_Conditional_8_For_12_Template","selectedTableColumns","optionalTableColumns","selectedPeople","_r5","HomeComponent","super","router","Router","appDataService","AppDataService","ViewContainerRef","ngZone","NgZone","isBusy","recordset","storageColumns","localStorage","getItem","columns","JSON","parse","isArray","storedColumn","sc","width","align","CellAlign","Center","cellElement","imgElement","src","formatNumber","id","sortable","filterDelegate","TextFieldComponentDelegate","Right","run","peopleTable","TableDetailComponent","console","log","navigate","ngOnDestroy","onPeopleSelected","clearSelection","clearSelections","getSelectedRows","includes","setItem","stringify","reloadFilter","peopleFilter","getPeople","pipe","finalize","subscribe","result","count","viewQuery","HomeComponent_Conditional_8_Template","HomeComponent_Conditional_9_Template","_r1","HomeComponent_Conditional_12_Template","HomeComponent_Conditional_13_Template","HomeComponent_Conditional_14_Template","_c1","_c2","ForgeBadgeModule","ForgeOptionModule","ForgePaginatorModule","ForgeSelectDropdownModule","ForgeSkeletonModule","ForgeTableModule","ForgeToolbarModule","DetailComponent","ActivatedRoute","noImageUrl","snapshot","params","getPerson","r","person","imageUrl","onNavigate","onViewWiki","open","url","onImageError","targetElement","target","onerror","quote","ForgeLabelValueModule","PEOPLE_ROUTES","path","providers","children","redirectTo","pathMatch","CardComponent","border","raisedClass","outlinedClass","_angular_core__WEBPACK_IMPORTED_MODULE_0__","hostVars","hostBindings"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/people/people.component.ts","./src/app/people/people.component.html","./src/app/shared/table/utils.ts","./src/app/shared/table/base-table.component.ts","./src/app/shared/components/routerlink-button/routerlink-button.component.html","./src/app/shared/components/routerlink-button/routerlink-button.component.ts","./src/app/shared/components/filter-chips/filter-chips.component.html","./src/app/shared/components/filter-chips/filter-chips.component.ts","./src/app/people/people-cache.service.ts","./src/app/people/home/filter/filter.component.ts","./src/app/people/home/filter/filter.component.html","./src/app/people/home/home.component.html","./src/app/people/home/home.component.ts","./src/app/people/detail/detail.component.ts","./src/app/people/detail/detail.component.html","./src/app/people/routes.ts","./src/app/shared/components/card/card.component.ts","./src/app/shared/components/card/card.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-people',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet\r\n  ],\r\n  templateUrl: './people.component.html',\r\n  styleUrls: ['./people.component.scss']\r\n})\r\nexport class PeopleComponent {\r\n}\r\n","<router-outlet></router-outlet>","import { isDefined } from '@tylertech/forge-core';\r\nimport { TableComponent, IMenuOption, MenuComponent } from '@tylertech/forge';\r\nimport { ViewContainerRef, ComponentRef, EmbeddedViewRef, Type } from '@angular/core';\r\n\r\nexport class TableUtils {\r\n  public static createLinkButton(label: string | number, clickHandler: (event: Event) => void): HTMLButtonElement {\r\n    const linkElement = document.createElement('button');\r\n    linkElement.classList.add('forge-hyperlink');\r\n    linkElement.innerText = label.toString();\r\n    linkElement.type = 'button';\r\n    linkElement.style.minWidth = '36px';\r\n    linkElement.addEventListener('click', clickHandler);\r\n    return linkElement;\r\n  }\r\n\r\n  public static createIconButton(icon: string, clickHandler?: (event: Event) => void, title?: string): HTMLElement {\r\n    const iconButtonElement = document.createElement('forge-icon-button');\r\n\r\n    const buttonElement = document.createElement('button');\r\n    buttonElement.type = 'button';\r\n    if (clickHandler) {\r\n      buttonElement.addEventListener('click', clickHandler);\r\n    }\r\n\r\n    const iconElement = document.createElement('forge-icon');\r\n    iconElement.setAttribute('name', icon);\r\n\r\n    buttonElement.appendChild(iconElement);\r\n    iconButtonElement.appendChild(buttonElement);\r\n\r\n    if (title) {\r\n      const tooltipElement = document.createElement('forge-tooltip');\r\n      tooltipElement.innerHTML = title;\r\n      buttonElement.appendChild(tooltipElement);\r\n    }\r\n    return iconButtonElement;\r\n  }\r\n\r\n  public static createMenuButton(icon: string, selectHandler: (event: Event) => void, options: IMenuOption[], title?: string): HTMLElement {\r\n    const menuElement = document.createElement('forge-menu') as MenuComponent;\r\n    menuElement.options = options;\r\n    menuElement.addEventListener('forge-menu-select', selectHandler);\r\n\r\n    menuElement.appendChild(this.createIconButton(icon, undefined, title));\r\n\r\n    return menuElement;\r\n  }\r\n\r\n  public static createExpanderRow<T>(\r\n    rowIndex: number,\r\n    tableElement: TableComponent,\r\n    viewContainerRef: ViewContainerRef,\r\n    component: Type<T>,\r\n    title?: string,\r\n    data?: any,\r\n    callback?: (value?: any) => any\r\n  ): HTMLElement {\r\n    let componentRef: ComponentRef<any> | null;\r\n\r\n    const expanderElement = TableUtils.createIconButton(\r\n      'expand_more',\r\n      () => {\r\n        const isExpanded = tableElement.isRowExpanded(rowIndex);\r\n        expanderElement.querySelector('forge-icon')?.setAttribute('name', isExpanded ? 'expand_more' : 'expand_less');\r\n        if (isExpanded) {\r\n          tableElement.collapseRow(rowIndex).then(() => {\r\n            componentRef?.destroy();\r\n            componentRef = null;\r\n          });\r\n        } else {\r\n          tableElement.expandRow(rowIndex, () => {\r\n            componentRef = viewContainerRef.createComponent(component);\r\n            componentRef.instance.rowIndex = rowIndex;\r\n            if (isDefined(data)) {\r\n              componentRef.instance.data = data;\r\n            }\r\n            if (isDefined(callback)) {\r\n              componentRef.instance.callback = callback;\r\n            }\r\n            const rootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n            return rootNode;\r\n          });\r\n        }\r\n      },\r\n      title\r\n    );\r\n\r\n    return expanderElement;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { IColumnConfiguration, SortDirection } from '@tylertech/forge';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport abstract class BaseTableComponent {\r\n  public recordCount = 0;\r\n  public tableColumns: IColumnConfiguration[] = [];\r\n\r\n  private setTableFiltersAF?: number;\r\n\r\n  public abstract filterCache: IFilterParameter;\r\n\r\n  constructor() { }\r\n\r\n  public initializeSort() {\r\n    if (this.filterCache?.sort?.property.length) {\r\n      const column = this.tableColumns.find((c) => c.property === this.filterCache?.sort?.property) as IColumnConfiguration;\r\n      if (isDefined(column)) {\r\n        column.sortDirection = this.filterCache?.sort?.direction;\r\n        column.initialSort = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public get isFiltered(): boolean {\r\n    return this.filterCache?.filters?.length ? true : false;\r\n  }\r\n\r\n  public getColumnIndex(property: string): number {\r\n    return this.tableColumns.findIndex(c => c.property === property);\r\n  }\r\n\r\n  public onTableSort(sort: { columnIndex: number; direction: SortDirection }): void {\r\n    const columnProperty = this.getColumnPropertyFromEventIndex(sort.columnIndex) as string;\r\n    this.filterCache.sort = { property: columnProperty, direction: sort.direction };\r\n    this.filterCache.skip = 0;\r\n    this.getRecords();\r\n  }\r\n\r\n  public onTablePaginatorChange(detail: { pageIndex: number; pageSize: number }): void {\r\n    this.filterCache.skip = detail.pageIndex * detail.pageSize;\r\n    this.filterCache.take = detail.pageSize;\r\n    this.getRecords();\r\n  }\r\n\r\n  protected destroy(): void {\r\n    if (this.setTableFiltersAF) {\r\n      window.cancelAnimationFrame(this.setTableFiltersAF);\r\n    }\r\n  }\r\n\r\n  protected resetTable(): void {\r\n    this.filterCache.filters = undefined;\r\n    this.filterCache.skip = 0;\r\n  }\r\n\r\n  private getColumnPropertyFromEventIndex(index: number) {\r\n    return this.tableColumns.filter((c) => !c.hidden)[index].property;\r\n  }\r\n\r\n  protected abstract getRecords(): void;\r\n}\r\n","<forge-icon-button>\r\n  <a [routerLink]=\"route\" [queryParams]=\"queryParams\" class=\"forge-icon-button\" [ngClass]=\"{'routerlink--disabled': disabled}\">\r\n    <forge-icon [name]=\"icon\"></forge-icon>\r\n  </a>\r\n  @if (tooltip?.length) {\r\n  <forge-tooltip>{{tooltip}}</forge-tooltip>\r\n  }\r\n</forge-icon-button>","import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeTooltipModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-routerlink-button',\r\n  templateUrl: './routerlink-button.component.html',\r\n  styleUrls: ['./routerlink-button.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeTooltipModule\r\n  ]\r\n})\r\nexport class RouterlinkButtonComponent {\r\n  @Input()\r\n  public route?: string;\r\n\r\n  @Input()\r\n  public queryParams?: any;\r\n\r\n  @Input()\r\n  public icon?: string;\r\n\r\n  @Input()\r\n  public tooltip?: string;\r\n\r\n  @Input()\r\n  public disabled?: boolean;\r\n}\r\n","<forge-chip-set type=\"input\" dense=\"true\" (forge-chip-delete)=\"onFilterDelete($event)\">\r\n  @for (filter of filters; track i; let i = $index) {\r\n  <forge-chip [value]=\"filter.property\">{{filter.label}}</forge-chip>\r\n  }\r\n</forge-chip-set>","import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ForgeChipModule, ForgeChipSetModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-filter-chips',\r\n  templateUrl: './filter-chips.component.html',\r\n  styleUrls: ['./filter-chips.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeChipModule,\r\n    ForgeChipSetModule\r\n  ],\r\n})\r\nexport class FilterChipsComponent {\r\n  @Input()\r\n  public filters: { property: string; value: string; label: string }[] = [];\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public onFilterDelete(event: CustomEvent) {\r\n    const filterIndex = this.filters.findIndex((f) => f.property === event.detail.value);\r\n    if (filterIndex !== -1) {\r\n      this.filters.splice(filterIndex, 1);\r\n      this.filter.emit();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SortDirection } from '@tylertech/forge';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\n\r\n@Injectable()\r\nexport class PeopleCacheService {\r\n  public people?: IPerson[];\r\n  public homeView = {\r\n    storageKey: 'people-home',\r\n    showFilter: false,\r\n    filter: {\r\n      sort: {\r\n        property: 'lastName',\r\n        direction: SortDirection.Ascending\r\n      },\r\n      filters: [] as any[],\r\n      skip: 0,\r\n      take: 25\r\n    }\r\n  };\r\n}\r\n","import { Component, OnInit, Output, EventEmitter, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { IOption } from '@tylertech/forge';\r\nimport { ForgeButtonModule, ForgeDividerModule, ForgeDrawerModule, ForgeIconButtonModule, ForgeIconModule, ForgeSelectModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AutocompleteRangeComponent } from 'src/app/shared/components/autocomplete-range/autocomplete-range.component';\r\nimport { PeopleCacheService } from '../../people-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-people-home-filter',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDividerModule,\r\n    ForgeDrawerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeSelectModule,\r\n    ForgeTextFieldModule,\r\n    AutocompleteRangeComponent\r\n  ],\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnInit {\r\n  public appCache = inject(AppCacheService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  @Output()\r\n  public filter = new EventEmitter();\r\n\r\n  public viewCache = this.cache.homeView;\r\n  public formGroup = new FormGroup({\r\n    firstName: new FormControl(),\r\n    lastName: new FormControl(),\r\n    gender: new FormControl(),\r\n    occupation: new FormControl(),\r\n    facet: new FormControl()\r\n  });\r\n  public genderOptions: IOption[] = [\r\n    { label: 'Male', value: 'male' },\r\n    { label: 'Female', value: 'female' },\r\n    { label: 'Undecided', value: 'undecided' }\r\n  ];\r\n\r\n  public facetFilter = (filter: string): Observable<IOption[]> => {\r\n    const options = [];\r\n    for (let index = 0; index < 20; index++) {\r\n      options.push({ value: index, label: `Facet Option ${index}` });\r\n    }\r\n    return of(options);\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.loadForm(this.cache.homeView.filter.filters);\r\n  }\r\n\r\n  public onClearFilter() {\r\n    this.formGroup.reset();\r\n    this.cache.homeView.filter.filters = [];\r\n  }\r\n\r\n  public onApplyFilter() {\r\n    this.cache.homeView.filter.filters = Object.entries(Utils.reduceObject(this.formGroup.value)).map(e => ({ property: e[0], value: e[1], label: this.propertyLabel(e[0]) })) || [];\r\n    this.filter.emit();\r\n  }\r\n\r\n  public loadForm(filters: any[]) {\r\n    this.formGroup.reset();\r\n    filters.forEach((f) => {\r\n      const formControl = this.formGroup.get(f.property);\r\n      if (formControl) {\r\n        formControl.setValue(f.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private propertyLabel(property: string): string {\r\n    switch (property) {\r\n      case 'firstName':\r\n        return 'First name';\r\n      case 'lastName':\r\n        return 'Last name';\r\n      case 'gender':\r\n        return 'Gender';\r\n      case 'occupation':\r\n        return 'Occupation';\r\n      case 'facet':\r\n        return 'Facet';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n}\r\n","<forge-drawer direction=\"right\" type=\"dismissible\" [open]=\"viewCache.showFilter\" open=\"false\" (forge-drawer-close)=\"viewCache.showFilter = false\">\r\n  <div slot=\"header\" class=\"header\">\r\n    <span class=\"header__title forge-typography--subtitle1\">Filter people</span>\r\n    <forge-icon-button class=\"app--flex-right\">\r\n      <button type=\"button\" aria-label=\"Close\" (click)=\"viewCache.showFilter = false\">\r\n        <forge-icon name=\"close\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n  </div>\r\n\r\n  <form class=\"body\" [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" (ngSubmit)=\"onApplyFilter()\">\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"home-filter--first-name\" formControlName=\"firstName\">\r\n      <label for=\"home-filter--first-name\" slot=\"label\">First name</label>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"home-filter--last-name\" formControlName=\"lastName\">\r\n      <label for=\"home-filter--last-name\" slot=\"label\">Last name</label>\r\n    </forge-text-field>\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\" multiple=\"true\"></forge-select>\r\n    <forge-text-field>\r\n      <input type=\"text\" id=\"home-filter--occupation\" formControlName=\"occupation\">\r\n      <label for=\"home-filter--occupation\" slot=\"label\">Occupation</label>\r\n    </forge-text-field>\r\n    <forge-divider></forge-divider>\r\n    <app-autocomplete-range [optionFilter]=\"facetFilter\" formControlName=\"facet\" label=\"Facet\"></app-autocomplete-range>\r\n  </form>\r\n\r\n  <div slot=\"footer\" class=\"footer\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onClearFilter()\">Clear</button>\r\n    </forge-button>\r\n    <forge-button type=\"raised\">\r\n      <button type=\"submit\" (click)=\"onApplyFilter()\">Apply</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-drawer>","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">People</h2>\r\n  <!-- <forge-icon-button slot=\"end\">\r\n    <a routerLink=\"/profile\" class=\"forge-icon-button\">\r\n      <forge-icon name=\"view_column\"></forge-icon>\r\n    </a>\r\n  </forge-icon-button> -->\r\n  <app-routerlink-button slot=\"end\" route=\"/profile\" icon=\"person\"></app-routerlink-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <div [ngClass]=\"{'app--hidden': isBusy}\" class=\"table\">\r\n      <div class=\"table__header\" [ngClass]=\"{'table__header-action': selectedPeople.length}\">\r\n        @if (!selectedPeople.length) {\r\n        <app-filter-chips [filters]=\"filterCache.filters\" (filter)=\"onApplyFilter(true)\"></app-filter-chips>\r\n        <forge-button class=\"app--flex-right\" type=\"outlined\">\r\n          <button type=\"button\" (click)=\"viewCache.showFilter = !viewCache.showFilter\">\r\n            @if (filterCache.filters.length) {\r\n            <forge-badge class=\"table__header__filter-count\" theme=\"info-primary\">{{filterCache.filters.length}}</forge-badge>\r\n            } @else {\r\n            <forge-icon name=\"filter_list\"></forge-icon>\r\n            }\r\n            <span>Filter</span>\r\n          </button>\r\n        </forge-button>\r\n        <forge-icon-button id=\"home--column-select\" class=\"table__header__columns\">\r\n          <button type=\"button\" aria-label=\"Choose table columns\">\r\n            <forge-icon name=\"view_column\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n        <forge-select-dropdown target=\"#home--column-select\" multiple [value]=\"selectedTableColumns\" (change)=\"onTableOptionSelected($event.detail)\">\r\n          @for (column of optionalTableColumns; track i; let i = $index) {\r\n          <forge-option [value]=\"column.property\">\r\n            {{column.header}}\r\n          </forge-option>\r\n          }\r\n        </forge-select-dropdown>\r\n        } @else {\r\n        <span>{{selectedPeople.length}} people selected</span>\r\n        }\r\n      </div>\r\n\r\n      <forge-table #peopleTable class=\"table__body\" [ngClass]=\"{'app--hidden': !recordCount}\" [data]=\"recordset\" [columnConfigurations]=\"tableColumns\" (forge-table-sort)=\"onTableSort($any($event).detail)\" select=\"true\" select-key=\"id\" (forge-table-select)=\"onPeopleSelected()\" (forge-table-select-all)=\"onPeopleSelected()\" fixed-headers=\"true\"></forge-table>\r\n\r\n      @if (recordCount) {\r\n      <div class=\"table__footer\">\r\n        <forge-paginator class=\"app--flex-right\" [pageIndex]=\"filterCache.skip / filterCache.take\" [pageSize]=\"filterCache.take\" [total]=\"recordCount\" (forge-paginator-change)=\"onTablePaginatorChange($event.detail)\"></forge-paginator>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    @if (!isBusy && !recordCount) {\r\n    <div class=\"empty-state\">\r\n      <img src=\"https://cdn.forge.tylertech.com/v1/images/spot-hero/general-empty-state-spot-hero.svg\" alt=\"\" />\r\n      <div>No people found.</div>\r\n    </div>\r\n    }\r\n\r\n    @if (isBusy) {\r\n    <div class=\"busy-state\">\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n    </div>\r\n    }\r\n  </div>\r\n\r\n  <app-people-home-filter (filter)=\"onApplyFilter(false)\"></app-people-home-filter>\r\n</div>","import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs';\r\nimport { isArray } from '@tylertech/forge-core';\r\nimport { CellAlign, TableComponent, TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { ForgeBadgeModule, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeOptionModule, ForgePaginatorModule, ForgeSelectDropdownModule, ForgeSkeletonModule, ForgeTableModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { TableUtils } from 'src/app/shared/table/utils';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { BaseTableComponent } from 'src/app/shared/table/base-table.component';\r\nimport { RouterlinkButtonComponent } from 'src/app/shared/components/routerlink-button/routerlink-button.component';\r\nimport { FilterChipsComponent } from 'src/app/shared/components/filter-chips/filter-chips.component';\r\nimport { TableDetailComponent } from 'src/app/shared/components/table-detail/table-detail.component';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { FilterComponent } from './filter/filter.component';\r\n\r\n@Component({\r\n  selector: 'app-people-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeBadgeModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeOptionModule,\r\n    ForgePaginatorModule,\r\n    ForgeSelectDropdownModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule,\r\n    RouterlinkButtonComponent,\r\n    FilterChipsComponent,\r\n    FilterComponent\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseTableComponent implements OnInit, OnDestroy {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private ngZone = inject(NgZone);\r\n\r\n  @ViewChild('peopleTable', { static: true })\r\n  private peopleTable?: TableComponent;\r\n  @ViewChild(FilterComponent)\r\n  private peopleFilter?: FilterComponent;\r\n\r\n  public isBusy = false;\r\n  public recordset: Array<IPerson> = [];\r\n  public filterCache = this.cache.homeView.filter;\r\n  public viewCache = this.cache.homeView;\r\n  public optionalTableColumns = [\r\n    { property: 'image', header: 'Image', hidden: false },\r\n    { property: 'firstName', header: 'First', hidden: false },\r\n    { property: 'lastName', header: 'Last', hidden: false },\r\n    { property: 'gender', header: 'Gender', hidden: false },\r\n    { property: 'occupation', header: 'Occupation', hidden: false }\r\n  ];\r\n  public selectedPeople: IPerson[] = [];\r\n  public get selectedTableColumns() {\r\n    return this.optionalTableColumns.filter(c => !c.hidden).map(c => c.property);\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const storageColumns = localStorage.getItem(this.cache.homeView.storageKey);\r\n    if (storageColumns?.length) {\r\n      const columns = JSON.parse(storageColumns) as { property: string; hidden: boolean; }[];\r\n      if (isArray(columns)) {\r\n        this.optionalTableColumns.forEach(c => {\r\n          const storedColumn = columns.find((sc) => sc.property === c.property);\r\n          if (storedColumn) {\r\n            c.hidden = storedColumn.hidden;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    this.tableColumns = [\r\n      {\r\n        property: 'image',\r\n        width: 48,\r\n        align: CellAlign.Center,\r\n        hidden: this.optionalTableColumns.find((c) => c.property === 'image')?.hidden,\r\n        template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n          const imgElement = document.createElement('img') as HTMLImageElement;\r\n          imgElement.src = `mock-data/${Utils.formatNumber(data.id, '2.0-0')}-small.png`;\r\n          imgElement.setAttribute('alt', '');\r\n          imgElement.classList.add('forge-table-cell__image');\r\n          return imgElement;\r\n        }\r\n      },\r\n      { header: 'Id', property: 'id', sortable: true, filter: true, filterDelegate: new TextFieldComponentDelegate() },\r\n      {\r\n        header: 'First',\r\n        property: 'firstName',\r\n        sortable: true,\r\n        filter: true,\r\n        filterDelegate: new TextFieldComponentDelegate(),\r\n        hidden: this.optionalTableColumns.find((c) => c.property === 'firstName')?.hidden\r\n      },\r\n      {\r\n        header: 'Last',\r\n        property: 'lastName',\r\n        sortable: true,\r\n        filter: true,\r\n        filterDelegate: new TextFieldComponentDelegate(),\r\n        hidden: this.optionalTableColumns.find((c) => c.property === 'lastName')?.hidden\r\n      },\r\n      {\r\n        header: 'Gender',\r\n        property: 'gender',\r\n        sortable: true,\r\n        filter: true,\r\n        filterDelegate: new TextFieldComponentDelegate(),\r\n        hidden: this.optionalTableColumns.find((c) => c.property === 'gender')?.hidden\r\n      },\r\n      {\r\n        header: 'Occupation',\r\n        property: 'occupation',\r\n        sortable: true,\r\n        filter: true,\r\n        filterDelegate: new TextFieldComponentDelegate(),\r\n        hidden: this.optionalTableColumns.find((c) => c.property === 'occupation')?.hidden\r\n      },\r\n      {\r\n        align: CellAlign.Right,\r\n        template: (rowIndex: number, cellElement: HTMLElement, data: any) => {\r\n          this.ngZone.run(() => {\r\n            cellElement.appendChild(\r\n              TableUtils.createExpanderRow(\r\n                rowIndex,\r\n                this.peopleTable as TableComponent,\r\n                this.viewContainerRef,\r\n                TableDetailComponent,\r\n                'Toggle table detail',\r\n                data\r\n              )\r\n            );\r\n\r\n            cellElement.appendChild(TableUtils.createMenuButton(\r\n              'more_vert',\r\n              (event: Event) => {\r\n                console.log(event);\r\n              },\r\n              [\r\n                { value: 1, label: 'Option 1' },\r\n                { value: 2, label: 'Option 2' },\r\n                { value: 3, label: 'Option 3' }\r\n              ],\r\n              'More options'\r\n            ));\r\n\r\n            cellElement.appendChild(TableUtils.createIconButton(\r\n              'keyboard_arrow_right',\r\n              (event: Event) => {\r\n                this.router.navigate([`people/detail/${data.id}`]);\r\n              },\r\n              'View person details'\r\n            ));\r\n\r\n            // const componentRef = this.viewContainerRef.createComponent(RouterlinkButtonComponent);\r\n            // componentRef.instance.route = '/profile';\r\n            // componentRef.instance.queryParams = { id: data.id };\r\n            // componentRef.instance.icon = 'person';\r\n            // componentRef.instance.tooltip = 'Show profile';\r\n            // const linkButtonNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n            // cellElement.appendChild(linkButtonNode);\r\n          });\r\n\r\n          return '';\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.initializeSort();\r\n    this.getRecords();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.destroy();\r\n  }\r\n\r\n  public onPeopleSelected(clearSelection = false): void {\r\n    if (clearSelection) {\r\n      this.selectedPeople.length = 0;\r\n      this.peopleTable?.clearSelections();\r\n    } else {\r\n      this.selectedPeople = this.peopleTable?.getSelectedRows() as IPerson[];\r\n    }\r\n  }\r\n\r\n  public onTableOptionSelected(columns: string[]) {\r\n    this.tableColumns = this.tableColumns.map(c => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    this.optionalTableColumns = this.optionalTableColumns.map(c => {\r\n      if (columns.includes(c.property as string)) {\r\n        c.hidden = false;\r\n      } else {\r\n        c.hidden = true;\r\n      }\r\n      return c;\r\n    });\r\n    localStorage.setItem(\r\n      this.cache.homeView.storageKey,\r\n      JSON.stringify(this.optionalTableColumns.map((c) => ({ property: c.property, hidden: c.hidden })))\r\n    );\r\n  }\r\n\r\n  public onApplyFilter(reloadFilter: boolean) {\r\n    this.getRecords();\r\n    if (reloadFilter) {\r\n      (this.peopleFilter as FilterComponent).loadForm(this.filterCache.filters);\r\n    }\r\n  }\r\n\r\n  protected getRecords(): void {\r\n    this.onPeopleSelected(true);\r\n    this.isBusy = true;\r\n    this.appDataService\r\n      .getPeople({\r\n        sort: this.filterCache.sort,\r\n        filters: this.filterCache.filters,\r\n        skip: this.filterCache.skip,\r\n        take: this.filterCache.take\r\n      }).pipe(\r\n        finalize(() => this.isBusy = false)\r\n      )\r\n      .subscribe((result) => {\r\n        this.recordset = result.data;\r\n        this.recordCount = result.count;\r\n      });\r\n  }\r\n\r\n}\r\n","import { Component, inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPerson } from 'src/app/shared/interfaces/person.interface';\r\nimport { PeopleCacheService } from '../people-cache.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-people-detail',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeLabelValueModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent {\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  public appCache = inject(AppCacheService);\r\n  private appDataService = inject(AppDataService);\r\n  public cache = inject(PeopleCacheService);\r\n\r\n  public person?: IPerson;\r\n  public imageUrl?: string;\r\n  public index = 0;\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  constructor() {\r\n    const id = this.route.snapshot.params['id'];\r\n    if (isDefined(id)) {\r\n      this.appDataService.getPerson(id).subscribe((r) => {\r\n        this.person = r;\r\n        this.imageUrl = `mock-data/${Utils.formatNumber(this.person?.id as number, '2.0-0')}.png`;\r\n      });\r\n    } else {\r\n      this.router.navigate(['people/home']);\r\n    }\r\n  }\r\n\r\n  public onNavigate(route: string): void {\r\n    switch (route) {\r\n      case 'back':\r\n        this.router.navigate(['people/home']);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onViewWiki(): void {\r\n    window.open(this.person?.url, '_blank');\r\n  }\r\n\r\n  public onImageError(event: Event): void {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button>\r\n      <button (click)=\"onNavigate('back')\" aria-label=\"Go back\">\r\n        <forge-icon name=\"arrow_back\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--title\">{{person?.firstName + ' ' + person?.lastName}}</h2>\r\n  </div>\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onViewWiki()\" [disabled]=\"!person?.url?.length\">View wiki</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__left\">\r\n    <forge-label-value>\r\n      <span slot=\"label\">Gender</span>\r\n      <span slot=\"value\">{{person?.gender}}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Occupation</span>\r\n      <span slot=\"value\">{{person?.occupation}}</span>\r\n    </forge-label-value>\r\n    <forge-label-value>\r\n      <span slot=\"label\">Quote</span>\r\n      <span slot=\"value\">{{person?.quote}}</span>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <div class=\"body__right\">\r\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt=\"\" />\r\n  </div>\r\n</div>","import { Routes } from '@angular/router';\r\nimport { PeopleComponent } from './people.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { PeopleCacheService } from './people-cache.service';\r\n\r\nexport const PEOPLE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: PeopleComponent,\r\n    providers: [\r\n      PeopleCacheService\r\n    ],\r\n    children: [\r\n      { path: 'home', component: HomeComponent },\r\n      { path: 'detail', component: DetailComponent },\r\n      { path: 'detail/:id', component: DetailComponent },\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, HostBinding, Input } from '@angular/core';\r\nimport { ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeToolbarModule\r\n  ]\r\n})\r\nexport class CardComponent {\r\n  @HostBinding('class.app-card--raised')\r\n  public get raisedClass() { return this.border === 'raised'; }\r\n  @HostBinding('class.app-card--outlined')\r\n  public get outlinedClass() { return this.border === 'outlined'; }\r\n\r\n  @Input()\r\n  public border: 'raised' | 'outlined' = 'raised';\r\n}\r\n","<forge-toolbar class=\"header\" slot=\"header\">\r\n  <ng-content select=\"[app-card-header]\"></ng-content>\r\n</forge-toolbar>\r\n<div class=\"body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<forge-toolbar class=\"footer\" slot=\"footer\" inverted=\"true\">\r\n  <ng-content select=\"[app-card-footer]\"></ng-content>\r\n</forge-toolbar>"],"x_google_ignoreList":[]}