{
  "version": 3,
  "sources": ["src/app/app-pets.service.ts", "src/app/app.routes.ts", "src/app/shared/interceptors/interceptors.ts", "src/app/app.config.ts", "src/app/shared/components/header/header.component.ts", "src/app/shared/components/header/header.component.html", "src/app/app.component.ts", "src/app/app.component.html", "src/define-icons.ts", "src/main.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { AppCacheService } from './app-cache.service';\nimport { IPetsService } from '@demo-ng-forge/pets';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppPetsService implements IPetsService {\n  public appCache = inject(AppCacheService);\n}\n", "import { Component, inject, Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRoute,\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanActivateFn,\r\n  CanDeactivate,\r\n  CanDeactivateFn,\r\n  RouterStateSnapshot,\r\n  Routes\r\n} from '@angular/router';\r\nimport { PETS_SERVICE } from '@demo-ng-forge/pets';\r\nimport { AppPetsService } from './app-pets.service';\r\nimport { AppCacheService } from './app-cache.service';\r\nimport { ReCaptchaService } from './re-captcha/re-captcha.service';\r\n\r\n@Injectable()\r\nexport class RootRouteGuard implements CanActivate, CanDeactivate<Component> {\r\n  private appCache = inject(AppCacheService);\r\n  private route = inject(ActivatedRoute);\r\n\r\n  canActivate: CanActivateFn = (currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot) => {\r\n    this.appCache.previousRoute = AppCacheService.getResolvedUrl(this.route.snapshot);\r\n    this.appCache.currentRoute = AppCacheService.getResolvedUrl(currentRoute);\r\n    return true;\r\n  };\r\n\r\n  canDeactivate: CanDeactivateFn<Component> = (\r\n    component: Component,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState: RouterStateSnapshot\r\n  ) => {\r\n    return true;\r\n  };\r\n}\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    providers: [RootRouteGuard],\r\n    canActivate: [RootRouteGuard],\r\n    canDeactivate: [RootRouteGuard],\r\n    runGuardsAndResolvers: 'always',\r\n    // canActivateChild: [\r\n    //   (currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot) => {\r\n    //     return true;\r\n    //   }\r\n    // ],\r\n    children: [\r\n      {\r\n        path: 'dashboard',\r\n        title: 'Dashboard',\r\n        loadComponent: () => import('./dashboard/dashboard.component').then((m) => m.DashboardComponent)\r\n      },\r\n      {\r\n        path: 'profile',\r\n        title: 'Profile',\r\n        loadChildren: () => import('./profile/routes').then((m) => m.PROFILE_ROUTES)\r\n      },\r\n      {\r\n        path: 'people',\r\n        title: 'People',\r\n\r\n        loadChildren: () => import('./people/routes').then((m) => m.PEOPLE_ROUTES)\r\n      },\r\n      {\r\n        path: 'test',\r\n        title: 'Test',\r\n        loadChildren: () => import('./test/routes').then((m) => m.TEST_ROUTES)\r\n      },\r\n      {\r\n        path: 'pets',\r\n        title: 'Pets',\r\n        providers: [{ provide: PETS_SERVICE, useExisting: AppPetsService }],\r\n        loadChildren: () => import('projects/pets/src/lib/pets.config').then((m) => m.PETS_ROUTES)\r\n      },\r\n      {\r\n        path: 'search',\r\n        title: 'Search',\r\n        loadComponent: () => import('./search/search.component').then((m) => m.SearchComponent)\r\n      },\r\n      {\r\n        path: 'query-builder',\r\n        title: 'Query Builder',\r\n        loadComponent: () => import('./query-builder/query-builder.component').then((m) => m.QueryBuilderComponent)\r\n      },\r\n      {\r\n        path: 'icons',\r\n        title: 'Icons',\r\n        loadComponent: () => import('./icons/icons.component').then((m) => m.IconsComponent)\r\n      },\r\n      {\r\n        path: 'examples',\r\n        title: 'Examples',\r\n        loadChildren: () => import('./examples/routes').then((m) => m.EXAMPLES_ROUTES)\r\n      },\r\n      {\r\n        path: 'formly-demo',\r\n        title: 'Formly demo',\r\n        loadChildren: () => import('./formly-demo/formly-demo.module').then((m) => m.FormlyDemoModule)\r\n      },\r\n      {\r\n        path: 'table-demo',\r\n        title: 'Table demo',\r\n        loadComponent: () => import('./table-demo/table-demo.component').then((m) => m.TableDemoComponent)\r\n      },\r\n      {\r\n        path: 'ag-grid-demo',\r\n        title: 'AG Grid demo',\r\n        loadComponent: () => import('./ag-grid-demo/ag-grid-demo.component').then((m) => m.AgGridDemoComponent)\r\n      },\r\n      {\r\n        path: 'storage',\r\n        title: 'Storage',\r\n        loadComponent: () => import('./storage/storage.component').then((m) => m.StorageComponent)\r\n      },\r\n      {\r\n        path: 'imask',\r\n        title: 'IMask',\r\n        loadComponent: () => import('./imask/imask.component').then((m) => m.ImaskComponent)\r\n      },\r\n      {\r\n        path: 'charts',\r\n        title: 'Charts',\r\n        loadComponent: () => import('./charts/charts.component').then((m) => m.ChartsComponent)\r\n      },\r\n      {\r\n        path: 'text-edit',\r\n        title: 'Text edit',\r\n        loadComponent: () => import('./text-editor/text-editor.component').then((m) => m.TextEditorComponent)\r\n      },\r\n      {\r\n        path: 'pdf-viewer',\r\n        title: 'PDF Viewer',\r\n        loadComponent: () => import('./pdf-viewer-demo/pdf-viewer-demo.component').then((m) => m.PdfViewerDemoComponent)\r\n      },\r\n      {\r\n        path: 'css-variables',\r\n        title: 'CSS variables',\r\n        loadComponent: () => import('./css-variables/css-variables.component').then((m) => m.CssVariablesComponent)\r\n      },\r\n      {\r\n        path: 'typography',\r\n        title: 'Typography',\r\n        loadComponent: () => import('./typography/typography.component').then((m) => m.TypographyComponent)\r\n      },\r\n      {\r\n        path: 'dynamic-component',\r\n        title: 'Dynamic component',\r\n        loadComponent: () => import('./dynamic-component/dynamic-component.component').then((m) => m.DynamicComponentComponent)\r\n      },\r\n      {\r\n        path: 're-captcha',\r\n        title: 'Re-Captcha',\r\n        providers: [ReCaptchaService],\r\n        loadComponent: () => import('./re-captcha/re-captcha.component').then((m) => m.ReCaptchaComponent)\r\n      },\r\n      { path: '', redirectTo: 'dashboard', pathMatch: 'full' },\r\n      { path: '**', redirectTo: 'dashboard', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n", "import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BusyInterceptor } from './busy.interceptor';\n\nexport const interceptorProviders = [{ provide: HTTP_INTERCEPTORS, useClass: BusyInterceptor, multi: true }];\n", "import { ApplicationConfig, provideAppInitializer } from '@angular/core';\nimport { provideRouter, withComponentInputBinding } from '@angular/router';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\nimport { routes } from './app.routes';\nimport { interceptorProviders } from './shared/interceptors/interceptors';\n\nexport function initializeAppFactory(): () => Promise<void> {\n  return () => {\n    return new Promise<void>((resolve) => {\n      window.setTimeout(() => {\n        resolve();\n      }, 1000);\n    });\n  };\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n    provideRouter(routes, withComponentInputBinding()),\n    provideAppInitializer(initializeAppFactory()),\n    interceptorProviders\n  ]\n};\n", "import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { ForgeAppBarModule, ForgeIconButtonModule, ForgeIconModule, ForgeLinearProgressModule, ForgeTooltipModule } from '@tylertech/forge-angular';\n\nimport { AppCacheService } from 'src/app/app-cache.service';\n\n@Component({\n  selector: 'app-header',\n  imports: [CommonModule, ForgeAppBarModule, ForgeIconModule, ForgeIconButtonModule, ForgeLinearProgressModule, ForgeTooltipModule],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n  public appCache = inject(AppCacheService);\n\n  public onThemeChange() {\n    if (this.appCache.theme === 'light') {\n      this.appCache.theme = 'dark';\n      document.body.classList.add('forge-theme-dark');\n    } else {\n      this.appCache.theme = 'light';\n      document.body.classList.remove('forge-theme-dark');\n    }\n    localStorage.setItem(this.appCache.storageKey, JSON.stringify({ theme: this.appCache.theme }));\n  }\n}\n", "<forge-app-bar title-text=\"Demo Angular & Forge components\" type=\"static\" raised=\"true\">\r\n  <forge-icon slot=\"logo\" name=\"tyler_talking_t_logo\"></forge-icon>\r\n  <forge-icon-button slot=\"end\" (click)=\"onThemeChange()\" aria-label=\"Toggle theme\">\r\n    <forge-icon [name]=\"appCache.theme === 'dark' ? 'wb_sunny' : 'nightlight_round'\"></forge-icon>\r\n  </forge-icon-button>\r\n  <forge-tooltip slot=\"end\">Toggle theme</forge-tooltip>\r\n</forge-app-bar>\r\n@if (appCache.isBusy()) {\r\n  <forge-linear-progress determinate=\"false\"></forge-linear-progress>\r\n}\r\n", "import { Component, inject, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRouteSnapshot, Router, ActivatedRoute, NavigationEnd, RouterOutlet } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { AppCacheService } from './app-cache.service';\r\nimport { ForgeButtonModule, ForgeDrawerModule, ForgeIconModule, ForgeMiniDrawerModule, ForgeScaffoldModule } from '@tylertech/forge-angular';\r\nimport { HeaderComponent } from './shared/components/header/header.component';\r\nimport { MenuComponent } from './shared/components/menu/menu.component';\r\nimport { CallbackPipe } from './shared/pipes/callback.pipe';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [\r\n    RouterOutlet,\r\n    CommonModule,\r\n    ForgeScaffoldModule,\r\n    ForgeDrawerModule,\r\n    ForgeButtonModule,\r\n    ForgeIconModule,\r\n    ForgeMiniDrawerModule,\r\n    HeaderComponent,\r\n    MenuComponent,\r\n    CallbackPipe\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  private router = inject(Router);\r\n  private route = inject(ActivatedRoute);\r\n  public appCache = inject(AppCacheService);\r\n\r\n  public ngOnInit() {\r\n    this.initRouteWatch();\r\n    this.initLayoutWatch();\r\n\r\n    // const param = encodeURIComponent(btoa(JSON.stringify({ property: 'value' })));\r\n    // const decoded = JSON.parse(atob(decodeURIComponent(param)));\r\n  }\r\n\r\n  public mapRoutes(values: { path: string; params: any }[]): string[] {\r\n    return values?.map((r) => r.path) || [];\r\n  }\r\n\r\n  private initRouteWatch() {\r\n    this.router.events.pipe(filter((event) => event instanceof NavigationEnd)).subscribe({\r\n      next: () => {\r\n        const routes: { path: string; params: any }[] = [];\r\n        const parseRoute = (r: ActivatedRouteSnapshot) => {\r\n          if (r.url.length) {\r\n            routes.push({\r\n              path: r.url[0].path,\r\n              params: Object.keys(r.params).length ? r.params : undefined\r\n            });\r\n          }\r\n          if (r.children) {\r\n            r.children.forEach((rc) => parseRoute(rc));\r\n          }\r\n        };\r\n        parseRoute(this.route.snapshot);\r\n        this.appCache.activeRoute = routes;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initLayoutWatch() {\r\n    const layoutHandler = () => {\r\n      document.body.classList.remove('app--layout-sm', 'app--layout-md', 'app--layout-lg');\r\n\r\n      // https://forge.tylertech.com/core-patterns/layout/grid#responsive-breakpoints\r\n      if (window.innerWidth <= 600) {\r\n        this.appCache.layoutMode = 'sm';\r\n        this.appCache.menu.open = false;\r\n      } else if (window.innerWidth <= 960) {\r\n        this.appCache.layoutMode = 'md';\r\n      } else {\r\n        this.appCache.layoutMode = 'lg';\r\n      }\r\n\r\n      document.body.classList.add(`app--layout-${this.appCache.layoutMode}`);\r\n    };\r\n\r\n    window.matchMedia('(max-width: 600px)').addEventListener('change', () => {\r\n      layoutHandler();\r\n    });\r\n\r\n    window.matchMedia('(max-width: 960px)').addEventListener('change', () => {\r\n      layoutHandler();\r\n    });\r\n\r\n    window.requestAnimationFrame(() => layoutHandler());\r\n  }\r\n}\r\n", "<forge-scaffold>\r\n  <app-header slot=\"header\"></app-header>\r\n  <app-menu slot=\"body-left\" [options]=\"appCache.menu.options\" [open]=\"appCache.menu.open\" [selectedValue]=\"appCache.activeRoute | appCallback: mapRoutes\"></app-menu>\r\n\r\n  <div id=\"app--main-content\" tabindex=\"-1\" class=\"app-content\" slot=\"body\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</forge-scaffold>\r\n", "import { IconRegistry } from '@tylertech/forge';\r\nimport {\r\n  tylIconArrowBack,\r\n  tylIconDashboard,\r\n  tylIconPerson,\r\n  tylIconListAlt,\r\n  tylIconPets,\r\n  tylIconChildFriendly,\r\n  tylIconHome,\r\n  tylIconMenu,\r\n  tylIconSearch,\r\n  tylIconCategory,\r\n  tylIconFilterList,\r\n  tylIconDelete,\r\n  tylIconAdd,\r\n  tylIconAddCircle,\r\n  tylIconArrowDropDown,\r\n  tylIconEdit,\r\n  tylIconContentCopy,\r\n  tylIconBolt,\r\n  tylIconCheck,\r\n  tylIconViewColumn,\r\n  tylIconChevronLeft,\r\n  tylIconChevronRight,\r\n  tylIconClose,\r\n  tylIconMap,\r\n  tylIcon360,\r\n  tylIconExpandLess,\r\n  tylIconExpandMore,\r\n  tylIconKeyboardArrowRight,\r\n  tylIconKeyboardArrowLeft,\r\n  tylIconDirections,\r\n  tylIconStar,\r\n  tylIconError,\r\n  tylIconMoreVert,\r\n  tylIconMoreHoriz,\r\n  tylIconArticle,\r\n  tylIconWbSunny,\r\n  tylIconNightlightRound,\r\n  tylIconTableRows,\r\n  tylIconArrowDownward,\r\n  tylIconArrowUpward,\r\n  tylIconStorage,\r\n  tylIconMasks,\r\n  tylIconInsertInvitation,\r\n  tylIconBarChart,\r\n  tylIconAutoStories,\r\n  tylIconPictureAsPdf,\r\n  tylIconApps,\r\n  tylIconZoomIn,\r\n  tylIconZoomOut,\r\n  tylIconFitScreen,\r\n  tylIconAdjust,\r\n  tylIconCheckBox,\r\n  tylIconCheckBoxOutlineBlank,\r\n  tylIconTylerTalkingTLogo,\r\n  tylIconFormatLetterCase,\r\n  tylIconDynamicForm,\r\n  tylIconSecurity\r\n} from '@tylertech/tyler-icons';\r\n\r\nconst standardIcons = [\r\n  tylIconArrowBack,\r\n  tylIconDashboard,\r\n  tylIconPerson,\r\n  tylIconListAlt,\r\n  tylIconPets,\r\n  tylIconChildFriendly,\r\n  tylIconHome,\r\n  tylIconMenu,\r\n  tylIconSearch,\r\n  tylIconCategory,\r\n  tylIconFilterList,\r\n  tylIconDelete,\r\n  tylIconAdd,\r\n  tylIconAddCircle,\r\n  tylIconArrowDropDown,\r\n  tylIconEdit,\r\n  tylIconContentCopy,\r\n  tylIconBolt,\r\n  tylIconCheck,\r\n  tylIconViewColumn,\r\n  tylIconChevronLeft,\r\n  tylIconChevronRight,\r\n  tylIconClose,\r\n  tylIconMap,\r\n  tylIcon360,\r\n  tylIconExpandLess,\r\n  tylIconExpandMore,\r\n  tylIconKeyboardArrowRight,\r\n  tylIconKeyboardArrowLeft,\r\n  tylIconDirections,\r\n  tylIconStar,\r\n  tylIconError,\r\n  tylIconMoreVert,\r\n  tylIconMoreHoriz,\r\n  tylIconArticle,\r\n  tylIconWbSunny,\r\n  tylIconNightlightRound,\r\n  tylIconTableRows,\r\n  tylIconArrowDownward,\r\n  tylIconArrowUpward,\r\n  tylIconStorage,\r\n  tylIconMasks,\r\n  tylIconInsertInvitation,\r\n  tylIconBarChart,\r\n  tylIconAutoStories,\r\n  tylIconPictureAsPdf,\r\n  tylIconApps,\r\n  tylIconZoomIn,\r\n  tylIconZoomOut,\r\n  tylIconFitScreen,\r\n  tylIconAdjust,\r\n  tylIconCheckBox,\r\n  tylIconCheckBoxOutlineBlank,\r\n  tylIconFormatLetterCase,\r\n  tylIconDynamicForm,\r\n  tylIconSecurity\r\n];\r\n\r\nconst customIcons = [tylIconTylerTalkingTLogo];\r\n\r\nexport const defineIcons = () => {\r\n  IconRegistry.define([...standardIcons, ...customIcons]);\r\n};\r\n", "import { bootstrapApplication } from '@angular/platform-browser';\r\n\r\nimport { appConfig } from './app/app.config';\r\nimport { AppComponent } from './app/app.component';\r\nimport { defineIcons } from './define-icons';\r\n\r\ndefineIcons();\r\nwindow.TylerForgeGlobalConfiguration = {\r\n  'forge-field': {\r\n    labelPosition: 'block-start'\r\n  }\r\n};\r\n\r\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));\r\n"],
  "mappings": "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ACAC,GAAmBC,GACnBC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,EAAY,EAAAC,OAAA,CAAA;;;;;;;uDAAA,CAAA,CAAA,EAKV,IAAO7E,EAAP8E,SAAO9E,CAAY,GAAA,EEiCzB,IAAM+E,GAAgB,CACpBC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,EACAC,EACAC,EACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACAC,EACAC,GACAC,EACAC,GACAC,GACAC,GACAC,EACAC,EACAC,EACAC,GACAC,GACAC,EAAe,EAGXC,GAAc,CAACC,EAAwB,EAEhCC,GAAcA,IAAK,CAC9BC,GAAaC,OAAO,CAAC,GAAG7D,GAAe,GAAGyD,EAAW,CAAC,CACxD,ECtHAK,GAAW,EACXC,OAAOC,8BAAgC,CACrC,cAAe,CACbC,cAAe,gBAInBC,EAAqBC,GAAcC,EAAS,EAAEC,MAAOC,GAAQC,QAAQC,MAAMF,CAAG,CAAC",
  "names": ["AppPetsService", "constructor", "appCache", "inject", "AppCacheService", "factory", "\u0275fac", "providedIn", "_AppPetsService", "RootRouteGuard", "constructor", "appCache", "inject", "AppCacheService", "route", "ActivatedRoute", "canActivate", "currentRoute", "currentState", "previousRoute", "getResolvedUrl", "snapshot", "canDeactivate", "component", "nextState", "factory", "\u0275fac", "_RootRouteGuard", "routes", "path", "providers", "runGuardsAndResolvers", "children", "title", "loadComponent", "then", "m", "DashboardComponent", "loadChildren", "PROFILE_ROUTES", "PEOPLE_ROUTES", "TEST_ROUTES", "provide", "PETS_SERVICE", "useExisting", "AppPetsService", "PETS_ROUTES", "SearchComponent", "QueryBuilderComponent", "IconsComponent", "EXAMPLES_ROUTES", "FormlyDemoModule", "TableDemoComponent", "AgGridDemoComponent", "StorageComponent", "ImaskComponent", "ChartsComponent", "TextEditorComponent", "PdfViewerDemoComponent", "CssVariablesComponent", "TypographyComponent", "DynamicComponentComponent", "ReCaptchaService", "ReCaptchaComponent", "redirectTo", "pathMatch", "interceptorProviders", "provide", "HTTP_INTERCEPTORS", "useClass", "BusyInterceptor", "multi", "initializeAppFactory", "Promise", "resolve", "window", "setTimeout", "appConfig", "providers", "provideHttpClient", "withInterceptorsFromDi", "provideRouter", "routes", "withComponentInputBinding", "provideAppInitializer", "interceptorProviders", "\u0275\u0275element", "HeaderComponent", "constructor", "appCache", "inject", "AppCacheService", "onThemeChange", "theme", "document", "body", "classList", "add", "remove", "localStorage", "setItem", "storageKey", "JSON", "stringify", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275conditionalCreate", "HeaderComponent_Conditional_6_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275conditional", "isBusy", "CommonModule", "ForgeAppBarModule", "AppBarComponent", "ForgeIconModule", "IconComponent", "ForgeIconButtonModule", "IconButtonComponent", "ForgeLinearProgressModule", "LinearProgressComponent", "ForgeTooltipModule", "TooltipComponent", "styles", "_HeaderComponent", "AppComponent", "constructor", "router", "inject", "Router", "route", "ActivatedRoute", "appCache", "AppCacheService", "ngOnInit", "initRouteWatch", "initLayoutWatch", "mapRoutes", "values", "map", "r", "path", "events", "pipe", "filter", "event", "NavigationEnd", "subscribe", "next", "routes", "parseRoute", "url", "length", "push", "params", "Object", "keys", "undefined", "children", "forEach", "rc", "snapshot", "activeRoute", "layoutHandler", "document", "body", "classList", "remove", "window", "innerWidth", "layoutMode", "menu", "open", "add", "matchMedia", "addEventListener", "requestAnimationFrame", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "options", "\u0275\u0275pipeBind2", "RouterOutlet", "CommonModule", "ForgeScaffoldModule", "ScaffoldComponent", "ForgeDrawerModule", "ForgeButtonModule", "ForgeIconModule", "ForgeMiniDrawerModule", "HeaderComponent", "MenuComponent", "CallbackPipe", "styles", "_AppComponent", "standardIcons", "tylIconArrowBack", "tylIconDashboard", "tylIconPerson", "tylIconListAlt", "tylIconPets", "tylIconChildFriendly", "tylIconHome", "tylIconMenu", "tylIconSearch", "tylIconCategory", "tylIconFilterList", "tylIconDelete", "tylIconAdd", "tylIconAddCircle", "tylIconArrowDropDown", "tylIconEdit", "tylIconContentCopy", "tylIconBolt", "tylIconCheck", "tylIconViewColumn", "tylIconChevronLeft", "tylIconChevronRight", "tylIconClose", "tylIconMap", "tylIcon360", "tylIconExpandLess", "tylIconExpandMore", "tylIconKeyboardArrowRight", "tylIconKeyboardArrowLeft", "tylIconDirections", "tylIconStar", "tylIconError", "tylIconMoreVert", "tylIconMoreHoriz", "tylIconArticle", "tylIconWbSunny", "tylIconNightlightRound", "tylIconTableRows", "tylIconArrowDownward", "tylIconArrowUpward", "tylIconStorage", "tylIconMasks", "tylIconInsertInvitation", "tylIconBarChart", "tylIconAutoStories", "tylIconPictureAsPdf", "tylIconApps", "tylIconZoomIn", "tylIconZoomOut", "tylIconFitScreen", "tylIconAdjust", "tylIconCheckBox", "tylIconCheckBoxOutlineBlank", "tylIconFormatLetterCase", "tylIconDynamicForm", "tylIconSecurity", "customIcons", "tylIconTylerTalkingTLogo", "defineIcons", "IconRegistry", "define", "defineIcons", "window", "TylerForgeGlobalConfiguration", "labelPosition", "bootstrapApplication", "AppComponent", "appConfig", "catch", "err", "console", "error"]
}
