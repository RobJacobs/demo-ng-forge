{"version":3,"file":"925.0da4737f98d0681f.js","mappings":"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","names":["AppToastService","constructor","this","toastService","inject","ToastService","show","message","toast","actionHandler","close","placement","duration","static","t","core","jDH","factory","ɵfac","providedIn","i0","_r1","ctx_r1","onClose","ConfirmDialogComponent","dialogConfig","DIALOG_DATA","dialogRef","DialogRef","dialogTitle","title","showFooter","isDefined","response","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ConfirmDialogComponent_Conditional_2_Template","CommonModule","ForgeButtonModule","i1","ForgeIconButtonModule","ForgeIconModule","DialogComponent","styles","ProfileCacheService","formGroup","FormGroup","personalFormGroup","firstName","FormControl","validators","Validators","required","lastName","gender","email","phone","dateOfBirth","comment","rank","size","citizen","friends","FormArray","addressFormGroup","name","street","city","state","zip","$event","onImageError","imageUrl","ProfileComponent","cache","controls","router","Router","appDataService","AppDataService","dialogService","DialogService","appToastService","noImageUrl","activeTab","profile","loadForm","canDeactivate","dirty","Observable","s","open","options","persistent","data","afterClosed","subscribe","result","reset","next","onLoadProfile","getProfile","onTabSelected","route","markAsTouched","navigate","onSave","invalid","parseForm","id","markAsPristine","onCancel","undefined","event","targetElement","target","src","includes","onerror","isInvalid","values","every","v","Utils","formatNumber","clear","patchValue","address","value","ProfileComponent_Conditional_4_Template","ProfileComponent_Conditional_11_Template","ProfileComponent_Conditional_15_Template","_c0","touched","getRawValue","RouterOutlet","ReactiveFormsModule","i2","i3","ForgeTabBarModule","ForgeTabModule","ForgeToolbarModule","CallbackPipe","AddressComponent","ForgeTextFieldModule","FormControlInvalidDirective","InputCasingDirective","DefaultValueAccessor","inputHandler","start","selectionStart","#casing","toLowerCase","toUpperCase","setSelectionRange","onChange","appInputCasing","FsC","hostBindings","provide","NG_VALUE_ACCESSOR","multi","useExisting","forwardRef","option_r1","label","i_r3","_r2","$index","ctx_r3","onDeleteFriend","friendOptions","PROFILE_ROUTES","path","component","providers","children","PersonalComponent","friendsFormArray","genderOptions","sizeOptions","getPeople","map","p","onAddFriend","push","index","removeAt","PersonalComponent_For_46_Template","PersonalComponent_For_56_Template","ForgeDatePickerModule","ForgeDividerModule","ForgeLabelValueModule","ForgeRadioModule","ForgeRadioGroupModule","ForgeSelectModule","ForgeSliderModule","ForgeSwitchModule","redirectTo","pathMatch"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/app-toast.service.ts","./src/app/shared/components/confirm-dialog/confirm-dialog.component.html","./src/app/shared/components/confirm-dialog/confirm-dialog.component.ts","./src/app/profile/profile-cache.service.ts","./src/app/profile/profile.component.html","./src/app/profile/profile.component.ts","./src/app/profile/address/address.component.ts","./src/app/profile/address/address.component.html","./src/app/shared/directives/input-casing/input-casing.directive.ts","./src/app/profile/personal/personal.component.html","./src/app/profile/routes.ts","./src/app/profile/personal/personal.component.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { ToastService } from '@tylertech/forge-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppToastService {\r\n  private toastService = inject(ToastService);\r\n\r\n  public show(message: string) {\r\n    const toast = this.toastService.show({\r\n      message: `${message}`,\r\n      actionHandler: () => toast.close(),\r\n      placement: 'bottom',\r\n      duration: 3000\r\n    });\r\n  }\r\n}\r\n","<app-dialog [dialogTitle]=\"dialogTitle\">\r\n  {{message}}\r\n\r\n  @if (showFooter) {\r\n  <ng-container app-dialog-footer>\r\n    <forge-button slot=\"end\" variant=\"outlined\" (click)=\"onClose()\">\r\n      Cancel\r\n    </forge-button>\r\n    <forge-button slot=\"end\" variant=\"raised\" appAutoFocus (click)=\"onClose(true)\" autofocus>\r\n      Ok\r\n    </forge-button>\r\n  </ng-container>\r\n  }\r\n</app-dialog>\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DIALOG_DATA, DialogRef, ForgeButtonModule, ForgeIconButtonModule, ForgeIconModule } from '@tylertech/forge-angular';\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\n\r\nexport interface IConfirmDialogData {\r\n  title: string;\r\n  message: string;\r\n  showFooter?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    DialogComponent\r\n  ]\r\n})\r\nexport class ConfirmDialogComponent {\r\n  public dialogConfig = inject<IConfirmDialogData>(DIALOG_DATA);\r\n  private dialogRef = inject(DialogRef);\r\n\r\n  public dialogTitle: string;\r\n  public message: string;\r\n  public showFooter?: boolean;\r\n\r\n  constructor() {\r\n    this.dialogTitle = this.dialogConfig.title;\r\n    this.message = this.dialogConfig.message;\r\n    this.showFooter = isDefined(this.dialogConfig.showFooter) ? this.dialogConfig.showFooter : true;\r\n  }\r\n\r\n  public onClose(response = false) {\r\n    this.dialogRef.close(response);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\n\r\n@Injectable()\r\nexport class ProfileCacheService {\r\n  public formGroup = new FormGroup({\r\n    personalFormGroup: new FormGroup({\r\n      firstName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      lastName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      gender: new FormControl<string | null>(null),\r\n      email: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      phone: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      dateOfBirth: new FormControl<string | Date | null>(null),\r\n      comment: new FormControl<string | null>(null),\r\n      rank: new FormControl<number>(5),\r\n      size: new FormControl<string | null>(null),\r\n      citizen: new FormControl<boolean>(false),\r\n      friends: new FormArray<FormControl>([])\r\n    }),\r\n    addressFormGroup: new FormGroup({\r\n      name: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      street: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      city: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      state: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      zip: new FormControl<string | null>(null, { validators: [Validators.required] })\r\n    })\r\n  });\r\n  public profile?: IProfile;\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <h2 class=\"forge-typography--subheading4\">Profile</h2>\r\n    @if (imageUrl) {\r\n    <img [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt>\r\n    }\r\n  </div>\r\n\r\n  <div slot=\"end\">\r\n    <forge-button variant=\"outlined\" (click)=\"onLoadProfile()\">\r\n      Load profile\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<forge-tab-bar secondary [activeTab]=\"activeTab\">\r\n  <forge-tab (forge-tab-select)=\"onTabSelected('personal')\">\r\n    Personal\r\n    @if ([personalFormGroup.invalid, personalFormGroup.touched] | appCallback:isInvalid) {\r\n    <forge-icon slot=\"end\" name=\"error\"></forge-icon>\r\n    }\r\n  </forge-tab>\r\n  <forge-tab (forge-tab-select)=\"onTabSelected('address')\">\r\n    Address\r\n    @if ([addressFormGroup.invalid, addressFormGroup.touched] | appCallback:isInvalid) {\r\n    <forge-icon slot=\"end\" name=\"error\"></forge-icon>\r\n    }\r\n  </forge-tab>\r\n</forge-tab-bar>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"cache.formGroup\">\r\n    <router-outlet></router-outlet>\r\n    <p>\r\n      {{cache.formGroup.getRawValue() | json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <div slot=\"end\">\r\n    <forge-button variant=\"outlined\" (click)=\"onCancel()\">\r\n      Cancel\r\n    </forge-button>\r\n    <forge-button variant=\"raised\" (click)=\"onSave()\" [disabled]=\"cache.formGroup.invalid || !cache.formGroup.dirty\">\r\n      Save\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>","import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogService, ForgeButtonModule, ForgeIconModule, ForgeTabBarModule, ForgeTabModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { AppToastService } from 'src/app/app-toast.service';\r\nimport { ConfirmDialogComponent } from 'src/app/shared/components/confirm-dialog/confirm-dialog.component';\r\nimport { CallbackPipe } from 'src/app/shared/pipes/callback.pipe';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ProfileCacheService } from './profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterOutlet,\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeIconModule,\r\n    ForgeTabBarModule,\r\n    ForgeTabModule,\r\n    ForgeToolbarModule,\r\n    CallbackPipe\r\n  ],\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  private dialogService = inject(DialogService);\r\n  private appToastService = inject(AppToastService);\r\n  public cache = inject(ProfileCacheService);\r\n\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  public get personalFormGroup() {\r\n    return this.cache.formGroup.controls.personalFormGroup;\r\n  }\r\n  public get addressFormGroup() {\r\n    return this.cache.formGroup.controls.addressFormGroup;\r\n  }\r\n  public activeTab = 0;\r\n  public imageUrl?: string;\r\n\r\n  constructor() {\r\n    if (this.cache.profile) {\r\n      this.loadForm(this.cache.profile);\r\n    }\r\n  }\r\n\r\n  public canDeactivate(): boolean | Observable<boolean> {\r\n    if (!this.cache.formGroup.dirty) {\r\n      return true;\r\n    }\r\n\r\n    return new Observable<boolean>(s => {\r\n      this.dialogService.open(\r\n        ConfirmDialogComponent,\r\n        { options: { persistent: true }, data: { title: 'Unsaved changes', message: 'You have unsaved changes which will be lost, do you want to continue?' } }\r\n      ).afterClosed.subscribe((result) => {\r\n        if (result) {\r\n          this.cache.formGroup.reset();\r\n        }\r\n        s.next(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  public onLoadProfile() {\r\n    this.appDataService.getProfile().subscribe((result: IProfile) => {\r\n      this.cache.formGroup.reset();\r\n      this.cache.profile = result;\r\n      this.loadForm(this.cache.profile);\r\n    });\r\n  }\r\n\r\n  public onTabSelected(route: string) {\r\n    switch (this.activeTab) {\r\n      case 0:\r\n        this.personalFormGroup.markAsTouched();\r\n        break;\r\n      case 1:\r\n        this.addressFormGroup.markAsTouched();\r\n        break;\r\n    }\r\n\r\n    switch (route) {\r\n      case 'personal':\r\n        this.activeTab = 0;\r\n        break;\r\n      case 'address':\r\n        this.activeTab = 1;\r\n        break;\r\n    }\r\n    this.router.navigate([`profile/${route}`]);\r\n  }\r\n\r\n  public onSave() {\r\n    if (this.cache.formGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.cache.profile = this.parseForm(this.cache.profile?.id);\r\n    this.cache.formGroup.markAsPristine();\r\n    this.appToastService.show('Profile saved.');\r\n  }\r\n\r\n  public onCancel() {\r\n    this.cache.formGroup.reset();\r\n    this.cache.formGroup.markAsPristine();\r\n    this.imageUrl = undefined;\r\n    this.cache.profile = undefined;\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n\r\n  public isInvalid(values: boolean[]) {\r\n    return values.every(v => v === true);\r\n  }\r\n\r\n  private loadForm(profile: IProfile) {\r\n    this.imageUrl = `mock-data/${Utils.formatNumber(this.cache.profile?.id as number, '2.0-0')}-small.png`;\r\n\r\n    this.personalFormGroup.controls.friends?.clear();\r\n\r\n    this.personalFormGroup.patchValue(profile);\r\n    this.addressFormGroup.patchValue(profile.address as any);\r\n  }\r\n\r\n  private parseForm(id?: number): IProfile {\r\n    return {\r\n      id: id || -1,\r\n      firstName: this.personalFormGroup.value.firstName as string,\r\n      lastName: this.personalFormGroup.value.lastName as string,\r\n      gender: this.personalFormGroup.value.gender as any,\r\n      email: this.personalFormGroup.value.email as string,\r\n      phone: this.personalFormGroup.value.phone as string,\r\n      dateOfBirth: this.personalFormGroup.value.dateOfBirth as Date,\r\n      address: this.addressFormGroup.value as any\r\n    };\r\n  }\r\n\r\n}\r\n","import { Component, inject } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormControlInvalidDirective } from 'src/app/shared/directives/form-control-invalid/form-control-invalid.directive';\r\nimport { ProfileCacheService } from '../profile-cache.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-profile-address',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ForgeTextFieldModule,\r\n    FormControlInvalidDirective\r\n  ],\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss']\r\n})\r\nexport class AddressComponent {\r\n  public cache = inject(ProfileCacheService);\r\n\r\n  public get formGroup() {\r\n    return this.cache.formGroup.controls.addressFormGroup;\r\n  }\r\n}\r\n","<div [formGroup]=\"formGroup\" class=\"form-grid\">\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.name\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"profile--address--name\" formControlName=\"name\">\r\n    <label for=\"profile--address--name\" slot=\"label\">Name</label>\r\n    <span slot=\"support-text\" class=\"app-form-control-invalid\">Name is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.street\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"profile--address--street\" formControlName=\"street\">\r\n    <label for=\"profile--address--street\" slot=\"label\">Street</label>\r\n    <span slot=\"support-text\" class=\"app-form-control-invalid\">Street is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.city\">\r\n    <input type=\"text\" id=\"profile--address-city\" formControlName=\"city\">\r\n    <label for=\"profile--address--city\" slot=\"label\">City</label>\r\n    <span slot=\"support-text\" class=\"app-form-control-invalid\">City is required</span>\r\n  </forge-text-field>\r\n\r\n  <div class=\"form-grid__state-zip\">\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.state\">\r\n      <input type=\"text\" id=\"profile--address--state\" formControlName=\"state\">\r\n      <label for=\"profile--address--state\" slot=\"label\">State</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">State is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.zip\">\r\n      <input type=\"text\" id=\"profile--address--zip\" formControlName=\"zip\">\r\n      <label for=\"profile--address--zip\" slot=\"label\">Zip code</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">Zip code is required</span>\r\n    </forge-text-field>\r\n  </div>\r\n</div>","import { Directive, HostListener, forwardRef, Input, Renderer2, ElementRef } from '@angular/core';\r\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[appInputCasing]',\r\n  standalone: true,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: forwardRef(() => InputCasingDirective),\r\n    },\r\n  ]\r\n})\r\nexport class InputCasingDirective extends DefaultValueAccessor {\r\n  @HostListener('input', ['$event'])\r\n  public inputHandler(event: InputEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    const start = target.selectionStart;\r\n\r\n    target.value = this.#casing === 'lower' ? target.value.toLowerCase() : target.value.toUpperCase();\r\n    target.setSelectionRange(start, start);\r\n\r\n    this.onChange(target.value);\r\n  }\r\n\r\n  #casing: 'upper' | 'lower' = 'upper';\r\n  @Input()\r\n  public set appInputCasing(value: 'upper' | 'lower') {\r\n    this.#casing = value;\r\n  }\r\n}","<ng-container [formGroup]=\"formGroup\">\r\n  <div class=\"form-grid\">\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.firstName\">\r\n      <input type=\"text\" id=\"profile--personal--first-name\" formControlName=\"firstName\" [appInputCasing]=\"'upper'\">\r\n      <label for=\"profile--personal--first-name\" slot=\"label\">First Name</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">First name is required {{formGroup.controls.firstName.invalid}} {{formGroup.controls.firstName.touched}}</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.lastName\">\r\n      <input type=\"text\" id=\"profile--personal--last-name\" formControlName=\"lastName\">\r\n      <label for=\"profile--personal--last-name\" slot=\"label\">Last Name</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">Last name is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\"></forge-select>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.email\">\r\n      <input type=\"text\" id=\"profile--personal--email\" formControlName=\"email\">\r\n      <label for=\"profile--personal--email\" slot=\"label\">Email</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">Email is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.phone\">\r\n      <input type=\"text\" id=\"profile--personal--phone\" formControlName=\"phone\">\r\n      <label for=\"profile--personal--phone\" slot=\"label\">Phone</label>\r\n      <span slot=\"support-text\" class=\"app-form-control-invalid\">Phone number is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-date-picker>\r\n      <forge-text-field>\r\n        <input type=\"text\" id=\"profile--personal--dob\" formControlName=\"dateOfBirth\">\r\n        <label for=\"profile--personal--dob\">Date of birth</label>\r\n      </forge-text-field>\r\n    </forge-date-picker>\r\n\r\n    <forge-text-field class=\"form-grid__comment form-grid--col-span\">\r\n      <textarea type=\"text\" id=\"profile--personal--comment\" formControlName=\"comment\" rows=\"4\"></textarea>\r\n      <label for=\"profile--personal--comment\">Comment</label>\r\n    </forge-text-field>\r\n\r\n    <forge-label-value style=\"--forge-label-value-align: stretch;\">\r\n      <span slot=\"label\">Rank {{formGroup.value.rank}}</span>\r\n      <div slot=\"value\">\r\n        <forge-slider min=\"0\" max=\"10\" formControlName=\"rank\"></forge-slider>\r\n      </div>\r\n    </forge-label-value>\r\n\r\n    <forge-label-value>\r\n      <span slot=\"label\">Size</span>\r\n      <forge-radio-group slot=\"value\" aria-label=\"Choose a size option\" name=\"profile--personal--size\">\r\n        @for (option of sizeOptions; track i; let i = $index) {\r\n        <forge-radio name=\"profile--personal--size\" formControlName=\"size\" value=\"{{option.value}}\">\r\n          {{option.label}}\r\n        </forge-radio>\r\n        }\r\n      </forge-radio-group>\r\n    </forge-label-value>\r\n\r\n    <forge-label-value>\r\n      <span slot=\"label\">Citizen</span>\r\n      <div slot=\"value\">\r\n        <forge-switch formControlName=\"citizen\"></forge-switch>\r\n      </div>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <forge-divider></forge-divider>\r\n\r\n  <div class=\"friends\">\r\n    <ng-container formArrayName=\"friends\">\r\n      @for (friend of formGroup.controls.friends.controls; track i; let i = $index) {\r\n      <div class=\"friend\">\r\n        <forge-select [options]=\"friendOptions\" [formControlName]=\"i\" label=\"Friend\" [appFormControlInvalid]=\"formGroup.controls.friends.controls[i]\">\r\n          <span slot=\"support-text\" class=\"app-form-control-invalid\">A friend is required</span>\r\n        </forge-select>\r\n        <forge-icon-button aria-label=\"Delete\" (click)=\"onDeleteFriend(i)\">\r\n          <forge-icon name=\"delete\"></forge-icon>\r\n        </forge-icon-button>\r\n      </div>\r\n      }\r\n      <forge-button variant=\"raised\" (click)=\"onAddFriend()\">\r\n        Add friend</forge-button>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>","import { Routes } from '@angular/router';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { AddressComponent } from './address/address.component';\r\nimport { PersonalComponent } from './personal/personal.component';\r\nimport { ProfileCacheService } from './profile-cache.service';\r\n\r\nexport const PROFILE_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent,\r\n    canDeactivate: [(component: ProfileComponent) => component.canDeactivate()],\r\n    providers: [\r\n      ProfileCacheService\r\n    ],\r\n    children: [\r\n      { path: 'address', component: AddressComponent },\r\n      { path: 'personal', component: PersonalComponent },\r\n      { path: '', redirectTo: 'personal', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n","import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { IOption } from '@tylertech/forge';\r\nimport { ForgeButtonModule, ForgeDatePickerModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeLabelValueModule, ForgeRadioGroupModule, ForgeRadioModule, ForgeSelectModule, ForgeSliderModule, ForgeSwitchModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { FormControlInvalidDirective } from 'src/app/shared/directives/form-control-invalid/form-control-invalid.directive';\r\nimport { InputCasingDirective } from 'src/app/shared/directives/input-casing/input-casing.directive';\r\nimport { ProfileCacheService } from '../profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile-personal',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ForgeButtonModule,\r\n    ForgeDatePickerModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeLabelValueModule,\r\n    ForgeRadioModule,\r\n    ForgeRadioGroupModule,\r\n    ForgeSelectModule,\r\n    ForgeSliderModule,\r\n    ForgeSwitchModule,\r\n    ForgeTextFieldModule,\r\n    FormControlInvalidDirective,\r\n    InputCasingDirective\r\n  ],\r\n  templateUrl: './personal.component.html',\r\n  styleUrls: ['./personal.component.scss']\r\n})\r\nexport class PersonalComponent {\r\n  public cache = inject(ProfileCacheService);\r\n  private appDataService = inject(AppDataService);\r\n\r\n  public get formGroup() {\r\n    return this.cache.formGroup.controls.personalFormGroup;\r\n  }\r\n  public get friendsFormArray() {\r\n    return this.formGroup.controls.friends;\r\n  }\r\n\r\n  public genderOptions: IOption[] = [\r\n    { label: '', value: null },\r\n    { label: 'Male', value: 'M' },\r\n    { label: 'Female', value: 'F' },\r\n    { label: 'Undecided', value: 'U' }\r\n  ];\r\n  public friendOptions: IOption[] = [];\r\n  public sizeOptions: IOption[] = [\r\n    { label: 'Small', value: 'sm' },\r\n    { label: 'Medium', value: 'md' },\r\n    { label: 'Large', value: 'lg' }\r\n  ];\r\n\r\n  constructor() {\r\n    this.appDataService.getPeople().subscribe((result) => {\r\n      this.friendOptions = result.data.map((p) => ({ label: `${p.firstName} ${p.lastName}`, value: p.id }));\r\n    });\r\n  }\r\n\r\n  public onAddFriend() {\r\n    this.friendsFormArray.push(new FormControl(null, { validators: [Validators.required] }));\r\n  }\r\n\r\n  public onDeleteFriend(index: number) {\r\n    this.friendsFormArray.removeAt(index);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}