{"version":3,"file":"8462.34ac72db10aa8112.js","mappings":"gNAOaA,EAAiB,MAH9B,MAGaA,EAEXC,cACEC,KAAKC,YAAcC,OAAOC,OAAOC,GAAkBC,IAAKC,KAE7CC,MADID,EAAKE,KAAKC,MAAM,KAAKJ,IAAIK,GAAK,GAAGA,EAAEC,OAAO,GAAGC,gBAAgBF,EAAEG,MAAM,MAAMC,KAAK,KACvEC,MAAOT,EAAKE,KAAMQ,YAAaV,EAAKE,KAAMS,gBAAiB,eAEnFC,WAAoBhB,OAAOC,OAAOC,GACpC,EARWN,SAAiB,mBAAAqB,iBAAjBrB,EAAiB,EAAjBA,EAAiB,WAAAsB,EAAAC,IAAA,OAAjBvB,EAAiBwB,QAAjBxB,EAAiByB,UAAAC,WAFhB,SAED1B,CAAiB,6BCAxB2B,MAAA,wCAA2BA,MAAA,OAAAC,EAAAC,aAAA,2BAQ7BF,MAAA,YACEA,MAAA,mBACAA,MAAA,YAAuCA,MAAA,GAAcA,oCADzCA,MAAA,GAAAA,MAAA,OAAAG,EAAAb,OAC2BU,MAAA,GAAAA,MAAAG,EAAAb,MAAA,ECX7C,MAAMc,EAAiB,CACrB,CAAEC,KAAM,KAAMC,UCEW,MAL3B,MAKaC,EAeXjC,YACSkC,GAAAjC,KAAAiC,cAbFjC,KAAAkC,iBAA+C,CAACC,EAAgBpB,IACjEA,EACK,CAACf,KAAKiC,YAAYhC,aAAamC,KAAKC,GAAKA,EAAEtB,QAAUA,IAExDoB,EAAOG,OACFtC,KAAKiC,YAAYhC,aAAakC,OAAOE,GAAKA,EAAE9B,MAAMgC,oBAAoBC,SAASL,EAAOI,sBAAsB1B,MAAM,EAAG,KAErHb,KAAKiC,YAAYhC,aAAaY,MAAM,EAAG,IAOhD,CAEG4B,eAAe1B,GACpBf,KAAK2B,aAAe3B,KAAKiC,YAAYhC,aAAamC,KAAKC,GAAKA,EAAEtB,QAAUA,IAAQA,MAChF2B,QAAQC,IAAI3C,KAAK2B,aACnB,EAtBWK,SAAc,mBAAAb,iBAAda,GAAcP,MAAAmB,GAAA,EAAdZ,EAAc,UAAAZ,EAAAyB,IAAA,MAAdb,EAAcc,UAAA,gBAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,gaAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IFT3B1B,MAAA,oBAAAA,CAA8B,UACqBA,MAAA,WAAKA,UAGxDA,MAAA,UAAAA,CAAkB,0BACgCA,MAAA,qCAAA4B,GAAA,OAA6BD,EAAAX,eAAAY,EAAAC,OAA6B,GACxG7B,MAAA,sBACEA,MAAA,EAAA8B,EAAA,oBACA9B,MAAA,aACAA,MAAA,aAA4BA,MAAA,UAAIA,QAChCA,MAAA,mBACFA,UAGFA,MAAA,YACEA,MAAA,GAAA+B,EAAA,aAIF/B,iBAdoBA,MAAA,GAAAA,MAAA,SAAA2B,EAAAlB,kBAEkCT,MAAA,GAAAA,MAAA,OAAA2B,EAAAzB,cAQjBF,MAAA,GAAAA,MAAA,UAAA2B,EAAAnB,YAAAhC,umBEN1B+B,CAAc,ODDzB,IAeWyB,EAAW,MAbxB,MAaaA,YAAW,mBAAAtC,iBAAXsC,EAAW,EAAXA,EAAW,UAAArC,EAAAsC,IAAA,MAAXD,MAAW,UAAArC,EAAAuC,IAAA,UARpBC,KACAC,cAAsBhC,GAGtBgC,QAISJ,CAAW","names":["IconsCacheService","constructor","this","iconOptions","Object","values","tylerIconsModule","map","icon","label","name","split","n","charAt","toUpperCase","slice","join","value","leadingIcon","leadingIconType","IconRegistry","t","core","Yz7","factory","Éµfac","providedIn","i0","ctx_r0","selectedIcon","icon_r2","routes","path","component","IconsComponent","moduleCache","iconOptionFilter","filter","find","o","length","toLocaleLowerCase","includes","onIconSelected","console","log","i1","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","detail","IconsComponent_forge_icon_6_Template","IconsComponent_div_12_Template","IconsModule","oAB","cJS","CommonModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/icons/icons-cache.service.ts","./src/app/icons/icons.component.html","./src/app/icons/icons.module.ts","./src/app/icons/icons.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IconRegistry, IOption } from '@tylertech/forge';\nimport * as tylerIconsModule from '@tylertech/tyler-icons/standard';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconsCacheService {\n  public iconOptions?: IOption[];\n  constructor() {\n    this.iconOptions = Object.values(tylerIconsModule).map((icon: { name: string; data: string }) => {\n      const name = icon.name.split('_').map(n => `${n.charAt(0).toUpperCase()}${n.slice(1)}`).join(' ');\n      return { label: name, value: icon.name, leadingIcon: icon.name, leadingIconType: 'component' };\n    });\n    IconRegistry.define(Object.values(tylerIconsModule));\n  }\n}\n","<forge-toolbar class=\"header\">\n  <h2 slot=\"start\" class=\"forge-typography--title\">Icons</h2>\n</forge-toolbar>\n\n<div class=\"body\">\n  <forge-autocomplete [filter]=\"iconOptionFilter\" (forge-autocomplete-change)=\"onIconSelected($event.detail)\">\n    <forge-text-field>\n      <forge-icon slot=\"leading\" [name]=\"selectedIcon\" *ngIf=\"selectedIcon\"></forge-icon>\n      <input id=\"autocomplete01\" type=\"text\" />\n      <label for=\"autocomplete01\">Icon</label>\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\n    </forge-text-field>\n  </forge-autocomplete>\n\n  <div class=\"all-icons\">\n    <div class=\"icon\" *ngFor=\"let icon of moduleCache.iconOptions\">\n      <forge-icon [name]=\"icon.value\"></forge-icon>\n      <div class=\"forge-typography--caption\">{{icon.value}}</div>\n    </div>\n  </div>\n\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { IconsComponent } from './icons.component';\n\nconst routes: Routes = [\n  { path: '**', component: IconsComponent }\n];\n\n@NgModule({\n  declarations: [\n    IconsComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class IconsModule { }\n","import { Component } from '@angular/core';\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\nimport { IconsCacheService } from './icons-cache.service';\n\n@Component({\n  selector: 'app-icons',\n  templateUrl: './icons.component.html',\n  styleUrls: ['./icons.component.scss']\n})\nexport class IconsComponent {\n  public selectedIcon?: IOption;\n\n  public iconOptionFilter: AutocompleteFilterCallback = (filter: string, value: string) => {\n    if (value) {\n      return [this.moduleCache.iconOptions?.find(o => o.value === value)] as IOption[];\n    } else {\n      if (filter.length) {\n        return this.moduleCache.iconOptions?.filter(o => o.label.toLocaleLowerCase().includes(filter.toLocaleLowerCase())).slice(0, 100) as IOption[];\n      } else {\n        return this.moduleCache.iconOptions?.slice(0, 100) as IOption[];\n      }\n    }\n  };\n\n  constructor(\n    public moduleCache: IconsCacheService\n  ) { }\n\n  public onIconSelected(value: string) {\n    this.selectedIcon = this.moduleCache.iconOptions?.find(o => o.value === value)?.value;\n    console.log(this.selectedIcon);\n  }\n\n}\n"],"x_google_ignoreList":[]}