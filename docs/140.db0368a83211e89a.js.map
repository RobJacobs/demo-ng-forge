{"version":3,"file":"140.db0368a83211e89a.js","mappings":"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","names":["defaultModules","toolbar","header","list","script","indent","direction","size","color","background","font","align","QUILL_CONFIG_TOKEN","InjectionToken","providedIn","factory","modules","firstValueFrom","source","config","hasConfig","Promise","resolve","reject","subscriber","SafeSubscriber","next","value","unsubscribe","error","complete","defaultValue","EmptyError","subscribe","_c0","_c1","QuillEditorComponent_Conditional_0_Template","rf","ctx","i0","QuillEditorComponent_Conditional_4_Template","getFormat","format","configFormat","QuillService","constructor","injector","_this","this","quill$","defer","_asyncToGenerator","Quill","maybePatchedAddEventListener","document","addEventListener","__zone_symbol__addEventListener","quillImport","__webpack_require__","e","then","bind","default","customOptions","forEach","customOption","newCustomOption","import","whitelist","register","suppressGlobalRegisterWarning","registerCustomModules","customModules","pipe","shareReplay","bufferSize","refCount","get","DOCUMENT","getQuill","Array","isArray","implementation","path","isObservable","static","ɵfac","t","ɵprov","token","QuillEditorBase","input","undefined","theme","debug","readOnly","placeholder","maxLength","minLength","required","formats","customToolbarPosition","sanitize","beforeRender","styles","registry","bounds","trackChanges","classes","trimOnValidation","linkPlaceholder","compareValues","filterNull","debounceTime","defaultEmptyValue","onEditorCreated","EventEmitter","onEditorChanged","onContentChanged","onSelectionChanged","onFocus","onBlur","onNativeFocus","onNativeBlur","disabled","toolbarPosition","signal","subscription","quillSubscription","elementRef","inject","ElementRef","cd","ChangeDetectorRef","domSanitizer","DomSanitizer","platformId","PLATFORM_ID","renderer","Renderer2","zone","NgZone","service","destroyRef","DestroyRef","valueGetter","quillEditor","html","getSemanticHTML","isEmptyValue","modelValue","getText","getContents","JSON","stringify","valueSetter","includes","SecurityContext","HTML","clipboard","convert","parse","insert","selectionChangeHandler","range","oldRange","shouldTriggerOnModelTouched","onModelTouched","observed","run","emit","editor","markForCheck","textChangeHandler","delta","oldDelta","text","content","shouldTriggerOnModelChange","onModelChange","editorChangeHandler","event","current","old","normalizeClassNames","trim","split","reduce","prev","cur","trimmed","push","ngOnInit","set","ngAfterViewInit","isPlatformServer","mergeMap","promises","all","editorElem","nativeElement","querySelector","toolbarElem","Object","assign","keys","key","setStyle","addClasses","body","hasOwnProperty","runOutsideAngular","scroll","domNode","getModule","container","preventDefault","tooltip","root","dataset","link","setText","newValue","setContents","clear","setDisabledState","addQuillEventListeners","onValidatorChanged","Observable","rafId","requestAnimationFrame","cancelAnimationFrame","takeUntilDestroyed","ngOnDestroy","dispose","ngOnChanges","changes","enable","currentValue","currentStyling","previousStyling","previousValue","removeStyle","currentClasses","previousClasses","removeClasses","classList","c","addClass","removeClass","writeValue","currentEditorValue","isDisabled","disable","setAttribute","removeAttribute","registerOnChange","fn","registerOnTouched","registerOnValidatorChange","validate","err","valid","textLength","length","deltaOperations","ops","onlyEmptyOperation","toString","minLengthError","given","maxLengthError","requiredError","empty","Subscription","add","fromEvent","textChange$","editorChange$","ɵdir","type","inputs","SignalBased","outputs","features","QuillEditorComponent","ɵQuillEditorComponent_BaseFactory","ɵcmp","selectors","standalone","multi","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","ngContentSelectors","decls","vars","consts","template","QuillModule","forRoot","ngModule","providers","useValue","ɵmod","ɵinj","TextEditorComponent","textEditorFormControl","FormControl","quillModules","quill","console","log","querySelectorAll","el","tabIndex","onToggleState","core","VBU","_r1","$event","stopPropagation","CommonModule","ReactiveFormsModule","i1","i2","ForgeButtonModule","i3","ForgeToolbarModule","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","target","eventName","options","resultSelector","isFunction","mapOneOrManyArgs","remove","isEventTarget","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","subTarget","innerFrom","TypeError","args","dueTime","scheduler","asyncScheduler","operate","activeTask","lastValue","lastTime","emitWhenIdle","targetTime","now","schedule","createOperatorSubscriber","ReplaySubject","Subject","_bufferSize","Infinity","_windowTime","_timestampProvider","dateTimestampProvider","super","_buffer","_infiniteTimeWindow","Math","max","isStopped","_trimBuffer","_subscribe","_throwIfClosed","_innerSubscribe","copy","slice","i","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","handleReset","reset","onSubscriber","configOrBufferSize","windowTime","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","Action","work","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","id","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","execute","Error","_execute","_delay","errorValue","errored","actions","arrRemove","Scheduler","schedulerActionCtor","AsyncScheduler","SchedulerAction","_active","action","shift","async","Date"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-quill/fesm2022/ngx-quill-config.mjs","./node_modules/rxjs/dist/esm/internal/firstValueFrom.js","./node_modules/ngx-quill/fesm2022/ngx-quill.mjs","./src/app/text-editor/text-editor.component.ts","./src/app/text-editor/text-editor.component.html","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, makeEnvironmentProviders } from '@angular/core';\n\nconst defaultModules = {\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n        ['blockquote', 'code-block'],\n        [{ header: 1 }, { header: 2 }], // custom button values\n        [{ list: 'ordered' }, { list: 'bullet' }],\n        [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n        [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n        [{ direction: 'rtl' }], // text direction\n        [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n        [\n            { color: [] },\n            { background: [] }\n        ], // dropdown with defaults from theme\n        [{ font: [] }],\n        [{ align: [] }],\n        ['clean'], // remove formatting button\n        ['link', 'image', 'video'], // link and image, video\n        ['table']\n    ]\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config', {\n    providedIn: 'root',\n    factory: () => ({ modules: defaultModules })\n});\n\n/**\n * This `NgModule` provides a global Quill config on the root level, e.g., in `AppModule`.\n * But this eliminates the need to import the entire `ngx-quill` library into the main bundle.\n * The `quill-editor` itself may be rendered in any lazy-loaded module, but importing `QuillModule`\n * into the `AppModule` will bundle the `ngx-quill` into the vendor.\n */\nclass QuillConfigModule {\n    static forRoot(config) {\n        return {\n            ngModule: QuillConfigModule,\n            providers: [{ provide: QUILL_CONFIG_TOKEN, useValue: config }],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillConfigModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillConfigModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillConfigModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillConfigModule, decorators: [{\n            type: NgModule\n        }] });\n\n/**\n * Provides Quill configuration at the root level:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideQuillConfig(...)]\n * });\n * ```\n */\nconst provideQuillConfig = (config) => makeEnvironmentProviders([{ provide: QUILL_CONFIG_TOKEN, useValue: config }]);\n\n/*\n * Public API Surface of ngx-quill/config\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QUILL_CONFIG_TOKEN, QuillConfigModule, defaultModules, provideQuillConfig };\n","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n","import { defaultModules, QUILL_CONFIG_TOKEN } from 'ngx-quill/config';\nexport * from 'ngx-quill/config';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, input, EventEmitter, signal, inject, ElementRef, ChangeDetectorRef, PLATFORM_ID, Renderer2, NgZone, DestroyRef, SecurityContext, Directive, Output, forwardRef, Component, ViewEncapsulation, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformServer, NgClass } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { Observable, defer, isObservable, firstValueFrom, Subscription, fromEvent } from 'rxjs';\nimport { shareReplay, mergeMap, debounceTime } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst getFormat = (format, configFormat) => {\n    const passedFormat = format || configFormat;\n    return passedFormat || 'html';\n};\nconst raf$ = () => {\n    return new Observable(subscriber => {\n        const rafId = requestAnimationFrame(() => {\n            subscriber.next();\n            subscriber.complete();\n        });\n        return () => cancelAnimationFrame(rafId);\n    });\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass QuillService {\n    constructor(injector, config) {\n        this.config = config;\n        this.quill$ = defer(async () => {\n            if (!this.Quill) {\n                // Quill adds events listeners on import https://github.com/quilljs/quill/blob/develop/core/emitter.js#L8\n                // We'd want to use the unpatched `addEventListener` method to have all event callbacks to be run outside of zone.\n                // We don't know yet if the `zone.js` is used or not, just save the value to restore it back further.\n                const maybePatchedAddEventListener = this.document.addEventListener;\n                // There're 2 types of Angular applications:\n                // 1) zone-full (by default)\n                // 2) zone-less\n                // The developer can avoid importing the `zone.js` package and tells Angular that he/she is responsible for running\n                // the change detection by himself. This is done by \"nooping\" the zone through `CompilerOptions` when bootstrapping\n                // the root module. We fallback to `document.addEventListener` if `__zone_symbol__addEventListener` is not defined,\n                // this means the `zone.js` is not imported.\n                // The `__zone_symbol__addEventListener` is basically a native DOM API, which is not patched by zone.js, thus not even going\n                // through the `zone.js` task lifecycle. You can also access the native DOM API as follows `target[Zone.__symbol__('methodName')]`.\n                this.document.addEventListener =\n                    // eslint-disable-next-line @typescript-eslint/dot-notation\n                    this.document['__zone_symbol__addEventListener'] ||\n                        this.document.addEventListener;\n                const quillImport = await import('quill');\n                this.document.addEventListener = maybePatchedAddEventListener;\n                this.Quill = (\n                // seems like esmodules have nested \"default\"\n                quillImport.default?.default ?? quillImport.default ?? quillImport);\n            }\n            // Only register custom options and modules once\n            this.config.customOptions?.forEach((customOption) => {\n                const newCustomOption = this.Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);\n            });\n            return await this.registerCustomModules(this.Quill, this.config.customModules, this.config.suppressGlobalRegisterWarning);\n        }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n        this.document = injector.get(DOCUMENT);\n        if (!this.config) {\n            this.config = { modules: defaultModules };\n        }\n    }\n    getQuill() {\n        return this.quill$;\n    }\n    /**\n     * Marked as internal so it won't be available for `ngx-quill` consumers, this is only\n     * internal method to be used within the library.\n     *\n     * @internal\n     */\n    async registerCustomModules(Quill, customModules, suppressGlobalRegisterWarning) {\n        if (Array.isArray(customModules)) {\n            // eslint-disable-next-line prefer-const\n            for (let { implementation, path } of customModules) {\n                // The `implementation` might be an observable that resolves the actual implementation,\n                // e.g. if it should be lazy loaded.\n                if (isObservable(implementation)) {\n                    implementation = await firstValueFrom(implementation);\n                }\n                Quill.register(path, implementation, suppressGlobalRegisterWarning);\n            }\n        }\n        // Return `Quill` constructor so we'll be able to re-use its return value except of using\n        // `map` operators, etc.\n        return Quill;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillService, deps: [{ token: i0.Injector }, { token: QUILL_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [QUILL_CONFIG_TOKEN]\n                }] }] });\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass QuillEditorBase {\n    constructor() {\n        this.format = input(undefined);\n        this.theme = input(undefined);\n        this.modules = input(undefined);\n        this.debug = input(false);\n        this.readOnly = input(false);\n        this.placeholder = input(undefined);\n        this.maxLength = input(undefined);\n        this.minLength = input(undefined);\n        this.required = input(false);\n        this.formats = input(undefined);\n        this.customToolbarPosition = input('top');\n        this.sanitize = input(false);\n        this.beforeRender = input(undefined);\n        this.styles = input(null);\n        this.registry = input(undefined);\n        this.bounds = input(undefined);\n        this.customOptions = input([]);\n        this.customModules = input([]);\n        this.trackChanges = input(undefined);\n        this.classes = input(undefined);\n        this.trimOnValidation = input(false);\n        this.linkPlaceholder = input(undefined);\n        this.compareValues = input(false);\n        this.filterNull = input(false);\n        this.debounceTime = input(undefined);\n        /*\n        https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n      \n        provide default empty value\n        by default null\n      \n        e.g. defaultEmptyValue=\"\" - empty string\n      \n        <quill-editor\n          defaultEmptyValue=\"\"\n          formControlName=\"message\"\n        ></quill-editor>\n        */\n        this.defaultEmptyValue = input(null);\n        this.onEditorCreated = new EventEmitter();\n        this.onEditorChanged = new EventEmitter();\n        this.onContentChanged = new EventEmitter();\n        this.onSelectionChanged = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onNativeFocus = new EventEmitter();\n        this.onNativeBlur = new EventEmitter();\n        this.disabled = false; // used to store initial value before ViewInit\n        this.toolbarPosition = signal('top');\n        this.subscription = null;\n        this.quillSubscription = null;\n        this.elementRef = inject(ElementRef);\n        this.document = inject(DOCUMENT);\n        this.cd = inject(ChangeDetectorRef);\n        this.domSanitizer = inject(DomSanitizer);\n        this.platformId = inject(PLATFORM_ID);\n        this.renderer = inject(Renderer2);\n        this.zone = inject(NgZone);\n        this.service = inject(QuillService);\n        this.destroyRef = inject(DestroyRef);\n        this.valueGetter = input((quillEditor) => {\n            let html = quillEditor.getSemanticHTML();\n            if (this.isEmptyValue(html)) {\n                html = this.defaultEmptyValue();\n            }\n            let modelValue = html;\n            const format = getFormat(this.format(), this.service.config.format);\n            if (format === 'text') {\n                modelValue = quillEditor.getText();\n            }\n            else if (format === 'object') {\n                modelValue = quillEditor.getContents();\n            }\n            else if (format === 'json') {\n                try {\n                    modelValue = JSON.stringify(quillEditor.getContents());\n                }\n                catch (e) {\n                    modelValue = quillEditor.getText();\n                }\n            }\n            return modelValue;\n        });\n        this.valueSetter = input((quillEditor, value) => {\n            const format = getFormat(this.format(), this.service.config.format);\n            if (format === 'html') {\n                const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false);\n                if (sanitize) {\n                    value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n                }\n                return quillEditor.clipboard.convert({ html: value });\n            }\n            else if (format === 'json') {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (e) {\n                    return [{ insert: value }];\n                }\n            }\n            return value;\n        });\n        this.selectionChangeHandler = (range, oldRange, source) => {\n            const trackChanges = this.trackChanges() || this.service.config.trackChanges;\n            const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all');\n            // only emit changes when there's any listener\n            if (!this.onBlur.observed &&\n                !this.onFocus.observed &&\n                !this.onSelectionChanged.observed &&\n                !shouldTriggerOnModelTouched) {\n                return;\n            }\n            this.zone.run(() => {\n                if (range === null) {\n                    this.onBlur.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                else if (oldRange === null) {\n                    this.onFocus.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                this.onSelectionChanged.emit({\n                    editor: this.quillEditor,\n                    oldRange,\n                    range,\n                    source\n                });\n                if (shouldTriggerOnModelTouched) {\n                    this.onModelTouched();\n                }\n                this.cd.markForCheck();\n            });\n        };\n        this.textChangeHandler = (delta, oldDelta, source) => {\n            // only emit changes emitted by user interactions\n            const text = this.quillEditor.getText();\n            const content = this.quillEditor.getContents();\n            let html = this.quillEditor.getSemanticHTML();\n            if (this.isEmptyValue(html)) {\n                html = this.defaultEmptyValue();\n            }\n            const trackChanges = this.trackChanges() || this.service.config.trackChanges;\n            const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange;\n            // only emit changes when there's any listener\n            if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n                return;\n            }\n            this.zone.run(() => {\n                if (shouldTriggerOnModelChange) {\n                    const valueGetter = this.valueGetter();\n                    this.onModelChange(valueGetter(this.quillEditor));\n                }\n                this.onContentChanged.emit({\n                    content,\n                    delta,\n                    editor: this.quillEditor,\n                    html,\n                    oldDelta,\n                    source,\n                    text\n                });\n                this.cd.markForCheck();\n            });\n        };\n        // eslint-disable-next-line max-len\n        this.editorChangeHandler = (event, current, old, source) => {\n            // only emit changes when there's any listener\n            if (!this.onEditorChanged.observed) {\n                return;\n            }\n            // only emit changes emitted by user interactions\n            if (event === 'text-change') {\n                const text = this.quillEditor.getText();\n                const content = this.quillEditor.getContents();\n                let html = this.quillEditor.getSemanticHTML();\n                if (this.isEmptyValue(html)) {\n                    html = this.defaultEmptyValue();\n                }\n                this.zone.run(() => {\n                    this.onEditorChanged.emit({\n                        content,\n                        delta: current,\n                        editor: this.quillEditor,\n                        event,\n                        html,\n                        oldDelta: old,\n                        source,\n                        text\n                    });\n                    this.cd.markForCheck();\n                });\n            }\n            else {\n                this.zone.run(() => {\n                    this.onEditorChanged.emit({\n                        editor: this.quillEditor,\n                        event,\n                        oldRange: old,\n                        range: current,\n                        source\n                    });\n                    this.cd.markForCheck();\n                });\n            }\n        };\n    }\n    static normalizeClassNames(classes) {\n        const classList = classes.trim().split(' ');\n        return classList.reduce((prev, cur) => {\n            const trimmed = cur.trim();\n            if (trimmed) {\n                prev.push(trimmed);\n            }\n            return prev;\n        }, []);\n    }\n    ngOnInit() {\n        this.toolbarPosition.set(this.customToolbarPosition());\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n        // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n        this.quillSubscription = this.service.getQuill().pipe(mergeMap((Quill) => {\n            const promises = [this.service.registerCustomModules(Quill, this.customModules())];\n            const beforeRender = this.beforeRender() ?? this.service.config.beforeRender;\n            if (beforeRender) {\n                promises.push(beforeRender());\n            }\n            return Promise.all(promises).then(() => Quill);\n        })).subscribe(Quill => {\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n            const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n            const modules = Object.assign({}, this.modules() || this.service.config.modules);\n            if (toolbarElem) {\n                modules.toolbar = toolbarElem;\n            }\n            else if (modules.toolbar === undefined) {\n                modules.toolbar = defaultModules.toolbar;\n            }\n            let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder;\n            if (placeholder === undefined) {\n                placeholder = 'Insert text here ...';\n            }\n            const styles = this.styles();\n            if (styles) {\n                Object.keys(styles).forEach((key) => {\n                    this.renderer.setStyle(this.editorElem, key, styles[key]);\n                });\n            }\n            if (this.classes()) {\n                this.addClasses(this.classes());\n            }\n            this.customOptions().forEach((customOption) => {\n                const newCustomOption = Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill.register(newCustomOption, true);\n            });\n            let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds();\n            if (!bounds) {\n                bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body;\n            }\n            let debug = this.debug();\n            if (!debug && debug !== false && this.service.config.debug) {\n                debug = this.service.config.debug;\n            }\n            let readOnly = this.readOnly();\n            if (!readOnly && this.readOnly() !== false) {\n                readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;\n            }\n            let defaultEmptyValue = this.defaultEmptyValue;\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.service.config.hasOwnProperty('defaultEmptyValue')) {\n                defaultEmptyValue = this.service.config.defaultEmptyValue;\n            }\n            let formats = this.formats();\n            if (!formats && formats === undefined) {\n                formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined);\n            }\n            this.zone.runOutsideAngular(() => {\n                this.quillEditor = new Quill(this.editorElem, {\n                    bounds,\n                    debug: debug,\n                    formats: formats,\n                    modules,\n                    placeholder,\n                    readOnly,\n                    defaultEmptyValue,\n                    registry: this.registry(),\n                    theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n                });\n                if (this.onNativeBlur.observed) {\n                    // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n                    this.quillEditor.scroll.domNode.addEventListener('blur', () => this.onNativeBlur.next({\n                        editor: this.quillEditor,\n                        source: 'dom'\n                    }));\n                    // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n                    const toolbar = this.quillEditor.getModule('toolbar');\n                    toolbar.container?.addEventListener('mousedown', (e) => e.preventDefault());\n                }\n                if (this.onNativeFocus.observed) {\n                    this.quillEditor.scroll.domNode.addEventListener('focus', () => this.onNativeFocus.next({\n                        editor: this.quillEditor,\n                        source: 'dom'\n                    }));\n                }\n                // Set optional link placeholder, Quill has no native API for it so using workaround\n                if (this.linkPlaceholder()) {\n                    const tooltip = this.quillEditor?.theme?.tooltip;\n                    const input = tooltip?.root?.querySelector('input[data-link]');\n                    if (input?.dataset) {\n                        input.dataset.link = this.linkPlaceholder();\n                    }\n                }\n            });\n            if (this.content) {\n                const format = getFormat(this.format(), this.service.config.format);\n                if (format === 'text') {\n                    this.quillEditor.setText(this.content, 'silent');\n                }\n                else {\n                    const valueSetter = this.valueSetter();\n                    const newValue = valueSetter(this.quillEditor, this.content);\n                    this.quillEditor.setContents(newValue, 'silent');\n                }\n                const history = this.quillEditor.getModule('history');\n                history.clear();\n            }\n            // initialize disabled status based on this.disabled as default value\n            this.setDisabledState();\n            this.addQuillEventListeners();\n            // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n            // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n            if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n                return;\n            }\n            // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n            // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n            // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n            raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n                if (this.onValidatorChanged) {\n                    this.onValidatorChanged();\n                }\n                this.onEditorCreated.emit(this.quillEditor);\n            });\n        });\n    }\n    ngOnDestroy() {\n        this.dispose();\n        this.quillSubscription?.unsubscribe();\n        this.quillSubscription = null;\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        /* eslint-disable @typescript-eslint/dot-notation */\n        if (changes.readOnly) {\n            this.quillEditor.enable(!changes.readOnly.currentValue);\n        }\n        if (changes.placeholder) {\n            this.quillEditor.root.dataset.placeholder =\n                changes.placeholder.currentValue;\n        }\n        if (changes.defaultEmptyValue) {\n            this.quillEditor.root.dataset.defaultEmptyValue =\n                changes.defaultEmptyValue.currentValue;\n        }\n        if (changes.styles) {\n            const currentStyling = changes.styles.currentValue;\n            const previousStyling = changes.styles.previousValue;\n            if (previousStyling) {\n                Object.keys(previousStyling).forEach((key) => {\n                    this.renderer.removeStyle(this.editorElem, key);\n                });\n            }\n            if (currentStyling) {\n                Object.keys(currentStyling).forEach((key) => {\n                    this.renderer.setStyle(this.editorElem, key, this.styles()[key]);\n                });\n            }\n        }\n        if (changes.classes) {\n            const currentClasses = changes.classes.currentValue;\n            const previousClasses = changes.classes.previousValue;\n            if (previousClasses) {\n                this.removeClasses(previousClasses);\n            }\n            if (currentClasses) {\n                this.addClasses(currentClasses);\n            }\n        }\n        // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n        // `debounceTime` operator or vice-versa remove it.\n        if (changes.debounceTime) {\n            this.addQuillEventListeners();\n        }\n        /* eslint-enable @typescript-eslint/dot-notation */\n    }\n    addClasses(classList) {\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.addClass(this.editorElem, c);\n        });\n    }\n    removeClasses(classList) {\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.removeClass(this.editorElem, c);\n        });\n    }\n    writeValue(currentValue) {\n        // optional fix for https://github.com/angular/angular/issues/14988\n        if (this.filterNull() && currentValue === null) {\n            return;\n        }\n        this.content = currentValue;\n        if (!this.quillEditor) {\n            return;\n        }\n        const format = getFormat(this.format(), this.service.config.format);\n        const valueSetter = this.valueSetter();\n        const newValue = valueSetter(this.quillEditor, currentValue);\n        if (this.compareValues()) {\n            const currentEditorValue = this.quillEditor.getContents();\n            if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n                return;\n            }\n        }\n        if (currentValue) {\n            if (format === 'text') {\n                this.quillEditor.setText(currentValue);\n            }\n            else {\n                this.quillEditor.setContents(newValue);\n            }\n            return;\n        }\n        this.quillEditor.setText('');\n    }\n    setDisabledState(isDisabled = this.disabled) {\n        // store initial value to set appropriate disabled status after ViewInit\n        this.disabled = isDisabled;\n        if (this.quillEditor) {\n            if (isDisabled) {\n                this.quillEditor.disable();\n                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n            }\n            else {\n                if (!this.readOnly()) {\n                    this.quillEditor.enable();\n                }\n                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    registerOnValidatorChange(fn) {\n        this.onValidatorChanged = fn;\n    }\n    validate() {\n        if (!this.quillEditor) {\n            return null;\n        }\n        const err = {};\n        let valid = true;\n        const text = this.quillEditor.getText();\n        // trim text if wanted + handle special case that an empty editor contains a new line\n        const textLength = this.trimOnValidation() ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1);\n        const deltaOperations = this.quillEditor.getContents().ops;\n        const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString());\n        if (this.minLength() && textLength && textLength < this.minLength()) {\n            err.minLengthError = {\n                given: textLength,\n                minLength: this.minLength()\n            };\n            valid = false;\n        }\n        if (this.maxLength() && textLength > this.maxLength()) {\n            err.maxLengthError = {\n                given: textLength,\n                maxLength: this.maxLength()\n            };\n            valid = false;\n        }\n        if (this.required() && !textLength && onlyEmptyOperation) {\n            err.requiredError = {\n                empty: true\n            };\n            valid = false;\n        }\n        return valid ? null : err;\n    }\n    addQuillEventListeners() {\n        this.dispose();\n        // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n        // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n        // `zone.run` when we emit an event to the parent component.\n        this.zone.runOutsideAngular(() => {\n            this.subscription = new Subscription();\n            this.subscription.add(\n            // mark model as touched if editor lost focus\n            fromEvent(this.quillEditor, 'selection-change').subscribe(([range, oldRange, source]) => {\n                this.selectionChangeHandler(range, oldRange, source);\n            }));\n            // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n            // will be invoked upon subscription and teardown.\n            let textChange$ = fromEvent(this.quillEditor, 'text-change');\n            let editorChange$ = fromEvent(this.quillEditor, 'editor-change');\n            if (typeof this.debounceTime() === 'number') {\n                textChange$ = textChange$.pipe(debounceTime(this.debounceTime()));\n                editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()));\n            }\n            this.subscription.add(\n            // update model if text changes\n            textChange$.subscribe(([delta, oldDelta, source]) => {\n                this.textChangeHandler(delta, oldDelta, source);\n            }));\n            this.subscription.add(\n            // triggered if selection or text changed\n            editorChange$.subscribe(([event, current, old, source]) => {\n                this.editorChangeHandler(event, current, old, source);\n            }));\n        });\n    }\n    dispose() {\n        if (this.subscription !== null) {\n            this.subscription.unsubscribe();\n            this.subscription = null;\n        }\n    }\n    isEmptyValue(html) {\n        return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillEditorBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"17.1.0\", version: \"18.0.0\", type: QuillEditorBase, inputs: { format: { classPropertyName: \"format\", publicName: \"format\", isSignal: true, isRequired: false, transformFunction: null }, theme: { classPropertyName: \"theme\", publicName: \"theme\", isSignal: true, isRequired: false, transformFunction: null }, modules: { classPropertyName: \"modules\", publicName: \"modules\", isSignal: true, isRequired: false, transformFunction: null }, debug: { classPropertyName: \"debug\", publicName: \"debug\", isSignal: true, isRequired: false, transformFunction: null }, readOnly: { classPropertyName: \"readOnly\", publicName: \"readOnly\", isSignal: true, isRequired: false, transformFunction: null }, placeholder: { classPropertyName: \"placeholder\", publicName: \"placeholder\", isSignal: true, isRequired: false, transformFunction: null }, maxLength: { classPropertyName: \"maxLength\", publicName: \"maxLength\", isSignal: true, isRequired: false, transformFunction: null }, minLength: { classPropertyName: \"minLength\", publicName: \"minLength\", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: \"required\", publicName: \"required\", isSignal: true, isRequired: false, transformFunction: null }, formats: { classPropertyName: \"formats\", publicName: \"formats\", isSignal: true, isRequired: false, transformFunction: null }, customToolbarPosition: { classPropertyName: \"customToolbarPosition\", publicName: \"customToolbarPosition\", isSignal: true, isRequired: false, transformFunction: null }, sanitize: { classPropertyName: \"sanitize\", publicName: \"sanitize\", isSignal: true, isRequired: false, transformFunction: null }, beforeRender: { classPropertyName: \"beforeRender\", publicName: \"beforeRender\", isSignal: true, isRequired: false, transformFunction: null }, styles: { classPropertyName: \"styles\", publicName: \"styles\", isSignal: true, isRequired: false, transformFunction: null }, registry: { classPropertyName: \"registry\", publicName: \"registry\", isSignal: true, isRequired: false, transformFunction: null }, bounds: { classPropertyName: \"bounds\", publicName: \"bounds\", isSignal: true, isRequired: false, transformFunction: null }, customOptions: { classPropertyName: \"customOptions\", publicName: \"customOptions\", isSignal: true, isRequired: false, transformFunction: null }, customModules: { classPropertyName: \"customModules\", publicName: \"customModules\", isSignal: true, isRequired: false, transformFunction: null }, trackChanges: { classPropertyName: \"trackChanges\", publicName: \"trackChanges\", isSignal: true, isRequired: false, transformFunction: null }, classes: { classPropertyName: \"classes\", publicName: \"classes\", isSignal: true, isRequired: false, transformFunction: null }, trimOnValidation: { classPropertyName: \"trimOnValidation\", publicName: \"trimOnValidation\", isSignal: true, isRequired: false, transformFunction: null }, linkPlaceholder: { classPropertyName: \"linkPlaceholder\", publicName: \"linkPlaceholder\", isSignal: true, isRequired: false, transformFunction: null }, compareValues: { classPropertyName: \"compareValues\", publicName: \"compareValues\", isSignal: true, isRequired: false, transformFunction: null }, filterNull: { classPropertyName: \"filterNull\", publicName: \"filterNull\", isSignal: true, isRequired: false, transformFunction: null }, debounceTime: { classPropertyName: \"debounceTime\", publicName: \"debounceTime\", isSignal: true, isRequired: false, transformFunction: null }, defaultEmptyValue: { classPropertyName: \"defaultEmptyValue\", publicName: \"defaultEmptyValue\", isSignal: true, isRequired: false, transformFunction: null }, valueGetter: { classPropertyName: \"valueGetter\", publicName: \"valueGetter\", isSignal: true, isRequired: false, transformFunction: null }, valueSetter: { classPropertyName: \"valueSetter\", publicName: \"valueSetter\", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { onEditorCreated: \"onEditorCreated\", onEditorChanged: \"onEditorChanged\", onContentChanged: \"onContentChanged\", onSelectionChanged: \"onSelectionChanged\", onFocus: \"onFocus\", onBlur: \"onBlur\", onNativeFocus: \"onNativeFocus\", onNativeBlur: \"onNativeBlur\" }, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillEditorBase, decorators: [{\n            type: Directive\n        }], propDecorators: { onEditorCreated: [{\n                type: Output\n            }], onEditorChanged: [{\n                type: Output\n            }], onContentChanged: [{\n                type: Output\n            }], onSelectionChanged: [{\n                type: Output\n            }], onFocus: [{\n                type: Output\n            }], onBlur: [{\n                type: Output\n            }], onNativeFocus: [{\n                type: Output\n            }], onNativeBlur: [{\n                type: Output\n            }] } });\nclass QuillEditorComponent extends QuillEditorBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillEditorComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.0.0\", type: QuillEditorComponent, isStandalone: true, selector: \"quill-editor\", providers: [\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent)\n            },\n            {\n                multi: true,\n                provide: NG_VALIDATORS,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent)\n            }\n        ], usesInheritance: true, ngImport: i0, template: `\n    @if (toolbarPosition() !== 'top') {\n        <div quill-editor-element></div>\n    }\n\n    <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n    <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n    <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n    @if (toolbarPosition() === 'top') {\n        <div quill-editor-element></div>\n    }\n  `, isInline: true, styles: [\":host{display:inline-block}\\n\"] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillEditorComponent, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.Emulated, providers: [\n                        {\n                            multi: true,\n                            provide: NG_VALUE_ACCESSOR,\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            useExisting: forwardRef(() => QuillEditorComponent)\n                        },\n                        {\n                            multi: true,\n                            provide: NG_VALIDATORS,\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            useExisting: forwardRef(() => QuillEditorComponent)\n                        }\n                    ], selector: 'quill-editor', template: `\n    @if (toolbarPosition() !== 'top') {\n        <div quill-editor-element></div>\n    }\n\n    <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n    <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n    <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n    @if (toolbarPosition() === 'top') {\n        <div quill-editor-element></div>\n    }\n  `, standalone: true, styles: [\":host{display:inline-block}\\n\"] }]\n        }] });\n\nclass QuillViewHTMLComponent {\n    constructor(sanitizer, service) {\n        this.sanitizer = sanitizer;\n        this.service = service;\n        this.content = input('');\n        this.theme = input(undefined);\n        this.sanitize = input(false);\n        this.innerHTML = signal('');\n        this.themeClass = signal('ql-snow');\n    }\n    ngOnChanges(changes) {\n        if (changes.theme) {\n            const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\n            this.themeClass.set(`ql-${theme} ngx-quill-view-html`);\n        }\n        else if (!this.theme()) {\n            const theme = this.service.config.theme ? this.service.config.theme : 'snow';\n            this.themeClass.set(`ql-${theme} ngx-quill-view-html`);\n        }\n        if (changes.content) {\n            const content = changes.content.currentValue;\n            const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false);\n            const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content);\n            this.innerHTML.set(innerHTML);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillViewHTMLComponent, deps: [{ token: i1.DomSanitizer }, { token: QuillService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.1.0\", version: \"18.0.0\", type: QuillViewHTMLComponent, isStandalone: true, selector: \"quill-view-html\", inputs: { content: { classPropertyName: \"content\", publicName: \"content\", isSignal: true, isRequired: false, transformFunction: null }, theme: { classPropertyName: \"theme\", publicName: \"theme\", isSignal: true, isRequired: false, transformFunction: null }, sanitize: { classPropertyName: \"sanitize\", publicName: \"sanitize\", isSignal: true, isRequired: false, transformFunction: null } }, usesOnChanges: true, ngImport: i0, template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n    </div>\n  </div>\n`, isInline: true, styles: [\".ql-container.ngx-quill-view-html{border:0}\\n\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillViewHTMLComponent, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, selector: 'quill-view-html', template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n    </div>\n  </div>\n`, standalone: true, imports: [NgClass], styles: [\".ql-container.ngx-quill-view-html{border:0}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.DomSanitizer }, { type: QuillService }] });\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass QuillViewComponent {\n    constructor(elementRef, renderer, zone, service, domSanitizer, platformId) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.service = service;\n        this.domSanitizer = domSanitizer;\n        this.platformId = platformId;\n        this.format = input(undefined);\n        this.theme = input(undefined);\n        this.modules = input(undefined);\n        this.debug = input(false);\n        this.formats = input(undefined);\n        this.sanitize = input(false);\n        this.beforeRender = input(undefined);\n        this.strict = input(true);\n        this.content = input();\n        this.customModules = input([]);\n        this.customOptions = input([]);\n        this.onEditorCreated = new EventEmitter();\n        this.quillSubscription = null;\n        this.destroyRef = inject(DestroyRef);\n        this.valueSetter = (quillEditor, value) => {\n            const format = getFormat(this.format(), this.service.config.format);\n            let content = value;\n            if (format === 'text') {\n                quillEditor.setText(content);\n            }\n            else {\n                if (format === 'html') {\n                    const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false);\n                    if (sanitize) {\n                        value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n                    }\n                    content = quillEditor.clipboard.convert({ html: value });\n                }\n                else if (format === 'json') {\n                    try {\n                        content = JSON.parse(value);\n                    }\n                    catch (e) {\n                        content = [{ insert: value }];\n                    }\n                }\n                quillEditor.setContents(content);\n            }\n        };\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        if (changes.content) {\n            this.valueSetter(this.quillEditor, changes.content.currentValue);\n        }\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        this.quillSubscription = this.service.getQuill().pipe(mergeMap((Quill) => {\n            const promises = [this.service.registerCustomModules(Quill, this.customModules())];\n            const beforeRender = this.beforeRender() ?? this.service.config.beforeRender;\n            if (beforeRender) {\n                promises.push(beforeRender());\n            }\n            return Promise.all(promises).then(() => Quill);\n        })).subscribe(Quill => {\n            const modules = Object.assign({}, this.modules() || this.service.config.modules);\n            modules.toolbar = false;\n            this.customOptions().forEach((customOption) => {\n                const newCustomOption = Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill.register(newCustomOption, true);\n            });\n            let debug = this.debug();\n            if (!debug && debug !== false && this.service.config.debug) {\n                debug = this.service.config.debug;\n            }\n            let formats = this.formats();\n            if (!formats && formats === undefined) {\n                formats = this.service.config.formats ?\n                    Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined);\n            }\n            const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow');\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n            this.zone.runOutsideAngular(() => {\n                this.quillEditor = new Quill(this.editorElem, {\n                    debug: debug,\n                    formats: formats,\n                    modules,\n                    readOnly: true,\n                    strict: this.strict(),\n                    theme\n                });\n            });\n            this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n            if (this.content()) {\n                this.valueSetter(this.quillEditor, this.content());\n            }\n            // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n            // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n            if (!this.onEditorCreated.observed) {\n                return;\n            }\n            // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n            // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n            // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n            raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n                this.onEditorCreated.emit(this.quillEditor);\n            });\n        });\n    }\n    ngOnDestroy() {\n        this.quillSubscription?.unsubscribe();\n        this.quillSubscription = null;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillViewComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: QuillService }, { token: i1.DomSanitizer }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.1.0\", version: \"18.0.0\", type: QuillViewComponent, isStandalone: true, selector: \"quill-view\", inputs: { format: { classPropertyName: \"format\", publicName: \"format\", isSignal: true, isRequired: false, transformFunction: null }, theme: { classPropertyName: \"theme\", publicName: \"theme\", isSignal: true, isRequired: false, transformFunction: null }, modules: { classPropertyName: \"modules\", publicName: \"modules\", isSignal: true, isRequired: false, transformFunction: null }, debug: { classPropertyName: \"debug\", publicName: \"debug\", isSignal: true, isRequired: false, transformFunction: null }, formats: { classPropertyName: \"formats\", publicName: \"formats\", isSignal: true, isRequired: false, transformFunction: null }, sanitize: { classPropertyName: \"sanitize\", publicName: \"sanitize\", isSignal: true, isRequired: false, transformFunction: null }, beforeRender: { classPropertyName: \"beforeRender\", publicName: \"beforeRender\", isSignal: true, isRequired: false, transformFunction: null }, strict: { classPropertyName: \"strict\", publicName: \"strict\", isSignal: true, isRequired: false, transformFunction: null }, content: { classPropertyName: \"content\", publicName: \"content\", isSignal: true, isRequired: false, transformFunction: null }, customModules: { classPropertyName: \"customModules\", publicName: \"customModules\", isSignal: true, isRequired: false, transformFunction: null }, customOptions: { classPropertyName: \"customOptions\", publicName: \"customOptions\", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { onEditorCreated: \"onEditorCreated\" }, usesOnChanges: true, ngImport: i0, template: `\n  <div quill-view-element></div>\n`, isInline: true, styles: [\".ql-container.ngx-quill-view{border:0}\\n\"], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillViewComponent, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, selector: 'quill-view', template: `\n  <div quill-view-element></div>\n`, standalone: true, styles: [\".ql-container.ngx-quill-view{border:0}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: QuillService }, { type: i1.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }], propDecorators: { onEditorCreated: [{\n                type: Output\n            }] } });\n\nclass QuillModule {\n    static forRoot(config) {\n        return {\n            ngModule: QuillModule,\n            providers: [\n                {\n                    provide: QUILL_CONFIG_TOKEN,\n                    useValue: config\n                }\n            ]\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillModule, imports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent], exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: QuillModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n                    exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-quill\n */\n// Re-export everything from the secondary entry-point so we can be backwards-compatible\n// and don't introduce breaking changes for consumers.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent };\n","import { CommonModule } from '@angular/common';\r\nimport { Component, ElementRef, inject } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { ForgeButtonModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { QuillModule, QuillModules } from 'ngx-quill';\r\n\r\n// https://quilljs.com/docs/\r\n// https://github.com/KillerCodeMonkey/ngx-quill\r\n\r\n@Component({\r\n  selector: 'app-text-editor',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    QuillModule,\r\n    ForgeButtonModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  templateUrl: './text-editor.component.html',\r\n  styleUrls: ['./text-editor.component.scss']\r\n})\r\nexport class TextEditorComponent {\r\n  public elementRef = inject(ElementRef);\r\n\r\n  public textEditorFormControl = new FormControl();\r\n  public quillModules: QuillModules = {\r\n    toolbar: {\r\n      container: [\r\n        ['bold', 'italic', 'underline', 'strike', 'code'],\r\n        [{ align: [] }],\r\n        [{ list: 'ordered' }, { list: 'bullet' }],\r\n        [{ indent: '-1' }, { indent: '+1' }],\r\n        ['link'],\r\n        [{ color: [] }, { background: [] }],\r\n        ['clean'],\r\n        [{ font: [] }, { size: [] }, { header: [1, 2, 3, 4, 5, 6, false] }],\r\n        ['image']\r\n      ],\r\n      // handlers: {\r\n      //   'link': (value) => {\r\n      //     console.log(value);\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n\r\n  public onEditorCreated(quill: any) {\r\n    console.log(quill);\r\n    this.elementRef.nativeElement.querySelectorAll('.ql-toolbar button').forEach((el: HTMLElement) => el.tabIndex = -1);\r\n    this.elementRef.nativeElement.querySelectorAll('.ql-toolbar [role=\"button\"]').forEach((el: HTMLElement) => el.tabIndex = -1);\r\n  }\r\n\r\n  public onToggleState() {\r\n    this.textEditorFormControl.disabled ? this.textEditorFormControl.enable() : this.textEditorFormControl.disable();\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Text Editor</h2>\r\n  <forge-button slot=\"end\" type=\"outlined\">\r\n    <button type=\"button\" (click)=\"onToggleState()\">Toggle state</button>\r\n  </forge-button>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <quill-editor [formControl]=\"textEditorFormControl\" [sanitize]=\"true\" placeholder=\"\" [modules]=\"quillModules\" [bounds]=\"elementRef.nativeElement\" #quillEditor (keydown)=\"$event.stopPropagation()\" (onEditorCreated)=\"onEditorCreated($event)\"></quill-editor>\r\n\r\n  <p>{{textEditorFormControl.value}}</p>\r\n</div>","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n"],"x_google_ignoreList":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16]}