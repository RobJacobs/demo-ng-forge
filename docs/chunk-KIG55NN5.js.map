{
  "version": 3,
  "sources": ["src/app/test/test.component.ts", "src/app/test/test.component.html", "src/app/test/parent/parent.component.ts", "src/app/test/parent/parent.component.html", "src/app/test/child/child.component.ts", "src/app/test/child/child.component.html", "src/app/test/routes.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent {}\r\n", "<router-outlet></router-outlet>\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap, takeUntil } from 'rxjs';\r\nimport { ForgeButtonModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\n\r\n@Component({\r\n  selector: 'app-test-parent',\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeToolbarModule, ForgeButtonModule],\r\n  templateUrl: './parent.component.html',\r\n  styleUrls: ['./parent.component.scss']\r\n})\r\nexport class ParentComponent {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  private appCache = inject(AppCacheService);\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n\r\n  public onMakeRequest() {\r\n    this.getLongRequest().subscribe();\r\n  }\r\n\r\n  private getLongRequest(): Observable<any> {\r\n    return this.appDataService.getLongRequest().pipe(\r\n      tap({\r\n        next: (result) => console.log(result),\r\n        error: (error) => console.log(error)\r\n      }),\r\n      takeUntil(this.appCache.cancelHttpRequests)\r\n    );\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Parent</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <p>Parent content</p>\r\n  <forge-button variant=\"raised\" (click)=\"onNavigate('test/child')\"> View child </forge-button>\r\n  <forge-button style=\"margin: 16px\" variant=\"raised\" (click)=\"onMakeRequest()\"> Make request </forge-button>\r\n</div>\r\n", "import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-test-child',\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeIconButtonModule, ForgeIconModule, ForgeToolbarModule],\r\n  templateUrl: './child.component.html',\r\n  styleUrls: ['./child.component.scss']\r\n})\r\nexport class ChildComponent {\r\n  private router = inject(Router);\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button (click)=\"onNavigate('test/parent')\" aria-label=\"Go back\">\r\n      <forge-icon name=\"arrow_back\"></forge-icon>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--subheading4\">Child</h2>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <p>Child content</p>\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\n\r\nimport { TestComponent } from './test.component';\r\nimport { ParentComponent } from './parent/parent.component';\r\nimport { ChildComponent } from './child/child.component';\r\n\r\nexport const TEST_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: TestComponent,\r\n    children: [\r\n      { path: 'parent', component: ParentComponent },\r\n      { path: 'child', component: ChildComponent },\r\n      { path: '', redirectTo: 'parent', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n"],
  "mappings": "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",
  "names": ["TestComponent", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "styles", "_TestComponent", "ParentComponent", "constructor", "router", "inject", "Router", "appDataService", "AppDataService", "appCache", "AppCacheService", "onNavigate", "route", "navigate", "onMakeRequest", "getLongRequest", "subscribe", "pipe", "tap", "next", "result", "console", "log", "error", "takeUntil", "cancelHttpRequests", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "CommonModule", "ForgeToolbarModule", "ToolbarComponent", "ForgeButtonModule", "ButtonComponent", "styles", "_ParentComponent", "ChildComponent", "constructor", "router", "inject", "Router", "onNavigate", "route", "navigate", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "CommonModule", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeToolbarModule", "ToolbarComponent", "styles", "_ChildComponent", "TEST_ROUTES", "path", "component", "TestComponent", "children", "ParentComponent", "ChildComponent", "redirectTo", "pathMatch"]
}
