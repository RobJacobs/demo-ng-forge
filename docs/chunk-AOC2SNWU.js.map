{
  "version": 3,
  "sources": ["src/app/css-variables/css-variables.component.ts", "src/app/css-variables/css-variables.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { debounce } from '@tylertech/forge-core';\r\nimport { CellAlign, IColumnConfiguration } from '@tylertech/forge';\r\nimport { ForgeTableModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-css-variables',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ForgeTableModule, ForgeTextFieldModule, ForgeToolbarModule],\r\n  templateUrl: './css-variables.component.html',\r\n  styleUrl: './css-variables.component.scss'\r\n})\r\nexport class CssVariablesComponent implements OnInit {\r\n  private globalCssVariables = new Set<{ name: string; value: string }>([]);\r\n  public recordset = Array.from(this.globalCssVariables);\r\n  public tableColumns: IColumnConfiguration[] = [\r\n    { property: 'name', header: 'Name' },\r\n    {\r\n      header: 'Color',\r\n      width: 48,\r\n      align: CellAlign.Center,\r\n      template: (rowIndex: number, cellElement: HTMLElement, data: { name: string; value: string }) => {\r\n        if ((data.value.startsWith('#') && data.value.length === 7) || data.value.startsWith('rgba')) {\r\n          const divElement = document.createElement('div');\r\n          divElement.style.height = '32px';\r\n          divElement.style.width = '32px';\r\n          divElement.style.backgroundColor = data.value;\r\n          cellElement.appendChild(divElement);\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    { property: 'value', header: 'Value' }\r\n  ];\r\n  public variableFilter: string = '';\r\n\r\n  public ngOnInit() {\r\n    Array.from(document.styleSheets).forEach((ss) => {\r\n      try {\r\n        Array.from(ss.cssRules)\r\n          .filter((ssRule) => ssRule.cssText.startsWith(':root'))\r\n          .forEach((ssRule) => {\r\n            ssRule.cssText\r\n              .split('{')[1]\r\n              .replace('}', '')\r\n              .split(';')\r\n              .map((r) => r.trim())\r\n              .filter((r) => r.startsWith('--forge'))\r\n              .map((r) => {\r\n                const rule = r.split(':');\r\n                return { name: rule[0].trim(), value: rule[1].trim() };\r\n              })\r\n              .forEach((r) => this.globalCssVariables.add(r));\r\n          });\r\n      } catch {}\r\n    });\r\n    this.recordset = Array.from(this.globalCssVariables);\r\n  }\r\n\r\n  public onFilter = debounce(() => {\r\n    this.recordset = Array.from(this.globalCssVariables).filter((v) => v.name.includes(this.variableFilter));\r\n  }, 500);\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Forge CSS Variables</h2>\r\n  <forge-text-field slot=\"start\">\r\n    <input type=\"text\" [(ngModel)]=\"variableFilter\" (input)=\"onFilter()\" placeholder=\"Filter\" aria-label=\"Filter variables\" />\r\n  </forge-text-field>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__table\">\r\n    <forge-table [columnConfigurations]=\"tableColumns\" [data]=\"recordset\"></forge-table>\r\n  </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["CssVariablesComponent", "constructor", "globalCssVariables", "Set", "recordset", "Array", "from", "tableColumns", "property", "header", "width", "align", "CellAlign", "Center", "template", "rowIndex", "cellElement", "data", "value", "startsWith", "length", "divElement", "document", "createElement", "style", "height", "backgroundColor", "appendChild", "variableFilter", "onFilter", "debounce", "filter", "v", "name", "includes", "ngOnInit", "styleSheets", "forEach", "ss", "cssRules", "ssRule", "cssText", "split", "replace", "map", "r", "trim", "rule", "add", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "CommonModule", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ForgeTableModule", "TableComponent", "ForgeTextFieldModule", "TextFieldComponent", "ForgeToolbarModule", "ToolbarComponent", "styles"]
}
