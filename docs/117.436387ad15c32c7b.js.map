{"version":3,"file":"117.436387ad15c32c7b.js","mappings":"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","names":["AppDataService","constructor","this","httpClient","inject","HttpClient","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","jDH","factory","ɵfac","providedIn","i0","ctx_r2","rangeMessage","option_r5","_r4","$implicit","onDeleteRangeOption","label","$event","_r2","rangeMin","rangeMax","onAddRangeOption","AutocompleteRangeComponent_ng_template_8_Conditional_14_Template","AutocompleteRangeComponent_ng_template_8_For_17_Template","rangeOptions","AutocompleteRangeComponent","ngZone","NgZone","viewContainerRef","ViewContainerRef","valueChange","EventEmitter","maxlength","elementId","uniqueId","onChange","fn","onTouched","onFilter","Promise","resolve","reject","optionFilter","subscribe","response","options","forEach","isArray","push","error","optionHeaderBuilder","run","undefined","rangeRef","rootNodes","selectedTextBuilder","selectedOptions","autocompleteRef","nativeElement","open","optionCount","rangeOptionCount","autocompleteBlur","values","writeValue","rangeOption","window","requestAnimationFrame","ngAfterViewInit","createEmbeddedView","rangeTemplateRef","remove","ngOnDestroy","destroy","registerOnChange","registerOnTouched","onAutocompleteChange","emitChangeEvents","isString","trim","comp","comparator","findIndex","filterInputRef","option","focus","optionIndex","splice","emit","VBU","selectors","viewQuery","rf","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","_r1","AutocompleteRangeComponent_ng_template_8_Template","CommonModule","FormsModule","i1","ForgeAutocompleteModule","i2","ForgeDividerModule","ForgeIconButtonModule","ForgeIconModule","ForgeListItemModule","ForgeListModule","ForgeTextFieldModule","styles","type","a","b","getPropertyValue","groupData","reduce","previousValue","currentValue","operator","substring","Object","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","replace","formatDate","format","formatNumber","parseQueryStringParameters","params","queryIndex","href","httpParams","HttpParams","fromString","keys","k","getAll","enumerable","writable","reduceObject","object","reduced"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/shared/components/autocomplete-range/autocomplete-range.component.html","./src/app/shared/components/autocomplete-range/autocomplete-range.component.ts","./src/utils.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\r\n  <forge-text-field>\r\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\" />\r\n    <label [attr.for]=\"elementId\">{{label}}</label>\r\n    <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n  </forge-text-field>\r\n</forge-autocomplete>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"range\" tabindex=\"-1\">\r\n    <div class=\"range__input\">\r\n      <span class=\"forge-typography--subtitle1 range__input__header\">Enter a search range</span>\r\n      <div class=\"range__input__body\">\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMin\" />\r\n        </forge-text-field>\r\n        <span>to</span>\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMax\" />\r\n        </forge-text-field>\r\n        <forge-icon-button>\r\n          <button type=\"button\" aria-label=\"Add search range\" (click)=\"onAddRangeOption()\">\r\n            <forge-icon name=\"add\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n      @if (rangeMessage) {\r\n      <div class=\"forge-typography--caption\">{{rangeMessage}}</div>\r\n      }\r\n    </div>\r\n    <forge-list class=\"range__options\">\r\n      @for (option of rangeOptions; track i; let i = $index) {\r\n      <forge-list-item>\r\n        <forge-icon-button slot=\"leading\">\r\n          <button type=\"button\" aria-label=\"Delete search range\" (click)=\"onDeleteRangeOption(option)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n        {{option.label}}\r\n      </forge-list-item>\r\n      }\r\n    </forge-list>\r\n    <forge-divider></forge-divider>\r\n  </div>\r\n</ng-template>","import {\r\n  AfterViewInit,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  NgZone,\r\n  inject\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  AutocompleteFilterCallback,\r\n  IOption,\r\n  IAutocompleteOptionGroup,\r\n  AutocompleteSelectedTextBuilder,\r\n  AutocompleteComponent\r\n} from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\nimport { ForgeAutocompleteModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\n\r\nimport { Utils } from 'src/utils';\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeDividerModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeListItemModule,\r\n    ForgeListModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteRangeComponent), multi: true }]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  private ngZone = inject(NgZone);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur() {\r\n    this.onTouched();\r\n  }\r\n  @ViewChild('rangeAutocomplete') autocompleteRef?: ElementRef;\r\n  @ViewChild('rangeTemplate') rangeTemplateRef?: TemplateRef<any>;\r\n  @ViewChild('filterInput') filterInputRef?: ElementRef;\r\n\r\n  @Input()\r\n  public optionFilter?: (filter: string) => Observable<IOption[]>;\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  @Input()\r\n  public label?: string;\r\n  @Input()\r\n  public maxlength: number | null = null;\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  public onChange = (fn: any) => { };\r\n  public onTouched = () => { };\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      if (this.optionFilter) {\r\n        this.optionFilter(this.filter).subscribe(\r\n          {\r\n            next: (response) => {\r\n              const options: IOption[] = [];\r\n              response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n              resolve(options);\r\n            },\r\n            error: () => reject()\r\n          }\r\n        );\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  writeValue(values: Array<IOption> | Array<string | string[] | number>): void {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({ label: `${rangeOption[0]} to ${rangeOption[1]}`, value: rangeOption });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange(): void {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  public onAddRangeOption(): void {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label =\r\n      this.rangeMin?.length && this.rangeMax?.length\r\n        ? `${this.rangeMin} to ${this.rangeMax}`\r\n        : this.rangeMin?.length\r\n          ? `Greater than ${this.rangeMin}`\r\n          : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption): void {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents(): void {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}