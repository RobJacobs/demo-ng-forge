{
  "version": 3,
  "sources": ["src/app/re-captcha/re-captcha.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable, NgZone } from '@angular/core';\r\nimport { finalize, Observable, Subject } from 'rxjs';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    grecaptcha: {\r\n      enterprise: any;\r\n    };\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ReCaptchaService {\r\n  private httpClient = inject(HttpClient);\r\n  private ngZone = inject(NgZone);\r\n  public reCaptchaSiteKey?: string;\r\n\r\n  public initialize(siteKey: string): Observable<void> {\r\n    const sub = new Subject<void>();\r\n\r\n    const reCaptchaReady = () => {\r\n      window.grecaptcha.enterprise.ready(() => {\r\n        this.ngZone.run(() => {\r\n          sub.next();\r\n          sub.complete();\r\n        });\r\n      });\r\n    };\r\n\r\n    this.reCaptchaSiteKey = siteKey;\r\n\r\n    if (!document.querySelector(`script[src=\"https://www.google.com/recaptcha/enterprise.js?render=${this.reCaptchaSiteKey}\"`)) {\r\n      const scriptElement = document.createElement('script');\r\n      scriptElement.src = `https://www.google.com/recaptcha/enterprise.js?render=${this.reCaptchaSiteKey}`;\r\n      scriptElement.async = true;\r\n      scriptElement.defer = true;\r\n      scriptElement.onload = () => {\r\n        reCaptchaReady();\r\n      };\r\n      document.body.appendChild(scriptElement);\r\n    } else {\r\n      reCaptchaReady();\r\n    }\r\n\r\n    return sub;\r\n  }\r\n\r\n  public executeChallenge(action: string): Observable<string> {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      // need to clear any cached token\r\n      window.grecaptcha.enterprise.reset(this.reCaptchaSiteKey);\r\n    });\r\n\r\n    const sub = new Subject<string>();\r\n\r\n    window.grecaptcha.enterprise.ready(() => {\r\n      try {\r\n        window.grecaptcha.enterprise\r\n          .execute(this.reCaptchaSiteKey, { action })\r\n          .then((token) => {\r\n            sub.next(token);\r\n            sub.complete();\r\n          })\r\n          .catch((err) => {\r\n            // this catches when user dismisses image challenge without completing\r\n            sub.error(err);\r\n            sub.complete();\r\n          });\r\n      } catch (err) {\r\n        sub.error(err);\r\n        sub.complete();\r\n      }\r\n    });\r\n\r\n    return sub.asObservable();\r\n  }\r\n\r\n  public assessToken(apiKey: string, token: string, action: string): Observable<any> {\r\n    const assessmentRequest = {\r\n      event: {\r\n        token,\r\n        expectedAction: action,\r\n        siteKey: this.reCaptchaSiteKey\r\n      }\r\n    };\r\n    return this.httpClient.post(`https://recaptchaenterprise.googleapis.com/v1/projects/test-3844b/assessments?key=${apiKey}`, assessmentRequest);\r\n  }\r\n}\r\n"],
  "mappings": "wGAaA,IAAaA,GAAgB,IAAA,CAAvB,IAAOA,EAAP,MAAOA,CAAgB,CAD7BC,aAAA,CAEU,KAAAC,WAAaC,EAAOC,CAAU,EAC9B,KAAAC,OAASF,EAAOG,CAAM,EAGvBC,WAAWC,EAAe,CAC/B,IAAMC,EAAM,IAAIC,EAEVC,EAAiBA,IAAK,CAC1BC,OAAOC,WAAWC,WAAWC,MAAM,IAAK,CACtC,KAAKV,OAAOW,IAAI,IAAK,CACnBP,EAAIQ,KAAI,EACRR,EAAIS,SAAQ,CACd,CAAC,CACH,CAAC,CACH,EAIA,GAFA,KAAKC,iBAAmBX,EAEnBY,SAASC,cAAc,qEAAqE,KAAKF,gBAAgB,GAAG,EAUvHR,EAAc,MAV4G,CAC1H,IAAMW,EAAgBF,SAASG,cAAc,QAAQ,EACrDD,EAAcE,IAAM,yDAAyD,KAAKL,gBAAgB,GAClGG,EAAcG,MAAQ,GACtBH,EAAcI,MAAQ,GACtBJ,EAAcK,OAAS,IAAK,CAC1BhB,EAAc,CAChB,EACAS,SAASQ,KAAKC,YAAYP,CAAa,CACzC,CAIA,OAAOb,CACT,CAEOqB,iBAAiBC,EAAc,CACpC,KAAK1B,OAAO2B,kBAAkB,IAAK,CAEjCpB,OAAOC,WAAWC,WAAWmB,MAAM,KAAKd,gBAAgB,CAC1D,CAAC,EAED,IAAMV,EAAM,IAAIC,EAEhBE,cAAOC,WAAWC,WAAWC,MAAM,IAAK,CACtC,GAAI,CACFH,OAAOC,WAAWC,WACfoB,QAAQ,KAAKf,iBAAkB,CAAEY,OAAAA,CAAM,CAAE,EACzCI,KAAMC,GAAS,CACd3B,EAAIQ,KAAKmB,CAAK,EACd3B,EAAIS,SAAQ,CACd,CAAC,EACAmB,MAAOC,GAAO,CAEb7B,EAAI8B,MAAMD,CAAG,EACb7B,EAAIS,SAAQ,CACd,CAAC,CACL,OAASoB,EAAK,CACZ7B,EAAI8B,MAAMD,CAAG,EACb7B,EAAIS,SAAQ,CACd,CACF,CAAC,EAEMT,EAAI+B,aAAY,CACzB,CAEOC,YAAYC,EAAgBN,EAAeL,EAAc,CAC9D,IAAMY,EAAoB,CACxBC,MAAO,CACLR,MAAAA,EACAS,eAAgBd,EAChBvB,QAAS,KAAKW,mBAGlB,OAAO,KAAKjB,WAAW4C,KAAK,qFAAqFJ,CAAM,GAAIC,CAAiB,CAC9I,yCA1EW3C,EAAgB,wBAAhBA,EAAgB+C,QAAhB/C,EAAgBgD,SAAA,CAAA,EAAvB,IAAOhD,EAAPiD,SAAOjD,CAAgB,GAAA",
  "names": ["ReCaptchaService", "constructor", "httpClient", "inject", "HttpClient", "ngZone", "NgZone", "initialize", "siteKey", "sub", "Subject", "reCaptchaReady", "window", "grecaptcha", "enterprise", "ready", "run", "next", "complete", "reCaptchaSiteKey", "document", "querySelector", "scriptElement", "createElement", "src", "async", "defer", "onload", "body", "appendChild", "executeChallenge", "action", "runOutsideAngular", "reset", "execute", "then", "token", "catch", "err", "error", "asObservable", "assessToken", "apiKey", "assessmentRequest", "event", "expectedAction", "post", "factory", "\u0275fac", "_ReCaptchaService"]
}
