{"version":3,"file":"112.39b60d3ae4432d7a.js","mappings":"oLAKO,IAAMA,EAAiB,MAAxB,MAAOA,EAEXC,cACEC,KAAKC,YAAcC,OAAOC,OAAOC,GAAkBC,IAAKC,KAC7CC,MAAOD,EAAKE,KAAMC,MAAOH,EAAKE,KAAME,YAAaJ,EAAKE,KAAMG,gBAAiB,eAExFC,IAAaC,OAAOX,OAAOC,OAAOC,GACpC,CAACU,SAAAd,KAAA,mBAAAe,iBAPUjB,EAAiB,EAAAgB,SAAAd,KAAA,WAAAgB,EAAAC,IAAA,OAAjBnB,EAAiBoB,QAAjBpB,EAAiBqB,mBAAjBrB,CAAiB,oDCAxBsB,MAAA,uCAAyBA,MAAA,OAAAC,EAAAC,wCAW3BF,MAAA,WACEA,MAAA,kBACAA,MAAA,YAAsCA,MAAA,GACxCA,oCAFmBA,cAAA,OAAAG,EAAAd,OACqBW,MAAA,GAAAA,MAAAG,EAAAd,QCIrC,IAAMe,EAAc,MAArB,MAAOA,EAhBbzB,cAiBSC,KAAAyB,SAAQC,OAAO5B,GAGfE,KAAA2B,iBAA+C,CAACC,EAAgBnB,IACjEA,EACK,CAACT,KAAKyB,MAAMxB,aAAa4B,KAAKC,GAAKA,EAAErB,QAAUA,IAElDmB,EAAOG,OACF/B,KAAKyB,MAAMxB,aAAa2B,OAAOE,GAAKA,EAAEvB,MAAMyB,oBAAoBC,SAASL,EAAOI,sBAAsBE,MAAM,EAAG,KAE/GlC,KAAKyB,MAAMxB,aAAaiC,MAAM,EAAG,KAKvCC,eAAe1B,GACpBT,KAAKsB,aAAetB,KAAKyB,MAAMxB,aAAa4B,KAAKC,GAAKA,EAAErB,QAAUA,IAAQA,MAC1E2B,QAAQC,IAAIrC,KAAKsB,aACnB,CAACR,SAAAd,KAAA,mBAAAe,iBAnBUS,EAAc,EAAAV,SAAAd,KAAA,UAAAgB,EAAAsB,IAAA,MAAdd,EAAce,UAAA,gBAAAC,YAAA,EAAAC,SAAA,CAAArB,MANd,CACTtB,IACDsB,OAAAsB,MAAA,GAAAC,KAAA,EAAAC,OAAA,mXAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDjBD1B,MADF,oBACEA,CAD4B,UAC2BA,MAAA,4BAAsBA,QAC7EA,MAAA,0BAA6DA,MAAA,qCAAA4B,GAAA,OAA6BD,EAAAZ,eAAAa,EAAAC,OAA6B,GACrH7B,MAAA,sBACEA,MAAA,EAAA8B,EAAA,oBAIA9B,MADA,YACAA,CADkE,kBAIxEA,YAGEA,MADF,UACEA,CADgB,WAEdA,MAAA,GAAA+B,EAAA,YAAA/B,OAOJA,iBApBmCA,MAAA,GAAAA,MAAA,SAAA2B,EAAApB,kBAE7BP,MAAA,GAAAA,MAAA,EAAA2B,EAAAzB,aAAA,MAWFF,MAAA,GAAAA,MAAA2B,EAAAtB,MAAAxB,6BCLAmD,KACAC,MAAuBC,MACvBC,MAAeD,MACfE,MAAoBF,MACpBG,MAAkBH,OAAAI,OAAA,8iCAQTlC,CAAc","names":["IconsCacheService","constructor","this","iconOptions","Object","values","tylerIconsModule","map","icon","label","name","value","leadingIcon","leadingIconType","IconRegistry","define","static","t","core","jDH","factory","Éµfac","i0","ctx_r0","selectedIcon","icon_r2","IconsComponent","cache","inject","iconOptionFilter","filter","find","o","length","toLocaleLowerCase","includes","slice","onIconSelected","console","log","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","detail","IconsComponent_Conditional_5_Template","IconsComponent_For_11_Template","CommonModule","ForgeAutocompleteModule","i1","ForgeIconModule","ForgeTextFieldModule","ForgeToolbarModule","styles"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/icons/icons-cache.service.ts","./src/app/icons/icons.component.html","./src/app/icons/icons.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IconRegistry, IOption } from '@tylertech/forge';\r\nimport * as tylerIconsModule from '@tylertech/tyler-icons/standard';\r\n\r\n@Injectable()\r\nexport class IconsCacheService {\r\n  public iconOptions?: IOption[];\r\n  constructor() {\r\n    this.iconOptions = Object.values(tylerIconsModule).map((icon: { name: string; data: string }) => {\r\n      return { label: icon.name, value: icon.name, leadingIcon: icon.name, leadingIconType: 'component' };\r\n    });\r\n    IconRegistry.define(Object.values(tylerIconsModule));\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">Forge Icons - Standard</h2>\r\n  <forge-autocomplete slot=\"start\" [filter]=\"iconOptionFilter\" (forge-autocomplete-change)=\"onIconSelected($event.detail)\">\r\n    <forge-text-field>\r\n      @if (selectedIcon) {\r\n      <forge-icon slot=\"start\" [name]=\"selectedIcon\"></forge-icon>\r\n      }\r\n      <input type=\"text\" aria-label=\"Filter icons\" placeholder=\"Filter\">\r\n      <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <div class=\"body__icons\">\r\n    @for (icon of cache.iconOptions; track i; let i = $index) {\r\n    <div class=\"icon\">\r\n      <forge-icon lazy [name]=\"icon.value\"></forge-icon>\r\n      <div class=\"forge-typography--label1\">{{icon.value}}</div>\r\n    </div>\r\n    }\r\n  </div>\r\n</div>","import { Component, inject } from '@angular/core';\r\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\r\nimport { IconsCacheService } from './icons-cache.service';\r\nimport { ForgeAutocompleteModule, ForgeIconModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-icons',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeIconModule,\r\n    ForgeTextFieldModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  providers: [\r\n    IconsCacheService\r\n  ],\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.scss']\r\n})\r\nexport class IconsComponent {\r\n  public cache = inject(IconsCacheService);\r\n  public selectedIcon?: string;\r\n\r\n  public iconOptionFilter: AutocompleteFilterCallback = (filter: string, value: string) => {\r\n    if (value) {\r\n      return [this.cache.iconOptions?.find(o => o.value === value)] as IOption[];\r\n    } else {\r\n      if (filter.length) {\r\n        return this.cache.iconOptions?.filter(o => o.label.toLocaleLowerCase().includes(filter.toLocaleLowerCase())).slice(0, 100) as IOption[];\r\n      } else {\r\n        return this.cache.iconOptions?.slice(0, 100) as IOption[];\r\n      }\r\n    }\r\n  };\r\n\r\n  public onIconSelected(value: string) {\r\n    this.selectedIcon = this.cache.iconOptions?.find(o => o.value === value)?.value;\r\n    console.log(this.selectedIcon);\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}