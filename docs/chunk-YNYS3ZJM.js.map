{
  "version": 3,
  "sources": ["src/app/query-builder/query-builder.component.ts", "src/app/query-builder/query-builder.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AbstractControl, FormArray, FormControl, FormGroup, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport {\r\n  ForgeAutocompleteModule,\r\n  ForgeButtonModule,\r\n  ForgeIconButtonModule,\r\n  ForgeIconModule,\r\n  ForgeMenuModule,\r\n  ForgeOptionModule,\r\n  ForgeSelectModule,\r\n  ForgeTextFieldModule\r\n} from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { IFilter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormControlInvalidDirective } from 'src/app/shared/directives/form-control-invalid/form-control-invalid.directive';\r\n\r\n@Component({\r\n  selector: 'app-query-builder',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeButtonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeMenuModule,\r\n    ForgeOptionModule,\r\n    ForgeSelectModule,\r\n    ForgeTextFieldModule,\r\n    FormControlInvalidDirective\r\n  ],\r\n  templateUrl: './query-builder.component.html',\r\n  styleUrls: ['./query-builder.component.scss']\r\n})\r\nexport class QueryBuilderComponent {\r\n  public formGroup = new FormGroup({\r\n    filters: new FormArray([this.buildFilterFormGroup()])\r\n  });\r\n\r\n  public conditionOptions = [\r\n    { value: 'and', label: 'And' },\r\n    { value: 'or', label: 'Or' }\r\n  ];\r\n\r\n  public propertyOptions = [\r\n    { value: 'firstName', label: 'First name' },\r\n    { value: 'lastName', label: 'Last name' },\r\n    { value: 'dateOfBirth', label: 'Date of birth' },\r\n    { value: 'gender', label: 'Gender' },\r\n    { value: 'occupation', label: 'Occupation' }\r\n  ];\r\n\r\n  public operatorOptions = [\r\n    { value: 0, label: 'Equal' },\r\n    { value: 1, label: 'Not equal' },\r\n    { value: 2, label: 'Greater than' },\r\n    { value: 3, label: 'Less than' },\r\n    { value: 4, label: 'Greater than equal to' },\r\n    { value: 5, label: 'Less than equal to' },\r\n    { value: 6, label: 'Range' },\r\n    { value: 7, label: 'Contains' },\r\n    { value: 8, label: 'Not contains' },\r\n    { value: 9, label: 'Empty' }\r\n  ];\r\n\r\n  public filterOptions = [\r\n    { value: 'condition', label: 'Add condition' },\r\n    { value: 'group', label: 'Add group' }\r\n  ];\r\n\r\n  public propertyFilter = (value: string) => Utils.filterData(this.propertyOptions, [{ key: 'label', value }]);\r\n\r\n  public onAddFilter(formGroup: FormGroup, type: 'condition' | 'group') {\r\n    if (formGroup === this.formGroup) {\r\n      this.formGroup.controls.filters.push(this.buildFilterFormGroup());\r\n    } else {\r\n      switch (type) {\r\n        case 'condition': {\r\n          const index = (formGroup.parent as FormArray).controls.indexOf(formGroup) + 1;\r\n          (formGroup.parent as FormArray).insert(index, this.buildFilterFormGroup());\r\n          break;\r\n        }\r\n        case 'group':\r\n          (formGroup.get('filters') as FormArray).push(this.buildFilterFormGroup());\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onDeleteFilter(formGroup: FormGroup) {\r\n    const formArray = formGroup.parent as FormArray;\r\n    const index = formArray.controls.indexOf(formGroup);\r\n    if (index !== -1) {\r\n      formArray.removeAt(index);\r\n    }\r\n  }\r\n\r\n  private buildFilterFormGroup(filter?: IFilter): FormGroup {\r\n    return new FormGroup({\r\n      property: new FormControl(filter?.property, {\r\n        validators: [Validators.required]\r\n      }),\r\n      condition: new FormControl(filter?.condition || 'and', {\r\n        validators: [Validators.required]\r\n      }),\r\n      operator: new FormControl(filter?.operator, {\r\n        validators: [Validators.required]\r\n      }),\r\n      value: new FormControl(filter?.value, {\r\n        validators: [this.validateFilterValue('value')]\r\n      }),\r\n      minValue: new FormControl(filter?.minValue, {\r\n        validators: [this.validateFilterValue('minValue')]\r\n      }),\r\n      maxValue: new FormControl(filter?.minValue, {\r\n        validators: [this.validateFilterValue('maxValue')]\r\n      }),\r\n      filters: new FormArray([])\r\n    });\r\n  }\r\n\r\n  private validateFilterValue(controlName: string): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const formGroup = control.parent;\r\n      if (!formGroup) {\r\n        return null;\r\n      }\r\n\r\n      const operator = formGroup.value.operator;\r\n      if (!isDefined(operator)) {\r\n        return null;\r\n      }\r\n\r\n      switch (operator) {\r\n        case 6: {\r\n          if (controlName === 'value') {\r\n            return null;\r\n          }\r\n\r\n          if (!isDefined(control.value) || !control.value.toString().length) {\r\n            return { required: true };\r\n          }\r\n\r\n          const minValue = formGroup.value.minValue;\r\n          const maxValue = formGroup.value.maxValue;\r\n\r\n          if (controlName === 'minValue') {\r\n            if (\r\n              isDefined(maxValue) &&\r\n              minValue.localeCompare(maxValue, navigator.language, {\r\n                numeric: true,\r\n                ignorePunctuation: true\r\n              }) < 1\r\n            ) {\r\n              formGroup.get('maxValue')?.setErrors(null);\r\n            }\r\n          }\r\n\r\n          if (controlName === 'maxValue') {\r\n            if (!isDefined(minValue)) {\r\n              return null;\r\n            }\r\n\r\n            if (\r\n              minValue.localeCompare(maxValue, navigator.language, {\r\n                numeric: true,\r\n                ignorePunctuation: true\r\n              }) > 0\r\n            ) {\r\n              return { range: true };\r\n            }\r\n          }\r\n\r\n          return null;\r\n        }\r\n        default:\r\n          if (controlName === 'minValue' || controlName === 'maxValue') {\r\n            return null;\r\n          }\r\n\r\n          if (!isDefined(control.value) || !control.value.toString().length) {\r\n            return { required: true };\r\n          }\r\n\r\n          return null;\r\n      }\r\n    };\r\n  }\r\n}\r\n", "<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\">\r\n  <div formArrayName=\"filters\">\r\n    @for (filterGroup of formGroup.controls.filters.controls; track filterIndex; let filterIndex = $index) {\r\n      <div class=\"filter__group\">\r\n        <ng-container *ngTemplateOutlet=\"filterFormTemplate; context: { formGroup: filterGroup, index: filterIndex }\"></ng-container>\r\n      </div>\r\n    }\r\n  </div>\r\n\r\n  <forge-button class=\"filter__group__add\" (click)=\"onAddFilter(formGroup, 'condition')\">\r\n    <forge-icon name=\"add_circle\"></forge-icon>\r\n    Add a new condition\r\n  </forge-button>\r\n\r\n  <p>{{ formGroup.getRawValue() | json }}</p>\r\n</form>\r\n\r\n<ng-template #filterFormTemplate let-formGroup=\"formGroup\" let-index=\"index\">\r\n  @if (index > 0) {\r\n    <ng-container *ngTemplateOutlet=\"filterHeaderTemplate; context: { formGroup: formGroup }\"></ng-container>\r\n  }\r\n\r\n  <ng-container [formGroup]=\"formGroup\">\r\n    <div class=\"filter__form\">\r\n      <forge-autocomplete formControlName=\"property\" [filter]=\"propertyFilter\">\r\n        <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.property\">\r\n          <input type=\"text\" id=\"{{ 'query-builder--filter-property-' + index }}\" />\r\n          <label for=\"{{ 'query-builder--filter-property-' + index }}\">Property</label>\r\n          <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n          <span slot=\"support-text\" class=\"app--form-control-invalid\">A property is required</span>\r\n        </forge-text-field>\r\n      </forge-autocomplete>\r\n\r\n      <forge-select formControlName=\"operator\" label=\"Operator\" required [appFormControlInvalid]=\"formGroup.controls.operator\">\r\n        @for (operator of operatorOptions; track i; let i = $index) {\r\n          <forge-option [value]=\"operator.value\">{{ operator.label }}</forge-option>\r\n        }\r\n        <span slot=\"support-text\" class=\"app--form-control-invalid\">An operator is required</span>\r\n      </forge-select>\r\n\r\n      @if (formGroup.controls.operator.value === 6) {\r\n        <div class=\"filter__form__range\">\r\n          <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.minValue\">\r\n            <input type=\"text\" id=\"{{ 'query-builder--filter-min-' + index }}\" formControlName=\"minValue\" />\r\n            <label for=\"{{ 'query-builder--filter-min-' + index }}\" slot=\"label\">Minimum</label>\r\n            <span slot=\"support-text\" class=\"app--form-control-invalid\">A minimum value is required</span>\r\n          </forge-text-field>\r\n          <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.maxValue\">\r\n            <input type=\"text\" id=\"{{ 'query-builder--filter-max-' + index }}\" formControlName=\"maxValue\" />\r\n            <label for=\"{{ 'query-builder--filter-max-' + index }}\" slot=\"label\">Maximum</label>\r\n            <span slot=\"support-text\" class=\"app--form-control-invalid\">\r\n              {{ formGroup.controls.maxValue.errors.required ? 'A maximum value is required' : formGroup.controls.maxValue.errors.range ? 'Max value must be greater or equal to min value' : '' }}\r\n            </span>\r\n          </forge-text-field>\r\n        </div>\r\n      } @else {\r\n        <forge-text-field required [appFormControlInvalid]=\"formGroup.controls.value\">\r\n          <input type=\"text\" id=\"{{ 'query-builder--filter-value-' + index }}\" formControlName=\"value\" />\r\n          <label for=\"{{ 'query-builder--filter-value-' + index }}\" slot=\"label\">Value</label>\r\n          <span slot=\"support-text\" class=\"app--form-control-invalid\">A value is required</span>\r\n        </forge-text-field>\r\n      }\r\n\r\n      <div class=\"filter__form__action\">\r\n        <forge-menu [options]=\"filterOptions\" (forge-menu-select)=\"onAddFilter(formGroup, $event.detail.value)\">\r\n          <forge-icon-button aria-label=\"Add filter\">\r\n            <forge-icon name=\"add_circle\"></forge-icon>\r\n          </forge-icon-button>\r\n        </forge-menu>\r\n        <forge-icon-button (click)=\"onDeleteFilter(formGroup)\" aria-label=\"Delete filter\">\r\n          <forge-icon name=\"delete\"></forge-icon>\r\n        </forge-icon-button>\r\n      </div>\r\n    </div>\r\n\r\n    @if (formGroup.controls.filters.controls?.length) {\r\n      <ng-container formArrayName=\"filters\">\r\n        @for (filter of formGroup.controls.filters.controls; track filterIndex; let filterIndex = $index) {\r\n          <ng-container *ngTemplateOutlet=\"filterHeaderTemplate; context: { formGroup: filter }\"></ng-container>\r\n          <div class=\"filter__group\">\r\n            <ng-container *ngTemplateOutlet=\"filterFormTemplate; context: { formGroup: filter, index: filterIndex }\"></ng-container>\r\n          </div>\r\n        }\r\n      </ng-container>\r\n    }\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #filterHeaderTemplate let-formGroup=\"formGroup\">\r\n  <div class=\"filter__header\">\r\n    <forge-select [formControl]=\"formGroup.get('condition')\" class=\"filter__header__condition\">\r\n      @for (condition of conditionOptions; track i; let i = $index) {\r\n        <forge-option [value]=\"condition.value\">{{ condition.label }}</forge-option>\r\n      }\r\n    </forge-select>\r\n  </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementContainer", "\u0275\u0275elementStart", "\u0275\u0275template", "QueryBuilderComponent_For_3_ng_container_1_Template", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "filterFormTemplate_r4", "\u0275\u0275pureFunction2", "_c0", "filterGroup_r2", "\u0275$index_5_r3", "QueryBuilderComponent_ng_template_10_Conditional_0_ng_container_0_Template", "filterHeaderTemplate_r7", "\u0275\u0275pureFunction1", "_c1", "formGroup_r6", "\u0275\u0275text", "operator_r8", "value", "\u0275\u0275textInterpolate", "label", "\u0275\u0275element", "controls", "minValue", "\u0275\u0275interpolate", "index_r10", "maxValue", "\u0275\u0275textInterpolate1", "errors", "required", "range", "QueryBuilderComponent_ng_template_10_Conditional_24_For_2_ng_container_0_Template", "QueryBuilderComponent_ng_template_10_Conditional_24_For_2_ng_container_2_Template", "filter_r12", "\u0275$index_104_r13", "\u0275\u0275elementContainerStart", "\u0275\u0275repeaterCreate", "QueryBuilderComponent_ng_template_10_Conditional_24_For_2_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "filters", "\u0275\u0275conditionalCreate", "QueryBuilderComponent_ng_template_10_Conditional_0_Template", "QueryBuilderComponent_ng_template_10_For_13_Template", "QueryBuilderComponent_ng_template_10_Conditional_16_Template", "QueryBuilderComponent_ng_template_10_Conditional_17_Template", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r5", "formGroup", "ctx_r10", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onAddFilter", "detail", "onDeleteFilter", "QueryBuilderComponent_ng_template_10_Conditional_24_Template", "\u0275\u0275conditional", "propertyFilter", "property", "operator", "operatorOptions", "filterOptions", "length", "condition_r14", "QueryBuilderComponent_ng_template_12_For_3_Template", "formGroup_r15", "get", "conditionOptions", "QueryBuilderComponent", "constructor", "FormGroup", "FormArray", "buildFilterFormGroup", "propertyOptions", "Utils", "filterData", "key", "type", "push", "index", "parent", "indexOf", "insert", "formArray", "removeAt", "filter", "FormControl", "validators", "Validators", "condition", "validateFilterValue", "controlName", "control", "isDefined", "toString", "localeCompare", "navigator", "language", "numeric", "ignorePunctuation", "setErrors", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "QueryBuilderComponent_For_3_Template", "i0", "_r1", "QueryBuilderComponent_ng_template_10_Template", "\u0275\u0275templateRefExtractor", "QueryBuilderComponent_ng_template_12_Template", "\u0275\u0275pipeBind1", "getRawValue", "CommonModule", "NgTemplateOutlet", "JsonPipe", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "FormControlDirective", "FormGroupDirective", "FormControlName", "FormArrayName", "ForgeAutocompleteModule", "AutocompleteValueAccessor", "AutocompleteComponent", "ForgeButtonModule", "ButtonComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeMenuModule", "MenuComponent", "ForgeOptionModule", "OptionComponent", "ForgeSelectModule", "SelectValueAccessor", "SelectComponent", "ForgeTextFieldModule", "TextFieldComponent", "FormControlInvalidDirective", "styles", "_QueryBuilderComponent"]
}
