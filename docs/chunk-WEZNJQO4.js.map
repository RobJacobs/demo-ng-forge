{
  "version": 3,
  "sources": ["src/app/shared/components/dialog-template/dialog-template.component.ts", "src/app/shared/components/dialog-template/dialog-template.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { DialogRef, ForgeIconButtonModule, ForgeIconModule, ForgeScaffoldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Component({\r\n  selector: 'app-dialog-template',\r\n  standalone: true,\r\n  imports: [CommonModule, ForgeIconButtonModule, ForgeIconModule, ForgeScaffoldModule, ForgeToolbarModule],\r\n  templateUrl: './dialog-template.component.html',\r\n  styleUrl: './dialog-template.component.scss'\r\n})\r\nexport class DialogTemplateComponent {\r\n  private dialogRef = inject(DialogRef);\r\n\r\n  public id = Utils.elementId('app-');\r\n  @Input({ required: true })\r\n  public dialogTitle?: string;\r\n  @Input()\r\n  showClose = true;\r\n  @Input()\r\n  public showFooter = true;\r\n  @Output()\r\n  public dialogClose = new EventEmitter();\r\n\r\n  constructor() {\r\n    this.dialogRef.nativeElement.setAttribute('aria-labelledby', `${this.id}--title`);\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogClose.emit();\r\n  }\r\n}\r\n", "<forge-scaffold>\r\n  <forge-toolbar slot=\"header\">\r\n    <h2 slot=\"start\" class=\"forge-typography--heading4\" [id]=\"id + '--title'\">{{ dialogTitle }}</h2>\r\n    <ng-content select=\"[app-dialog-header]\"></ng-content>\r\n    <forge-icon-button slot=\"after-end\" aria-label=\"Close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </forge-icon-button>\r\n  </forge-toolbar>\r\n  <ng-content></ng-content>\r\n  @if (showFooter) {\r\n    <forge-toolbar slot=\"footer\" inverted=\"true\">\r\n      <ng-content select=\"[app-dialog-footer]\"></ng-content>\r\n    </forge-toolbar>\r\n  }\r\n</forge-scaffold>\r\n"],
  "mappings": "2cCUIA,EAAA,EAAA,gBAAA,CAAA,EACEC,EAAA,EAAA,CAAA,EACFC,EAAA,GDAJ,IAAaC,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CAalCC,aAAA,CAZQ,KAAAC,UAAYC,EAAOC,CAAS,EAE7B,KAAAC,GAAKC,EAAMC,UAAU,MAAM,EAIlC,KAAAC,UAAY,GAEL,KAAAC,WAAa,GAEb,KAAAC,YAAc,IAAIC,EAGvB,KAAKT,UAAUU,cAAcC,aAAa,kBAAmB,GAAG,KAAKR,EAAE,SAAS,CAClF,CAEOS,SAAO,CACZ,KAAKJ,YAAYK,KAAI,CACvB,iDAnBWf,EAAuB,CAAA,+BAAvBA,EAAuBgB,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,OAAA,CAAAC,YAAA,cAAAV,UAAA,YAAAC,WAAA,YAAA,EAAAU,QAAA,CAAAT,YAAA,aAAA,EAAAU,WAAA,GAAAC,SAAA,CAAAC,CAAA,EAAAC,mBAAAC,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,OAAA,QAAA,EAAA,CAAA,OAAA,QAAA,EAAA,6BAAA,EAAA,IAAA,EAAA,CAAA,OAAA,YAAA,aAAA,QAAA,EAAA,OAAA,EAAA,CAAA,OAAA,OAAA,EAAA,CAAA,OAAA,SAAA,WAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,SCZpChC,EAAA,EAAA,gBAAA,EAAgB,EAAA,gBAAA,CAAA,EACe,EAAA,KAAA,CAAA,EAC+CkC,EAAA,CAAA,EAAiBhC,EAAA,EAC3FD,EAAA,CAAA,EACAD,EAAA,EAAA,oBAAA,CAAA,EAAuDmC,EAAA,QAAA,UAAA,CAAA,OAASF,EAAAhB,QAAA,CAAS,CAAA,EACvEmB,EAAA,EAAA,aAAA,CAAA,EACFlC,EAAA,EAAoB,EAEtBD,EAAA,EAAA,CAAA,EACAoC,EAAA,EAAAC,EAAA,EAAA,EAAA,gBAAA,CAAA,EAKFpC,EAAA,SAZwDqC,EAAA,CAAA,EAAAC,EAAA,KAAAP,EAAAzB,GAAA,SAAA,EAAsB+B,EAAA,EAAAE,EAAAR,EAAAZ,WAAA,EAO5EkB,EAAA,CAAA,EAAAG,EAAAT,EAAArB,WAAA,EAAA,EAAA,kBDDU+B,EAAcC,EAAqBC,EAAAC,EAAEC,EAAiBC,EAAmBC,EAAEC,EAAkBC,CAAA,EAAAC,OAAA,CAAA;;;;;;;mEAAA,CAAA,CAAA,CAAA,SAI5FjD,CAAuB,GAAA",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275projection", "\u0275\u0275elementEnd", "DialogTemplateComponent", "constructor", "dialogRef", "inject", "DialogRef", "id", "Utils", "elementId", "showClose", "showFooter", "dialogClose", "EventEmitter", "nativeElement", "setAttribute", "onClose", "emit", "selectors", "inputs", "dialogTitle", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "ngContentSelectors", "_c1", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275template", "DialogTemplateComponent_Conditional_8_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275textInterpolate", "\u0275\u0275conditional", "CommonModule", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeScaffoldModule", "ScaffoldComponent", "ForgeToolbarModule", "ToolbarComponent", "styles"]
}
