{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/coercion.mjs","node_modules/@angular/cdk/fesm2022/platform.mjs","node_modules/@angular/cdk/fesm2022/bidi.mjs","node_modules/@angular/cdk/fesm2022/collections.mjs","node_modules/@angular/cdk/fesm2022/scrolling.mjs","node_modules/@angular/cdk/fesm2022/a11y.mjs","node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n  return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n  const result = [];\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n  return result;\n}\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nlet Platform = /*#__PURE__*/(() => {\n  class Platform {\n    constructor(_platformId) {\n      this._platformId = _platformId;\n      // We want to use the Angular platform check because if the Document is shimmed\n      // without the navigator, the following checks will fail. This is preferred because\n      // sometimes the Document may be shimmed without the user's knowledge or intention\n      /** Whether the Angular application is being rendered in the browser. */\n      this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n      /** Whether the current browser is Microsoft Edge. */\n      this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n      /** Whether the current rendering engine is Microsoft Trident. */\n      this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n      // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n      /** Whether the current rendering engine is Blink. */\n      this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;\n      // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n      // ensure that Webkit runs standalone and is not used as another engine's base.\n      /** Whether the current rendering engine is WebKit. */\n      this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n      /** Whether the current platform is Apple iOS. */\n      this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n      // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n      // them self as Gecko-like browsers and modify the userAgent's according to that.\n      // Since we only cover one explicit Firefox case, we can simply check for Firefox\n      // instead of having an unstable check for Gecko.\n      /** Whether the current browser is Firefox. */\n      this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n      /** Whether the current platform is Android. */\n      // Trident on mobile adds the android platform to the userAgent to trick detections.\n      this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n      // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n      // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n      // Safari browser should also use Webkit as its layout engine.\n      /** Whether the current browser is Safari. */\n      this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static {\n      this.ɵfac = function Platform_Factory(t) {\n        return new (t || Platform)(i0.ɵɵinject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Platform,\n        factory: Platform.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Platform;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PlatformModule = /*#__PURE__*/(() => {\n  class PlatformModule {\n    static {\n      this.ɵfac = function PlatformModule_Factory(t) {\n        return new (t || PlatformModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: PlatformModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return PlatformModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n  return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nvar RtlScrollAxisType = /*#__PURE__*/function (RtlScrollAxisType) {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"NORMAL\"] = 0] = \"NORMAL\";\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"NEGATED\"] = 1] = \"NEGATED\";\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"INVERTED\"] = 2] = \"INVERTED\";\n  return RtlScrollAxisType;\n}(RtlScrollAxisType || {});\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction = Element.prototype.scrollTo;\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n  return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n  }\n  return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n  return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n  let activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n  return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    typeof __karma__ !== 'undefined' && !!__karma__ ||\n    // @ts-ignore\n    typeof jasmine !== 'undefined' && !!jasmine ||\n    // @ts-ignore\n    typeof jest !== 'undefined' && !!jest ||\n    // @ts-ignore\n    typeof Mocha !== 'undefined' && !!Mocha\n  );\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, RtlScrollAxisType, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = /*#__PURE__*/new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n  const value = rawValue?.toLowerCase() || '';\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nlet Directionality = /*#__PURE__*/(() => {\n  class Directionality {\n    constructor(_document) {\n      /** The current 'ltr' or 'rtl' value. */\n      this.value = 'ltr';\n      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n      this.change = new EventEmitter();\n      if (_document) {\n        const bodyDir = _document.body ? _document.body.dir : null;\n        const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n        this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n      }\n    }\n    ngOnDestroy() {\n      this.change.complete();\n    }\n    static {\n      this.ɵfac = function Directionality_Factory(t) {\n        return new (t || Directionality)(i0.ɵɵinject(DIR_DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Directionality,\n        factory: Directionality.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Directionality;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nlet Dir = /*#__PURE__*/(() => {\n  class Dir {\n    constructor() {\n      /** Normalized direction that accounts for invalid/unsupported values. */\n      this._dir = 'ltr';\n      /** Whether the `value` has been set to its initial value. */\n      this._isInitialized = false;\n      /** Event emitted when the direction changes. */\n      this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n      return this._dir;\n    }\n    set dir(value) {\n      const previousValue = this._dir;\n      // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n      // whereas the browser does it based on the content of the element. Since doing so based\n      // on the content can be expensive, for now we're doing the simpler matching.\n      this._dir = _resolveDirectionality(value);\n      this._rawDir = value;\n      if (previousValue !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n      return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n    ngOnDestroy() {\n      this.change.complete();\n    }\n    static {\n      this.ɵfac = function Dir_Factory(t) {\n        return new (t || Dir)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: Dir,\n        selectors: [[\"\", \"dir\", \"\"]],\n        hostVars: 1,\n        hostBindings: function Dir_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"dir\", ctx._rawDir);\n          }\n        },\n        inputs: {\n          dir: \"dir\"\n        },\n        outputs: {\n          change: \"dirChange\"\n        },\n        exportAs: [\"dir\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: Directionality,\n          useExisting: Dir\n        }])]\n      });\n    }\n  }\n  return Dir;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BidiModule = /*#__PURE__*/(() => {\n  class BidiModule {\n    static {\n      this.ɵfac = function BidiModule_Factory(t) {\n        return new (t || BidiModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: BidiModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return BidiModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\nclass DataSource {}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n  constructor(_data) {\n    super();\n    this._data = _data;\n  }\n  connect() {\n    return isObservable(this._data) ? this._data : of(this._data);\n  }\n  disconnect() {}\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation = /*#__PURE__*/function (_ViewRepeaterOperation) {\n  /** The content of an existing view was replaced with another item. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n  /** A new view was created with `createEmbeddedView`. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n  /** The position of a view changed, but the content remains the same. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n  /** A view was detached from the view container. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n  return _ViewRepeaterOperation;\n}(_ViewRepeaterOperation || {});\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = /*#__PURE__*/new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n        operation = _ViewRepeaterOperation.INSERTED;\n      } else if (currentIndex == null) {\n        viewContainerRef.remove(adjustedPreviousIndex);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {}\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n  constructor() {\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        // Item added.\n        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n      } else if (currentIndex == null) {\n        // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        // Item moved.\n        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n  /** Detaches the view at the given index and inserts into the view cache. */\n  _detachAndCacheView(index, viewContainerRef) {\n    const detachedView = viewContainerRef.detach(index);\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n  /** Moves view at the previous index to the current index. */\n  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n    const view = viewContainerRef.get(adjustedPreviousIndex);\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  _maybeCacheView(view, viewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n  /** Inserts a recycled view from the cache at the given index. */\n  _insertViewFromCache(index, viewContainerRef) {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n  /** Selected values. */\n  get selected() {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n    return this._selected;\n  }\n  constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    this.compareWith = compareWith;\n    /** Currently-selected values. */\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n    this.changed = new Subject();\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values) {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues.filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet))).forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value) {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true) {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value) {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty() {\n    return this._selection.size === 0;\n  }\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue() {\n    return !this.isEmpty();\n  }\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate) {\n    if (this._multiple && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n  /** Emits a change event and clears the records of selected and deselected values. */\n  _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n  /** Selects a value. */\n  _markSelected(value) {\n    value = this._getConcreteValue(value);\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n  /** Deselects a value. */\n  _unmarkSelected(value) {\n    value = this._getConcreteValue(value);\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n  /** Clears out the selected values. */\n  _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  _verifyValueAssignment(values) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n  /** Whether there are queued up change to be emitted. */\n  _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n  _getConcreteValue(inputValue, selection) {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      selection = selection ?? this._selection;\n      for (let selectedValue of selection) {\n        if (this.compareWith(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n      return inputValue;\n    }\n  }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nlet UniqueSelectionDispatcher = /*#__PURE__*/(() => {\n  class UniqueSelectionDispatcher {\n    constructor() {\n      this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n      for (let listener of this._listeners) {\n        listener(id, name);\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n      this._listeners.push(listener);\n      return () => {\n        this._listeners = this._listeners.filter(registered => {\n          return listener !== registered;\n        });\n      };\n    }\n    ngOnDestroy() {\n      this._listeners = [];\n    }\n    static {\n      this.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n        return new (t || UniqueSelectionDispatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: UniqueSelectionDispatcher,\n        factory: UniqueSelectionDispatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UniqueSelectionDispatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Injector, afterNextRender, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /** Update the viewport's total content size. */\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /** Update the viewport's rendered range. */\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nlet CdkFixedSizeVirtualScroll = /*#__PURE__*/(() => {\n  class CdkFixedSizeVirtualScroll {\n    constructor() {\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /** The scroll strategy used by this directive. */\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n      return this._itemSize;\n    }\n    set itemSize(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n      return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n      return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static {\n      this.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n        return new (t || CdkFixedSizeVirtualScroll)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkFixedSizeVirtualScroll,\n        selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n        inputs: {\n          itemSize: \"itemSize\",\n          minBufferPx: \"minBufferPx\",\n          maxBufferPx: \"maxBufferPx\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLL_STRATEGY,\n          useFactory: _fixedSizeVirtualScrollStrategyFactory,\n          deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n        }]), i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkFixedSizeVirtualScroll;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nlet ScrollDispatcher = /*#__PURE__*/(() => {\n  class ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n      this._scrolled = new Subject();\n      /** Keeps track of the global `scroll` and `resize` subscriptions. */\n      this._globalSubscription = null;\n      /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n      this._scrolledCount = 0;\n      /**\n       * Map of all the scrollable references that are registered with the service and their\n       * scroll event subscriptions.\n       */\n      this.scrollContainers = new Map();\n      this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n      }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n      const scrollableReference = this.scrollContainers.get(scrollable);\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n      return new Observable(observer => {\n        if (!this._globalSubscription) {\n          this._addGlobalListener();\n        }\n        // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n        const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n        this._scrolledCount++;\n        return () => {\n          subscription.unsubscribe();\n          this._scrolledCount--;\n          if (!this._scrolledCount) {\n            this._removeGlobalListener();\n          }\n        };\n      });\n    }\n    ngOnDestroy() {\n      this._removeGlobalListener();\n      this.scrollContainers.forEach((_, container) => this.deregister(container));\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(target => {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n      const scrollingContainers = [];\n      this.scrollContainers.forEach((_subscription, scrollable) => {\n        if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n      let element = coerceElement(elementOrElementRef);\n      let scrollableElement = scrollable.getElementRef().nativeElement;\n      // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n      });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    }\n    static {\n      this.ɵfac = function ScrollDispatcher_Factory(t) {\n        return new (t || ScrollDispatcher)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ScrollDispatcher,\n        factory: ScrollDispatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ScrollDispatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nlet CdkScrollable = /*#__PURE__*/(() => {\n  class CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n      const el = this.elementRef.nativeElement;\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      // Rewrite start & end offsets as right or left offsets.\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      }\n      // Rewrite the bottom offset as a top offset.\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      }\n      // Rewrite the right offset as a left offset.\n      if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n        if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n      this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n      const el = this.elementRef.nativeElement;\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const el = this.elementRef.nativeElement;\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      }\n      // Rewrite start & end as left or right offsets.\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n      if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n    static {\n      this.ɵfac = function CdkScrollable_Factory(t) {\n        return new (t || CdkScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkScrollable,\n        selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkScrollable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nlet ViewportRuler = /*#__PURE__*/(() => {\n  class ViewportRuler {\n    constructor(_platform, ngZone, document) {\n      this._platform = _platform;\n      /** Stream of viewport change events. */\n      this._change = new Subject();\n      /** Event listener that will be used to handle the viewport change events. */\n      this._changeListener = event => {\n        this._change.next(event);\n      };\n      this._document = document;\n      ngZone.runOutsideAngular(() => {\n        if (_platform.isBrowser) {\n          const window = this._getWindow();\n          // Note that bind the events ourselves, rather than going through something like RxJS's\n          // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n          window.addEventListener('resize', this._changeListener);\n          window.addEventListener('orientationchange', this._changeListener);\n        }\n        // Clear the cached position so that the viewport is re-measured next time it is required.\n        // We don't need to keep track of the subscription, because it is completed on destroy.\n        this.change().subscribe(() => this._viewportSize = null);\n      });\n    }\n    ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        const window = this._getWindow();\n        window.removeEventListener('resize', this._changeListener);\n        window.removeEventListener('orientationchange', this._changeListener);\n      }\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n      const output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      };\n      // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n      return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      const scrollPosition = this.getViewportScrollPosition();\n      const {\n        width,\n        height\n      } = this.getViewportSize();\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height,\n        width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n      // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n      const document = this._document;\n      const window = this._getWindow();\n      const documentElement = document.documentElement;\n      const documentRect = documentElement.getBoundingClientRect();\n      const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top,\n        left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n      const window = this._getWindow();\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n    static {\n      this.ɵfac = function ViewportRuler_Factory(t) {\n        return new (t || ViewportRuler)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ViewportRuler,\n        factory: ViewportRuler.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ViewportRuler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst VIRTUAL_SCROLLABLE = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nlet CdkVirtualScrollable = /*#__PURE__*/(() => {\n  class CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n      const viewportEl = this.elementRef.nativeElement;\n      return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollable_Factory(t) {\n        return new (t || CdkVirtualScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollable,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nlet CdkVirtualScrollViewport = /*#__PURE__*/(() => {\n  class CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n      return this._orientation;\n    }\n    set orientation(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n        this._calculateSpacerSize();\n      }\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n      this.elementRef = elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollStrategy = _scrollStrategy;\n      this.scrollable = scrollable;\n      this._platform = inject(Platform);\n      /** Emits when the viewport is detached from a CdkVirtualForOf. */\n      this._detachedSubject = new Subject();\n      /** Emits when the rendered range changes. */\n      this._renderedRangeSubject = new Subject();\n      this._orientation = 'vertical';\n      /**\n       * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n       * will be removed.\n       */\n      this.appendOnly = false;\n      // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n      // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n      // depending on how the strategy calculates the scrolled index, it may come at a cost to\n      // performance.\n      /** Emits when the index of the first element visible in the viewport changes. */\n      this.scrolledIndexChange = new Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n      /** A stream that emits whenever the rendered range changes. */\n      this.renderedRangeStream = this._renderedRangeSubject;\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n      this._totalContentSize = 0;\n      /** A string representing the `style.width` property value to be used for the spacer element. */\n      this._totalContentWidth = '';\n      /** A string representing the `style.height` property value to be used for the spacer element. */\n      this._totalContentHeight = '';\n      /** The currently rendered range of indices. */\n      this._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /** The length of the data bound to this viewport (in number of items). */\n      this._dataLength = 0;\n      /** The size of the viewport (in pixels). */\n      this._viewportSize = 0;\n      /** The last rendered content offset that was set. */\n      this._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n      this._renderedContentOffsetNeedsRewrite = false;\n      /** Whether there is a pending change detection cycle. */\n      this._isChangeDetectionPending = false;\n      /** A list of functions to run after the next change detection cycle. */\n      this._runAfterChangeDetection = [];\n      /** Subscription to changes in the viewport size. */\n      this._viewportChanges = Subscription.EMPTY;\n      this._injector = inject(Injector);\n      this._isDestroyed = false;\n      if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n      if (!this.scrollable) {\n        // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n        this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n        this.scrollable = this;\n      }\n    }\n    ngOnInit() {\n      // Scrolling depends on the element dimensions which we can't get during SSR.\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      if (this.scrollable === this) {\n        super.ngOnInit();\n      }\n      // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n        this.scrollable.elementScrolled().pipe(\n        // Start off with a fake scroll event so we properly detect our initial position.\n        startWith(null),\n        // Collect multiple events into one until the next animation frame. This way if\n        // there are multiple scroll events in the same frame we only need to recheck\n        // our layout once.\n        auditTime(0, SCROLL_SCHEDULER),\n        // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n        // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n        // to unsubscribe here just in case.\n        takeUntil(this._destroyed)).subscribe(() => this._scrollStrategy.onContentScrolled());\n        this._markChangeDetectionNeeded();\n      }));\n    }\n    ngOnDestroy() {\n      this.detach();\n      this._scrollStrategy.detach();\n      // Complete all subjects\n      this._renderedRangeSubject.complete();\n      this._detachedSubject.complete();\n      this._viewportChanges.unsubscribe();\n      this._isDestroyed = true;\n      super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      }\n      // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n      this.ngZone.runOutsideAngular(() => {\n        this._forOf = forOf;\n        this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n          const newLength = data.length;\n          if (newLength !== this._dataLength) {\n            this._dataLength = newLength;\n            this._scrollStrategy.onDataLengthChanged();\n          }\n          this._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n      this._forOf = null;\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n      return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n      return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n        this._calculateSpacerSize();\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n      if (!rangesEqual(this._renderedRange, range)) {\n        if (this.appendOnly) {\n          range = {\n            start: 0,\n            end: Math.max(this._renderedRange.end, range.end)\n          };\n        }\n        this._renderedRangeSubject.next(this._renderedRange = range);\n        this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n      // In appendOnly, we always start from the top\n      offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      const isHorizontal = this.orientation == 'horizontal';\n      const axis = isHorizontal ? 'X' : 'Y';\n      const axisDirection = isHorizontal && isRtl ? -1 : 1;\n      let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n      this._renderedContentOffset = offset;\n      if (to === 'to-end') {\n        transform += ` translate${axis}(-100%)`;\n        // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n        this._markChangeDetectionNeeded(() => {\n          if (this._renderedContentOffsetNeedsRewrite) {\n            this._renderedContentOffset -= this.measureRenderedContentSize();\n            this._renderedContentOffsetNeedsRewrite = false;\n            this.setRenderedContentOffset(this._renderedContentOffset);\n          } else {\n            this._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n      const options = {\n        behavior\n      };\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n      this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n      // This is to break the call cycle\n      let measureScrollOffset;\n      if (this.scrollable == this) {\n        measureScrollOffset = _from => super.measureScrollOffset(_from);\n      } else {\n        measureScrollOffset = _from => this.scrollable.measureScrollOffset(_from);\n      }\n      return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) - this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n      let fromRect;\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const isRtl = this.dir?.value == 'rtl';\n      if (from == 'start') {\n        fromRect = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        fromRect = isRtl ? LEFT : RIGHT;\n      } else if (from) {\n        fromRect = from;\n      } else {\n        fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n      }\n      const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n      const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n      return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n      const contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n      this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      }\n      // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }));\n      }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n      if (this._isDestroyed) {\n        return;\n      }\n      this.ngZone.run(() => {\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this._changeDetectorRef.markForCheck();\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        afterNextRender(() => {\n          this._isChangeDetectionPending = false;\n          const runAfterChangeDetection = this._runAfterChangeDetection;\n          this._runAfterChangeDetection = [];\n          for (const fn of runAfterChangeDetection) {\n            fn();\n          }\n        }, {\n          injector: this._injector\n        });\n      });\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n      this._totalContentWidth = this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n        return new (t || CdkVirtualScrollViewport)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(ViewportRuler), i0.ɵɵdirectiveInject(VIRTUAL_SCROLLABLE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkVirtualScrollViewport,\n        selectors: [[\"cdk-virtual-scroll-viewport\"]],\n        viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n          }\n        },\n        hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n        hostVars: 4,\n        hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n          }\n        },\n        inputs: {\n          orientation: \"orientation\",\n          appendOnly: [2, \"appendOnly\", \"appendOnly\", booleanAttribute]\n        },\n        outputs: {\n          scrolledIndexChange: \"scrolledIndexChange\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkScrollable,\n          useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n          deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 4,\n        vars: 4,\n        consts: [[\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-content-wrapper\"], [1, \"cdk-virtual-scroll-spacer\"]],\n        template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 1, 0);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"div\", 2);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n          }\n        },\n        styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return CdkVirtualScrollViewport;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n  const el = node;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nlet CdkVirtualForOf = /*#__PURE__*/(() => {\n  class CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n      return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n      this._cdkVirtualForOf = value;\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n      return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n      return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor( /** The view container to add items to. */\n    _viewContainerRef, /** The template to use when stamping out new items. */\n    _template, /** The set of available differs. */\n    _differs, /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewRepeater = _viewRepeater;\n      this._viewport = _viewport;\n      /** Emits when the rendered view of the data changes. */\n      this.viewChange = new Subject();\n      /** Subject that emits when a new DataSource instance is given. */\n      this._dataSourceChanges = new Subject();\n      /** Emits whenever the data in the current DataSource changes. */\n      this.dataStream = this._dataSourceChanges.pipe(\n      // Start off with null `DataSource`.\n      startWith(null),\n      // Bundle up the previous and current data sources so we can work with both.\n      pairwise(),\n      // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n      // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /** The differ used to calculate changes to the data. */\n      this._differ = null;\n      /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(data => {\n        this._data = data;\n        this._onRenderedDataChange();\n      });\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n        this._renderedRange = range;\n        if (this.viewChange.observers.length) {\n          ngZone.run(() => this.viewChange.next(this._renderedRange));\n        }\n        this._onRenderedDataChange();\n      });\n      this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Error: attempted to measure an item that isn't rendered.`);\n      }\n      // The index into the list of rendered views for the first item in the range.\n      const renderedStartIndex = range.start - this._renderedRange.start;\n      // The length of the range we're measuring.\n      const rangeLen = range.end - range.start;\n      // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n      let firstNode;\n      let lastNode;\n      // Find the first node by starting from the beginning and going forwards.\n      for (let i = 0; i < rangeLen; i++) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      }\n      // Find the last node by starting from the end and going backwards.\n      for (let i = rangeLen - 1; i > -1; i--) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n        if (view && view.rootNodes.length) {\n          lastNode = view.rootNodes[view.rootNodes.length - 1];\n          break;\n        }\n      }\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        const changes = this._differ.diff(this._renderedItems);\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n        this._needsUpdate = false;\n      }\n    }\n    ngOnDestroy() {\n      this._viewport.detach();\n      this._dataSourceChanges.next(undefined);\n      this._dataSourceChanges.complete();\n      this.viewChange.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n          return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n        this._updateComputedContextProperties(view.context);\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n      // Update $implicit for any items that had an identity change.\n      changes.forEachIdentityChange(record => {\n        const view = this._viewContainerRef.get(record.currentIndex);\n        view.context.$implicit = record.item;\n      });\n      // Update the context variables on all items.\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index\n      };\n    }\n    static {\n      this.ɵfac = function CdkVirtualForOf_Factory(t) {\n        return new (t || CdkVirtualForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualForOf,\n        selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n        inputs: {\n          cdkVirtualForOf: \"cdkVirtualForOf\",\n          cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n          cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n          cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _RecycleViewRepeaterStrategy\n        }])]\n      });\n    }\n  }\n  return CdkVirtualForOf;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nlet CdkVirtualScrollableElement = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from] - this.measureScrollOffset(from);\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollableElement_Factory(t) {\n        return new (t || CdkVirtualScrollableElement)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollableElement,\n        selectors: [[\"\", \"cdkVirtualScrollingElement\", \"\"]],\n        hostAttrs: [1, \"cdk-virtual-scrollable\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLLABLE,\n          useExisting: CdkVirtualScrollableElement\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollableElement;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nlet CdkVirtualScrollableWindow = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n      super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollableWindow_Factory(t) {\n        return new (t || CdkVirtualScrollableWindow)(i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollableWindow,\n        selectors: [[\"cdk-virtual-scroll-viewport\", \"scrollWindow\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLLABLE,\n          useExisting: CdkVirtualScrollableWindow\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollableWindow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CdkScrollableModule = /*#__PURE__*/(() => {\n  class CdkScrollableModule {\n    static {\n      this.ɵfac = function CdkScrollableModule_Factory(t) {\n        return new (t || CdkScrollableModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: CdkScrollableModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return CdkScrollableModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-primary-export\n */\nlet ScrollingModule = /*#__PURE__*/(() => {\n  class ScrollingModule {\n    static {\n      this.ɵfac = function ScrollingModule_Factory(t) {\n        return new (t || ScrollingModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: ScrollingModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]\n      });\n    }\n  }\n  return ScrollingModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, isSignal, effect, afterNextRender, Injector, booleanAttribute, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, PAGE_DOWN, PAGE_UP, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  if (ids.some(existingId => existingId.trim() === id)) {\n    return;\n  }\n  ids.push(id);\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  const filteredIds = ids.filter(val => val !== id);\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  const attrValue = el.getAttribute(attr);\n  return attrValue?.match(/\\S+/g) ?? [];\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nlet AriaDescriber = /*#__PURE__*/(() => {\n  class AriaDescriber {\n    constructor(_document,\n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n      this._platform = _platform;\n      /** Map of all registered message elements that have been placed into the document. */\n      this._messageRegistry = new Map();\n      /** Container for all registered messages. */\n      this._messagesContainer = null;\n      /** Unique ID for the service. */\n      this._id = `${nextId++}`;\n      this._document = _document;\n      this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n      const key = getKey(message, role);\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        setMessageId(message, this._id);\n        this._messageRegistry.set(key, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!this._messageRegistry.has(key)) {\n        this._createMessageElement(message, role);\n      }\n      if (!this._isElementDescribedByMessage(hostElement, key)) {\n        this._addMessageReference(hostElement, key);\n      }\n    }\n    removeDescription(hostElement, message, role) {\n      if (!message || !this._isElementNode(hostElement)) {\n        return;\n      }\n      const key = getKey(message, role);\n      if (this._isElementDescribedByMessage(hostElement, key)) {\n        this._removeMessageReference(hostElement, key);\n      }\n      // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n      if (typeof message === 'string') {\n        const registeredMessage = this._messageRegistry.get(key);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(key);\n        }\n      }\n      if (this._messagesContainer?.childNodes.length === 0) {\n        this._messagesContainer.remove();\n        this._messagesContainer = null;\n      }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n      const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n      for (let i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n      this._messagesContainer?.remove();\n      this._messagesContainer = null;\n      this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n      const messageElement = this._document.createElement('div');\n      setMessageId(messageElement, this._id);\n      messageElement.textContent = message;\n      if (role) {\n        messageElement.setAttribute('role', role);\n      }\n      this._createMessagesContainer();\n      this._messagesContainer.appendChild(messageElement);\n      this._messageRegistry.set(getKey(message, role), {\n        messageElement,\n        referenceCount: 0\n      });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n      this._messageRegistry.get(key)?.messageElement?.remove();\n      this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n      if (this._messagesContainer) {\n        return;\n      }\n      const containerClassName = 'cdk-describedby-message-container';\n      const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n      for (let i = 0; i < serverContainers.length; i++) {\n        // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n        serverContainers[i].remove();\n      }\n      const messagesContainer = this._document.createElement('div');\n      // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n      messagesContainer.style.visibility = 'hidden';\n      // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n      messagesContainer.classList.add(containerClassName);\n      messagesContainer.classList.add('cdk-visually-hidden');\n      // @breaking-change 14.0.0 Remove null check for `_platform`.\n      if (this._platform && !this._platform.isBrowser) {\n        messagesContainer.setAttribute('platform', 'server');\n      }\n      this._document.body.appendChild(messagesContainer);\n      this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n      const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n      const registeredMessage = this._messageRegistry.get(key);\n      // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n      const registeredMessage = this._messageRegistry.get(key);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n      const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      const registeredMessage = this._messageRegistry.get(key);\n      const messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n      const trimmedMessage = message == null ? '' : `${message}`.trim();\n      const ariaLabel = element.getAttribute('aria-label');\n      // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n    static {\n      this.ɵfac = function AriaDescriber_Factory(t) {\n        return new (t || AriaDescriber)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Platform));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: AriaDescriber,\n        factory: AriaDescriber.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AriaDescriber;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n  constructor(_items, injector) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    this._pageUpAndDown = {\n      enabled: false,\n      delta: 10\n    };\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    this._skipPredicateFn = item => item.disabled;\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe(newItems => this._itemsChanged(newItems.toArray()));\n    } else if (isSignal(_items)) {\n      if (!injector && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('ListKeyManager constructed with a signal must receive an injector');\n      }\n      this._effectRef = effect(() => this._itemsChanged(_items()), {\n        injector\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const items = this._getItemsArray();\n      if (items.length > 0 && items.some(item => typeof item.getLabel !== 'function')) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n    }\n    this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead() {\n    this._pressedLetters = [];\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled = true, delta = 10) {\n    this._pageUpAndDown = {\n      enabled,\n      delta\n    };\n    return this;\n  }\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._getItemsArray().length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._effectRef?.destroy();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n  _getItemsArray() {\n    if (isSignal(this._items)) {\n      return this._items();\n    }\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n  /** Callback for when the items have changed. */\n  _itemsChanged(newItems) {\n    if (this._activeItem) {\n      const newIndex = newItems.indexOf(this._activeItem);\n      if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n        this._activeItemIndex = newIndex;\n      }\n    }\n  }\n}\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\nlet InteractivityChecker = /*#__PURE__*/(() => {\n  class InteractivityChecker {\n    constructor(_platform) {\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n      const frameElement = getFrameElement(getWindow(element));\n      if (frameElement) {\n        // Frame elements inherit their tabindex onto all child elements.\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        }\n        // Browsers disable tabbing to an element inside of an invisible frame.\n        if (!this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n      let nodeName = element.nodeName.toLowerCase();\n      let tabIndexValue = getTabIndexValue(element);\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n      if (nodeName === 'iframe' || nodeName === 'object') {\n        // The frame or object's content may be tabbable depending on the content, but it's\n        // not possibly to reliably detect the content of the frames. We always consider such\n        // elements as non-tabbable.\n        return false;\n      }\n      // In iOS, the browser only considers some specific elements as tabbable.\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n      if (nodeName === 'audio') {\n        // Audio elements without controls enabled are never tabbable, regardless\n        // of the tabindex attribute explicitly being set.\n        if (!element.hasAttribute('controls')) {\n          return false;\n        }\n        // Audio elements with controls are by default tabbable unless the\n        // tabindex attribute is set to `-1` explicitly.\n        return tabIndexValue !== -1;\n      }\n      if (nodeName === 'video') {\n        // For all video elements, if the tabindex attribute is set to `-1`, the video\n        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n        // tabindex attribute is the source of truth here.\n        if (tabIndexValue === -1) {\n          return false;\n        }\n        // If the tabindex is explicitly set, and not `-1` (as per check before), the\n        // video element is always tabbable (regardless of whether it has controls or not).\n        if (tabIndexValue !== null) {\n          return true;\n        }\n        // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n        // has controls enabled. Firefox is special as videos are always tabbable regardless\n        // of whether there are controls or not.\n        return this._platform.FIREFOX || element.hasAttribute('controls');\n      }\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));\n    }\n    static {\n      this.ɵfac = function InteractivityChecker_Factory(t) {\n        return new (t || InteractivityChecker)(i0.ɵɵinject(i1.Platform));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: InteractivityChecker,\n        factory: InteractivityChecker.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return InteractivityChecker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n */\nclass FocusTrap {\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false, /** @breaking-change 20.0.0 param to become required */\n  _injector) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._injector = _injector;\n    this._hasAttached = false;\n    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n        }\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n      redirectToElement.focus(options);\n      return true;\n    }\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in reverse DOM order.\n    const children = root.children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Creates an anchor element. */\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n  _executeOnStable(fn) {\n    // TODO: remove this conditional when injector is required in the constructor.\n    if (this._injector) {\n      afterNextRender(fn, {\n        injector: this._injector\n      });\n    } else {\n      setTimeout(fn);\n    }\n  }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nlet FocusTrapFactory = /*#__PURE__*/(() => {\n  class FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._injector = inject(Injector);\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements, this._injector);\n    }\n    static {\n      this.ɵfac = function FocusTrapFactory_Factory(t) {\n        return new (t || FocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusTrapFactory,\n        factory: FocusTrapFactory.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusTrapFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive for trapping focus within a region. */\nlet CdkTrapFocus = /*#__PURE__*/(() => {\n  class CdkTrapFocus {\n    /** Whether the focus trap is active. */\n    get enabled() {\n      return this.focusTrap?.enabled || false;\n    }\n    set enabled(value) {\n      if (this.focusTrap) {\n        this.focusTrap.enabled = value;\n      }\n    }\n    constructor(_elementRef, _focusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n      this._previouslyFocusedElement = null;\n      const platform = inject(Platform);\n      if (platform.isBrowser) {\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n      }\n    }\n    ngOnDestroy() {\n      this.focusTrap?.destroy();\n      // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n        this._previouslyFocusedElement = null;\n      }\n    }\n    ngAfterContentInit() {\n      this.focusTrap?.attachAnchors();\n      if (this.autoCapture) {\n        this._captureFocus();\n      }\n    }\n    ngDoCheck() {\n      if (this.focusTrap && !this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n    ngOnChanges(changes) {\n      const autoCaptureChange = changes['autoCapture'];\n      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap?.hasAttached()) {\n        this._captureFocus();\n      }\n    }\n    _captureFocus() {\n      this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n      this.focusTrap?.focusInitialElementWhenReady();\n    }\n    static {\n      this.ɵfac = function CdkTrapFocus_Factory(t) {\n        return new (t || CdkTrapFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkTrapFocus,\n        selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n        inputs: {\n          enabled: [2, \"cdkTrapFocus\", \"enabled\", booleanAttribute],\n          autoCapture: [2, \"cdkTrapFocusAutoCapture\", \"autoCapture\", booleanAttribute]\n        },\n        exportAs: [\"cdkTrapFocus\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkTrapFocus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config, injector) {\n    super(_element, _checker, _ngZone, _document, config.defer, injector);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n    this._focusTrapManager.register(this);\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n    this._listener = e => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element;\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = /*#__PURE__*/new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nlet FocusTrapManager = /*#__PURE__*/(() => {\n  class FocusTrapManager {\n    constructor() {\n      // A stack of the FocusTraps on the page. Only the FocusTrap at the\n      // top of the stack is active.\n      this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n      let stack = this._focusTrapStack;\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n      stack.push(focusTrap);\n      focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n      focusTrap._disable();\n      const stack = this._focusTrapStack;\n      const i = stack.indexOf(focusTrap);\n      if (i !== -1) {\n        stack.splice(i, 1);\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n    static {\n      this.ɵfac = function FocusTrapManager_Factory(t) {\n        return new (t || FocusTrapManager)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusTrapManager,\n        factory: FocusTrapManager.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusTrapManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Factory that allows easy instantiation of configurable focus traps. */\nlet ConfigurableFocusTrapFactory = /*#__PURE__*/(() => {\n  class ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._focusTrapManager = _focusTrapManager;\n      this._injector = inject(Injector);\n      this._document = _document;\n      // TODO split up the strategies into different modules, similar to DateAdapter.\n      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = {\n      defer: false\n    }) {\n      let configObject;\n      if (typeof config === 'boolean') {\n        configObject = {\n          defer: config\n        };\n      } else {\n        configObject = config;\n      }\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject, this._injector);\n    }\n    static {\n      this.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n        return new (t || ConfigurableFocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ConfigurableFocusTrapFactory,\n        factory: ConfigurableFocusTrapFactory.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ConfigurableFocusTrapFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nlet InputModalityDetector = /*#__PURE__*/(() => {\n  class InputModalityDetector {\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n      return this._modality.value;\n    }\n    constructor(_platform, ngZone, document, options) {\n      this._platform = _platform;\n      /**\n       * The most recently detected input modality event target. Is null if no input modality has been\n       * detected or if the associated event target is null for some unknown reason.\n       */\n      this._mostRecentTarget = null;\n      /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n      this._modality = new BehaviorSubject(null);\n      /**\n       * The timestamp of the last touch input modality. Used to determine whether mousedown events\n       * should be attributed to mouse or touch.\n       */\n      this._lastTouchMs = 0;\n      /**\n       * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n       * bound.\n       */\n      this._onKeydown = event => {\n        // If this is one of the keys we should ignore, then ignore it and don't update the input\n        // modality to keyboard.\n        if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n          return;\n        }\n        this._modality.next('keyboard');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n      this._onMousedown = event => {\n        // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n        // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n        // after the previous touch event.\n        if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n          return;\n        }\n        // Fake mousedown events are fired by some screen readers when controls are activated by the\n        // screen reader. Attribute them to keyboard input modality.\n        this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n      this._onTouchstart = event => {\n        // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n        // events are fired. Again, attribute to keyboard input modality.\n        if (isFakeTouchstartFromScreenReader(event)) {\n          this._modality.next('keyboard');\n          return;\n        }\n        // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n        // triggered via mouse vs touch.\n        this._lastTouchMs = Date.now();\n        this._modality.next('touch');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      this._options = {\n        ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n        ...options\n      };\n      // Skip the first emission as it's null.\n      this.modalityDetected = this._modality.pipe(skip(1));\n      this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n      // If we're not in a browser, this service should do nothing, as there's no relevant input\n      // modality to detect.\n      if (_platform.isBrowser) {\n        ngZone.runOutsideAngular(() => {\n          document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n          document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n          document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        });\n      }\n    }\n    ngOnDestroy() {\n      this._modality.complete();\n      if (this._platform.isBrowser) {\n        document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      }\n    }\n    static {\n      this.ɵfac = function InputModalityDetector_Factory(t) {\n        return new (t || InputModalityDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: InputModalityDetector,\n        factory: InputModalityDetector.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return InputModalityDetector;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\nlet uniqueIds = 0;\nlet LiveAnnouncer = /*#__PURE__*/(() => {\n  class LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n      const defaultOptions = this._defaultOptions;\n      let politeness;\n      let duration;\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        [politeness, duration] = args;\n      }\n      this.clear();\n      clearTimeout(this._previousTimeout);\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      }\n      // TODO: ensure changing the politeness works on all environments we support.\n      this._liveElement.setAttribute('aria-live', politeness);\n      if (this._liveElement.id) {\n        this._exposeAnnouncerToModals(this._liveElement.id);\n      }\n      // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n      return this._ngZone.runOutsideAngular(() => {\n        if (!this._currentPromise) {\n          this._currentPromise = new Promise(resolve => this._currentResolve = resolve);\n        }\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n          // For some reason in tests this can be undefined\n          // Probably related to ZoneJS and every other thing that patches browser APIs in tests\n          this._currentResolve?.();\n          this._currentPromise = this._currentResolve = undefined;\n        }, 100);\n        return this._currentPromise;\n      });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n    ngOnDestroy() {\n      clearTimeout(this._previousTimeout);\n      this._liveElement?.remove();\n      this._liveElement = null;\n      this._currentResolve?.();\n      this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n      const elementClass = 'cdk-live-announcer-element';\n      const previousElements = this._document.getElementsByClassName(elementClass);\n      const liveEl = this._document.createElement('div');\n      // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n      for (let i = 0; i < previousElements.length; i++) {\n        previousElements[i].remove();\n      }\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n      liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n      this._document.body.appendChild(liveEl);\n      return liveEl;\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live announcer element if there is an\n     * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live announcer element.\n     */\n    _exposeAnnouncerToModals(id) {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `SnakBarContainer` and other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      for (let i = 0; i < modals.length; i++) {\n        const modal = modals[i];\n        const ariaOwns = modal.getAttribute('aria-owns');\n        if (!ariaOwns) {\n          modal.setAttribute('aria-owns', id);\n        } else if (ariaOwns.indexOf(id) === -1) {\n          modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function LiveAnnouncer_Factory(t) {\n        return new (t || LiveAnnouncer)(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: LiveAnnouncer,\n        factory: LiveAnnouncer.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LiveAnnouncer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nlet CdkAriaLive = /*#__PURE__*/(() => {\n  class CdkAriaLive {\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n      return this._politeness;\n    }\n    set politeness(value) {\n      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(() => {\n          return this._contentObserver.observe(this._elementRef).subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const elementText = this._elementRef.nativeElement.textContent;\n            // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n              this._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'polite';\n    }\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n    static {\n      this.ɵfac = function CdkAriaLive_Factory(t) {\n        return new (t || CdkAriaLive)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LiveAnnouncer), i0.ɵɵdirectiveInject(i1$1.ContentObserver), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkAriaLive,\n        selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n        inputs: {\n          politeness: [0, \"cdkAriaLive\", \"politeness\"],\n          duration: [0, \"cdkAriaLiveDuration\", \"duration\"]\n        },\n        exportAs: [\"cdkAriaLive\"],\n        standalone: true\n      });\n    }\n  }\n  return CdkAriaLive;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Detection mode used for attributing the origin of a focus event. */\nvar FocusMonitorDetectionMode = /*#__PURE__*/function (FocusMonitorDetectionMode) {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"EVENTUAL\"] = 1] = \"EVENTUAL\";\n  return FocusMonitorDetectionMode;\n}(FocusMonitorDetectionMode || {});\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nlet FocusMonitor = /*#__PURE__*/(() => {\n  class FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, /** @breaking-change 11.0.0 make document required */\n    document, options) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._inputModalityDetector = _inputModalityDetector;\n      /** The focus origin that the next focus event is a result of. */\n      this._origin = null;\n      /** Whether the window has just been focused. */\n      this._windowFocused = false;\n      /**\n       * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n       * focus events to touch interactions requires special logic.\n       */\n      this._originFromTouchInteraction = false;\n      /** Map of elements being monitored to their info. */\n      this._elementInfo = new Map();\n      /** The number of elements currently being monitored. */\n      this._monitoredElementCount = 0;\n      /**\n       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n       * as well as the number of monitored elements that they contain. We have to treat focus/blur\n       * handlers differently from the rest of the events, because the browser won't emit events\n       * to the document when focus moves inside of a shadow root.\n       */\n      this._rootNodeFocusListenerCount = new Map();\n      /**\n       * Event listener for `focus` events on the window.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n      this._windowFocusListener = () => {\n        // Make a note of when the window regains focus, so we can\n        // restore the origin info for the focused element.\n        this._windowFocused = true;\n        this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);\n      };\n      /** Subject for stopping our InputModalityDetector subscription. */\n      this._stopInputModalityDetector = new Subject();\n      /**\n       * Event listener for `focus` and 'blur' events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n      this._rootNodeFocusAndBlurListener = event => {\n        const target = _getEventTarget(event);\n        // We need to walk up the ancestor chain in order to support `checkChildren`.\n        for (let element = target; element; element = element.parentElement) {\n          if (event.type === 'focus') {\n            this._onFocus(event, element);\n          } else {\n            this._onBlur(event, element);\n          }\n        }\n      };\n      this._document = document;\n      this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n    }\n    monitor(element, checkChildren = false) {\n      const nativeElement = coerceElement(element);\n      // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n        // Note: we don't want the observable to emit at all so we don't pass any parameters.\n        return of();\n      }\n      // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n      const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n      const cachedInfo = this._elementInfo.get(nativeElement);\n      // Check if we're already monitoring this element.\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n        return cachedInfo.subject;\n      }\n      // Create monitored element info.\n      const info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode\n      };\n      this._elementInfo.set(nativeElement, info);\n      this._registerGlobalListeners(info);\n      return info.subject;\n    }\n    stopMonitoring(element) {\n      const nativeElement = coerceElement(element);\n      const elementInfo = this._elementInfo.get(nativeElement);\n      if (elementInfo) {\n        elementInfo.subject.complete();\n        this._setClasses(nativeElement);\n        this._elementInfo.delete(nativeElement);\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n    focusVia(element, origin, options) {\n      const nativeElement = coerceElement(element);\n      const focusedElement = this._getDocument().activeElement;\n      // If the element is focused already, calling `focus` again won't trigger the event listener\n      // which means that the focus classes won't be updated. If that's the case, update the classes\n      // directly without waiting for an event.\n      if (nativeElement === focusedElement) {\n        this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n      } else {\n        this._setOrigin(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n          nativeElement.focus(options);\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      const doc = this._getDocument();\n      return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n      if (this._origin) {\n        // If the origin was realized via a touch interaction, we need to perform additional checks\n        // to determine whether the focus origin should be attributed to touch or program.\n        if (this._originFromTouchInteraction) {\n          return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n        } else {\n          return this._origin;\n        }\n      }\n      // If the window has just regained focus, we can restore the most recent origin from before the\n      // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n      // focus. This typically means one of two things happened:\n      //\n      // 1) The element was programmatically focused, or\n      // 2) The element was focused via screen reader navigation (which generally doesn't fire\n      //    events).\n      //\n      // Because we can't distinguish between these two cases, we default to setting `program`.\n      if (this._windowFocused && this._lastFocusOrigin) {\n        return this._lastFocusOrigin;\n      }\n      // If the interaction is coming from an input label, we consider it a mouse interactions.\n      // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n      // our detection, because all our assumptions are for `mousedown`. We need to handle this\n      // special case, because it's very common for checkboxes and radio buttons.\n      if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n        return 'mouse';\n      }\n      return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n      // Please note that this check is not perfect. Consider the following edge case:\n      //\n      // <div #parent tabindex=\"0\">\n      //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n      // #child, #parent is programmatically focused. This code will attribute the focus to touch\n      // instead of program. This is a relatively minor edge-case that can be worked around by using\n      // focusVia(parent, 'program') to focus #parent.\n      return this._detectionMode === FocusMonitorDetectionMode.EVENTUAL || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n      element.classList.toggle('cdk-focused', !!origin);\n      element.classList.toggle('cdk-touch-focused', origin === 'touch');\n      element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n      element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n      element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n      this._ngZone.runOutsideAngular(() => {\n        this._origin = origin;\n        this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n        // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n        // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n        // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n        // a touch event because when a touch event is fired, the associated focus event isn't yet in\n        // the event queue. Before doing so, clear any pending timeouts.\n        if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n          clearTimeout(this._originTimeoutId);\n          const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n          this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n        }\n      });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n      const elementInfo = this._elementInfo.get(element);\n      const focusEventTarget = _getEventTarget(event);\n      if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n        return;\n      }\n      this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n      const elementInfo = this._elementInfo.get(element);\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n      this._setClasses(element);\n      this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n      if (info.subject.observers.length) {\n        this._ngZone.run(() => info.subject.next(origin));\n      }\n    }\n    _registerGlobalListeners(elementInfo) {\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      const rootNode = elementInfo.rootNode;\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(() => {\n          rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n      // Register global listeners when first element is monitored.\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(() => {\n          const window = this._getWindow();\n          window.addEventListener('focus', this._windowFocusListener);\n        });\n        // The InputModalityDetector is also just a collection of global listeners.\n        this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n      }\n    }\n    _removeGlobalListeners(elementInfo) {\n      const rootNode = elementInfo.rootNode;\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      }\n      // Unregister global listeners when last element is unmonitored.\n      if (! --this._monitoredElementCount) {\n        const window = this._getWindow();\n        window.removeEventListener('focus', this._windowFocusListener);\n        // Equivalently, stop our InputModalityDetector subscription.\n        this._stopInputModalityDetector.next();\n        // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n      this._setClasses(element, origin);\n      this._emitOrigin(elementInfo, origin);\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n      const results = [];\n      this._elementInfo.forEach((info, currentElement) => {\n        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n          results.push([currentElement, info]);\n        }\n      });\n      return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n      const {\n        _mostRecentTarget: mostRecentTarget,\n        mostRecentModality\n      } = this._inputModalityDetector;\n      // If the last interaction used the mouse on an element contained by one of the labels\n      // of an `input`/`textarea` that is currently focused, it is very likely that the\n      // user redirected focus using the label.\n      if (mostRecentModality !== 'mouse' || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA' || focusEventTarget.disabled) {\n        return false;\n      }\n      const labels = focusEventTarget.labels;\n      if (labels) {\n        for (let i = 0; i < labels.length; i++) {\n          if (labels[i].contains(mostRecentTarget)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    static {\n      this.ɵfac = function FocusMonitor_Factory(t) {\n        return new (t || FocusMonitor)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusMonitor,\n        factory: FocusMonitor.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusMonitor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nlet CdkMonitorFocus = /*#__PURE__*/(() => {\n  class CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._focusOrigin = null;\n      this.cdkFocusChange = new EventEmitter();\n    }\n    get focusOrigin() {\n      return this._focusOrigin;\n    }\n    ngAfterViewInit() {\n      const element = this._elementRef.nativeElement;\n      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      if (this._monitorSubscription) {\n        this._monitorSubscription.unsubscribe();\n      }\n    }\n    static {\n      this.ɵfac = function CdkMonitorFocus_Factory(t) {\n        return new (t || CdkMonitorFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusMonitor));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkMonitorFocus,\n        selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n        outputs: {\n          cdkFocusChange: \"cdkFocusChange\"\n        },\n        exportAs: [\"cdkMonitorFocus\"],\n        standalone: true\n      });\n    }\n  }\n  return CdkMonitorFocus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Set of possible high-contrast mode backgrounds. */\nvar HighContrastMode = /*#__PURE__*/function (HighContrastMode) {\n  HighContrastMode[HighContrastMode[\"NONE\"] = 0] = \"NONE\";\n  HighContrastMode[HighContrastMode[\"BLACK_ON_WHITE\"] = 1] = \"BLACK_ON_WHITE\";\n  HighContrastMode[HighContrastMode[\"WHITE_ON_BLACK\"] = 2] = \"WHITE_ON_BLACK\";\n  return HighContrastMode;\n}(HighContrastMode || {});\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nlet HighContrastModeDetector = /*#__PURE__*/(() => {\n  class HighContrastModeDetector {\n    constructor(_platform, document) {\n      this._platform = _platform;\n      this._document = document;\n      this._breakpointSubscription = inject(BreakpointObserver).observe('(forced-colors: active)').subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return HighContrastMode.NONE;\n      }\n      // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n      const testElement = this._document.createElement('div');\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n      this._document.body.appendChild(testElement);\n      // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n      const documentWindow = this._document.defaultView || window;\n      const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n      testElement.remove();\n      switch (computedColor) {\n        // Pre Windows 11 dark theme.\n        case 'rgb(0,0,0)':\n        // Windows 11 dark themes.\n        case 'rgb(45,50,54)':\n        case 'rgb(32,32,32)':\n          return HighContrastMode.WHITE_ON_BLACK;\n        // Pre Windows 11 light theme.\n        case 'rgb(255,255,255)':\n        // Windows 11 light theme.\n        case 'rgb(255,250,239)':\n          return HighContrastMode.BLACK_ON_WHITE;\n      }\n      return HighContrastMode.NONE;\n    }\n    ngOnDestroy() {\n      this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n      if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n        const bodyClasses = this._document.body.classList;\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        this._hasCheckedHighContrastMode = true;\n        const mode = this.getHighContrastMode();\n        if (mode === HighContrastMode.BLACK_ON_WHITE) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function HighContrastModeDetector_Factory(t) {\n        return new (t || HighContrastModeDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: HighContrastModeDetector,\n        factory: HighContrastModeDetector.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return HighContrastModeDetector;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet A11yModule = /*#__PURE__*/(() => {\n  class A11yModule {\n    constructor(highContrastModeDetector) {\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n    static {\n      this.ɵfac = function A11yModule_Factory(t) {\n        return new (t || A11yModule)(i0.ɵɵinject(HighContrastModeDetector));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: A11yModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [ObserversModule]\n      });\n    }\n  }\n  return A11yModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusMonitorDetectionMode, FocusTrap, FocusTrapFactory, HighContrastMode, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, addAriaReferencedId, getAriaReferenceIds, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, removeAriaReferencedId };\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Injector, afterNextRender, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n  const rect = element.getBoundingClientRect();\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `DOMRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    x: rect.x,\n    y: rect.y\n  };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n  domRect.top += top;\n  domRect.bottom = domRect.top + domRect.height;\n  domRect.left += left;\n  domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n  constructor(_document) {\n    this._document = _document;\n    /** Cached positions of the scrollable parent elements. */\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n    const cachedPosition = this.positions.get(target);\n    if (!cachedPosition) {\n      return null;\n    }\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n    if (target === this._document) {\n      const viewportScrollPosition = this.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustDomRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n  /**\n   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n   * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n   * if the element is offset by something like the `BlockScrollStrategy`.\n   */\n  getViewportScrollPosition() {\n    return {\n      top: window.scrollY,\n      left: window.scrollX\n    };\n  }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = /*#__PURE__*/new Set([\n// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\nclass PreviewRef {\n  constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n    this._document = _document;\n    this._rootElement = _rootElement;\n    this._direction = _direction;\n    this._initialDomRect = _initialDomRect;\n    this._previewTemplate = _previewTemplate;\n    this._previewClass = _previewClass;\n    this._pickupPositionOnPage = _pickupPositionOnPage;\n    this._initialTransform = _initialTransform;\n    this._zIndex = _zIndex;\n  }\n  attach(parent) {\n    this._preview = this._createPreview();\n    parent.appendChild(this._preview);\n    // The null check is necessary for browsers that don't support the popover API.\n    // Note that we use a string access for compatibility with Closure.\n    if ('showPopover' in this._preview) {\n      this._preview['showPopover']();\n    }\n  }\n  destroy() {\n    this._preview.remove();\n    this._previewEmbeddedView?.destroy();\n    this._preview = this._previewEmbeddedView = null;\n  }\n  setTransform(value) {\n    this._preview.style.transform = value;\n  }\n  getBoundingClientRect() {\n    return this._preview.getBoundingClientRect();\n  }\n  addClass(className) {\n    this._preview.classList.add(className);\n  }\n  getTransitionDuration() {\n    return getTransformTransitionDurationInMs(this._preview);\n  }\n  addEventListener(name, handler) {\n    this._preview.addEventListener(name, handler);\n  }\n  removeEventListener(name, handler) {\n    this._preview.removeEventListener(name, handler);\n  }\n  _createPreview() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this._previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewEmbeddedView = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      preview = deepCloneNode(this._rootElement);\n      matchElementSize(preview, this._initialDomRect);\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': this._zIndex + ''\n    }, importantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('popover', 'manual');\n    preview.setAttribute('dir', this._direction);\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n    return preview;\n  }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = /*#__PURE__*/new Set([\n// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value) {\n    if (value !== this._disabled) {\n      this._disabled = value;\n      this._toggleNativeDragInteractions();\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n    }\n  }\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    this._hasStartedDragging = signal(false);\n    /** Emits when the item is being moved. */\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n    this._pointerDown = event => {\n      this.beforeStarted.next();\n      // Delegate the event based on whether it started from a handle or the element itself.\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      if (!this._hasStartedDragging()) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n        // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n          const container = this._dropContainer;\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n            return;\n          }\n          // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            if (event.cancelable) {\n              event.preventDefault();\n            }\n            this._hasStartedDragging.set(true);\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n        return;\n      }\n      // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        // If there's a position constraint function, we want the element's top/left to be at the\n        // specific position on the page. Use the initial position as a reference if that's the case.\n        const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n      }\n      // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n    /** Handles a native `dragstart` event. */\n    this._nativeDragStart = event => {\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          event.preventDefault();\n        }\n      } else if (!this.disabled) {\n        // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n        // but some cases like dragging of links can slip through (see #24403).\n        event.preventDefault();\n      }\n    };\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document);\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n    this._toggleNativeDragInteractions();\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n    const disabledHandles = new Set();\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n      });\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n    return this;\n  }\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n    this._anchor?.remove();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeListeners();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n  isDragging() {\n    return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n    return this;\n  }\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n  _removeListeners() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n    this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n  }\n  /** Destroys the preview element and its ViewRef. */\n  _destroyPreview() {\n    this._preview?.destroy();\n    this._preview = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n  _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n    this._removeListeners();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n    if (!this._hasStartedDragging()) {\n      return;\n    }\n    this.released.next({\n      source: this,\n      event\n    });\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition,\n          event\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n    this._toggleNativeDragInteractions();\n    // Needs to happen before the root element is moved.\n    const shadowRoot = this._getShadowRoot();\n    const dropContainer = this._dropContainer;\n    if (shadowRoot) {\n      // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n      // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n      this._ngZone.runOutsideAngular(() => {\n        shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n      });\n    }\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n      const anchor = this._anchor = this._anchor || this._document.createComment(ngDevMode ? 'cdk-drag-anchor' : '');\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n      // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n      this._initialTransform = element.style.transform || '';\n      // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n      this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n      this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false, dragImportantProperties);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      this.started.next({\n        source: this,\n        event\n      }); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this,\n        event\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    }\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n    const target = _getEventTarget(event);\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event);\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    }\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      const rootStyles = rootElement.style;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n    this._hasMoved = false;\n    this._hasStartedDragging.set(this._hasMoved);\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeListeners();\n    this._initialDomRect = this._rootElement.getBoundingClientRect();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._initialDomRect = this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(pointerPosition);\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n        this._dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer;\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n        // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    }\n    // Dragging may have been interrupted as a result of the events above.\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n      if (this.constrainPosition) {\n        this._applyPreviewTransform(x, y);\n      } else {\n        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n      }\n    }\n  }\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n    // Apply the class that adds a transition to the preview.\n    this._preview.addClass('cdk-drag-animating');\n    // Move the preview to the placeholder position.\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = this._preview.getTransitionDuration();\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            this._preview?.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n    // Stop pointer events on the preview so the user can't\n    // interact with it while the preview is animating.\n    placeholder.style.pointerEvents = 'none';\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  _getPointerPositionInElement(elementRect, referenceElement, event) {\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event) ?\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n    // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n    // throwing an error. The value returned here will be incorrect, but since this only\n    // breaks inside a developer tool and the value is only used for secondary information,\n    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n    event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement) : point;\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y - (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x - (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n    }\n    if (this._boundaryRect) {\n      // If not using a custom constrain we need to account for the pickup position in the element\n      // otherwise we do not need to do this, as it has already been accounted for\n      const {\n        x: pickupX,\n        y: pickupY\n      } = !this.constrainPosition ? this._pickupPositionInElement : {\n        x: 0,\n        y: 0\n      };\n      const boundaryRect = this._boundaryRect;\n      const {\n        width: previewWidth,\n        height: previewHeight\n      } = this._getPreviewRect();\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewWidth - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n  }\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y);\n    const styles = this._rootElement.style;\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n    if (this._initialTransform == null) {\n      this._initialTransform = styles.transform && styles.transform != 'none' ? styles.transform : '';\n    }\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  _applyPreviewTransform(x, y) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.setTransform(combineTransforms(transform, initialTransform));\n  }\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n    // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n    if (scrollDifference) {\n      const target = _getEventTarget(event);\n      // DOMRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary DOMRect if the user has scrolled.\n      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {\n        adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n  _getViewportScrollPosition() {\n    return this._parentPositions.positions.get(this._document)?.scrollPosition || this._parentPositions.getViewportScrollPosition();\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n    if (previewContainer === 'global') {\n      const documentRef = this._document;\n      // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n    return coerceElement(previewContainer);\n  }\n  /** Lazily resolves and returns the dimensions of the preview. */\n  _getPreviewRect() {\n    // Cache the preview element rect if we haven't cached it already or if\n    // we cached it too early before the element dimensions were computed.\n    if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n      this._previewRect = this._preview ? this._preview.getBoundingClientRect() : this._initialDomRect;\n    }\n    return this._previewRect;\n  }\n  /** Gets a handle that is the target of an event. */\n  _getTargetHandle(event) {\n    return this._handles.find(handle => {\n      return event.target && (event.target === handle || handle.contains(event.target));\n    });\n  }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n  event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n  if (from === to) {\n    return;\n  }\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n  constructor(_dragDropRegistry) {\n    this._dragDropRegistry = _dragDropRegistry;\n    /** Cache of the dimensions of all the items inside the container. */\n    this._itemPositions = [];\n    /** Direction in which the list is oriented. */\n    this.orientation = 'vertical';\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n  }\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items) {\n    this.withItems(items);\n  }\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(item, pointerX, pointerY, pointerDelta) {\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n    if (newIndex === -1 && siblings.length > 0) {\n      return null;\n    }\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement();\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustDomRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustDomRect(sibling.clientRect, offset, 0);\n      }\n    });\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    return {\n      previousIndex: currentIndex,\n      currentIndex: newIndex\n    };\n  }\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item, pointerX, pointerY, index) {\n    const newIndex = index == null || index < 0 ?\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    this._getItemIndexFromPointerPosition(item, pointerX, pointerY) : index;\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex];\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n    // If we didn't find a new position reference, it means that either the item didn't start off\n    // in this container, or that the item requested to be inserted at the end of the list.\n    if (!newPositionReference && (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) && this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      newPositionReference = activeDraggables[0];\n    }\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this._element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n    // Note that usually `start` is called together with `enter` when an item goes into a new\n    // container. This will cache item positions, but we need to refresh them since the amount\n    // of items has changed.\n    this._cacheItemPositions();\n  }\n  /** Sets the items that are currently part of the list. */\n  withItems(items) {\n    this._activeDraggables = items.slice();\n    this._cacheItemPositions();\n  }\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate) {\n    this._sortPredicate = predicate;\n  }\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset() {\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables?.forEach(item => {\n      const rootElement = item.getRootElement();\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n    this._itemPositions = [];\n    this._activeDraggables = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n  }\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot() {\n    return this._activeDraggables;\n  }\n  /** Gets the index of a specific item. */\n  getItemIndex(item) {\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this.direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(topDifference, leftDifference) {\n    // Since we know the amount that the user has scrolled we can shift all of the\n    // client rectangles ourselves. This is cheaper than re-measuring everything and\n    // we can avoid inconsistent behavior where we might be measuring the element before\n    // its position has changed.\n    this._itemPositions.forEach(({\n      clientRect\n    }) => {\n      adjustDomRect(clientRect, topDifference, leftDifference);\n    });\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({\n      drag\n    }) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n  }\n  withElementContainer(container) {\n    this._element = container;\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n  _cacheItemPositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top;\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n    return itemOffset;\n  }\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n    return siblingOffset;\n  }\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this.orientation === 'horizontal';\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const index = this._itemPositions.findIndex(({\n      drag,\n      clientRect\n    }) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n      return isHorizontal ?\n      // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n  constructor(_document, _dragDropRegistry) {\n    this._document = _document;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    this._previousSwap = {\n      drag: null,\n      deltaX: 0,\n      deltaY: 0,\n      overlaps: false\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    this._relatedNodes = [];\n  }\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items) {\n    const childNodes = this._element.childNodes;\n    this._relatedNodes = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const node = childNodes[i];\n      this._relatedNodes.push([node, node.nextSibling]);\n    }\n    this.withItems(items);\n  }\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(item, pointerX, pointerY, pointerDelta) {\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const previousSwap = this._previousSwap;\n    if (newIndex === -1 || this._activeItems[newIndex] === item) {\n      return null;\n    }\n    const toSwapWith = this._activeItems[newIndex];\n    // Prevent too many swaps over the same item.\n    if (previousSwap.drag === toSwapWith && previousSwap.overlaps && previousSwap.deltaX === pointerDelta.x && previousSwap.deltaY === pointerDelta.y) {\n      return null;\n    }\n    const previousIndex = this.getItemIndex(item);\n    const current = item.getPlaceholderElement();\n    const overlapElement = toSwapWith.getRootElement();\n    if (newIndex > previousIndex) {\n      overlapElement.after(current);\n    } else {\n      overlapElement.before(current);\n    }\n    moveItemInArray(this._activeItems, previousIndex, newIndex);\n    const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n    // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n    // break this functionality, because the same object is passed for all `sort` calls.\n    previousSwap.deltaX = pointerDelta.x;\n    previousSwap.deltaY = pointerDelta.y;\n    previousSwap.drag = toSwapWith;\n    previousSwap.overlaps = overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n    return {\n      previousIndex,\n      currentIndex: newIndex\n    };\n  }\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item, pointerX, pointerY, index) {\n    let enterIndex = index == null || index < 0 ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY) : index;\n    // In some cases (e.g. when the container has padding) we might not be able to figure\n    // out which item to insert the dragged item next to, because the pointer didn't overlap\n    // with anything. In that case we find the item that's closest to the pointer.\n    if (enterIndex === -1) {\n      enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n    }\n    const targetItem = this._activeItems[enterIndex];\n    const currentIndex = this._activeItems.indexOf(item);\n    if (currentIndex > -1) {\n      this._activeItems.splice(currentIndex, 1);\n    }\n    if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n      this._activeItems.splice(enterIndex, 0, item);\n      targetItem.getRootElement().before(item.getPlaceholderElement());\n    } else {\n      this._activeItems.push(item);\n      this._element.appendChild(item.getPlaceholderElement());\n    }\n  }\n  /** Sets the items that are currently part of the list. */\n  withItems(items) {\n    this._activeItems = items.slice();\n  }\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate) {\n    this._sortPredicate = predicate;\n  }\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset() {\n    const root = this._element;\n    const previousSwap = this._previousSwap;\n    // Moving elements around in the DOM can break things like the `@for` loop, because it\n    // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n    // the DOM nodes in the list to their original order when the list is reset.\n    // Note that this could be simpler if we just saved all the nodes, cleared the root\n    // and then appended them in the original order. We don't do it, because it can break\n    // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n    // placeholder element which is removed after dragging.\n    for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n      const [node, nextSibling] = this._relatedNodes[i];\n      if (node.parentNode === root && node.nextSibling !== nextSibling) {\n        if (nextSibling === null) {\n          root.appendChild(node);\n        } else if (nextSibling.parentNode === root) {\n          root.insertBefore(node, nextSibling);\n        }\n      }\n    }\n    this._relatedNodes = [];\n    this._activeItems = [];\n    previousSwap.drag = null;\n    previousSwap.deltaX = previousSwap.deltaY = 0;\n    previousSwap.overlaps = false;\n  }\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot() {\n    return this._activeItems;\n  }\n  /** Gets the index of a specific item. */\n  getItemIndex(item) {\n    return this._activeItems.indexOf(item);\n  }\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll() {\n    this._activeItems.forEach(item => {\n      if (this._dragDropRegistry.isDragging(item)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        item._sortFromLastPointerPosition();\n      }\n    });\n  }\n  withElementContainer(container) {\n    if (container !== this._element) {\n      this._element = container;\n      this._rootNode = undefined;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n    const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n    const index = elementAtPoint ? this._activeItems.findIndex(item => {\n      const root = item.getRootElement();\n      return elementAtPoint === root || root.contains(elementAtPoint);\n    }) : -1;\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n  /** Lazily resolves the list's root node. */\n  _getRootNode() {\n    // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n    if (!this._rootNode) {\n      this._rootNode = _getShadowRoot(this._element) || this._document;\n    }\n    return this._rootNode;\n  }\n  /**\n   * Finds the index of the item that's closest to the item being dragged.\n   * @param item Item being dragged.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n    if (this._activeItems.length === 0) {\n      return -1;\n    }\n    if (this._activeItems.length === 1) {\n      return 0;\n    }\n    let minDistance = Infinity;\n    let minIndex = -1;\n    // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n    // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n    // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n    // for our purposes.\n    for (let i = 0; i < this._activeItems.length; i++) {\n      const current = this._activeItems[i];\n      if (current !== item) {\n        const {\n          x,\n          y\n        } = current.getRootElement().getBoundingClientRect();\n        const distance = Math.hypot(pointerX - x, pointerY - y);\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      }\n    }\n    return minIndex;\n  }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection = /*#__PURE__*/function (AutoScrollVerticalDirection) {\n  AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n  AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n  AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n  return AutoScrollVerticalDirection;\n}(AutoScrollVerticalDirection || {});\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection = /*#__PURE__*/function (AutoScrollHorizontalDirection) {\n  AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n  AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n  AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n  return AutoScrollHorizontalDirection;\n}(AutoScrollHorizontalDirection || {});\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    this.enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    this.sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    this.receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    this.receivingStopped = new Subject();\n    /** Whether an item in the list is being dragged. */\n    this._isDragging = false;\n    /** Draggable items in the container. */\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n    this._siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    this._activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    this._cachedShadowRoot = null;\n    /** Elements that can be scrolled while the user is dragging. */\n    this._scrollableElements = [];\n    /** Direction of the list's layout. */\n    this._direction = 'ltr';\n    /** Starts the interval that'll auto-scroll the element. */\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          node.scrollBy(0, scrollStep);\n        }\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n    };\n    const coercedElement = this.element = coerceElement(element);\n    this._document = _document;\n    this.withOrientation('vertical').withElementContainer(coercedElement);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this.receivingStarted.complete();\n    this.receivingStopped.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n  start() {\n    this._draggingStarted();\n    this._notifyReceivingSiblings();\n  }\n  /**\n   * Attempts to move an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted();\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    if (index == null && this.sortingDisabled) {\n      index = this._draggables.indexOf(item);\n    }\n    this._sortStrategy.enter(item, pointerX, pointerY, index);\n    // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n    // can change when the sort strategy moves the item around inside `enter`.\n    this._cacheParentPositions();\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n    this._notifyReceivingSiblings();\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item) {\n    this._reset();\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @param event Event that triggered the dropping sequence.\n   *\n   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n   */\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint,\n      event\n    });\n  }\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._sortStrategy.withItems(this._draggables);\n      }\n    }\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction) {\n    this._direction = direction;\n    if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n      this._sortStrategy.direction = direction;\n    }\n    return this;\n  }\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation) {\n    if (orientation === 'mixed') {\n      this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n    } else {\n      const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n      strategy.direction = this._direction;\n      strategy.orientation = orientation;\n      this._sortStrategy = strategy;\n    }\n    this._sortStrategy.withElementContainer(this._container);\n    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    return this;\n  }\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n  withScrollableParents(elements) {\n    const element = this._container;\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /**\n   * Configures the drop list so that a different element is used as the container for the\n   * dragged items. This is useful for the cases when one might not have control over the\n   * full DOM that sets up the dragging.\n   * Note that the alternate container needs to be a descendant of the drop list.\n   * @param container New element container to be assigned.\n   */\n  withElementContainer(container) {\n    if (container === this._container) {\n      return this;\n    }\n    const element = coerceElement(this.element);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && container !== element && !element.contains(container)) {\n      throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n    }\n    const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n    const newContainerIndex = this._scrollableElements.indexOf(container);\n    if (oldContainerIndex > -1) {\n      this._scrollableElements.splice(oldContainerIndex, 1);\n    }\n    if (newContainerIndex > -1) {\n      this._scrollableElements.splice(newContainerIndex, 1);\n    }\n    if (this._sortStrategy) {\n      this._sortStrategy.withElementContainer(container);\n    }\n    this._cachedShadowRoot = null;\n    this._scrollableElements.unshift(container);\n    this._container = container;\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item) {\n    return this._isDragging ? this._sortStrategy.getItemIndex(item) : this._draggables.indexOf(item);\n  }\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._domRect || !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n    if (result) {\n      this.sorted.next({\n        previousIndex: result.previousIndex,\n        currentIndex: result.currentIndex,\n        container: this,\n        item\n      });\n    }\n  }\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n    let scrollNode;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n      if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    });\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n      const domRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n      scrollNode = window;\n    }\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n  _draggingStarted() {\n    const styles = this._container.style;\n    this.beforeStarted.next();\n    this._isDragging = true;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n    // Prevent the check from running on apps not using an alternate container. Ideally we\n    // would always run it, but introducing it at this stage would be a breaking change.\n    this._container !== coerceElement(this.element)) {\n      for (const drag of this._draggables) {\n        if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n          throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n        }\n      }\n    }\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._sortStrategy.start(this._draggables);\n    this._cacheParentPositions();\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n  _cacheParentPositions() {\n    this._parentPositions.cache(this._scrollableElements);\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `DOMRect`.\n    this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n  }\n  /** Resets the container to its initial state. */\n  _reset() {\n    this._isDragging = false;\n    const styles = this._container.style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._sortStrategy.reset();\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x, y) {\n    return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n  }\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item, x, y) {\n    if (!this._domRect || !isInsideClientRect(this._domRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n    // The `DOMRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n  }\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n      this.receivingStarted.next({\n        initiator: sibling,\n        receiver: this,\n        items\n      });\n    }\n  }\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n    this.receivingStopped.next({\n      initiator: sibling,\n      receiver: this\n    });\n  }\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n          this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(this._container);\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n  _notifyReceivingSiblings() {\n    const draggedItems = this._sortStrategy.getActiveItemsSnapshot().filter(item => item.isDragging());\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n  return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n  return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n    }\n  }\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n    if (direction === 'rtl') {\n      if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n        // In RTL `scrollLeft` will be negative when scrolled.\n        if (scrollLeft < 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n        }\n      } else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n      }\n    } else {\n      if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n        if (scrollLeft > 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n        }\n      } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n      }\n    }\n  }\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = /*#__PURE__*/new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nlet _ResetsLoader = /*#__PURE__*/(() => {\n  class _ResetsLoader {\n    static {\n      this.ɵfac = function _ResetsLoader_Factory(t) {\n        return new (t || _ResetsLoader)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: _ResetsLoader,\n        selectors: [[\"ng-component\"]],\n        hostAttrs: [\"cdk-drag-resets-container\", \"\"],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 0,\n        vars: 0,\n        template: function _ResetsLoader_Template(rf, ctx) {},\n        styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return _ResetsLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nlet DragDropRegistry = /*#__PURE__*/(() => {\n  class DragDropRegistry {\n    constructor(_ngZone, _document) {\n      this._ngZone = _ngZone;\n      this._appRef = inject(ApplicationRef);\n      this._environmentInjector = inject(EnvironmentInjector);\n      /** Registered drop container instances. */\n      this._dropInstances = new Set();\n      /** Registered drag item instances. */\n      this._dragInstances = new Set();\n      /** Drag item instances that are currently being dragged. */\n      this._activeDragInstances = signal([]);\n      /** Keeps track of the event listeners that we've bound to the `document`. */\n      this._globalListeners = new Map();\n      /**\n       * Predicate function to check if an item is being dragged.  Moved out into a property,\n       * because it'll be called a lot and we don't want to create a new function every time.\n       */\n      this._draggingPredicate = item => item.isDragging();\n      /**\n       * Emits the `touchmove` or `mousemove` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n      this.pointerMove = new Subject();\n      /**\n       * Emits the `touchend` or `mouseup` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n      this.pointerUp = new Subject();\n      /**\n       * Emits when the viewport has been scrolled while the user is dragging an item.\n       * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n       * @breaking-change 13.0.0\n       */\n      this.scroll = new Subject();\n      /**\n       * Event listener that will prevent the default browser action while the user is dragging.\n       * @param event Event whose default action should be prevented.\n       */\n      this._preventDefaultWhileDragging = event => {\n        if (this._activeDragInstances().length > 0) {\n          event.preventDefault();\n        }\n      };\n      /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n      this._persistentTouchmoveListener = event => {\n        if (this._activeDragInstances().length > 0) {\n          // Note that we only want to prevent the default action after dragging has actually started.\n          // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n          // but it could be pushed back if the user has set up a drag delay or threshold.\n          if (this._activeDragInstances().some(this._draggingPredicate)) {\n            event.preventDefault();\n          }\n          this.pointerMove.next(event);\n        }\n      };\n      this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n      if (!this._dropInstances.has(drop)) {\n        this._dropInstances.add(drop);\n      }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n      this._dragInstances.add(drag);\n      // The `touchmove` event gets bound once, ahead of time, because WebKit\n      // won't preventDefault on a dynamically-added `touchmove` listener.\n      // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n      if (this._dragInstances.size === 1) {\n        this._ngZone.runOutsideAngular(() => {\n          // The event handler has to be explicitly active,\n          // because newer browsers make it passive by default.\n          this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        });\n      }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n      this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n      this._dragInstances.delete(drag);\n      this.stopDragging(drag);\n      if (this._dragInstances.size === 0) {\n        this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n      // Do not process the same drag twice to avoid memory leaks and redundant listeners\n      if (this._activeDragInstances().indexOf(drag) > -1) {\n        return;\n      }\n      this._loadResets();\n      this._activeDragInstances.update(instances => [...instances, drag]);\n      if (this._activeDragInstances().length === 1) {\n        const isTouchEvent = event.type.startsWith('touch');\n        // We explicitly bind __active__ listeners here, because newer browsers will default to\n        // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n        // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n        this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        }).set('scroll', {\n          handler: e => this.scroll.next(e),\n          // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n          // the document. See https://github.com/angular/components/issues/17144.\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n        // We don't have to bind a move event for touch drag sequences, because\n        // we already have a persistent global one bound from `registerDragItem`.\n        if (!isTouchEvent) {\n          this._globalListeners.set('mousemove', {\n            handler: e => this.pointerMove.next(e),\n            options: activeCapturingEventOptions\n          });\n        }\n        this._ngZone.runOutsideAngular(() => {\n          this._globalListeners.forEach((config, name) => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n      }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n      this._activeDragInstances.update(instances => {\n        const index = instances.indexOf(drag);\n        if (index > -1) {\n          instances.splice(index, 1);\n          return [...instances];\n        }\n        return instances;\n      });\n      if (this._activeDragInstances().length === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n      return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n      const streams = [this.scroll];\n      if (shadowRoot && shadowRoot !== this._document) {\n        // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n        // because we want to guarantee that the event is bound outside of the `NgZone`. With\n        // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n        streams.push(new Observable(observer => {\n          return this._ngZone.runOutsideAngular(() => {\n            const eventOptions = true;\n            const callback = event => {\n              if (this._activeDragInstances().length) {\n                observer.next(event);\n              }\n            };\n            shadowRoot.addEventListener('scroll', callback, eventOptions);\n            return () => {\n              shadowRoot.removeEventListener('scroll', callback, eventOptions);\n            };\n          });\n        }));\n      }\n      return merge(...streams);\n    }\n    ngOnDestroy() {\n      this._dragInstances.forEach(instance => this.removeDragItem(instance));\n      this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n      this._clearGlobalListeners();\n      this.pointerMove.complete();\n      this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n      this._globalListeners.forEach((config, name) => {\n        this._document.removeEventListener(name, config.handler, config.options);\n      });\n      this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n      if (!activeApps.has(this._appRef)) {\n        activeApps.add(this._appRef);\n        const componentRef = createComponent(_ResetsLoader, {\n          environmentInjector: this._environmentInjector\n        });\n        this._appRef.onDestroy(() => {\n          activeApps.delete(this._appRef);\n          if (activeApps.size === 0) {\n            componentRef.destroy();\n          }\n        });\n      }\n    }\n    static {\n      this.ɵfac = function DragDropRegistry_Factory(t) {\n        return new (t || DragDropRegistry)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DragDropRegistry,\n        factory: DragDropRegistry.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DragDropRegistry;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nlet DragDrop = /*#__PURE__*/(() => {\n  class DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n      this._document = _document;\n      this._ngZone = _ngZone;\n      this._viewportRuler = _viewportRuler;\n      this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n      return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n      return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static {\n      this.ɵfac = function DragDrop_Factory(t) {\n        return new (t || DragDrop)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DragDrop,\n        factory: DragDrop.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DragDrop;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = /*#__PURE__*/new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = /*#__PURE__*/new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nlet CdkDragHandle = /*#__PURE__*/(() => {\n  class CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n      this.element = element;\n      this._parentDrag = _parentDrag;\n      /** Emits when the state of the handle has changed. */\n      this._stateChanges = new Subject();\n      this._disabled = false;\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDragHandle');\n      }\n      _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n      this._parentDrag?._removeHandle(this);\n      this._stateChanges.complete();\n    }\n    static {\n      this.ɵfac = function CdkDragHandle_Factory(t) {\n        return new (t || CdkDragHandle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDragHandle,\n        selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n        hostAttrs: [1, \"cdk-drag-handle\"],\n        inputs: {\n          disabled: [2, \"cdkDragHandleDisabled\", \"disabled\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_DRAG_HANDLE,\n          useExisting: CdkDragHandle\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkDragHandle;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = /*#__PURE__*/new InjectionToken('CDK_DRAG_CONFIG');\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = /*#__PURE__*/new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nlet CdkDrag = /*#__PURE__*/(() => {\n  class CdkDrag {\n    static {\n      this._dragInstances = [];\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n      return this._disabled || this.dropContainer && this.dropContainer.disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._dragRef.disabled = this._disabled;\n    }\n    constructor( /** Element that the draggable is attached to. */\n    element, /** Droppable container that the draggable is a part of. */\n    dropContainer,\n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n      this.element = element;\n      this.dropContainer = dropContainer;\n      this._ngZone = _ngZone;\n      this._viewContainerRef = _viewContainerRef;\n      this._dir = _dir;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._selfHandle = _selfHandle;\n      this._parentDrag = _parentDrag;\n      this._destroyed = new Subject();\n      this._handles = new BehaviorSubject([]);\n      /** Emits when the user starts dragging the item. */\n      this.started = new EventEmitter();\n      /** Emits when the user has released a drag item, before any animations have started. */\n      this.released = new EventEmitter();\n      /** Emits when the user stops dragging an item in the container. */\n      this.ended = new EventEmitter();\n      /** Emits when the user has moved the item into a new container. */\n      this.entered = new EventEmitter();\n      /** Emits when the user removes the item its container by dragging it into another container. */\n      this.exited = new EventEmitter();\n      /** Emits when the user drops the item inside a container. */\n      this.dropped = new EventEmitter();\n      /**\n       * Emits as the user is dragging the item. Use with caution,\n       * because this event will fire for every pixel that the user has dragged.\n       */\n      this.moved = new Observable(observer => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n      this._injector = inject(Injector);\n      this._dragRef = dragDrop.createDrag(element, {\n        dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n        pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n        zIndex: config?.zIndex\n      });\n      this._dragRef.data = this;\n      // We have to keep track of the drag instances in order to be able to match an element to\n      // a drag instance. We can't go through the global registry of `DragRef`, because the root\n      // element could be different.\n      CdkDrag._dragInstances.push(this);\n      if (config) {\n        this._assignDefaults(config);\n      }\n      // Note that usually the container is assigned when the drop list is picks up the item, but in\n      // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n      // where there are no items on the first change detection pass, but the items get picked up as\n      // soon as the user triggers another pass by dragging. This is a problem, because the item would\n      // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n      // is too late since the two modes save different kinds of information. We work around it by\n      // assigning the drop container both from here and the list.\n      if (dropContainer) {\n        this._dragRef._withDropContainer(dropContainer._dropListRef);\n        dropContainer.addItem(this);\n      }\n      this._syncInputs(this._dragRef);\n      this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n      return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n      return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n      this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n      return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n      this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n      // We need to wait until after render, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position, and then they get transferred to the portal.\n      afterNextRender(() => {\n        this._updateRootElement();\n        this._setupHandlesListener();\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      }, {\n        injector: this._injector\n      });\n    }\n    ngOnChanges(changes) {\n      const rootSelectorChange = changes['rootElementSelector'];\n      const positionChange = changes['freeDragPosition'];\n      // We don't have to react to the first change since it's being\n      // handled in the `afterNextRender` queued up in the constructor.\n      if (rootSelectorChange && !rootSelectorChange.firstChange) {\n        this._updateRootElement();\n      }\n      // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n      // constructor.\n      if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n        this._dragRef.setFreeDragPosition(this.freeDragPosition);\n      }\n    }\n    ngOnDestroy() {\n      if (this.dropContainer) {\n        this.dropContainer.removeItem(this);\n      }\n      const index = CdkDrag._dragInstances.indexOf(this);\n      if (index > -1) {\n        CdkDrag._dragInstances.splice(index, 1);\n      }\n      // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n      this._ngZone.runOutsideAngular(() => {\n        this._handles.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n      });\n    }\n    _addHandle(handle) {\n      const handles = this._handles.getValue();\n      handles.push(handle);\n      this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n      const handles = this._handles.getValue();\n      const index = handles.indexOf(handle);\n      if (index > -1) {\n        handles.splice(index, 1);\n        this._handles.next(handles);\n      }\n    }\n    _setPreviewTemplate(preview) {\n      this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n      if (preview === this._previewTemplate) {\n        this._previewTemplate = null;\n      }\n    }\n    _setPlaceholderTemplate(placeholder) {\n      this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n      if (placeholder === this._placeholderTemplate) {\n        this._placeholderTemplate = null;\n      }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n      const element = this.element.nativeElement;\n      let rootElement = element;\n      if (this.rootElementSelector) {\n        rootElement = element.closest !== undefined ? element.closest(this.rootElementSelector) :\n        // Comment tag doesn't have closest method, so use parent's one.\n        element.parentElement?.closest(this.rootElementSelector);\n      }\n      if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        assertElementNode(rootElement, 'cdkDrag');\n      }\n      this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n      const boundary = this.boundaryElement;\n      if (!boundary) {\n        return null;\n      }\n      if (typeof boundary === 'string') {\n        return this.element.nativeElement.closest(boundary);\n      }\n      return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n      ref.beforeStarted.subscribe(() => {\n        if (!ref.isDragging()) {\n          const dir = this._dir;\n          const dragStartDelay = this.dragStartDelay;\n          const placeholder = this._placeholderTemplate ? {\n            template: this._placeholderTemplate.templateRef,\n            context: this._placeholderTemplate.data,\n            viewContainer: this._viewContainerRef\n          } : null;\n          const preview = this._previewTemplate ? {\n            template: this._previewTemplate.templateRef,\n            context: this._previewTemplate.data,\n            matchSize: this._previewTemplate.matchSize,\n            viewContainer: this._viewContainerRef\n          } : null;\n          ref.disabled = this.disabled;\n          ref.lockAxis = this.lockAxis;\n          ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n          ref.constrainPosition = this.constrainPosition;\n          ref.previewClass = this.previewClass;\n          ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n          if (dir) {\n            ref.withDirection(dir.value);\n          }\n        }\n      });\n      // This only needs to be resolved once.\n      ref.beforeStarted.pipe(take(1)).subscribe(() => {\n        // If we managed to resolve a parent through DI, use it.\n        if (this._parentDrag) {\n          ref.withParent(this._parentDrag._dragRef);\n          return;\n        }\n        // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n        // the item was projected into another item by something like `ngTemplateOutlet`.\n        let parent = this.element.nativeElement.parentElement;\n        while (parent) {\n          if (parent.classList.contains(DRAG_HOST_CLASS)) {\n            ref.withParent(CdkDrag._dragInstances.find(drag => {\n              return drag.element.nativeElement === parent;\n            })?._dragRef || null);\n            break;\n          }\n          parent = parent.parentElement;\n        }\n      });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n      ref.started.subscribe(startEvent => {\n        this.started.emit({\n          source: this,\n          event: startEvent.event\n        });\n        // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.released.subscribe(releaseEvent => {\n        this.released.emit({\n          source: this,\n          event: releaseEvent.event\n        });\n      });\n      ref.ended.subscribe(endEvent => {\n        this.ended.emit({\n          source: this,\n          distance: endEvent.distance,\n          dropPoint: endEvent.dropPoint,\n          event: endEvent.event\n        });\n        // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.entered.subscribe(enterEvent => {\n        this.entered.emit({\n          container: enterEvent.container.data,\n          item: this,\n          currentIndex: enterEvent.currentIndex\n        });\n      });\n      ref.exited.subscribe(exitEvent => {\n        this.exited.emit({\n          container: exitEvent.container.data,\n          item: this\n        });\n      });\n      ref.dropped.subscribe(dropEvent => {\n        this.dropped.emit({\n          previousIndex: dropEvent.previousIndex,\n          currentIndex: dropEvent.currentIndex,\n          previousContainer: dropEvent.previousContainer.data,\n          container: dropEvent.container.data,\n          isPointerOverContainer: dropEvent.isPointerOverContainer,\n          item: this,\n          distance: dropEvent.distance,\n          dropPoint: dropEvent.dropPoint,\n          event: dropEvent.event\n        });\n      });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n      const {\n        lockAxis,\n        dragStartDelay,\n        constrainPosition,\n        previewClass,\n        boundaryElement,\n        draggingDisabled,\n        rootElementSelector,\n        previewContainer\n      } = config;\n      this.disabled = draggingDisabled == null ? false : draggingDisabled;\n      this.dragStartDelay = dragStartDelay || 0;\n      if (lockAxis) {\n        this.lockAxis = lockAxis;\n      }\n      if (constrainPosition) {\n        this.constrainPosition = constrainPosition;\n      }\n      if (previewClass) {\n        this.previewClass = previewClass;\n      }\n      if (boundaryElement) {\n        this.boundaryElement = boundaryElement;\n      }\n      if (rootElementSelector) {\n        this.rootElementSelector = rootElementSelector;\n      }\n      if (previewContainer) {\n        this.previewContainer = previewContainer;\n      }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n      // Listen for any newly-added handles.\n      this._handles.pipe(\n      // Sync the new handles with the DragRef.\n      tap(handles => {\n        const handleElements = handles.map(handle => handle.element);\n        // Usually handles are only allowed to be a descendant of the drag element, but if\n        // the consumer defined a different drag root, we should allow the drag element\n        // itself to be a handle too.\n        if (this._selfHandle && this.rootElementSelector) {\n          handleElements.push(this.element);\n        }\n        this._dragRef.withHandles(handleElements);\n      }),\n      // Listen if the state of any of the handles changes.\n      switchMap(handles => {\n        return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n      }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n        // Enabled/disable the handle that changed in the DragRef.\n        const dragRef = this._dragRef;\n        const handle = handleInstance.element.nativeElement;\n        handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n      });\n    }\n    static {\n      this.ɵfac = function CdkDrag_Factory(t) {\n        return new (t || CdkDrag)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDrag,\n        selectors: [[\"\", \"cdkDrag\", \"\"]],\n        hostAttrs: [1, \"cdk-drag\"],\n        hostVars: 4,\n        hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n          }\n        },\n        inputs: {\n          data: [0, \"cdkDragData\", \"data\"],\n          lockAxis: [0, \"cdkDragLockAxis\", \"lockAxis\"],\n          rootElementSelector: [0, \"cdkDragRootElement\", \"rootElementSelector\"],\n          boundaryElement: [0, \"cdkDragBoundary\", \"boundaryElement\"],\n          dragStartDelay: [0, \"cdkDragStartDelay\", \"dragStartDelay\"],\n          freeDragPosition: [0, \"cdkDragFreeDragPosition\", \"freeDragPosition\"],\n          disabled: [2, \"cdkDragDisabled\", \"disabled\", booleanAttribute],\n          constrainPosition: [0, \"cdkDragConstrainPosition\", \"constrainPosition\"],\n          previewClass: [0, \"cdkDragPreviewClass\", \"previewClass\"],\n          previewContainer: [0, \"cdkDragPreviewContainer\", \"previewContainer\"]\n        },\n        outputs: {\n          started: \"cdkDragStarted\",\n          released: \"cdkDragReleased\",\n          ended: \"cdkDragEnded\",\n          entered: \"cdkDragEntered\",\n          exited: \"cdkDragExited\",\n          dropped: \"cdkDragDropped\",\n          moved: \"cdkDragMoved\"\n        },\n        exportAs: [\"cdkDrag\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_DRAG_PARENT,\n          useExisting: CdkDrag\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkDrag;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = /*#__PURE__*/new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nlet CdkDropListGroup = /*#__PURE__*/(() => {\n  class CdkDropListGroup {\n    constructor() {\n      /** Drop lists registered inside the group. */\n      this._items = new Set();\n      /** Whether starting a dragging sequence from inside this group is disabled. */\n      this.disabled = false;\n    }\n    ngOnDestroy() {\n      this._items.clear();\n    }\n    static {\n      this.ɵfac = function CdkDropListGroup_Factory(t) {\n        return new (t || CdkDropListGroup)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDropListGroup,\n        selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n        inputs: {\n          disabled: [2, \"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute]\n        },\n        exportAs: [\"cdkDropListGroup\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_DROP_LIST_GROUP,\n          useExisting: CdkDropListGroup\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkDropListGroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nlet CdkDropList = /*#__PURE__*/(() => {\n  class CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static {\n      this._dropLists = [];\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n      return this._disabled || !!this._group && this._group.disabled;\n    }\n    set disabled(value) {\n      // Usually we sync the directive and ref state right before dragging starts, in order to have\n      // a single point of failure and to avoid having to use setters for everything. `disabled` is\n      // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n      // the user in a disabled state, so we also need to sync it as it's being set.\n      this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor( /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n      this.element = element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._dir = _dir;\n      this._group = _group;\n      /** Emits when the list has been destroyed. */\n      this._destroyed = new Subject();\n      /**\n       * Other draggable containers that this container is connected to and into which the\n       * container's items can be transferred. Can either be references to other drop containers,\n       * or their unique IDs.\n       */\n      this.connectedTo = [];\n      /**\n       * Unique ID for the drop zone. Can be used as a reference\n       * in the `connectedTo` of another `CdkDropList`.\n       */\n      this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n      /**\n       * Function that is used to determine whether an item\n       * is allowed to be moved into a drop container.\n       */\n      this.enterPredicate = () => true;\n      /** Functions that is used to determine whether an item can be sorted into a particular index. */\n      this.sortPredicate = () => true;\n      /** Emits when the user drops an item inside the container. */\n      this.dropped = new EventEmitter();\n      /**\n       * Emits when the user has moved a new drag item into this container.\n       */\n      this.entered = new EventEmitter();\n      /**\n       * Emits when the user removes an item from the container\n       * by dragging it into another container.\n       */\n      this.exited = new EventEmitter();\n      /** Emits as the user is swapping items while actively dragging. */\n      this.sorted = new EventEmitter();\n      /**\n       * Keeps track of the items that are registered with this container. Historically we used to\n       * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n       * well which means that we can't handle cases like dragging the headers of a `mat-table`\n       * correctly. What we do instead is to have the items register themselves with the container\n       * and then we sort them based on their position in the DOM.\n       */\n      this._unsortedItems = new Set();\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDropList');\n      }\n      this._dropListRef = dragDrop.createDropList(element);\n      this._dropListRef.data = this;\n      if (config) {\n        this._assignDefaults(config);\n      }\n      this._dropListRef.enterPredicate = (drag, drop) => {\n        return this.enterPredicate(drag.data, drop.data);\n      };\n      this._dropListRef.sortPredicate = (index, drag, drop) => {\n        return this.sortPredicate(index, drag.data, drop.data);\n      };\n      this._setupInputSyncSubscription(this._dropListRef);\n      this._handleEvents(this._dropListRef);\n      CdkDropList._dropLists.push(this);\n      if (_group) {\n        _group._items.add(this);\n      }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n      this._unsortedItems.add(item);\n      if (this._dropListRef.isDragging()) {\n        this._syncItemsWithRef();\n      }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n      this._unsortedItems.delete(item);\n      if (this._dropListRef.isDragging()) {\n        this._syncItemsWithRef();\n      }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n      return Array.from(this._unsortedItems).sort((a, b) => {\n        const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n        // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        // tslint:disable-next-line:no-bitwise\n        return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n      });\n    }\n    ngOnDestroy() {\n      const index = CdkDropList._dropLists.indexOf(this);\n      if (index > -1) {\n        CdkDropList._dropLists.splice(index, 1);\n      }\n      if (this._group) {\n        this._group._items.delete(this);\n      }\n      this._unsortedItems.clear();\n      this._dropListRef.dispose();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n      if (this._dir) {\n        this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n      }\n      ref.beforeStarted.subscribe(() => {\n        const siblings = coerceArray(this.connectedTo).map(drop => {\n          if (typeof drop === 'string') {\n            const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n            if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n              console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n            }\n            return correspondingDropList;\n          }\n          return drop;\n        });\n        if (this._group) {\n          this._group._items.forEach(drop => {\n            if (siblings.indexOf(drop) === -1) {\n              siblings.push(drop);\n            }\n          });\n        }\n        // Note that we resolve the scrollable parents here so that we delay the resolution\n        // as long as possible, ensuring that the element is in its final place in the DOM.\n        if (!this._scrollableParentsResolved) {\n          const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n          this._dropListRef.withScrollableParents(scrollableParents);\n          // Only do this once since it involves traversing the DOM and the parents\n          // shouldn't be able to change without the drop list being destroyed.\n          this._scrollableParentsResolved = true;\n        }\n        if (this.elementContainerSelector) {\n          const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n          if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n          }\n          ref.withElementContainer(container);\n        }\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.sortingDisabled = this.sortingDisabled;\n        ref.autoScrollDisabled = this.autoScrollDisabled;\n        ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n        ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n      });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n      ref.beforeStarted.subscribe(() => {\n        this._syncItemsWithRef();\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.entered.subscribe(event => {\n        this.entered.emit({\n          container: this,\n          item: event.item.data,\n          currentIndex: event.currentIndex\n        });\n      });\n      ref.exited.subscribe(event => {\n        this.exited.emit({\n          container: this,\n          item: event.item.data\n        });\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.sorted.subscribe(event => {\n        this.sorted.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          container: this,\n          item: event.item.data\n        });\n      });\n      ref.dropped.subscribe(dropEvent => {\n        this.dropped.emit({\n          previousIndex: dropEvent.previousIndex,\n          currentIndex: dropEvent.currentIndex,\n          previousContainer: dropEvent.previousContainer.data,\n          container: dropEvent.container.data,\n          item: dropEvent.item.data,\n          isPointerOverContainer: dropEvent.isPointerOverContainer,\n          distance: dropEvent.distance,\n          dropPoint: dropEvent.dropPoint,\n          event: dropEvent.event\n        });\n        // Mark for check since all of these events run outside of change\n        // detection and we're not guaranteed for something else to have triggered it.\n        this._changeDetectorRef.markForCheck();\n      });\n      merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n      const {\n        lockAxis,\n        draggingDisabled,\n        sortingDisabled,\n        listAutoScrollDisabled,\n        listOrientation\n      } = config;\n      this.disabled = draggingDisabled == null ? false : draggingDisabled;\n      this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n      this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n      this.orientation = listOrientation || 'vertical';\n      if (lockAxis) {\n        this.lockAxis = lockAxis;\n      }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n      this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static {\n      this.ɵfac = function CdkDropList_Factory(t) {\n        return new (t || CdkDropList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDropList,\n        selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n        hostAttrs: [1, \"cdk-drop-list\"],\n        hostVars: 7,\n        hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"id\", ctx.id);\n            i0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n          }\n        },\n        inputs: {\n          connectedTo: [0, \"cdkDropListConnectedTo\", \"connectedTo\"],\n          data: [0, \"cdkDropListData\", \"data\"],\n          orientation: [0, \"cdkDropListOrientation\", \"orientation\"],\n          id: \"id\",\n          lockAxis: [0, \"cdkDropListLockAxis\", \"lockAxis\"],\n          disabled: [2, \"cdkDropListDisabled\", \"disabled\", booleanAttribute],\n          sortingDisabled: [2, \"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute],\n          enterPredicate: [0, \"cdkDropListEnterPredicate\", \"enterPredicate\"],\n          sortPredicate: [0, \"cdkDropListSortPredicate\", \"sortPredicate\"],\n          autoScrollDisabled: [2, \"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute],\n          autoScrollStep: [0, \"cdkDropListAutoScrollStep\", \"autoScrollStep\"],\n          elementContainerSelector: [0, \"cdkDropListElementContainer\", \"elementContainerSelector\"]\n        },\n        outputs: {\n          dropped: \"cdkDropListDropped\",\n          entered: \"cdkDropListEntered\",\n          exited: \"cdkDropListExited\",\n          sorted: \"cdkDropListSorted\"\n        },\n        exportAs: [\"cdkDropList\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([\n        // Prevent child drop lists from picking up the same group as their parent.\n        {\n          provide: CDK_DROP_LIST_GROUP,\n          useValue: undefined\n        }, {\n          provide: CDK_DROP_LIST,\n          useExisting: CdkDropList\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkDropList;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = /*#__PURE__*/new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nlet CdkDragPreview = /*#__PURE__*/(() => {\n  class CdkDragPreview {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n      this._drag = inject(CDK_DRAG_PARENT, {\n        optional: true\n      });\n      /** Whether the preview should preserve the same size as the item that is being dragged. */\n      this.matchSize = false;\n      this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n      this._drag?._resetPreviewTemplate(this);\n    }\n    static {\n      this.ɵfac = function CdkDragPreview_Factory(t) {\n        return new (t || CdkDragPreview)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDragPreview,\n        selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n        inputs: {\n          data: \"data\",\n          matchSize: [2, \"matchSize\", \"matchSize\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_DRAG_PREVIEW,\n          useExisting: CdkDragPreview\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkDragPreview;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = /*#__PURE__*/new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nlet CdkDragPlaceholder = /*#__PURE__*/(() => {\n  class CdkDragPlaceholder {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n      this._drag = inject(CDK_DRAG_PARENT, {\n        optional: true\n      });\n      this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n      this._drag?._resetPlaceholderTemplate(this);\n    }\n    static {\n      this.ɵfac = function CdkDragPlaceholder_Factory(t) {\n        return new (t || CdkDragPlaceholder)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkDragPlaceholder,\n        selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n        inputs: {\n          data: \"data\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_DRAG_PLACEHOLDER,\n          useExisting: CdkDragPlaceholder\n        }])]\n      });\n    }\n  }\n  return CdkDragPlaceholder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DRAG_DROP_DIRECTIVES = [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\nlet DragDropModule = /*#__PURE__*/(() => {\n  class DragDropModule {\n    static {\n      this.ɵfac = function DragDropModule_Factory(t) {\n        return new (t || DragDropModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: DragDropModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [DragDrop],\n        imports: [CdkScrollableModule]\n      });\n    }\n  }\n  return DragDropModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"mappings":"4nBAMA,SAASA,EAAqBC,EAAOC,EAAgB,EAAG,CACtD,OAAOC,GAAeF,CAAK,EAAI,OAAOA,CAAK,EAAIC,CACjD,CAKA,SAASC,GAAeF,EAAO,CAI7B,MAAO,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,CAAC,MAAM,OAAOA,CAAK,CAAC,CAC1D,CACA,SAASG,GAAYH,EAAO,CAC1B,OAAO,MAAM,QAAQA,CAAK,EAAIA,EAAQ,CAACA,CAAK,CAC9C,CAcA,SAASI,EAAcC,EAAc,CACnC,OAAOA,aAAwBC,EAAaD,EAAa,cAAgBA,CAC3E,CC/BA,IAAIE,GAMJ,GAAI,CACFA,GAAqB,OAAO,KAAS,KAAe,KAAK,eAC3D,MAAQ,CACNA,GAAqB,EACvB,CAKA,IAAIC,GAAyB,IAAM,CACjC,IAAMC,EAAN,MAAMA,CAAS,CACb,YAAYC,EAAa,CACvB,KAAK,YAAcA,EAKnB,KAAK,UAAY,KAAK,YAAcC,GAAkB,KAAK,WAAW,EAAI,OAAO,UAAa,UAAY,CAAC,CAAC,SAE5G,KAAK,KAAO,KAAK,WAAa,UAAU,KAAK,UAAU,SAAS,EAEhE,KAAK,QAAU,KAAK,WAAa,kBAAkB,KAAK,UAAU,SAAS,EAG3E,KAAK,MAAQ,KAAK,WAAa,CAAC,EAAE,OAAO,QAAUJ,KAAuB,OAAO,IAAQ,KAAe,CAAC,KAAK,MAAQ,CAAC,KAAK,QAI5H,KAAK,OAAS,KAAK,WAAa,eAAe,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,OAAS,CAAC,KAAK,MAAQ,CAAC,KAAK,QAE/G,KAAK,IAAM,KAAK,WAAa,mBAAmB,KAAK,UAAU,SAAS,GAAK,EAAE,aAAc,QAM7F,KAAK,QAAU,KAAK,WAAa,uBAAuB,KAAK,UAAU,SAAS,EAGhF,KAAK,QAAU,KAAK,WAAa,WAAW,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,QAK/E,KAAK,OAAS,KAAK,WAAa,UAAU,KAAK,UAAU,SAAS,GAAK,KAAK,MAC9E,CAaF,EAXIE,EAAK,UAAO,SAA0BG,EAAG,CACvC,OAAO,IAAKA,GAAKH,GAAaI,EAASC,EAAW,CAAC,CACrD,EAGAL,EAAK,WAA0BM,EAAmB,CAChD,MAAON,EACP,QAASA,EAAS,UAClB,WAAY,MACd,CAAC,EA9CL,IAAMD,EAANC,EAiDA,OAAOD,CACT,GAAG,EAyDH,IAAIQ,EAKJ,SAASC,IAAgC,CACvC,GAAID,GAAyB,MAAQ,OAAO,OAAW,IACrD,GAAI,CACF,OAAO,iBAAiB,OAAQ,KAAM,OAAO,eAAe,CAAC,EAAG,UAAW,CACzE,IAAK,IAAMA,EAAwB,EACrC,CAAC,CAAC,CACJ,QAAE,CACAA,EAAwBA,GAAyB,EACnD,CAEF,OAAOA,CACT,CAOA,SAASE,EAAgCC,EAAS,CAChD,OAAOF,GAA8B,EAAIE,EAAU,CAAC,CAACA,EAAQ,OAC/D,CAGA,IAAIC,EAAiC,SAAUA,EAAmB,CAKhE,OAAAA,EAAkBA,EAAkB,OAAY,CAAC,EAAI,SAKrDA,EAAkBA,EAAkB,QAAa,CAAC,EAAI,UAKtDA,EAAkBA,EAAkB,SAAc,CAAC,EAAI,WAChDA,CACT,EAAEA,GAAqB,CAAC,CAAC,EAErBC,GAEAC,EAEJ,SAASC,IAAyB,CAChC,GAAID,GAA2B,KAAM,CAGnC,GAAI,OAAO,UAAa,UAAY,CAAC,UAAY,OAAO,SAAY,YAAc,CAAC,QACjF,OAAAA,EAA0B,GACnBA,EAGT,GAAI,mBAAoB,SAAS,gBAAgB,MAC/CA,EAA0B,OACrB,CAGL,IAAME,EAAmB,QAAQ,UAAU,SACvCA,EAKFF,EAA0B,CAAC,4BAA4B,KAAKE,EAAiB,SAAS,CAAC,EAEvFF,EAA0B,EAE9B,CACF,CACA,OAAOA,CACT,CAKA,SAASG,GAAuB,CAE9B,GAAI,OAAO,UAAa,UAAY,CAAC,SACnC,OAAOL,EAAkB,OAE3B,GAAIC,IAAqB,KAAM,CAE7B,IAAMK,EAAkB,SAAS,cAAc,KAAK,EAC9CC,EAAiBD,EAAgB,MACvCA,EAAgB,IAAM,MACtBC,EAAe,MAAQ,MACvBA,EAAe,SAAW,OAC1BA,EAAe,WAAa,SAC5BA,EAAe,cAAgB,OAC/BA,EAAe,SAAW,WAC1B,IAAMC,EAAU,SAAS,cAAc,KAAK,EACtCC,EAAeD,EAAQ,MAC7BC,EAAa,MAAQ,MACrBA,EAAa,OAAS,MACtBH,EAAgB,YAAYE,CAAO,EACnC,SAAS,KAAK,YAAYF,CAAe,EACzCL,GAAoBD,EAAkB,OAIlCM,EAAgB,aAAe,IAKjCA,EAAgB,WAAa,EAC7BL,GAAoBK,EAAgB,aAAe,EAAIN,EAAkB,QAAUA,EAAkB,UAEvGM,EAAgB,OAAO,CACzB,CACA,OAAOL,EACT,CACA,IAAIS,GAEJ,SAASC,IAAqB,CAC5B,GAAID,IAAwB,KAAM,CAChC,IAAME,EAAO,OAAO,SAAa,IAAc,SAAS,KAAO,KAC/DF,GAAuB,CAAC,EAAEE,IAASA,EAAK,kBAAoBA,EAAK,cACnE,CACA,OAAOF,EACT,CAEA,SAASG,GAAeC,EAAS,CAC/B,GAAIH,GAAmB,EAAG,CACxB,IAAMI,EAAWD,EAAQ,YAAcA,EAAQ,YAAY,EAAI,KAG/D,GAAI,OAAO,WAAe,KAAe,YAAcC,aAAoB,WACzE,OAAOA,CAEX,CACA,OAAO,IACT,CAkBA,SAASC,EAAgBC,EAAO,CAG9B,OAAOA,EAAM,aAAeA,EAAM,aAAa,EAAE,CAAC,EAAIA,EAAM,MAC9D,CChRA,IAAMC,GAA4B,IAAIC,EAAe,cAAe,CAClE,WAAY,OACZ,QAASC,EACX,CAAC,EAED,SAASA,IAAuB,CAC9B,OAAOC,EAAOC,CAAQ,CACxB,CAGA,IAAMC,GAAqB,qHAE3B,SAASC,GAAuBC,EAAU,CACxC,IAAMC,EAAQD,GAAU,YAAY,GAAK,GACzC,OAAIC,IAAU,QAAU,OAAO,UAAc,KAAe,WAAW,SAC9DH,GAAmB,KAAK,UAAU,QAAQ,EAAI,MAAQ,MAExDG,IAAU,MAAQ,MAAQ,KACnC,CAKA,IAAIC,GAA+B,IAAM,CACvC,IAAMC,EAAN,MAAMA,CAAe,CACnB,YAAYC,EAAW,CAKrB,GAHA,KAAK,MAAQ,MAEb,KAAK,OAAS,IAAIC,EACdD,EAAW,CACb,IAAME,EAAUF,EAAU,KAAOA,EAAU,KAAK,IAAM,KAChDG,EAAUH,EAAU,gBAAkBA,EAAU,gBAAgB,IAAM,KAC5E,KAAK,MAAQL,GAAuBO,GAAWC,GAAW,KAAK,CACjE,CACF,CACA,aAAc,CACZ,KAAK,OAAO,SAAS,CACvB,CAaF,EAXIJ,EAAK,UAAO,SAAgCK,EAAG,CAC7C,OAAO,IAAKA,GAAKL,GAAmBM,EAAShB,GAAc,CAAC,CAAC,CAC/D,EAGAU,EAAK,WAA0BO,EAAmB,CAChD,MAAOP,EACP,QAASA,EAAe,UACxB,WAAY,MACd,CAAC,EAzBL,IAAMD,EAANC,EA4BA,OAAOD,CACT,GAAG,EAkFH,IAAIS,IAA2B,IAAM,CACnC,IAAMC,EAAN,MAAMA,CAAW,CAcjB,EAZIA,EAAK,UAAO,SAA4BC,EAAG,CACzC,OAAO,IAAKA,GAAKD,EACnB,EAGAA,EAAK,UAAyBE,EAAiB,CAC7C,KAAMF,CACR,CAAC,EAGDA,EAAK,UAAyBG,EAAiB,CAAC,CAAC,EAZrD,IAAMJ,EAANC,EAeA,OAAOD,CACT,GAAG,ECxKH,IAAMK,GAAN,KAAiB,CAAC,EAElB,SAASC,GAAaC,EAAO,CAK3B,OAAOA,GAAS,OAAOA,EAAM,SAAY,YAAc,EAAEA,aAAiBC,GAC5E,CAGA,IAAMC,GAAN,cAA8BJ,EAAW,CACvC,YAAYK,EAAO,CACjB,MAAM,EACN,KAAK,MAAQA,CACf,CACA,SAAU,CACR,OAAOC,GAAa,KAAK,KAAK,EAAI,KAAK,MAAQC,EAAG,KAAK,KAAK,CAC9D,CACA,YAAa,CAAC,CAChB,EAGIC,EAAsC,SAAUA,EAAwB,CAE1E,OAAAA,EAAuBA,EAAuB,SAAc,CAAC,EAAI,WAEjEA,EAAuBA,EAAuB,SAAc,CAAC,EAAI,WAEjEA,EAAuBA,EAAuB,MAAW,CAAC,EAAI,QAE9DA,EAAuBA,EAAuB,QAAa,CAAC,EAAI,UACzDA,CACT,EAAEA,GAA0B,CAAC,CAAC,EAKxBC,GAAuC,IAAIC,EAAe,eAAe,EAmD/E,IAAMC,GAAN,KAAmC,CACjC,aAAc,CAKZ,KAAK,cAAgB,GAQrB,KAAK,WAAa,CAAC,CACrB,CAEA,aAAaC,EAASC,EAAkBC,EAAoBC,EAAmBC,EAAiB,CAE9FJ,EAAQ,iBAAiB,CAACK,EAAQC,EAAuBC,IAAiB,CACxE,IAAIC,EACAC,EACJ,GAAIJ,EAAO,eAAiB,KAAM,CAEhC,IAAMK,EAAkB,IAAMR,EAAmBG,EAAQC,EAAuBC,CAAY,EAC5FC,EAAO,KAAK,YAAYE,EAAiBH,EAAcN,EAAkBE,EAAkBE,CAAM,CAAC,EAClGI,EAAYD,EAAOG,EAAuB,SAAWA,EAAuB,QAC9E,MAAWJ,GAAgB,MAEzB,KAAK,oBAAoBD,EAAuBL,CAAgB,EAChEQ,EAAYE,EAAuB,UAGnCH,EAAO,KAAK,UAAUF,EAAuBC,EAAcN,EAAkBE,EAAkBE,CAAM,CAAC,EACtGI,EAAYE,EAAuB,OAEjCP,GACFA,EAAgB,CACd,QAASI,GAAM,QACf,UAAAC,EACA,OAAAJ,CACF,CAAC,CAEL,CAAC,CACH,CACA,QAAS,CACP,QAAWG,KAAQ,KAAK,WACtBA,EAAK,QAAQ,EAEf,KAAK,WAAa,CAAC,CACrB,CAKA,YAAYE,EAAiBH,EAAcN,EAAkBW,EAAO,CAClE,IAAMC,EAAa,KAAK,qBAAqBN,EAAcN,CAAgB,EAC3E,GAAIY,EAAY,CACdA,EAAW,QAAQ,UAAYD,EAC/B,MACF,CACA,IAAME,EAAWJ,EAAgB,EACjC,OAAOT,EAAiB,mBAAmBa,EAAS,YAAaA,EAAS,QAASA,EAAS,KAAK,CACnG,CAEA,oBAAoBC,EAAOd,EAAkB,CAC3C,IAAMe,EAAef,EAAiB,OAAOc,CAAK,EAClD,KAAK,gBAAgBC,EAAcf,CAAgB,CACrD,CAEA,UAAUK,EAAuBC,EAAcN,EAAkBW,EAAO,CACtE,IAAMJ,EAAOP,EAAiB,IAAIK,CAAqB,EACvD,OAAAL,EAAiB,KAAKO,EAAMD,CAAY,EACxCC,EAAK,QAAQ,UAAYI,EAClBJ,CACT,CAKA,gBAAgBA,EAAMP,EAAkB,CACtC,GAAI,KAAK,WAAW,OAAS,KAAK,cAChC,KAAK,WAAW,KAAKO,CAAI,MACpB,CACL,IAAMO,EAAQd,EAAiB,QAAQO,CAAI,EAKvCO,IAAU,GACZP,EAAK,QAAQ,EAEbP,EAAiB,OAAOc,CAAK,CAEjC,CACF,CAEA,qBAAqBA,EAAOd,EAAkB,CAC5C,IAAMY,EAAa,KAAK,WAAW,IAAI,EACvC,OAAIA,GACFZ,EAAiB,OAAOY,EAAYE,CAAK,EAEpCF,GAAc,IACvB,CACF,ECtLA,IAAMI,GAAM,CAAC,gBAAgB,EACvBC,GAAM,CAAC,GAAG,EACVC,GAAuC,IAAIC,EAAe,yBAAyB,EAGnFC,GAAN,KAAqC,CAMnC,YAAYC,EAAUC,EAAaC,EAAa,CAC9C,KAAK,qBAAuB,IAAIC,EAEhC,KAAK,oBAAsB,KAAK,qBAAqB,KAAKC,GAAqB,CAAC,EAEhF,KAAK,UAAY,KACjB,KAAK,UAAYJ,EACjB,KAAK,aAAeC,EACpB,KAAK,aAAeC,CACtB,CAKA,OAAOG,EAAU,CACf,KAAK,UAAYA,EACjB,KAAK,wBAAwB,EAC7B,KAAK,qBAAqB,CAC5B,CAEA,QAAS,CACP,KAAK,qBAAqB,SAAS,EACnC,KAAK,UAAY,IACnB,CAOA,wBAAwBL,EAAUC,EAAaC,EAAa,CACtDA,EAAcD,EAGlB,KAAK,UAAYD,EACjB,KAAK,aAAeC,EACpB,KAAK,aAAeC,EACpB,KAAK,wBAAwB,EAC7B,KAAK,qBAAqB,CAC5B,CAEA,mBAAoB,CAClB,KAAK,qBAAqB,CAC5B,CAEA,qBAAsB,CACpB,KAAK,wBAAwB,EAC7B,KAAK,qBAAqB,CAC5B,CAEA,mBAAoB,CAEpB,CAEA,yBAA0B,CAE1B,CAMA,cAAcI,EAAOC,EAAU,CACzB,KAAK,WACP,KAAK,UAAU,eAAeD,EAAQ,KAAK,UAAWC,CAAQ,CAElE,CAEA,yBAA0B,CACnB,KAAK,WAGV,KAAK,UAAU,oBAAoB,KAAK,UAAU,cAAc,EAAI,KAAK,SAAS,CACpF,CAEA,sBAAuB,CACrB,GAAI,CAAC,KAAK,UACR,OAEF,IAAMC,EAAgB,KAAK,UAAU,iBAAiB,EAChDC,EAAW,CACf,MAAOD,EAAc,MACrB,IAAKA,EAAc,GACrB,EACME,EAAe,KAAK,UAAU,gBAAgB,EAC9CC,EAAa,KAAK,UAAU,cAAc,EAC5CC,EAAe,KAAK,UAAU,oBAAoB,EAElDC,EAAoB,KAAK,UAAY,EAAID,EAAe,KAAK,UAAY,EAE7E,GAAIH,EAAS,IAAME,EAAY,CAE7B,IAAMG,EAAkB,KAAK,KAAKJ,EAAe,KAAK,SAAS,EACzDK,EAAkB,KAAK,IAAI,EAAG,KAAK,IAAIF,EAAmBF,EAAaG,CAAe,CAAC,EAGzFD,GAAqBE,IACvBF,EAAoBE,EACpBH,EAAeG,EAAkB,KAAK,UACtCN,EAAS,MAAQ,KAAK,MAAMI,CAAiB,GAE/CJ,EAAS,IAAM,KAAK,IAAI,EAAG,KAAK,IAAIE,EAAYF,EAAS,MAAQK,CAAe,CAAC,CACnF,CACA,IAAME,EAAcJ,EAAeH,EAAS,MAAQ,KAAK,UACzD,GAAIO,EAAc,KAAK,cAAgBP,EAAS,OAAS,EAAG,CAC1D,IAAMQ,EAAc,KAAK,MAAM,KAAK,aAAeD,GAAe,KAAK,SAAS,EAChFP,EAAS,MAAQ,KAAK,IAAI,EAAGA,EAAS,MAAQQ,CAAW,EACzDR,EAAS,IAAM,KAAK,IAAIE,EAAY,KAAK,KAAKE,GAAqBH,EAAe,KAAK,cAAgB,KAAK,SAAS,CAAC,CACxH,KAAO,CACL,IAAMQ,EAAYT,EAAS,IAAM,KAAK,WAAaG,EAAeF,GAClE,GAAIQ,EAAY,KAAK,cAAgBT,EAAS,KAAOE,EAAY,CAC/D,IAAMQ,EAAY,KAAK,MAAM,KAAK,aAAeD,GAAa,KAAK,SAAS,EACxEC,EAAY,IACdV,EAAS,IAAM,KAAK,IAAIE,EAAYF,EAAS,IAAMU,CAAS,EAC5DV,EAAS,MAAQ,KAAK,IAAI,EAAG,KAAK,MAAMI,EAAoB,KAAK,aAAe,KAAK,SAAS,CAAC,EAEnG,CACF,CACA,KAAK,UAAU,iBAAiBJ,CAAQ,EACxC,KAAK,UAAU,yBAAyB,KAAK,UAAYA,EAAS,KAAK,EACvE,KAAK,qBAAqB,KAAK,KAAK,MAAMI,CAAiB,CAAC,CAC9D,CACF,EAOA,SAASO,GAAuCC,EAAc,CAC5D,OAAOA,EAAa,eACtB,CAEA,IAAIC,IAA0C,IAAM,CAClD,IAAMC,EAAN,MAAMA,CAA0B,CAC9B,aAAc,CACZ,KAAK,UAAY,GACjB,KAAK,aAAe,IACpB,KAAK,aAAe,IAEpB,KAAK,gBAAkB,IAAIxB,GAA+B,KAAK,SAAU,KAAK,YAAa,KAAK,WAAW,CAC7G,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASyB,EAAO,CAClB,KAAK,UAAYC,EAAqBD,CAAK,CAC7C,CAKA,IAAI,aAAc,CAChB,OAAO,KAAK,YACd,CACA,IAAI,YAAYA,EAAO,CACrB,KAAK,aAAeC,EAAqBD,CAAK,CAChD,CAIA,IAAI,aAAc,CAChB,OAAO,KAAK,YACd,CACA,IAAI,YAAYA,EAAO,CACrB,KAAK,aAAeC,EAAqBD,CAAK,CAChD,CACA,aAAc,CACZ,KAAK,gBAAgB,wBAAwB,KAAK,SAAU,KAAK,YAAa,KAAK,WAAW,CAChG,CAuBF,EArBID,EAAK,UAAO,SAA2CG,EAAG,CACxD,OAAO,IAAKA,GAAKH,EACnB,EAGAA,EAAK,UAAyBI,EAAkB,CAC9C,KAAMJ,EACN,UAAW,CAAC,CAAC,8BAA+B,WAAY,EAAE,CAAC,EAC3D,OAAQ,CACN,SAAU,WACV,YAAa,cACb,YAAa,aACf,EACA,WAAY,GACZ,SAAU,CAAIK,EAAmB,CAAC,CAChC,QAAS/B,GACT,WAAYuB,GACZ,KAAM,CAACS,GAAW,IAAMN,CAAyB,CAAC,CACpD,CAAC,CAAC,EAAMO,EAAoB,CAC9B,CAAC,EAzDL,IAAMR,EAANC,EA4DA,OAAOD,CACT,GAAG,EAMGS,GAAsB,GAKxBC,GAAiC,IAAM,CACzC,IAAMC,EAAN,MAAMA,CAAiB,CACrB,YAAYC,EAASC,EAAWC,EAAU,CACxC,KAAK,QAAUF,EACf,KAAK,UAAYC,EAEjB,KAAK,UAAY,IAAIhC,EAErB,KAAK,oBAAsB,KAE3B,KAAK,eAAiB,EAKtB,KAAK,iBAAmB,IAAI,IAC5B,KAAK,UAAYiC,CACnB,CAMA,SAASC,EAAY,CACd,KAAK,iBAAiB,IAAIA,CAAU,GACvC,KAAK,iBAAiB,IAAIA,EAAYA,EAAW,gBAAgB,EAAE,UAAU,IAAM,KAAK,UAAU,KAAKA,CAAU,CAAC,CAAC,CAEvH,CAKA,WAAWA,EAAY,CACrB,IAAMC,EAAsB,KAAK,iBAAiB,IAAID,CAAU,EAC5DC,IACFA,EAAoB,YAAY,EAChC,KAAK,iBAAiB,OAAOD,CAAU,EAE3C,CAWA,SAASE,EAAgBR,GAAqB,CAC5C,OAAK,KAAK,UAAU,UAGb,IAAIS,EAAWC,GAAY,CAC3B,KAAK,qBACR,KAAK,mBAAmB,EAI1B,IAAMC,EAAeH,EAAgB,EAAI,KAAK,UAAU,KAAKI,GAAUJ,CAAa,CAAC,EAAE,UAAUE,CAAQ,EAAI,KAAK,UAAU,UAAUA,CAAQ,EAC9I,YAAK,iBACE,IAAM,CACXC,EAAa,YAAY,EACzB,KAAK,iBACA,KAAK,gBACR,KAAK,sBAAsB,CAE/B,CACF,CAAC,EAjBQE,EAAG,CAkBd,CACA,aAAc,CACZ,KAAK,sBAAsB,EAC3B,KAAK,iBAAiB,QAAQ,CAACC,EAAGC,IAAc,KAAK,WAAWA,CAAS,CAAC,EAC1E,KAAK,UAAU,SAAS,CAC1B,CAOA,iBAAiBC,EAAqBR,EAAe,CACnD,IAAMS,EAAY,KAAK,4BAA4BD,CAAmB,EACtE,OAAO,KAAK,SAASR,CAAa,EAAE,KAAKU,GAAOC,GACvC,CAACA,GAAUF,EAAU,QAAQE,CAAM,EAAI,EAC/C,CAAC,CACJ,CAEA,4BAA4BH,EAAqB,CAC/C,IAAMI,EAAsB,CAAC,EAC7B,YAAK,iBAAiB,QAAQ,CAACC,EAAef,IAAe,CACvD,KAAK,2BAA2BA,EAAYU,CAAmB,GACjEI,EAAoB,KAAKd,CAAU,CAEvC,CAAC,EACMc,CACT,CAEA,YAAa,CACX,OAAO,KAAK,UAAU,aAAe,MACvC,CAEA,2BAA2Bd,EAAYU,EAAqB,CAC1D,IAAIM,EAAUC,EAAcP,CAAmB,EAC3CQ,EAAoBlB,EAAW,cAAc,EAAE,cAGnD,EACE,IAAIgB,GAAWE,EACb,MAAO,SAEFF,EAAUA,EAAQ,eAC3B,MAAO,EACT,CAEA,oBAAqB,CACnB,KAAK,oBAAsB,KAAK,QAAQ,kBAAkB,IAAM,CAC9D,IAAMG,EAAS,KAAK,WAAW,EAC/B,OAAOC,GAAUD,EAAO,SAAU,QAAQ,EAAE,UAAU,IAAM,KAAK,UAAU,KAAK,CAAC,CACnF,CAAC,CACH,CAEA,uBAAwB,CAClB,KAAK,sBACP,KAAK,oBAAoB,YAAY,EACrC,KAAK,oBAAsB,KAE/B,CAaF,EAXIvB,EAAK,UAAO,SAAkCP,EAAG,CAC/C,OAAO,IAAKA,GAAKO,GAAqByB,EAAYC,CAAM,EAAMD,EAAYE,CAAQ,EAAMF,EAASG,EAAU,CAAC,CAAC,CAC/G,EAGA5B,EAAK,WAA0B6B,EAAmB,CAChD,MAAO7B,EACP,QAASA,EAAiB,UAC1B,WAAY,MACd,CAAC,EAzIL,IAAMD,EAANC,EA4IA,OAAOD,CACT,GAAG,EAUC+B,IAA8B,IAAM,CACtC,IAAMC,EAAN,MAAMA,CAAc,CAClB,YAAYC,EAAYC,EAAkBC,EAAQC,EAAK,CACrD,KAAK,WAAaH,EAClB,KAAK,iBAAmBC,EACxB,KAAK,OAASC,EACd,KAAK,IAAMC,EACX,KAAK,WAAa,IAAIjE,EACtB,KAAK,iBAAmB,IAAIqC,EAAWC,GAAY,KAAK,OAAO,kBAAkB,IAAMgB,GAAU,KAAK,WAAW,cAAe,QAAQ,EAAE,KAAKY,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU5B,CAAQ,CAAC,CAAC,CACjM,CACA,UAAW,CACT,KAAK,iBAAiB,SAAS,IAAI,CACrC,CACA,aAAc,CACZ,KAAK,iBAAiB,WAAW,IAAI,EACrC,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,CAC3B,CAEA,iBAAkB,CAChB,OAAO,KAAK,gBACd,CAEA,eAAgB,CACd,OAAO,KAAK,UACd,CASA,SAAS6B,EAAS,CAChB,IAAMC,EAAK,KAAK,WAAW,cACrBC,EAAQ,KAAK,KAAO,KAAK,IAAI,OAAS,MAExCF,EAAQ,MAAQ,OAClBA,EAAQ,KAAOE,EAAQF,EAAQ,IAAMA,EAAQ,OAE3CA,EAAQ,OAAS,OACnBA,EAAQ,MAAQE,EAAQF,EAAQ,MAAQA,EAAQ,KAG9CA,EAAQ,QAAU,OACpBA,EAAQ,IAAMC,EAAG,aAAeA,EAAG,aAAeD,EAAQ,QAGxDE,GAASC,EAAqB,GAAKC,EAAkB,QACnDJ,EAAQ,MAAQ,OAClBA,EAAQ,MAAQC,EAAG,YAAcA,EAAG,YAAcD,EAAQ,MAExDG,EAAqB,GAAKC,EAAkB,SAC9CJ,EAAQ,KAAOA,EAAQ,MACdG,EAAqB,GAAKC,EAAkB,UACrDJ,EAAQ,KAAOA,EAAQ,MAAQ,CAACA,EAAQ,MAAQA,EAAQ,QAGtDA,EAAQ,OAAS,OACnBA,EAAQ,KAAOC,EAAG,YAAcA,EAAG,YAAcD,EAAQ,OAG7D,KAAK,sBAAsBA,CAAO,CACpC,CACA,sBAAsBA,EAAS,CAC7B,IAAMC,EAAK,KAAK,WAAW,cACvBI,GAAuB,EACzBJ,EAAG,SAASD,CAAO,GAEfA,EAAQ,KAAO,OACjBC,EAAG,UAAYD,EAAQ,KAErBA,EAAQ,MAAQ,OAClBC,EAAG,WAAaD,EAAQ,MAG9B,CAUA,oBAAoBM,EAAM,CACxB,IAAMC,EAAO,OACPC,EAAQ,QACRP,EAAK,KAAK,WAAW,cAC3B,GAAIK,GAAQ,MACV,OAAOL,EAAG,UAEZ,GAAIK,GAAQ,SACV,OAAOL,EAAG,aAAeA,EAAG,aAAeA,EAAG,UAGhD,IAAMC,EAAQ,KAAK,KAAO,KAAK,IAAI,OAAS,MAM5C,OALII,GAAQ,QACVA,EAAOJ,EAAQM,EAAQD,EACdD,GAAQ,QACjBA,EAAOJ,EAAQK,EAAOC,GAEpBN,GAASC,EAAqB,GAAKC,EAAkB,SAGnDE,GAAQC,EACHN,EAAG,YAAcA,EAAG,YAAcA,EAAG,WAErCA,EAAG,WAEHC,GAASC,EAAqB,GAAKC,EAAkB,QAG1DE,GAAQC,EACHN,EAAG,WAAaA,EAAG,YAAcA,EAAG,YAEpC,CAACA,EAAG,WAKTK,GAAQC,EACHN,EAAG,WAEHA,EAAG,YAAcA,EAAG,YAAcA,EAAG,UAGlD,CAaF,EAXIP,EAAK,UAAO,SAA+BtC,EAAG,CAC5C,OAAO,IAAKA,GAAKsC,GAAkBe,EAAqBC,CAAU,EAAMD,EAAkB/C,CAAgB,EAAM+C,EAAqBpB,CAAM,EAAMoB,EAAqBE,EAAgB,CAAC,CAAC,CAC1L,EAGAjB,EAAK,UAAyBrC,EAAkB,CAC9C,KAAMqC,EACN,UAAW,CAAC,CAAC,GAAI,iBAAkB,EAAE,EAAG,CAAC,GAAI,gBAAiB,EAAE,CAAC,EACjE,WAAY,EACd,CAAC,EA3IL,IAAMD,EAANC,EA8IA,OAAOD,CACT,GAAG,EAMGmB,GAAsB,GAKxBC,IAA8B,IAAM,CACtC,IAAMC,EAAN,MAAMA,CAAc,CAClB,YAAYjD,EAAWgC,EAAQ/B,EAAU,CACvC,KAAK,UAAYD,EAEjB,KAAK,QAAU,IAAIhC,EAEnB,KAAK,gBAAkBkF,GAAS,CAC9B,KAAK,QAAQ,KAAKA,CAAK,CACzB,EACA,KAAK,UAAYjD,EACjB+B,EAAO,kBAAkB,IAAM,CAC7B,GAAIhC,EAAU,UAAW,CACvB,IAAMqB,EAAS,KAAK,WAAW,EAG/BA,EAAO,iBAAiB,SAAU,KAAK,eAAe,EACtDA,EAAO,iBAAiB,oBAAqB,KAAK,eAAe,CACnE,CAGA,KAAK,OAAO,EAAE,UAAU,IAAM,KAAK,cAAgB,IAAI,CACzD,CAAC,CACH,CACA,aAAc,CACZ,GAAI,KAAK,UAAU,UAAW,CAC5B,IAAMA,EAAS,KAAK,WAAW,EAC/BA,EAAO,oBAAoB,SAAU,KAAK,eAAe,EACzDA,EAAO,oBAAoB,oBAAqB,KAAK,eAAe,CACtE,CACA,KAAK,QAAQ,SAAS,CACxB,CAEA,iBAAkB,CACX,KAAK,eACR,KAAK,oBAAoB,EAE3B,IAAM8B,EAAS,CACb,MAAO,KAAK,cAAc,MAC1B,OAAQ,KAAK,cAAc,MAC7B,EAEA,OAAK,KAAK,UAAU,YAClB,KAAK,cAAgB,MAEhBA,CACT,CAEA,iBAAkB,CAUhB,IAAMC,EAAiB,KAAK,0BAA0B,EAChD,CACJ,MAAAC,EACA,OAAAC,CACF,EAAI,KAAK,gBAAgB,EACzB,MAAO,CACL,IAAKF,EAAe,IACpB,KAAMA,EAAe,KACrB,OAAQA,EAAe,IAAME,EAC7B,MAAOF,EAAe,KAAOC,EAC7B,OAAAC,EACA,MAAAD,CACF,CACF,CAEA,2BAA4B,CAG1B,GAAI,CAAC,KAAK,UAAU,UAClB,MAAO,CACL,IAAK,EACL,KAAM,CACR,EAQF,IAAMpD,EAAW,KAAK,UAChBoB,EAAS,KAAK,WAAW,EACzBkC,EAAkBtD,EAAS,gBAC3BuD,EAAeD,EAAgB,sBAAsB,EACrDE,EAAM,CAACD,EAAa,KAAOvD,EAAS,KAAK,WAAaoB,EAAO,SAAWkC,EAAgB,WAAa,EACrGG,EAAO,CAACF,EAAa,MAAQvD,EAAS,KAAK,YAAcoB,EAAO,SAAWkC,EAAgB,YAAc,EAC/G,MAAO,CACL,IAAAE,EACA,KAAAC,CACF,CACF,CAMA,OAAOC,EAAeZ,GAAqB,CACzC,OAAOY,EAAe,EAAI,KAAK,QAAQ,KAAKnD,GAAUmD,CAAY,CAAC,EAAI,KAAK,OAC9E,CAEA,YAAa,CACX,OAAO,KAAK,UAAU,aAAe,MACvC,CAEA,qBAAsB,CACpB,IAAMtC,EAAS,KAAK,WAAW,EAC/B,KAAK,cAAgB,KAAK,UAAU,UAAY,CAC9C,MAAOA,EAAO,WACd,OAAQA,EAAO,WACjB,EAAI,CACF,MAAO,EACP,OAAQ,CACV,CACF,CAaF,EAXI4B,EAAK,UAAO,SAA+B1D,EAAG,CAC5C,OAAO,IAAKA,GAAK0D,GAAkB1B,EAAYE,CAAQ,EAAMF,EAAYC,CAAM,EAAMD,EAASG,EAAU,CAAC,CAAC,CAC5G,EAGAuB,EAAK,WAA0BtB,EAAmB,CAChD,MAAOsB,EACP,QAASA,EAAc,UACvB,WAAY,MACd,CAAC,EAnIL,IAAMD,EAANC,EAsIA,OAAOD,CACT,GAAG,EAIGY,GAAkC,IAAIjG,EAAe,oBAAoB,EAI3EkG,IAAqC,IAAM,CAC7C,IAAMC,EAAN,MAAMA,UAA6BlC,EAAc,CAC/C,YAAYE,EAAYC,EAAkBC,EAAQC,EAAK,CACrD,MAAMH,EAAYC,EAAkBC,EAAQC,CAAG,CACjD,CAMA,oBAAoB8B,EAAa,CAC/B,IAAMC,EAAa,KAAK,WAAW,cACnC,OAAOD,IAAgB,aAAeC,EAAW,YAAcA,EAAW,YAC5E,CAYF,EAVIF,EAAK,UAAO,SAAsCvE,EAAG,CACnD,OAAO,IAAKA,GAAKuE,GAAyBlB,EAAqBC,CAAU,EAAMD,EAAkB/C,CAAgB,EAAM+C,EAAqBpB,CAAM,EAAMoB,EAAqBE,EAAgB,CAAC,CAAC,CACjM,EAGAgB,EAAK,UAAyBtE,EAAkB,CAC9C,KAAMsE,EACN,SAAU,CAAIG,EAA0B,CAC1C,CAAC,EAtBL,IAAMJ,EAANC,EAyBA,OAAOD,CACT,GAAG,EAMH,SAASK,GAAYC,EAAIC,EAAI,CAC3B,OAAOD,EAAG,OAASC,EAAG,OAASD,EAAG,KAAOC,EAAG,GAC9C,CAMA,IAAMC,GAAmB,OAAO,sBAA0B,IAAcC,GAA0BC,GAE9FC,IAAyC,IAAM,CACjD,IAAMC,EAAN,MAAMA,UAAiCZ,EAAqB,CAE1D,IAAI,aAAc,CAChB,OAAO,KAAK,YACd,CACA,IAAI,YAAYE,EAAa,CACvB,KAAK,eAAiBA,IACxB,KAAK,aAAeA,EACpB,KAAK,qBAAqB,EAE9B,CACA,YAAYjC,EAAY4C,EAAoB1C,EAAQ2C,EAAiB1C,EAAKF,EAAkB6C,EAAe1E,EAAY,CACrH,MAAM4B,EAAYC,EAAkBC,EAAQC,CAAG,EAC/C,KAAK,WAAaH,EAClB,KAAK,mBAAqB4C,EAC1B,KAAK,gBAAkBC,EACvB,KAAK,WAAazE,EAClB,KAAK,UAAY2E,EAAOpD,CAAQ,EAEhC,KAAK,iBAAmB,IAAIzD,EAE5B,KAAK,sBAAwB,IAAIA,EACjC,KAAK,aAAe,WAKpB,KAAK,WAAa,GAMlB,KAAK,oBAAsB,IAAIqC,EAAWC,GAAY,KAAK,gBAAgB,oBAAoB,UAAUnC,GAAS,QAAQ,QAAQ,EAAE,KAAK,IAAM,KAAK,OAAO,IAAI,IAAMmC,EAAS,KAAKnC,CAAK,CAAC,CAAC,CAAC,CAAC,EAE5L,KAAK,oBAAsB,KAAK,sBAIhC,KAAK,kBAAoB,EAEzB,KAAK,mBAAqB,GAE1B,KAAK,oBAAsB,GAE3B,KAAK,eAAiB,CACpB,MAAO,EACP,IAAK,CACP,EAEA,KAAK,YAAc,EAEnB,KAAK,cAAgB,EAErB,KAAK,uBAAyB,EAK9B,KAAK,mCAAqC,GAE1C,KAAK,0BAA4B,GAEjC,KAAK,yBAA2B,CAAC,EAEjC,KAAK,iBAAmB2G,EAAa,MACrC,KAAK,UAAYD,EAAOE,EAAQ,EAChC,KAAK,aAAe,GAIpB,KAAK,iBAAmBH,EAAc,OAAO,EAAE,UAAU,IAAM,CAC7D,KAAK,kBAAkB,CACzB,CAAC,EACI,KAAK,aAER,KAAK,WAAW,cAAc,UAAU,IAAI,wBAAwB,EACpE,KAAK,WAAa,KAEtB,CACA,UAAW,CAEJ,KAAK,UAAU,YAGhB,KAAK,aAAe,MACtB,MAAM,SAAS,EAMjB,KAAK,OAAO,kBAAkB,IAAM,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAC/D,KAAK,qBAAqB,EAC1B,KAAK,gBAAgB,OAAO,IAAI,EAChC,KAAK,WAAW,gBAAgB,EAAE,KAElCI,EAAU,IAAI,EAIdxE,GAAU,EAAG6D,EAAgB,EAI7BnC,EAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,KAAK,gBAAgB,kBAAkB,CAAC,EACpF,KAAK,2BAA2B,CAClC,CAAC,CAAC,EACJ,CACA,aAAc,CACZ,KAAK,OAAO,EACZ,KAAK,gBAAgB,OAAO,EAE5B,KAAK,sBAAsB,SAAS,EACpC,KAAK,iBAAiB,SAAS,EAC/B,KAAK,iBAAiB,YAAY,EAClC,KAAK,aAAe,GACpB,MAAM,YAAY,CACpB,CAEA,OAAO+C,EAAO,CACR,KAAK,OAMT,KAAK,OAAO,kBAAkB,IAAM,CAClC,KAAK,OAASA,EACd,KAAK,OAAO,WAAW,KAAK/C,EAAU,KAAK,gBAAgB,CAAC,EAAE,UAAUgD,GAAQ,CAC9E,IAAMC,EAAYD,EAAK,OACnBC,IAAc,KAAK,cACrB,KAAK,YAAcA,EACnB,KAAK,gBAAgB,oBAAoB,GAE3C,KAAK,mBAAmB,CAC1B,CAAC,CACH,CAAC,CACH,CAEA,QAAS,CACP,KAAK,OAAS,KACd,KAAK,iBAAiB,KAAK,CAC7B,CAEA,eAAgB,CACd,OAAO,KAAK,WACd,CAEA,iBAAkB,CAChB,OAAO,KAAK,aACd,CAMA,kBAAmB,CACjB,OAAO,KAAK,cACd,CACA,0CAA0C1C,EAAM,CAC9C,OAAO,KAAK,cAAc,EAAE,cAAc,sBAAsB,EAAEA,CAAI,CACxE,CAKA,oBAAoB2C,EAAM,CACpB,KAAK,oBAAsBA,IAC7B,KAAK,kBAAoBA,EACzB,KAAK,qBAAqB,EAC1B,KAAK,2BAA2B,EAEpC,CAEA,iBAAiBC,EAAO,CACjBnB,GAAY,KAAK,eAAgBmB,CAAK,IACrC,KAAK,aACPA,EAAQ,CACN,MAAO,EACP,IAAK,KAAK,IAAI,KAAK,eAAe,IAAKA,EAAM,GAAG,CAClD,GAEF,KAAK,sBAAsB,KAAK,KAAK,eAAiBA,CAAK,EAC3D,KAAK,2BAA2B,IAAM,KAAK,gBAAgB,kBAAkB,CAAC,EAElF,CAIA,iCAAkC,CAChC,OAAO,KAAK,mCAAqC,KAAO,KAAK,sBAC/D,CAKA,yBAAyBC,EAAQC,EAAK,WAAY,CAEhDD,EAAS,KAAK,YAAcC,IAAO,WAAa,EAAID,EAGpD,IAAMjD,EAAQ,KAAK,KAAO,KAAK,IAAI,OAAS,MACtCmD,EAAe,KAAK,aAAe,aACnCC,EAAOD,EAAe,IAAM,IAE9BE,EAAY,YAAYD,CAAI,IAAI,QADdD,GAAgBnD,EAAQ,GAAK,GACQiD,CAAM,CAAC,MAClE,KAAK,uBAAyBA,EAC1BC,IAAO,WACTG,GAAa,aAAaD,CAAI,UAI9B,KAAK,mCAAqC,IAExC,KAAK,2BAA6BC,IAGpC,KAAK,0BAA4BA,EACjC,KAAK,2BAA2B,IAAM,CAChC,KAAK,oCACP,KAAK,wBAA0B,KAAK,2BAA2B,EAC/D,KAAK,mCAAqC,GAC1C,KAAK,yBAAyB,KAAK,sBAAsB,GAEzD,KAAK,gBAAgB,wBAAwB,CAEjD,CAAC,EAEL,CAQA,eAAeJ,EAAQlH,EAAW,OAAQ,CACxC,IAAM+D,EAAU,CACd,SAAA/D,CACF,EACI,KAAK,cAAgB,aACvB+D,EAAQ,MAAQmD,EAEhBnD,EAAQ,IAAMmD,EAEhB,KAAK,WAAW,SAASnD,CAAO,CAClC,CAMA,cAAchE,EAAOC,EAAW,OAAQ,CACtC,KAAK,gBAAgB,cAAcD,EAAOC,CAAQ,CACpD,CAMA,oBAAoBqE,EAAM,CAExB,IAAIkD,EACJ,OAAI,KAAK,YAAc,KACrBA,EAAsBC,GAAS,MAAM,oBAAoBA,CAAK,EAE9DD,EAAsBC,GAAS,KAAK,WAAW,oBAAoBA,CAAK,EAEnE,KAAK,IAAI,EAAGD,EAAoBlD,IAAS,KAAK,cAAgB,aAAe,QAAU,MAAM,EAAI,KAAK,sBAAsB,CAAC,CACtI,CAKA,sBAAsBA,EAAM,CAC1B,IAAIoD,EACEnD,EAAO,OACPC,EAAQ,QACRN,EAAQ,KAAK,KAAK,OAAS,MAC7BI,GAAQ,QACVoD,EAAWxD,EAAQM,EAAQD,EAClBD,GAAQ,MACjBoD,EAAWxD,EAAQK,EAAOC,EACjBF,EACToD,EAAWpD,EAEXoD,EAAW,KAAK,cAAgB,aAAe,OAAS,MAE1D,IAAMC,EAAqB,KAAK,WAAW,0CAA0CD,CAAQ,EAE7F,OAD2B,KAAK,WAAW,cAAc,sBAAsB,EAAEA,CAAQ,EAC7DC,CAC9B,CAEA,4BAA6B,CAC3B,IAAMC,EAAY,KAAK,gBAAgB,cACvC,OAAO,KAAK,cAAgB,aAAeA,EAAU,YAAcA,EAAU,YAC/E,CAKA,iBAAiBV,EAAO,CACtB,OAAK,KAAK,OAGH,KAAK,OAAO,iBAAiBA,EAAO,KAAK,WAAW,EAFlD,CAGX,CAEA,mBAAoB,CAElB,KAAK,qBAAqB,EAC1B,KAAK,gBAAgB,oBAAoB,CAC3C,CAEA,sBAAuB,CACrB,KAAK,cAAgB,KAAK,WAAW,oBAAoB,KAAK,WAAW,CAC3E,CAEA,2BAA2BW,EAAU,CAC/BA,GACF,KAAK,yBAAyB,KAAKA,CAAQ,EAIxC,KAAK,4BACR,KAAK,0BAA4B,GACjC,KAAK,OAAO,kBAAkB,IAAM,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAC/D,KAAK,mBAAmB,CAC1B,CAAC,CAAC,EAEN,CAEA,oBAAqB,CACf,KAAK,cAGT,KAAK,OAAO,IAAI,IAAM,CAIpB,KAAK,mBAAmB,aAAa,EAKrC,KAAK,gBAAgB,cAAc,MAAM,UAAY,KAAK,0BAC1DC,GAAgB,IAAM,CACpB,KAAK,0BAA4B,GACjC,IAAMC,EAA0B,KAAK,yBACrC,KAAK,yBAA2B,CAAC,EACjC,QAAWC,KAAMD,EACfC,EAAG,CAEP,EAAG,CACD,SAAU,KAAK,SACjB,CAAC,CACH,CAAC,CACH,CAEA,sBAAuB,CACrB,KAAK,oBAAsB,KAAK,cAAgB,aAAe,GAAK,GAAG,KAAK,iBAAiB,KAC7F,KAAK,mBAAqB,KAAK,cAAgB,aAAe,GAAG,KAAK,iBAAiB,KAAO,EAChG,CA6DF,EA3DI1B,EAAK,UAAO,SAA0ClF,EAAG,CACvD,OAAO,IAAKA,GAAKkF,GAA6B7B,EAAqBC,CAAU,EAAMD,EAAqBwD,CAAiB,EAAMxD,EAAqBpB,CAAM,EAAMoB,EAAkBlF,GAAyB,CAAC,EAAMkF,EAAqBE,EAAgB,CAAC,EAAMF,EAAkB/C,CAAgB,EAAM+C,EAAkBI,EAAa,EAAMJ,EAAkBgB,GAAoB,CAAC,CAAC,CACrX,EAGAa,EAAK,UAAyB4B,GAAkB,CAC9C,KAAM5B,EACN,UAAW,CAAC,CAAC,6BAA6B,CAAC,EAC3C,UAAW,SAAwC6B,EAAIC,EAAK,CAI1D,GAHID,EAAK,GACJE,GAAYhJ,GAAK,CAAC,EAEnB8I,EAAK,EAAG,CACV,IAAIG,EACDC,GAAeD,EAAQE,GAAY,CAAC,IAAMJ,EAAI,gBAAkBE,EAAG,MACxE,CACF,EACA,UAAW,CAAC,EAAG,6BAA6B,EAC5C,SAAU,EACV,aAAc,SAA+CH,EAAIC,EAAK,CAChED,EAAK,GACJM,EAAY,4CAA6CL,EAAI,cAAgB,YAAY,EAAE,0CAA2CA,EAAI,cAAgB,YAAY,CAE7K,EACA,OAAQ,CACN,YAAa,cACb,WAAY,CAAC,EAAG,aAAc,aAAcM,CAAgB,CAC9D,EACA,QAAS,CACP,oBAAqB,qBACvB,EACA,WAAY,GACZ,SAAU,CAAIpH,EAAmB,CAAC,CAChC,QAASmC,GACT,WAAY,CAACkF,EAAmB5I,IAAa4I,GAAqB5I,EAClE,KAAM,CAAC,CAAC,IAAI6I,GAAY,IAAIC,GAAOpD,EAAkB,CAAC,EAAGa,CAAwB,CACnF,CAAC,CAAC,EAAMwC,EAA6BhD,GAA+BiD,EAAmB,EACvF,mBAAoBzJ,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,iBAAkB,EAAE,EAAG,CAAC,EAAG,oCAAoC,EAAG,CAAC,EAAG,2BAA2B,CAAC,EAC5G,SAAU,SAA2C6I,EAAIC,EAAK,CACxDD,EAAK,IACJa,GAAgB,EAChBC,GAAe,EAAG,MAAO,EAAG,CAAC,EAC7BC,GAAa,CAAC,EACdC,GAAa,EACbC,GAAU,EAAG,MAAO,CAAC,GAEtBjB,EAAK,IACJkB,GAAU,CAAC,EACXC,GAAY,QAASlB,EAAI,kBAAkB,EAAE,SAAUA,EAAI,mBAAmB,EAErF,EACA,OAAQ,CAAC,srDAAsrD,EAC/rD,cAAe,EACf,gBAAiB,CACnB,CAAC,EAtaL,IAAM/B,EAANC,EAyaA,OAAOD,CACT,GAAG,EAMH,SAASkD,GAAU3D,EAAa4D,EAAWC,EAAM,CAC/C,IAAMxF,EAAKwF,EACX,GAAI,CAACxF,EAAG,sBACN,MAAO,GAET,IAAMyF,EAAOzF,EAAG,sBAAsB,EACtC,OAAI2B,IAAgB,aACX4D,IAAc,QAAUE,EAAK,KAAOA,EAAK,MAE3CF,IAAc,QAAUE,EAAK,IAAMA,EAAK,MACjD,CAKA,IAAIC,IAAgC,IAAM,CACxC,IAAMC,EAAN,MAAMA,CAAgB,CAEpB,IAAI,iBAAkB,CACpB,OAAO,KAAK,gBACd,CACA,IAAI,gBAAgB1I,EAAO,CACzB,KAAK,iBAAmBA,EACpB2I,GAAa3I,CAAK,EACpB,KAAK,mBAAmB,KAAKA,CAAK,EAGlC,KAAK,mBAAmB,KAAK,IAAI4I,GAAgBC,GAAa7I,CAAK,EAAIA,EAAQ,MAAM,KAAKA,GAAS,CAAC,CAAC,CAAC,CAAC,CAE3G,CAKA,IAAI,sBAAuB,CACzB,OAAO,KAAK,qBACd,CACA,IAAI,qBAAqB8G,EAAI,CAC3B,KAAK,aAAe,GACpB,KAAK,sBAAwBA,EAAK,CAAChI,EAAOgK,IAAShC,EAAGhI,GAAS,KAAK,eAAiB,KAAK,eAAe,MAAQ,GAAIgK,CAAI,EAAI,MAC/H,CAEA,IAAI,sBAAsB9I,EAAO,CAC3BA,IACF,KAAK,aAAe,GACpB,KAAK,UAAYA,EAErB,CAKA,IAAI,gCAAiC,CACnC,OAAO,KAAK,cAAc,aAC5B,CACA,IAAI,+BAA+B+F,EAAM,CACvC,KAAK,cAAc,cAAgB9F,EAAqB8F,CAAI,CAC9D,CACA,YACAgD,EACAC,EACAC,EACAC,EACAC,EAAWxG,EAAQ,CACjB,KAAK,kBAAoBoG,EACzB,KAAK,UAAYC,EACjB,KAAK,SAAWC,EAChB,KAAK,cAAgBC,EACrB,KAAK,UAAYC,EAEjB,KAAK,WAAa,IAAIxK,EAEtB,KAAK,mBAAqB,IAAIA,EAE9B,KAAK,WAAa,KAAK,mBAAmB,KAE1CgH,EAAU,IAAI,EAEdyD,GAAS,EAITC,GAAU,CAAC,CAACC,EAAMC,CAAG,IAAM,KAAK,kBAAkBD,EAAMC,CAAG,CAAC,EAE5DC,GAAY,CAAC,CAAC,EAEd,KAAK,QAAU,KAEf,KAAK,aAAe,GACpB,KAAK,WAAa,IAAI7K,EACtB,KAAK,WAAW,UAAUkH,GAAQ,CAChC,KAAK,MAAQA,EACb,KAAK,sBAAsB,CAC7B,CAAC,EACD,KAAK,UAAU,oBAAoB,KAAKhD,EAAU,KAAK,UAAU,CAAC,EAAE,UAAUmD,GAAS,CACrF,KAAK,eAAiBA,EAClB,KAAK,WAAW,UAAU,QAC5BrD,EAAO,IAAI,IAAM,KAAK,WAAW,KAAK,KAAK,cAAc,CAAC,EAE5D,KAAK,sBAAsB,CAC7B,CAAC,EACD,KAAK,UAAU,OAAO,IAAI,CAC5B,CAMA,iBAAiBqD,EAAOtB,EAAa,CACnC,GAAIsB,EAAM,OAASA,EAAM,IACvB,MAAO,GAEJA,EAAM,MAAQ,KAAK,eAAe,OAASA,EAAM,IAAM,KAAK,eAAe,IAIhF,IAAMyD,EAAqBzD,EAAM,MAAQ,KAAK,eAAe,MAEvD0D,EAAW1D,EAAM,IAAMA,EAAM,MAG/B2D,EACAC,EAEJ,QAASC,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CACjC,IAAMC,EAAO,KAAK,kBAAkB,IAAID,EAAIJ,CAAkB,EAC9D,GAAIK,GAAQA,EAAK,UAAU,OAAQ,CACjCH,EAAYC,EAAWE,EAAK,UAAU,CAAC,EACvC,KACF,CACF,CAEA,QAASD,EAAIH,EAAW,EAAGG,EAAI,GAAIA,IAAK,CACtC,IAAMC,EAAO,KAAK,kBAAkB,IAAID,EAAIJ,CAAkB,EAC9D,GAAIK,GAAQA,EAAK,UAAU,OAAQ,CACjCF,EAAWE,EAAK,UAAUA,EAAK,UAAU,OAAS,CAAC,EACnD,KACF,CACF,CACA,OAAOH,GAAaC,EAAWvB,GAAU3D,EAAa,MAAOkF,CAAQ,EAAIvB,GAAU3D,EAAa,QAASiF,CAAS,EAAI,CACxH,CACA,WAAY,CACV,GAAI,KAAK,SAAW,KAAK,aAAc,CAIrC,IAAMI,EAAU,KAAK,QAAQ,KAAK,KAAK,cAAc,EAChDA,EAGH,KAAK,cAAcA,CAAO,EAF1B,KAAK,eAAe,EAItB,KAAK,aAAe,EACtB,CACF,CACA,aAAc,CACZ,KAAK,UAAU,OAAO,EACtB,KAAK,mBAAmB,KAAK,MAAS,EACtC,KAAK,mBAAmB,SAAS,EACjC,KAAK,WAAW,SAAS,EACzB,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,EACzB,KAAK,cAAc,OAAO,CAC5B,CAEA,uBAAwB,CACjB,KAAK,iBAGV,KAAK,eAAiB,KAAK,MAAM,MAAM,KAAK,eAAe,MAAO,KAAK,eAAe,GAAG,EACpF,KAAK,UAGR,KAAK,QAAU,KAAK,SAAS,KAAK,KAAK,cAAc,EAAE,OAAO,CAACjL,EAAOgK,IAC7D,KAAK,qBAAuB,KAAK,qBAAqBhK,EAAOgK,CAAI,EAAIA,CAC7E,GAEH,KAAK,aAAe,GACtB,CAEA,kBAAkBkB,EAAOC,EAAO,CAC9B,OAAID,GACFA,EAAM,WAAW,IAAI,EAEvB,KAAK,aAAe,GACbC,EAAQA,EAAM,QAAQ,IAAI,EAAI7I,EAAG,CAC1C,CAEA,gBAAiB,CACf,IAAM8I,EAAQ,KAAK,MAAM,OACrB,EAAI,KAAK,kBAAkB,OAC/B,KAAO,KAAK,CACV,IAAMJ,EAAO,KAAK,kBAAkB,IAAI,CAAC,EACzCA,EAAK,QAAQ,MAAQ,KAAK,eAAe,MAAQ,EACjDA,EAAK,QAAQ,MAAQI,EACrB,KAAK,iCAAiCJ,EAAK,OAAO,EAClDA,EAAK,cAAc,CACrB,CACF,CAEA,cAAcC,EAAS,CACrB,KAAK,cAAc,aAAaA,EAAS,KAAK,kBAAmB,CAACI,EAAQC,EAAwBC,IAAiB,KAAK,qBAAqBF,EAAQE,CAAY,EAAGF,GAAUA,EAAO,IAAI,EAEzLJ,EAAQ,sBAAsBI,GAAU,CACtC,IAAML,EAAO,KAAK,kBAAkB,IAAIK,EAAO,YAAY,EAC3DL,EAAK,QAAQ,UAAYK,EAAO,IAClC,CAAC,EAED,IAAMD,EAAQ,KAAK,MAAM,OACrBL,EAAI,KAAK,kBAAkB,OAC/B,KAAOA,KAAK,CACV,IAAMC,EAAO,KAAK,kBAAkB,IAAID,CAAC,EACzCC,EAAK,QAAQ,MAAQ,KAAK,eAAe,MAAQD,EACjDC,EAAK,QAAQ,MAAQI,EACrB,KAAK,iCAAiCJ,EAAK,OAAO,CACpD,CACF,CAEA,iCAAiCQ,EAAS,CACxCA,EAAQ,MAAQA,EAAQ,QAAU,EAClCA,EAAQ,KAAOA,EAAQ,QAAUA,EAAQ,MAAQ,EACjDA,EAAQ,KAAOA,EAAQ,MAAQ,IAAM,EACrCA,EAAQ,IAAM,CAACA,EAAQ,IACzB,CACA,qBAAqBH,EAAQrL,EAAO,CAKlC,MAAO,CACL,YAAa,KAAK,UAClB,QAAS,CACP,UAAWqL,EAAO,KAGlB,gBAAiB,KAAK,iBACtB,MAAO,GACP,MAAO,GACP,MAAO,GACP,KAAM,GACN,IAAK,GACL,KAAM,EACR,EACA,MAAArL,CACF,CACF,CAuBF,EArBI4J,EAAK,UAAO,SAAiCxI,EAAG,CAC9C,OAAO,IAAKA,GAAKwI,GAAoBnF,EAAqBgH,EAAgB,EAAMhH,EAAqBiH,EAAW,EAAMjH,EAAqBkH,EAAe,EAAMlH,EAAkBmH,EAAuB,EAAMnH,EAAkB4B,GAA0B,CAAC,EAAM5B,EAAqBpB,CAAM,CAAC,CAChS,EAGAuG,EAAK,UAAyBvI,EAAkB,CAC9C,KAAMuI,EACN,UAAW,CAAC,CAAC,GAAI,gBAAiB,GAAI,kBAAmB,EAAE,CAAC,EAC5D,OAAQ,CACN,gBAAiB,kBACjB,qBAAsB,uBACtB,sBAAuB,wBACvB,+BAAgC,gCAClC,EACA,WAAY,GACZ,SAAU,CAAItI,EAAmB,CAAC,CAChC,QAASsK,GACT,SAAUC,EACZ,CAAC,CAAC,CAAC,CACL,CAAC,EA1PL,IAAMlC,EAANC,EA6PA,OAAOD,CACT,GAAG,EA0EH,IAAImC,IAAoC,IAAM,CAC5C,IAAMC,EAAN,MAAMA,CAAoB,CAc1B,EAZIA,EAAK,UAAO,SAAqCC,EAAG,CAClD,OAAO,IAAKA,GAAKD,EACnB,EAGAA,EAAK,UAAyBE,EAAiB,CAC7C,KAAMF,CACR,CAAC,EAGDA,EAAK,UAAyBG,EAAiB,CAAC,CAAC,EAZrD,IAAMJ,EAANC,EAeA,OAAOD,CACT,GAAG,EAOCK,IAAgC,IAAM,CACxC,IAAMC,EAAN,MAAMA,CAAgB,CAgBtB,EAdIA,EAAK,UAAO,SAAiCJ,EAAG,CAC9C,OAAO,IAAKA,GAAKI,EACnB,EAGAA,EAAK,UAAyBH,EAAiB,CAC7C,KAAMG,CACR,CAAC,EAGDA,EAAK,UAAyBF,EAAiB,CAC7C,QAAS,CAACG,GAAYP,GAAqBO,GAAYP,EAAmB,CAC5E,CAAC,EAdL,IAAMK,EAANC,EAiBA,OAAOD,CACT,GAAG,EClEH,SAASG,GAAgCC,EAAO,CAM9C,OAAOA,EAAM,UAAY,GAAKA,EAAM,SAAW,CACjD,CAEA,SAASC,GAAiCD,EAAO,CAC/C,IAAME,EAAQF,EAAM,SAAWA,EAAM,QAAQ,CAAC,GAAKA,EAAM,gBAAkBA,EAAM,eAAe,CAAC,EAKjG,MAAO,CAAC,CAACE,GAASA,EAAM,aAAe,KAAOA,EAAM,SAAW,MAAQA,EAAM,UAAY,KAAOA,EAAM,SAAW,MAAQA,EAAM,UAAY,EAC7I,CC18CA,SAASC,GAAcC,EAAM,CAC3B,IAAMC,EAAQD,EAAK,UAAU,EAAI,EAC3BE,EAAoBD,EAAM,iBAAiB,MAAM,EACjDE,EAAWH,EAAK,SAAS,YAAY,EAE3CC,EAAM,gBAAgB,IAAI,EAC1B,QAAS,EAAI,EAAG,EAAIC,EAAkB,OAAQ,IAC5CA,EAAkB,CAAC,EAAE,gBAAgB,IAAI,EAE3C,OAAIC,IAAa,SACfC,GAAmBJ,EAAMC,CAAK,GACrBE,IAAa,SAAWA,IAAa,UAAYA,IAAa,aACvEE,GAAkBL,EAAMC,CAAK,EAE/BK,GAAa,SAAUN,EAAMC,EAAOG,EAAkB,EACtDE,GAAa,0BAA2BN,EAAMC,EAAOI,EAAiB,EAC/DJ,CACT,CAEA,SAASK,GAAaC,EAAUP,EAAMC,EAAOO,EAAU,CACrD,IAAMC,EAAqBT,EAAK,iBAAiBO,CAAQ,EACzD,GAAIE,EAAmB,OAAQ,CAC7B,IAAMC,EAAgBT,EAAM,iBAAiBM,CAAQ,EACrD,QAASI,EAAI,EAAGA,EAAIF,EAAmB,OAAQE,IAC7CH,EAASC,EAAmBE,CAAC,EAAGD,EAAcC,CAAC,CAAC,CAEpD,CACF,CAEA,IAAIC,GAAgB,EAEpB,SAASP,GAAkBQ,EAAQZ,EAAO,CAEpCA,EAAM,OAAS,SACjBA,EAAM,MAAQY,EAAO,OAKnBZ,EAAM,OAAS,SAAWA,EAAM,OAClCA,EAAM,KAAO,aAAaA,EAAM,IAAI,IAAIW,IAAe,GAE3D,CAEA,SAASR,GAAmBS,EAAQZ,EAAO,CACzC,IAAMa,EAAUb,EAAM,WAAW,IAAI,EACrC,GAAIa,EAGF,GAAI,CACFA,EAAQ,UAAUD,EAAQ,EAAG,CAAC,CAChC,MAAQ,CAAC,CAEb,CAGA,SAASE,GAAqBC,EAAS,CACrC,IAAMC,EAAOD,EAAQ,sBAAsB,EAK3C,MAAO,CACL,IAAKC,EAAK,IACV,MAAOA,EAAK,MACZ,OAAQA,EAAK,OACb,KAAMA,EAAK,KACX,MAAOA,EAAK,MACZ,OAAQA,EAAK,OACb,EAAGA,EAAK,EACR,EAAGA,EAAK,CACV,CACF,CAOA,SAASC,GAAmBC,EAAYC,EAAGC,EAAG,CAC5C,GAAM,CACJ,IAAAC,EACA,OAAAC,EACA,KAAAC,EACA,MAAAC,CACF,EAAIN,EACJ,OAAOE,GAAKC,GAAOD,GAAKE,GAAUH,GAAKI,GAAQJ,GAAKK,CACtD,CAOA,SAASC,GAAcC,EAASL,EAAKE,EAAM,CACzCG,EAAQ,KAAOL,EACfK,EAAQ,OAASA,EAAQ,IAAMA,EAAQ,OACvCA,EAAQ,MAAQH,EAChBG,EAAQ,MAAQA,EAAQ,KAAOA,EAAQ,KACzC,CAQA,SAASC,GAAqBX,EAAMY,EAAWC,EAAUC,EAAU,CACjE,GAAM,CACJ,IAAAT,EACA,MAAAG,EACA,OAAAF,EACA,KAAAC,EACA,MAAAQ,EACA,OAAAC,CACF,EAAIhB,EACEiB,EAAaF,EAAQH,EACrBM,EAAaF,EAASJ,EAC5B,OAAOE,EAAWT,EAAMa,GAAcJ,EAAWR,EAASY,GAAcL,EAAWN,EAAOU,GAAcJ,EAAWL,EAAQS,CAC7H,CAGA,IAAME,GAAN,KAA4B,CAC1B,YAAYC,EAAW,CACrB,KAAK,UAAYA,EAEjB,KAAK,UAAY,IAAI,GACvB,CAEA,OAAQ,CACN,KAAK,UAAU,MAAM,CACvB,CAEA,MAAMC,EAAU,CACd,KAAK,MAAM,EACX,KAAK,UAAU,IAAI,KAAK,UAAW,CACjC,eAAgB,KAAK,0BAA0B,CACjD,CAAC,EACDA,EAAS,QAAQtB,GAAW,CAC1B,KAAK,UAAU,IAAIA,EAAS,CAC1B,eAAgB,CACd,IAAKA,EAAQ,UACb,KAAMA,EAAQ,UAChB,EACA,WAAYD,GAAqBC,CAAO,CAC1C,CAAC,CACH,CAAC,CACH,CAEA,aAAauB,EAAO,CAClB,IAAMC,EAASC,EAAgBF,CAAK,EAC9BG,EAAiB,KAAK,UAAU,IAAIF,CAAM,EAChD,GAAI,CAACE,EACH,OAAO,KAET,IAAMC,EAAiBD,EAAe,eAClCE,EACAC,EACJ,GAAIL,IAAW,KAAK,UAAW,CAC7B,IAAMM,EAAyB,KAAK,0BAA0B,EAC9DF,EAASE,EAAuB,IAChCD,EAAUC,EAAuB,IACnC,MACEF,EAASJ,EAAO,UAChBK,EAAUL,EAAO,WAEnB,IAAMO,EAAgBJ,EAAe,IAAMC,EACrCI,EAAiBL,EAAe,KAAOE,EAG7C,YAAK,UAAU,QAAQ,CAACI,EAAUjD,IAAS,CACrCiD,EAAS,YAAcT,IAAWxC,GAAQwC,EAAO,SAASxC,CAAI,GAChE0B,GAAcuB,EAAS,WAAYF,EAAeC,CAAc,CAEpE,CAAC,EACDL,EAAe,IAAMC,EACrBD,EAAe,KAAOE,EACf,CACL,IAAKE,EACL,KAAMC,CACR,CACF,CAOA,2BAA4B,CAC1B,MAAO,CACL,IAAK,OAAO,QACZ,KAAM,OAAO,OACf,CACF,CACF,EAMA,SAASE,GAAYC,EAASd,EAAW,CACvC,IAAMe,EAAYD,EAAQ,UAC1B,GAAIC,EAAU,SAAW,GAAKA,EAAU,CAAC,EAAE,WAAaf,EAAU,aAChE,OAAOe,EAAU,CAAC,EAEpB,IAAMC,EAAUhB,EAAU,cAAc,KAAK,EAC7C,OAAAe,EAAU,QAAQpD,GAAQqD,EAAQ,YAAYrD,CAAI,CAAC,EAC5CqD,CACT,CAOA,SAASC,GAAaC,EAAM1C,EAAQ2C,EAAqB,CACvD,QAASC,KAAO5C,EACd,GAAIA,EAAO,eAAe4C,CAAG,EAAG,CAC9B,IAAMC,EAAQ7C,EAAO4C,CAAG,EACpBC,EACFH,EAAK,YAAYE,EAAKC,EAAOF,GAAqB,IAAIC,CAAG,EAAI,YAAc,EAAE,EAE7EF,EAAK,eAAeE,CAAG,CAE3B,CAEF,OAAOF,CACT,CAOA,SAASI,EAA6B3C,EAAS4C,EAAQ,CACrD,IAAMC,EAAaD,EAAS,GAAK,OACjCN,GAAatC,EAAQ,MAAO,CAC1B,eAAgB4C,EAAS,GAAK,OAC9B,oBAAqBA,EAAS,GAAK,OACnC,8BAA+BA,EAAS,GAAK,cAC7C,cAAeC,EACf,kBAAmBA,EACnB,sBAAuBA,EACvB,mBAAoBA,CACtB,CAAC,CACH,CAQA,SAASC,GAAiB9C,EAAS4C,EAAQJ,EAAqB,CAC9DF,GAAatC,EAAQ,MAAO,CAC1B,SAAU4C,EAAS,GAAK,QACxB,IAAKA,EAAS,GAAK,IACnB,QAASA,EAAS,GAAK,IACvB,KAAMA,EAAS,GAAK,QACtB,EAAGJ,CAAmB,CACxB,CAKA,SAASO,GAAkBC,EAAWC,EAAkB,CACtD,OAAOA,GAAoBA,GAAoB,OAASD,EAAY,IAAMC,EAAmBD,CAC/F,CAMA,SAASE,GAAiB1B,EAAQ2B,EAAY,CAC5C3B,EAAO,MAAM,MAAQ,GAAG2B,EAAW,KAAK,KACxC3B,EAAO,MAAM,OAAS,GAAG2B,EAAW,MAAM,KAC1C3B,EAAO,MAAM,UAAY4B,GAAaD,EAAW,KAAMA,EAAW,GAAG,CACvE,CAMA,SAASC,GAAahD,EAAGC,EAAG,CAG1B,MAAO,eAAe,KAAK,MAAMD,CAAC,CAAC,OAAO,KAAK,MAAMC,CAAC,CAAC,QACzD,CAGA,SAASgD,GAAsBX,EAAO,CAEpC,IAAMY,EAAaZ,EAAM,YAAY,EAAE,QAAQ,IAAI,EAAI,GAAK,EAAI,IAChE,OAAO,WAAWA,CAAK,EAAIY,CAC7B,CAEA,SAASC,GAAmCvD,EAAS,CACnD,IAAMwD,EAAgB,iBAAiBxD,CAAO,EACxCyD,EAAyBC,GAAsBF,EAAe,qBAAqB,EACnFG,EAAWF,EAAuB,KAAKG,GAAQA,IAAS,aAAeA,IAAS,KAAK,EAE3F,GAAI,CAACD,EACH,MAAO,GAIT,IAAME,EAAgBJ,EAAuB,QAAQE,CAAQ,EACvDG,EAAeJ,GAAsBF,EAAe,qBAAqB,EACzEO,EAAYL,GAAsBF,EAAe,kBAAkB,EACzE,OAAOH,GAAsBS,EAAaD,CAAa,CAAC,EAAIR,GAAsBU,EAAUF,CAAa,CAAC,CAC5G,CAEA,SAASH,GAAsBF,EAAeQ,EAAM,CAElD,OADcR,EAAc,iBAAiBQ,CAAI,EACpC,MAAM,GAAG,EAAE,IAAIC,GAAQA,EAAK,KAAK,CAAC,CACjD,CAGA,IAAMzB,GAAmC,IAAI,IAAI,CAEjD,UAAU,CAAC,EACL0B,GAAN,KAAiB,CACf,YAAY7C,EAAW8C,EAAcC,EAAYC,EAAiBC,EAAkBC,EAAeC,EAAuBC,EAAmBC,EAAS,CACpJ,KAAK,UAAYrD,EACjB,KAAK,aAAe8C,EACpB,KAAK,WAAaC,EAClB,KAAK,gBAAkBC,EACvB,KAAK,iBAAmBC,EACxB,KAAK,cAAgBC,EACrB,KAAK,sBAAwBC,EAC7B,KAAK,kBAAoBC,EACzB,KAAK,QAAUC,CACjB,CACA,OAAOC,EAAQ,CACb,KAAK,SAAW,KAAK,eAAe,EACpCA,EAAO,YAAY,KAAK,QAAQ,EAG5B,gBAAiB,KAAK,UACxB,KAAK,SAAS,YAAe,CAEjC,CACA,SAAU,CACR,KAAK,SAAS,OAAO,EACrB,KAAK,sBAAsB,QAAQ,EACnC,KAAK,SAAW,KAAK,qBAAuB,IAC9C,CACA,aAAajC,EAAO,CAClB,KAAK,SAAS,MAAM,UAAYA,CAClC,CACA,uBAAwB,CACtB,OAAO,KAAK,SAAS,sBAAsB,CAC7C,CACA,SAASkC,EAAW,CAClB,KAAK,SAAS,UAAU,IAAIA,CAAS,CACvC,CACA,uBAAwB,CACtB,OAAOrB,GAAmC,KAAK,QAAQ,CACzD,CACA,iBAAiBS,EAAMa,EAAS,CAC9B,KAAK,SAAS,iBAAiBb,EAAMa,CAAO,CAC9C,CACA,oBAAoBb,EAAMa,EAAS,CACjC,KAAK,SAAS,oBAAoBb,EAAMa,CAAO,CACjD,CACA,gBAAiB,CACf,IAAMC,EAAgB,KAAK,iBACrBC,EAAe,KAAK,cACpBC,EAAkBF,EAAgBA,EAAc,SAAW,KAC7DG,EACJ,GAAID,GAAmBF,EAAe,CAGpC,IAAMI,EAAWJ,EAAc,UAAY,KAAK,gBAAkB,KAC5D3C,EAAU2C,EAAc,cAAc,mBAAmBE,EAAiBF,EAAc,OAAO,EACrG3C,EAAQ,cAAc,EACtB8C,EAAU/C,GAAYC,EAAS,KAAK,SAAS,EAC7C,KAAK,qBAAuBA,EACxB2C,EAAc,UAChB5B,GAAiB+B,EAASC,CAAQ,EAElCD,EAAQ,MAAM,UAAY7B,GAAa,KAAK,sBAAsB,EAAG,KAAK,sBAAsB,CAAC,CAErG,MACE6B,EAAUlG,GAAc,KAAK,YAAY,EACzCmE,GAAiB+B,EAAS,KAAK,eAAe,EAC1C,KAAK,oBACPA,EAAQ,MAAM,UAAY,KAAK,mBAGnC,OAAA3C,GAAa2C,EAAQ,MAAO,CAG1B,iBAAkB,OAElB,OAAU,IACV,SAAY,QACZ,IAAO,IACP,KAAQ,IACR,UAAW,KAAK,QAAU,EAC5B,EAAGzC,EAAmB,EACtBG,EAA6BsC,EAAS,EAAK,EAC3CA,EAAQ,UAAU,IAAI,kBAAkB,EACxCA,EAAQ,aAAa,UAAW,QAAQ,EACxCA,EAAQ,aAAa,MAAO,KAAK,UAAU,EACvCF,IACE,MAAM,QAAQA,CAAY,EAC5BA,EAAa,QAAQH,GAAaK,EAAQ,UAAU,IAAIL,CAAS,CAAC,EAElEK,EAAQ,UAAU,IAAIF,CAAY,GAG/BE,CACT,CACF,EAGME,GAA2CC,EAAgC,CAC/E,QAAS,EACX,CAAC,EAEKC,GAA0CD,EAAgC,CAC9E,QAAS,EACX,CAAC,EAEKE,GAA6CF,EAAgC,CACjF,QAAS,GACT,QAAS,EACX,CAAC,EAOKG,GAA0B,IAE1BC,GAAuC,IAAI,IAAI,CAErD,UAAU,CAAC,EAILC,GAAN,KAAc,CAEZ,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,CAAC,EAAE,KAAK,gBAAkB,KAAK,eAAe,SACzE,CACA,IAAI,SAAS/C,EAAO,CACdA,IAAU,KAAK,YACjB,KAAK,UAAYA,EACjB,KAAK,8BAA8B,EACnC,KAAK,SAAS,QAAQgD,GAAU/C,EAA6B+C,EAAQhD,CAAK,CAAC,EAE/E,CACA,YAAY1C,EAAS2F,EAAStE,EAAWuE,EAASC,EAAgBC,EAAmB,CACnF,KAAK,QAAUH,EACf,KAAK,UAAYtE,EACjB,KAAK,QAAUuE,EACf,KAAK,eAAiBC,EACtB,KAAK,kBAAoBC,EAOzB,KAAK,kBAAoB,CACvB,EAAG,EACH,EAAG,CACL,EAEA,KAAK,iBAAmB,CACtB,EAAG,EACH,EAAG,CACL,EAKA,KAAK,oBAAsBC,GAAO,EAAK,EAEvC,KAAK,YAAc,IAAIC,EAEvB,KAAK,yBAA2BC,EAAa,MAE7C,KAAK,uBAAyBA,EAAa,MAE3C,KAAK,oBAAsBA,EAAa,MAExC,KAAK,oBAAsBA,EAAa,MAExC,KAAK,iBAAmB,KAExB,KAAK,2BAA6B,GAElC,KAAK,SAAW,CAAC,EAEjB,KAAK,iBAAmB,IAAI,IAE5B,KAAK,WAAa,MAKlB,KAAK,eAAiB,EACtB,KAAK,UAAY,GAEjB,KAAK,cAAgB,IAAID,EAEzB,KAAK,QAAU,IAAIA,EAEnB,KAAK,SAAW,IAAIA,EAEpB,KAAK,MAAQ,IAAIA,EAEjB,KAAK,QAAU,IAAIA,EAEnB,KAAK,OAAS,IAAIA,EAElB,KAAK,QAAU,IAAIA,EAKnB,KAAK,MAAQ,KAAK,YAElB,KAAK,aAAezE,GAAS,CAG3B,GAFA,KAAK,cAAc,KAAK,EAEpB,KAAK,SAAS,OAAQ,CACxB,IAAM2E,EAAe,KAAK,iBAAiB3E,CAAK,EAC5C2E,GAAgB,CAAC,KAAK,iBAAiB,IAAIA,CAAY,GAAK,CAAC,KAAK,UACpE,KAAK,wBAAwBA,EAAc3E,CAAK,CAEpD,MAAY,KAAK,UACf,KAAK,wBAAwB,KAAK,aAAcA,CAAK,CAEzD,EAEA,KAAK,aAAeA,GAAS,CAC3B,IAAM4E,EAAkB,KAAK,0BAA0B5E,CAAK,EAC5D,GAAI,CAAC,KAAK,oBAAoB,EAAG,CAC/B,IAAM6E,EAAY,KAAK,IAAID,EAAgB,EAAI,KAAK,sBAAsB,CAAC,EACrEE,EAAY,KAAK,IAAIF,EAAgB,EAAI,KAAK,sBAAsB,CAAC,EAM3E,GALwBC,EAAYC,GAAa,KAAK,QAAQ,mBAKzC,CACnB,IAAMC,EAAiB,KAAK,IAAI,GAAK,KAAK,eAAiB,KAAK,mBAAmB/E,CAAK,EAClFgF,EAAY,KAAK,eACvB,GAAI,CAACD,EAAgB,CACnB,KAAK,iBAAiB/E,CAAK,EAC3B,MACF,EAII,CAACgF,GAAa,CAACA,EAAU,WAAW,GAAK,CAACA,EAAU,YAAY,KAG9DhF,EAAM,YACRA,EAAM,eAAe,EAEvB,KAAK,oBAAoB,IAAI,EAAI,EACjC,KAAK,QAAQ,IAAI,IAAM,KAAK,mBAAmBA,CAAK,CAAC,EAEzD,CACA,MACF,CAIIA,EAAM,YACRA,EAAM,eAAe,EAEvB,IAAMiF,EAA6B,KAAK,+BAA+BL,CAAe,EAItF,GAHA,KAAK,UAAY,GACjB,KAAK,0BAA4BA,EACjC,KAAK,6BAA6BK,CAA0B,EACxD,KAAK,eACP,KAAK,2BAA2BA,EAA4BL,CAAe,MACtE,CAGL,IAAMM,EAAS,KAAK,kBAAoB,KAAK,gBAAkB,KAAK,sBAC9DC,EAAkB,KAAK,iBAC7BA,EAAgB,EAAIF,EAA2B,EAAIC,EAAO,EAAI,KAAK,kBAAkB,EACrFC,EAAgB,EAAIF,EAA2B,EAAIC,EAAO,EAAI,KAAK,kBAAkB,EACrF,KAAK,2BAA2BC,EAAgB,EAAGA,EAAgB,CAAC,CACtE,CAII,KAAK,YAAY,UAAU,QAC7B,KAAK,QAAQ,IAAI,IAAM,CACrB,KAAK,YAAY,KAAK,CACpB,OAAQ,KACR,gBAAiBF,EACjB,MAAAjF,EACA,SAAU,KAAK,iBAAiBiF,CAA0B,EAC1D,MAAO,KAAK,sBACd,CAAC,CACH,CAAC,CAEL,EAEA,KAAK,WAAajF,GAAS,CACzB,KAAK,iBAAiBA,CAAK,CAC7B,EAEA,KAAK,iBAAmBA,GAAS,CAC/B,GAAI,KAAK,SAAS,OAAQ,CACxB,IAAM2E,EAAe,KAAK,iBAAiB3E,CAAK,EAC5C2E,GAAgB,CAAC,KAAK,iBAAiB,IAAIA,CAAY,GAAK,CAAC,KAAK,UACpE3E,EAAM,eAAe,CAEzB,MAAY,KAAK,UAGfA,EAAM,eAAe,CAEzB,EACA,KAAK,gBAAgBvB,CAAO,EAAE,WAAW2F,EAAQ,eAAiB,IAAI,EACtE,KAAK,iBAAmB,IAAIvE,GAAsBC,CAAS,EAC3DyE,EAAkB,iBAAiB,IAAI,CACzC,CAKA,uBAAwB,CACtB,OAAO,KAAK,YACd,CAEA,gBAAiB,CACf,OAAO,KAAK,YACd,CAKA,mBAAoB,CAClB,OAAO,KAAK,WAAW,EAAI,KAAK,sBAAsB,EAAI,KAAK,eAAe,CAChF,CAEA,YAAYa,EAAS,CACnB,KAAK,SAAWA,EAAQ,IAAIjB,GAAUkB,EAAclB,CAAM,CAAC,EAC3D,KAAK,SAAS,QAAQA,GAAU/C,EAA6B+C,EAAQ,KAAK,QAAQ,CAAC,EACnF,KAAK,8BAA8B,EAKnC,IAAMmB,EAAkB,IAAI,IAC5B,YAAK,iBAAiB,QAAQnB,GAAU,CAClC,KAAK,SAAS,QAAQA,CAAM,EAAI,IAClCmB,EAAgB,IAAInB,CAAM,CAE9B,CAAC,EACD,KAAK,iBAAmBmB,EACjB,IACT,CAKA,oBAAoBC,EAAU,CAC5B,YAAK,iBAAmBA,EACjB,IACT,CAKA,wBAAwBA,EAAU,CAChC,YAAK,qBAAuBA,EACrB,IACT,CAMA,gBAAgBC,EAAa,CAC3B,IAAM/G,EAAU4G,EAAcG,CAAW,EACzC,OAAI/G,IAAY,KAAK,eACf,KAAK,cACP,KAAK,4BAA4B,KAAK,YAAY,EAEpD,KAAK,QAAQ,kBAAkB,IAAM,CACnCA,EAAQ,iBAAiB,YAAa,KAAK,aAAcqF,EAA0B,EACnFrF,EAAQ,iBAAiB,aAAc,KAAK,aAAcmF,EAA2B,EACrFnF,EAAQ,iBAAiB,YAAa,KAAK,iBAAkBqF,EAA0B,CACzF,CAAC,EACD,KAAK,kBAAoB,OACzB,KAAK,aAAerF,GAElB,OAAO,WAAe,KAAe,KAAK,wBAAwB,aACpE,KAAK,iBAAmB,KAAK,aAAa,iBAErC,IACT,CAIA,oBAAoBgH,EAAiB,CACnC,YAAK,iBAAmBA,EAAkBJ,EAAcI,CAAe,EAAI,KAC3E,KAAK,oBAAoB,YAAY,EACjCA,IACF,KAAK,oBAAsB,KAAK,eAAe,OAAO,EAAE,EAAE,UAAU,IAAM,KAAK,+BAA+B,CAAC,GAE1G,IACT,CAEA,WAAWrC,EAAQ,CACjB,YAAK,eAAiBA,EACf,IACT,CAEA,SAAU,CACR,KAAK,4BAA4B,KAAK,YAAY,EAG9C,KAAK,WAAW,GAGlB,KAAK,cAAc,OAAO,EAE5B,KAAK,SAAS,OAAO,EACrB,KAAK,gBAAgB,EACrB,KAAK,oBAAoB,EACzB,KAAK,kBAAkB,eAAe,IAAI,EAC1C,KAAK,iBAAiB,EACtB,KAAK,cAAc,SAAS,EAC5B,KAAK,QAAQ,SAAS,EACtB,KAAK,SAAS,SAAS,EACvB,KAAK,MAAM,SAAS,EACpB,KAAK,QAAQ,SAAS,EACtB,KAAK,OAAO,SAAS,EACrB,KAAK,QAAQ,SAAS,EACtB,KAAK,YAAY,SAAS,EAC1B,KAAK,SAAW,CAAC,EACjB,KAAK,iBAAiB,MAAM,EAC5B,KAAK,eAAiB,OACtB,KAAK,oBAAoB,YAAY,EACrC,KAAK,iBAAiB,MAAM,EAC5B,KAAK,iBAAmB,KAAK,aAAe,KAAK,iBAAmB,KAAK,qBAAuB,KAAK,iBAAmB,KAAK,QAAU,KAAK,eAAiB,IAC/J,CAEA,YAAa,CACX,OAAO,KAAK,oBAAoB,GAAK,KAAK,kBAAkB,WAAW,IAAI,CAC7E,CAEA,OAAQ,CACN,KAAK,aAAa,MAAM,UAAY,KAAK,mBAAqB,GAC9D,KAAK,iBAAmB,CACtB,EAAG,EACH,EAAG,CACL,EACA,KAAK,kBAAoB,CACvB,EAAG,EACH,EAAG,CACL,CACF,CAKA,cAAce,EAAQ,CAChB,CAAC,KAAK,iBAAiB,IAAIA,CAAM,GAAK,KAAK,SAAS,QAAQA,CAAM,EAAI,KACxE,KAAK,iBAAiB,IAAIA,CAAM,EAChC/C,EAA6B+C,EAAQ,EAAI,EAE7C,CAKA,aAAaA,EAAQ,CACf,KAAK,iBAAiB,IAAIA,CAAM,IAClC,KAAK,iBAAiB,OAAOA,CAAM,EACnC/C,EAA6B+C,EAAQ,KAAK,QAAQ,EAEtD,CAEA,cAAcuB,EAAW,CACvB,YAAK,WAAaA,EACX,IACT,CAEA,mBAAmBV,EAAW,CAC5B,KAAK,eAAiBA,CACxB,CAIA,qBAAsB,CACpB,IAAMtE,EAAW,KAAK,WAAW,EAAI,KAAK,iBAAmB,KAAK,kBAClE,MAAO,CACL,EAAGA,EAAS,EACZ,EAAGA,EAAS,CACd,CACF,CAKA,oBAAoBS,EAAO,CACzB,YAAK,iBAAmB,CACtB,EAAG,EACH,EAAG,CACL,EACA,KAAK,kBAAkB,EAAIA,EAAM,EACjC,KAAK,kBAAkB,EAAIA,EAAM,EAC5B,KAAK,gBACR,KAAK,2BAA2BA,EAAM,EAAGA,EAAM,CAAC,EAE3C,IACT,CAKA,qBAAqBA,EAAO,CAC1B,YAAK,kBAAoBA,EAClB,IACT,CAEA,8BAA+B,CAC7B,IAAMT,EAAW,KAAK,0BAClBA,GAAY,KAAK,gBACnB,KAAK,2BAA2B,KAAK,+BAA+BA,CAAQ,EAAGA,CAAQ,CAE3F,CAEA,kBAAmB,CACjB,KAAK,yBAAyB,YAAY,EAC1C,KAAK,uBAAuB,YAAY,EACxC,KAAK,oBAAoB,YAAY,EACrC,KAAK,eAAe,GAAG,oBAAoB,cAAeiF,GAAsB5B,EAA6B,CAC/G,CAEA,iBAAkB,CAChB,KAAK,UAAU,QAAQ,EACvB,KAAK,SAAW,IAClB,CAEA,qBAAsB,CACpB,KAAK,cAAc,OAAO,EAC1B,KAAK,iBAAiB,QAAQ,EAC9B,KAAK,aAAe,KAAK,gBAAkB,IAC7C,CAKA,iBAAiB/D,EAAO,CAKtB,GAAK,KAAK,kBAAkB,WAAW,IAAI,IAG3C,KAAK,iBAAiB,EACtB,KAAK,kBAAkB,aAAa,IAAI,EACxC,KAAK,8BAA8B,EAC/B,KAAK,WACP,KAAK,aAAa,MAAM,wBAA0B,KAAK,0BAErD,EAAC,KAAK,oBAAoB,GAO9B,GAJA,KAAK,SAAS,KAAK,CACjB,OAAQ,KACR,MAAAA,CACF,CAAC,EACG,KAAK,eAEP,KAAK,eAAe,eAAe,EACnC,KAAK,6BAA6B,EAAE,KAAK,IAAM,CAC7C,KAAK,sBAAsBA,CAAK,EAChC,KAAK,yBAAyB,EAC9B,KAAK,kBAAkB,aAAa,IAAI,CAC1C,CAAC,MACI,CAIL,KAAK,kBAAkB,EAAI,KAAK,iBAAiB,EACjD,IAAM4E,EAAkB,KAAK,0BAA0B5E,CAAK,EAC5D,KAAK,kBAAkB,EAAI,KAAK,iBAAiB,EACjD,KAAK,QAAQ,IAAI,IAAM,CACrB,KAAK,MAAM,KAAK,CACd,OAAQ,KACR,SAAU,KAAK,iBAAiB4E,CAAe,EAC/C,UAAWA,EACX,MAAA5E,CACF,CAAC,CACH,CAAC,EACD,KAAK,yBAAyB,EAC9B,KAAK,kBAAkB,aAAa,IAAI,CAC1C,CACF,CAEA,mBAAmBA,EAAO,CACpB4F,GAAa5F,CAAK,IACpB,KAAK,oBAAsB,KAAK,IAAI,GAEtC,KAAK,8BAA8B,EAEnC,IAAM6F,EAAa,KAAK,eAAe,EACjCC,EAAgB,KAAK,eAQ3B,GAPID,GAGF,KAAK,QAAQ,kBAAkB,IAAM,CACnCA,EAAW,iBAAiB,cAAeF,GAAsB5B,EAA6B,CAChG,CAAC,EAEC+B,EAAe,CACjB,IAAMrH,EAAU,KAAK,aACf2E,EAAS3E,EAAQ,WACjBsH,EAAc,KAAK,aAAe,KAAK,0BAA0B,EACjEC,EAAS,KAAK,QAAU,KAAK,SAAW,KAAK,UAAU,cAA8C,EAAE,EAE7G5C,EAAO,aAAa4C,EAAQvH,CAAO,EAGnC,KAAK,kBAAoBA,EAAQ,MAAM,WAAa,GAGpD,KAAK,SAAW,IAAIkE,GAAW,KAAK,UAAW,KAAK,aAAc,KAAK,WAAY,KAAK,gBAAiB,KAAK,kBAAoB,KAAM,KAAK,cAAgB,KAAM,KAAK,sBAAuB,KAAK,kBAAmB,KAAK,QAAQ,QAAU,GAAI,EAClP,KAAK,SAAS,OAAO,KAAK,0BAA0BS,EAAQyC,CAAU,CAAC,EAIvEtE,GAAiB9C,EAAS,GAAOwF,EAAuB,EACxD,KAAK,UAAU,KAAK,YAAYb,EAAO,aAAa2C,EAAatH,CAAO,CAAC,EACzE,KAAK,QAAQ,KAAK,CAChB,OAAQ,KACR,MAAAuB,CACF,CAAC,EACD8F,EAAc,MAAM,EACpB,KAAK,kBAAoBA,EACzB,KAAK,cAAgBA,EAAc,aAAa,IAAI,CACtD,MACE,KAAK,QAAQ,KAAK,CAChB,OAAQ,KACR,MAAA9F,CACF,CAAC,EACD,KAAK,kBAAoB,KAAK,cAAgB,OAIhD,KAAK,iBAAiB,MAAM8F,EAAgBA,EAAc,qBAAqB,EAAI,CAAC,CAAC,CACvF,CAOA,wBAAwBG,EAAkBjG,EAAO,CAG3C,KAAK,gBACPA,EAAM,gBAAgB,EAExB,IAAMkG,EAAa,KAAK,WAAW,EAC7BC,EAAkBP,GAAa5F,CAAK,EACpCoG,EAAyB,CAACD,GAAmBnG,EAAM,SAAW,EAC9DwF,EAAc,KAAK,aACnBvF,EAASC,EAAgBF,CAAK,EAC9BqG,EAAmB,CAACF,GAAmB,KAAK,qBAAuB,KAAK,oBAAsBnC,GAA0B,KAAK,IAAI,EACjIsC,EAAcH,EAAkBI,GAAiCvG,CAAK,EAAIwG,GAAgCxG,CAAK,EAWrH,GAJIC,GAAUA,EAAO,WAAaD,EAAM,OAAS,aAC/CA,EAAM,eAAe,EAGnBkG,GAAcE,GAA0BC,GAAoBC,EAC9D,OAKF,GAAI,KAAK,SAAS,OAAQ,CACxB,IAAMG,EAAajB,EAAY,MAC/B,KAAK,yBAA2BiB,EAAW,yBAA2B,GACtEA,EAAW,wBAA0B,aACvC,CACA,KAAK,UAAY,GACjB,KAAK,oBAAoB,IAAI,KAAK,SAAS,EAG3C,KAAK,iBAAiB,EACtB,KAAK,gBAAkB,KAAK,aAAa,sBAAsB,EAC/D,KAAK,yBAA2B,KAAK,kBAAkB,YAAY,UAAU,KAAK,YAAY,EAC9F,KAAK,uBAAyB,KAAK,kBAAkB,UAAU,UAAU,KAAK,UAAU,EACxF,KAAK,oBAAsB,KAAK,kBAAkB,SAAS,KAAK,eAAe,CAAC,EAAE,UAAUC,GAAe,KAAK,gBAAgBA,CAAW,CAAC,EACxI,KAAK,mBACP,KAAK,cAAgBlI,GAAqB,KAAK,gBAAgB,GAKjE,IAAMiF,EAAkB,KAAK,iBAC7B,KAAK,yBAA2BA,GAAmBA,EAAgB,UAAY,CAACA,EAAgB,UAAY,CAC1G,EAAG,EACH,EAAG,CACL,EAAI,KAAK,6BAA6B,KAAK,gBAAiBwC,EAAkBjG,CAAK,EACnF,IAAM4E,EAAkB,KAAK,sBAAwB,KAAK,0BAA4B,KAAK,0BAA0B5E,CAAK,EAC1H,KAAK,uBAAyB,CAC5B,EAAG,EACH,EAAG,CACL,EACA,KAAK,sCAAwC,CAC3C,EAAG4E,EAAgB,EACnB,EAAGA,EAAgB,CACrB,EACA,KAAK,eAAiB,KAAK,IAAI,EAC/B,KAAK,kBAAkB,cAAc,KAAM5E,CAAK,CAClD,CAEA,sBAAsBA,EAAO,CAK3BuB,GAAiB,KAAK,aAAc,GAAM0C,EAAuB,EACjE,KAAK,QAAQ,WAAW,aAAa,KAAK,aAAc,KAAK,OAAO,EACpE,KAAK,gBAAgB,EACrB,KAAK,oBAAoB,EACzB,KAAK,gBAAkB,KAAK,cAAgB,KAAK,aAAe,KAAK,kBAAoB,OAEzF,KAAK,QAAQ,IAAI,IAAM,CACrB,IAAMe,EAAY,KAAK,eACjB2B,EAAe3B,EAAU,aAAa,IAAI,EAC1CJ,EAAkB,KAAK,0BAA0B5E,CAAK,EACtD4G,EAAW,KAAK,iBAAiBhC,CAAe,EAChDiC,EAAyB7B,EAAU,iBAAiBJ,EAAgB,EAAGA,EAAgB,CAAC,EAC9F,KAAK,MAAM,KAAK,CACd,OAAQ,KACR,SAAAgC,EACA,UAAWhC,EACX,MAAA5E,CACF,CAAC,EACD,KAAK,QAAQ,KAAK,CAChB,KAAM,KACN,aAAA2G,EACA,cAAe,KAAK,cACpB,UAAW3B,EACX,kBAAmB,KAAK,kBACxB,uBAAA6B,EACA,SAAAD,EACA,UAAWhC,EACX,MAAA5E,CACF,CAAC,EACDgF,EAAU,KAAK,KAAM2B,EAAc,KAAK,cAAe,KAAK,kBAAmBE,EAAwBD,EAAUhC,EAAiB5E,CAAK,EACvI,KAAK,eAAiB,KAAK,iBAC7B,CAAC,CACH,CAKA,2BAA2B,CACzB,EAAAnB,EACA,EAAAC,CACF,EAAG,CACD,EAAGgI,EACH,EAAGC,CACL,EAAG,CAED,IAAIC,EAAe,KAAK,kBAAkB,iCAAiC,KAAMnI,EAAGC,CAAC,EAKjF,CAACkI,GAAgB,KAAK,iBAAmB,KAAK,mBAAqB,KAAK,kBAAkB,iBAAiBnI,EAAGC,CAAC,IACjHkI,EAAe,KAAK,mBAElBA,GAAgBA,IAAiB,KAAK,gBACxC,KAAK,QAAQ,IAAI,IAAM,CAErB,KAAK,OAAO,KAAK,CACf,KAAM,KACN,UAAW,KAAK,cAClB,CAAC,EACD,KAAK,eAAe,KAAK,IAAI,EAE7B,KAAK,eAAiBA,EACtB,KAAK,eAAe,MAAM,KAAMnI,EAAGC,EAAGkI,IAAiB,KAAK,mBAG5DA,EAAa,gBAAkB,KAAK,cAAgB,MAAS,EAC7D,KAAK,QAAQ,KAAK,CAChB,KAAM,KACN,UAAWA,EACX,aAAcA,EAAa,aAAa,IAAI,CAC9C,CAAC,CACH,CAAC,EAGC,KAAK,WAAW,IAClB,KAAK,eAAe,2BAA2BF,EAAMC,CAAI,EACzD,KAAK,eAAe,UAAU,KAAMlI,EAAGC,EAAG,KAAK,sBAAsB,EACjE,KAAK,kBACP,KAAK,uBAAuBD,EAAGC,CAAC,EAEhC,KAAK,uBAAuBD,EAAI,KAAK,yBAAyB,EAAGC,EAAI,KAAK,yBAAyB,CAAC,EAG1G,CAKA,8BAA+B,CAE7B,GAAI,CAAC,KAAK,UACR,OAAO,QAAQ,QAAQ,EAEzB,IAAMmI,EAAkB,KAAK,aAAa,sBAAsB,EAEhE,KAAK,SAAS,SAAS,oBAAoB,EAE3C,KAAK,uBAAuBA,EAAgB,KAAMA,EAAgB,GAAG,EAKrE,IAAMC,EAAW,KAAK,SAAS,sBAAsB,EACrD,OAAIA,IAAa,EACR,QAAQ,QAAQ,EAElB,KAAK,QAAQ,kBAAkB,IAC7B,IAAI,QAAQC,GAAW,CAC5B,IAAM7D,EAAUtD,GAAS,EACnB,CAACA,GAASE,EAAgBF,CAAK,IAAM,KAAK,UAAYA,EAAM,eAAiB,eAC/E,KAAK,UAAU,oBAAoB,gBAAiBsD,CAAO,EAC3D6D,EAAQ,EACR,aAAaC,CAAO,EAExB,EAIMA,EAAU,WAAW9D,EAAS4D,EAAW,GAAG,EAClD,KAAK,SAAS,iBAAiB,gBAAiB5D,CAAO,CACzD,CAAC,CACF,CACH,CAEA,2BAA4B,CAC1B,IAAM+D,EAAoB,KAAK,qBACzBC,EAAsBD,EAAoBA,EAAkB,SAAW,KACzEtB,EACJ,OAAIuB,GACF,KAAK,gBAAkBD,EAAkB,cAAc,mBAAmBC,EAAqBD,EAAkB,OAAO,EACxH,KAAK,gBAAgB,cAAc,EACnCtB,EAAcpF,GAAY,KAAK,gBAAiB,KAAK,SAAS,GAE9DoF,EAAcvI,GAAc,KAAK,YAAY,EAI/CuI,EAAY,MAAM,cAAgB,OAClCA,EAAY,UAAU,IAAI,sBAAsB,EACzCA,CACT,CAMA,6BAA6BwB,EAAatB,EAAkBjG,EAAO,CACjE,IAAMwH,EAAgBvB,IAAqB,KAAK,aAAe,KAAOA,EAChEwB,EAAgBD,EAAgBA,EAAc,sBAAsB,EAAID,EACxEG,EAAQ9B,GAAa5F,CAAK,EAAIA,EAAM,cAAc,CAAC,EAAIA,EACvDI,EAAiB,KAAK,2BAA2B,EACjDvB,EAAI6I,EAAM,MAAQD,EAAc,KAAOrH,EAAe,KACtDtB,EAAI4I,EAAM,MAAQD,EAAc,IAAMrH,EAAe,IAC3D,MAAO,CACL,EAAGqH,EAAc,KAAOF,EAAY,KAAO1I,EAC3C,EAAG4I,EAAc,IAAMF,EAAY,IAAMzI,CAC3C,CACF,CAEA,0BAA0BkB,EAAO,CAC/B,IAAMI,EAAiB,KAAK,2BAA2B,EACjDsH,EAAQ9B,GAAa5F,CAAK,EAQhCA,EAAM,QAAQ,CAAC,GAAKA,EAAM,eAAe,CAAC,GAAK,CAC7C,MAAO,EACP,MAAO,CACT,EAAIA,EACEnB,EAAI6I,EAAM,MAAQtH,EAAe,KACjCtB,EAAI4I,EAAM,MAAQtH,EAAe,IAGvC,GAAI,KAAK,iBAAkB,CACzB,IAAMuH,EAAY,KAAK,iBAAiB,aAAa,EACrD,GAAIA,EAAW,CACb,IAAMC,EAAW,KAAK,iBAAiB,eAAe,EACtD,OAAAA,EAAS,EAAI/I,EACb+I,EAAS,EAAI9I,EACN8I,EAAS,gBAAgBD,EAAU,QAAQ,CAAC,CACrD,CACF,CACA,MAAO,CACL,EAAA9I,EACA,EAAAC,CACF,CACF,CAEA,+BAA+B4I,EAAO,CACpC,IAAMG,EAAoB,KAAK,eAAiB,KAAK,eAAe,SAAW,KAC3E,CACF,EAAAhJ,EACA,EAAAC,CACF,EAAI,KAAK,kBAAoB,KAAK,kBAAkB4I,EAAO,KAAM,KAAK,gBAAiB,KAAK,wBAAwB,EAAIA,EAMxH,GALI,KAAK,WAAa,KAAOG,IAAsB,IACjD/I,EAAI,KAAK,sBAAsB,GAAK,KAAK,kBAAoB,KAAK,yBAAyB,EAAI,IACtF,KAAK,WAAa,KAAO+I,IAAsB,OACxDhJ,EAAI,KAAK,sBAAsB,GAAK,KAAK,kBAAoB,KAAK,yBAAyB,EAAI,IAE7F,KAAK,cAAe,CAGtB,GAAM,CACJ,EAAGiJ,EACH,EAAGC,CACL,EAAK,KAAK,kBAAoD,CAC5D,EAAG,EACH,EAAG,CACL,EAH8B,KAAK,yBAI7BC,EAAe,KAAK,cACpB,CACJ,MAAOC,EACP,OAAQC,CACV,EAAI,KAAK,gBAAgB,EACnBC,EAAOH,EAAa,IAAMD,EAC1BK,EAAOJ,EAAa,QAAUE,EAAgBH,GAC9CM,EAAOL,EAAa,KAAOF,EAC3BQ,EAAON,EAAa,OAASC,EAAeH,GAClDjJ,EAAI0J,GAAQ1J,EAAGwJ,EAAMC,CAAI,EACzBxJ,EAAIyJ,GAAQzJ,EAAGqJ,EAAMC,CAAI,CAC3B,CACA,MAAO,CACL,EAAAvJ,EACA,EAAAC,CACF,CACF,CAEA,6BAA6B0J,EAAuB,CAClD,GAAM,CACJ,EAAA3J,EACA,EAAAC,CACF,EAAI0J,EACEC,EAAQ,KAAK,uBACbC,EAA0B,KAAK,sCAE/BC,EAAU,KAAK,IAAI9J,EAAI6J,EAAwB,CAAC,EAChDE,EAAU,KAAK,IAAI9J,EAAI4J,EAAwB,CAAC,EAKtD,OAAIC,EAAU,KAAK,QAAQ,kCACzBF,EAAM,EAAI5J,EAAI6J,EAAwB,EAAI,EAAI,GAC9CA,EAAwB,EAAI7J,GAE1B+J,EAAU,KAAK,QAAQ,kCACzBH,EAAM,EAAI3J,EAAI4J,EAAwB,EAAI,EAAI,GAC9CA,EAAwB,EAAI5J,GAEvB2J,CACT,CAEA,+BAAgC,CAC9B,GAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,SAC9B,OAEF,IAAMI,EAAe,KAAK,SAAS,OAAS,GAAK,CAAC,KAAK,WAAW,EAC9DA,IAAiB,KAAK,6BACxB,KAAK,2BAA6BA,EAClCzH,EAA6B,KAAK,aAAcyH,CAAY,EAEhE,CAEA,4BAA4BpK,EAAS,CACnCA,EAAQ,oBAAoB,YAAa,KAAK,aAAcqF,EAA0B,EACtFrF,EAAQ,oBAAoB,aAAc,KAAK,aAAcmF,EAA2B,EACxFnF,EAAQ,oBAAoB,YAAa,KAAK,iBAAkBqF,EAA0B,CAC5F,CAMA,2BAA2BjF,EAAGC,EAAG,CAC/B,IAAM2C,EAAYI,GAAahD,EAAGC,CAAC,EAC7BgK,EAAS,KAAK,aAAa,MAI7B,KAAK,mBAAqB,OAC5B,KAAK,kBAAoBA,EAAO,WAAaA,EAAO,WAAa,OAASA,EAAO,UAAY,IAK/FA,EAAO,UAAYtH,GAAkBC,EAAW,KAAK,iBAAiB,CACxE,CAMA,uBAAuB5C,EAAGC,EAAG,CAG3B,IAAM4C,EAAmB,KAAK,kBAAkB,SAAW,OAAY,KAAK,kBACtED,EAAYI,GAAahD,EAAGC,CAAC,EACnC,KAAK,SAAS,aAAa0C,GAAkBC,EAAWC,CAAgB,CAAC,CAC3E,CAKA,iBAAiBqH,EAAiB,CAChC,IAAMC,EAAiB,KAAK,sBAC5B,OAAIA,EACK,CACL,EAAGD,EAAgB,EAAIC,EAAe,EACtC,EAAGD,EAAgB,EAAIC,EAAe,CACxC,EAEK,CACL,EAAG,EACH,EAAG,CACL,CACF,CAEA,0BAA2B,CACzB,KAAK,cAAgB,KAAK,aAAe,OACzC,KAAK,iBAAiB,MAAM,CAC9B,CAKA,gCAAiC,CAC/B,GAAI,CACF,EAAAnK,EACA,EAAAC,CACF,EAAI,KAAK,kBACT,GAAID,IAAM,GAAKC,IAAM,GAAK,KAAK,WAAW,GAAK,CAAC,KAAK,iBACnD,OAGF,IAAMyI,EAAc,KAAK,aAAa,sBAAsB,EACtDS,EAAe,KAAK,iBAAiB,sBAAsB,EAGjE,GAAIA,EAAa,QAAU,GAAKA,EAAa,SAAW,GAAKT,EAAY,QAAU,GAAKA,EAAY,SAAW,EAC7G,OAEF,IAAM0B,EAAejB,EAAa,KAAOT,EAAY,KAC/C2B,EAAgB3B,EAAY,MAAQS,EAAa,MACjDmB,EAAcnB,EAAa,IAAMT,EAAY,IAC7C6B,EAAiB7B,EAAY,OAASS,EAAa,OAGrDA,EAAa,MAAQT,EAAY,OAC/B0B,EAAe,IACjBpK,GAAKoK,GAEHC,EAAgB,IAClBrK,GAAKqK,IAGPrK,EAAI,EAIFmJ,EAAa,OAAST,EAAY,QAChC4B,EAAc,IAChBrK,GAAKqK,GAEHC,EAAiB,IACnBtK,GAAKsK,IAGPtK,EAAI,GAEFD,IAAM,KAAK,kBAAkB,GAAKC,IAAM,KAAK,kBAAkB,IACjE,KAAK,oBAAoB,CACvB,EAAAA,EACA,EAAAD,CACF,CAAC,CAEL,CAEA,mBAAmBmB,EAAO,CACxB,IAAMmB,EAAQ,KAAK,eACnB,OAAI,OAAOA,GAAU,SACZA,EACEyE,GAAa5F,CAAK,EACpBmB,EAAM,MAERA,EAAQA,EAAM,MAAQ,CAC/B,CAEA,gBAAgBnB,EAAO,CACrB,IAAMqJ,EAAmB,KAAK,iBAAiB,aAAarJ,CAAK,EACjE,GAAIqJ,EAAkB,CACpB,IAAMpJ,EAASC,EAAgBF,CAAK,EAGhC,KAAK,eAAiBC,IAAW,KAAK,kBAAoBA,EAAO,SAAS,KAAK,gBAAgB,GACjGd,GAAc,KAAK,cAAekK,EAAiB,IAAKA,EAAiB,IAAI,EAE/E,KAAK,sBAAsB,GAAKA,EAAiB,KACjD,KAAK,sBAAsB,GAAKA,EAAiB,IAG5C,KAAK,iBACR,KAAK,iBAAiB,GAAKA,EAAiB,KAC5C,KAAK,iBAAiB,GAAKA,EAAiB,IAC5C,KAAK,2BAA2B,KAAK,iBAAiB,EAAG,KAAK,iBAAiB,CAAC,EAEpF,CACF,CAEA,4BAA6B,CAC3B,OAAO,KAAK,iBAAiB,UAAU,IAAI,KAAK,SAAS,GAAG,gBAAkB,KAAK,iBAAiB,0BAA0B,CAChI,CAOA,gBAAiB,CACf,OAAI,KAAK,oBAAsB,SAC7B,KAAK,kBAAoBC,GAAe,KAAK,YAAY,GAEpD,KAAK,iBACd,CAEA,0BAA0BC,EAAe1D,EAAY,CACnD,IAAM2D,EAAmB,KAAK,mBAAqB,SACnD,GAAIA,IAAqB,SACvB,OAAOD,EAET,GAAIC,IAAqB,SAAU,CACjC,IAAMC,EAAc,KAAK,UAIzB,OAAO5D,GAAc4D,EAAY,mBAAqBA,EAAY,yBAA2BA,EAAY,sBAAwBA,EAAY,qBAAuBA,EAAY,IAClL,CACA,OAAOpE,EAAcmE,CAAgB,CACvC,CAEA,iBAAkB,CAGhB,OAAI,CAAC,KAAK,cAAgB,CAAC,KAAK,aAAa,OAAS,CAAC,KAAK,aAAa,UACvE,KAAK,aAAe,KAAK,SAAW,KAAK,SAAS,sBAAsB,EAAI,KAAK,iBAE5E,KAAK,YACd,CAEA,iBAAiBxJ,EAAO,CACtB,OAAO,KAAK,SAAS,KAAKmE,GACjBnE,EAAM,SAAWA,EAAM,SAAWmE,GAAUA,EAAO,SAASnE,EAAM,MAAM,EAChF,CACH,CACF,EAEA,SAASuI,GAAQpH,EAAOuI,EAAKC,EAAK,CAChC,OAAO,KAAK,IAAID,EAAK,KAAK,IAAIC,EAAKxI,CAAK,CAAC,CAC3C,CAEA,SAASyE,GAAa5F,EAAO,CAI3B,OAAOA,EAAM,KAAK,CAAC,IAAM,GAC3B,CAEA,SAAS2F,GAAqB3F,EAAO,CACnCA,EAAM,eAAe,CACvB,CAQA,SAAS4J,GAAgBC,EAAOC,EAAWC,EAAS,CAClD,IAAMC,EAAOC,GAAMH,EAAWD,EAAM,OAAS,CAAC,EACxCK,EAAKD,GAAMF,EAASF,EAAM,OAAS,CAAC,EAC1C,GAAIG,IAASE,EACX,OAEF,IAAMjK,EAAS4J,EAAMG,CAAI,EACnBvB,EAAQyB,EAAKF,EAAO,GAAK,EAC/B,QAAS5L,EAAI4L,EAAM5L,IAAM8L,EAAI9L,GAAKqK,EAChCoB,EAAMzL,CAAC,EAAIyL,EAAMzL,EAAIqK,CAAK,EAE5BoB,EAAMK,CAAE,EAAIjK,CACd,CAQA,SAASkK,GAAkBC,EAAcC,EAAa1D,EAAc2D,EAAa,CAC/E,IAAMN,EAAOC,GAAMtD,EAAcyD,EAAa,OAAS,CAAC,EAClDF,EAAKD,GAAMK,EAAaD,EAAY,MAAM,EAC5CD,EAAa,QACfC,EAAY,OAAOH,EAAI,EAAGE,EAAa,OAAOJ,EAAM,CAAC,EAAE,CAAC,CAAC,CAE7D,CAiBA,SAASO,GAAMC,EAAOC,EAAK,CACzB,OAAO,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAKD,CAAK,CAAC,CACzC,CAOA,IAAME,GAAN,KAA6B,CAC3B,YAAYC,EAAmB,CAC7B,KAAK,kBAAoBA,EAEzB,KAAK,eAAiB,CAAC,EAEvB,KAAK,YAAc,WAMnB,KAAK,cAAgB,CACnB,KAAM,KACN,MAAO,EACP,SAAU,EACZ,CACF,CAKA,MAAMC,EAAO,CACX,KAAK,UAAUA,CAAK,CACtB,CAQA,KAAKC,EAAMC,EAAUC,EAAUC,EAAc,CAC3C,IAAMC,EAAW,KAAK,eAChBC,EAAW,KAAK,iCAAiCL,EAAMC,EAAUC,EAAUC,CAAY,EAC7F,GAAIE,IAAa,IAAMD,EAAS,OAAS,EACvC,OAAO,KAET,IAAME,EAAe,KAAK,cAAgB,aACpCC,EAAeH,EAAS,UAAUI,GAAeA,EAAY,OAASR,CAAI,EAC1ES,EAAuBL,EAASC,CAAQ,EACxCK,EAAkBN,EAASG,CAAY,EAAE,WACzCI,EAAcF,EAAqB,WACnCG,EAAQL,EAAeF,EAAW,EAAI,GAEtCQ,EAAa,KAAK,iBAAiBH,EAAiBC,EAAaC,CAAK,EAEtEE,EAAgB,KAAK,oBAAoBP,EAAcH,EAAUQ,CAAK,EAGtEG,GAAWX,EAAS,MAAM,EAEhC,OAAAY,GAAgBZ,EAAUG,EAAcF,CAAQ,EAChDD,EAAS,QAAQ,CAACa,EAASC,KAAU,CAEnC,GAAIH,GAASG,EAAK,IAAMD,EACtB,OAEF,IAAME,GAAgBF,EAAQ,OAASjB,EACjCoB,GAASD,GAAgBN,EAAaC,EACtCO,GAAkBF,GAAgBnB,EAAK,sBAAsB,EAAIiB,EAAQ,KAAK,eAAe,EAEnGA,EAAQ,QAAUG,GAKdd,GAGFe,GAAgB,MAAM,UAAYC,GAAkB,eAAe,KAAK,MAAML,EAAQ,MAAM,CAAC,YAAaA,EAAQ,gBAAgB,EAClIM,GAAcN,EAAQ,WAAY,EAAGG,EAAM,IAE3CC,GAAgB,MAAM,UAAYC,GAAkB,kBAAkB,KAAK,MAAML,EAAQ,MAAM,CAAC,SAAUA,EAAQ,gBAAgB,EAClIM,GAAcN,EAAQ,WAAYG,GAAQ,CAAC,EAE/C,CAAC,EAED,KAAK,cAAc,SAAWI,GAAmBb,EAAaV,EAAUC,CAAQ,EAChF,KAAK,cAAc,KAAOO,EAAqB,KAC/C,KAAK,cAAc,MAAQH,EAAeH,EAAa,EAAIA,EAAa,EACjE,CACL,cAAeI,EACf,aAAcF,CAChB,CACF,CASA,MAAML,EAAMC,EAAUC,EAAUgB,EAAO,CACrC,IAAMb,EAAWa,GAAS,MAAQA,EAAQ,EAG1C,KAAK,iCAAiClB,EAAMC,EAAUC,CAAQ,EAAIgB,EAC5DO,EAAmB,KAAK,kBACxBlB,EAAekB,EAAiB,QAAQzB,CAAI,EAC5C0B,EAAc1B,EAAK,sBAAsB,EAC3C2B,EAAuBF,EAAiBpB,CAAQ,EAmBpD,GAfIsB,IAAyB3B,IAC3B2B,EAAuBF,EAAiBpB,EAAW,CAAC,GAIlD,CAACsB,IAAyBtB,GAAY,MAAQA,IAAa,IAAMA,EAAWoB,EAAiB,OAAS,IAAM,KAAK,yBAAyBxB,EAAUC,CAAQ,IAC9JyB,EAAuBF,EAAiB,CAAC,GAIvClB,EAAe,IACjBkB,EAAiB,OAAOlB,EAAc,CAAC,EAIrCoB,GAAwB,CAAC,KAAK,kBAAkB,WAAWA,CAAoB,EAAG,CACpF,IAAMC,EAAUD,EAAqB,eAAe,EACpDC,EAAQ,cAAc,aAAaF,EAAaE,CAAO,EACvDH,EAAiB,OAAOpB,EAAU,EAAGL,CAAI,CAC3C,MACE,KAAK,SAAS,YAAY0B,CAAW,EACrCD,EAAiB,KAAKzB,CAAI,EAG5B0B,EAAY,MAAM,UAAY,GAI9B,KAAK,oBAAoB,CAC3B,CAEA,UAAU3B,EAAO,CACf,KAAK,kBAAoBA,EAAM,MAAM,EACrC,KAAK,oBAAoB,CAC3B,CAEA,kBAAkB8B,EAAW,CAC3B,KAAK,eAAiBA,CACxB,CAEA,OAAQ,CAEN,KAAK,mBAAmB,QAAQ7B,GAAQ,CACtC,IAAM8B,EAAc9B,EAAK,eAAe,EACxC,GAAI8B,EAAa,CACf,IAAMC,EAAmB,KAAK,eAAe,KAAKC,GAAKA,EAAE,OAAShC,CAAI,GAAG,iBACzE8B,EAAY,MAAM,UAAYC,GAAoB,EACpD,CACF,CAAC,EACD,KAAK,eAAiB,CAAC,EACvB,KAAK,kBAAoB,CAAC,EAC1B,KAAK,cAAc,KAAO,KAC1B,KAAK,cAAc,MAAQ,EAC3B,KAAK,cAAc,SAAW,EAChC,CAKA,wBAAyB,CACvB,OAAO,KAAK,iBACd,CAEA,aAAa/B,EAAM,CAKjB,OADc,KAAK,cAAgB,cAAgB,KAAK,YAAc,MAAQ,KAAK,eAAe,MAAM,EAAE,QAAQ,EAAI,KAAK,gBAC9G,UAAUQ,GAAeA,EAAY,OAASR,CAAI,CACjE,CAEA,eAAeiC,EAAeC,EAAgB,CAK5C,KAAK,eAAe,QAAQ,CAAC,CAC3B,WAAAC,CACF,IAAM,CACJZ,GAAcY,EAAYF,EAAeC,CAAc,CACzD,CAAC,EAGD,KAAK,eAAe,QAAQ,CAAC,CAC3B,KAAAE,CACF,IAAM,CACA,KAAK,kBAAkB,WAAWA,CAAI,GAGxCA,EAAK,6BAA6B,CAEtC,CAAC,CACH,CACA,qBAAqBC,EAAW,CAC9B,KAAK,SAAWA,CAClB,CAEA,qBAAsB,CACpB,IAAM/B,EAAe,KAAK,cAAgB,aAC1C,KAAK,eAAiB,KAAK,kBAAkB,IAAI8B,GAAQ,CACvD,IAAME,EAAmBF,EAAK,kBAAkB,EAChD,MAAO,CACL,KAAAA,EACA,OAAQ,EACR,iBAAkBE,EAAiB,MAAM,WAAa,GACtD,WAAYC,GAAqBD,CAAgB,CACnD,CACF,CAAC,EAAE,KAAK,CAACE,EAAGC,IACHnC,EAAekC,EAAE,WAAW,KAAOC,EAAE,WAAW,KAAOD,EAAE,WAAW,IAAMC,EAAE,WAAW,GAC/F,CACH,CAOA,iBAAiB/B,EAAiBC,EAAaC,EAAO,CACpD,IAAMN,EAAe,KAAK,cAAgB,aACtCO,EAAaP,EAAeK,EAAY,KAAOD,EAAgB,KAAOC,EAAY,IAAMD,EAAgB,IAE5G,OAAIE,IAAU,KACZC,GAAcP,EAAeK,EAAY,MAAQD,EAAgB,MAAQC,EAAY,OAASD,EAAgB,QAEzGG,CACT,CAOA,oBAAoBN,EAAcH,EAAUQ,EAAO,CACjD,IAAMN,EAAe,KAAK,cAAgB,aACpCI,EAAkBN,EAASG,CAAY,EAAE,WACzCmC,EAAmBtC,EAASG,EAAeK,EAAQ,EAAE,EACvDE,EAAgBJ,EAAgBJ,EAAe,QAAU,QAAQ,EAAIM,EACzE,GAAI8B,EAAkB,CACpB,IAAMC,EAAQrC,EAAe,OAAS,MAChCsC,EAAMtC,EAAe,QAAU,SAKjCM,IAAU,GACZE,GAAiB4B,EAAiB,WAAWC,CAAK,EAAIjC,EAAgBkC,CAAG,EAEzE9B,GAAiBJ,EAAgBiC,CAAK,EAAID,EAAiB,WAAWE,CAAG,CAE7E,CACA,OAAO9B,CACT,CAMA,yBAAyBb,EAAUC,EAAU,CAC3C,GAAI,CAAC,KAAK,kBAAkB,OAC1B,MAAO,GAET,IAAM2C,EAAgB,KAAK,eACrBvC,EAAe,KAAK,cAAgB,aAI1C,GADiBuC,EAAc,CAAC,EAAE,OAAS,KAAK,kBAAkB,CAAC,EACrD,CACZ,IAAMC,EAAeD,EAAcA,EAAc,OAAS,CAAC,EAAE,WAC7D,OAAOvC,EAAeL,GAAY6C,EAAa,MAAQ5C,GAAY4C,EAAa,MAClF,KAAO,CACL,IAAMC,EAAgBF,EAAc,CAAC,EAAE,WACvC,OAAOvC,EAAeL,GAAY8C,EAAc,KAAO7C,GAAY6C,EAAc,GACnF,CACF,CAQA,iCAAiC/C,EAAMC,EAAUC,EAAUU,EAAO,CAChE,IAAMN,EAAe,KAAK,cAAgB,aACpCY,EAAQ,KAAK,eAAe,UAAU,CAAC,CAC3C,KAAAkB,EACA,WAAAD,CACF,IAAM,CAEJ,GAAIC,IAASpC,EACX,MAAO,GAET,GAAIY,EAAO,CACT,IAAMoC,EAAY1C,EAAeM,EAAM,EAAIA,EAAM,EAIjD,GAAIwB,IAAS,KAAK,cAAc,MAAQ,KAAK,cAAc,UAAYY,IAAc,KAAK,cAAc,MACtG,MAAO,EAEX,CACA,OAAO1C,EAGPL,GAAY,KAAK,MAAMkC,EAAW,IAAI,GAAKlC,EAAW,KAAK,MAAMkC,EAAW,KAAK,EAAIjC,GAAY,KAAK,MAAMiC,EAAW,GAAG,GAAKjC,EAAW,KAAK,MAAMiC,EAAW,MAAM,CACxK,CAAC,EACD,OAAOjB,IAAU,IAAM,CAAC,KAAK,eAAeA,EAAOlB,CAAI,EAAI,GAAKkB,CAClE,CACF,EAOM+B,GAAN,KAAwB,CACtB,YAAYC,EAAWpD,EAAmB,CACxC,KAAK,UAAYoD,EACjB,KAAK,kBAAoBpD,EAMzB,KAAK,cAAgB,CACnB,KAAM,KACN,OAAQ,EACR,OAAQ,EACR,SAAU,EACZ,EAKA,KAAK,cAAgB,CAAC,CACxB,CAKA,MAAMC,EAAO,CACX,IAAMoD,EAAa,KAAK,SAAS,WACjC,KAAK,cAAgB,CAAC,EACtB,QAASC,EAAI,EAAGA,EAAID,EAAW,OAAQC,IAAK,CAC1C,IAAMC,EAAOF,EAAWC,CAAC,EACzB,KAAK,cAAc,KAAK,CAACC,EAAMA,EAAK,WAAW,CAAC,CAClD,CACA,KAAK,UAAUtD,CAAK,CACtB,CAQA,KAAKC,EAAMC,EAAUC,EAAUC,EAAc,CAC3C,IAAME,EAAW,KAAK,iCAAiCL,EAAMC,EAAUC,CAAQ,EACzEoD,EAAe,KAAK,cAC1B,GAAIjD,IAAa,IAAM,KAAK,aAAaA,CAAQ,IAAML,EACrD,OAAO,KAET,IAAMuD,EAAa,KAAK,aAAalD,CAAQ,EAE7C,GAAIiD,EAAa,OAASC,GAAcD,EAAa,UAAYA,EAAa,SAAWnD,EAAa,GAAKmD,EAAa,SAAWnD,EAAa,EAC9I,OAAO,KAET,IAAMqD,EAAgB,KAAK,aAAaxD,CAAI,EACtCyD,EAAUzD,EAAK,sBAAsB,EACrC0D,EAAiBH,EAAW,eAAe,EAC7ClD,EAAWmD,EACbE,EAAe,MAAMD,CAAO,EAE5BC,EAAe,OAAOD,CAAO,EAE/BzC,GAAgB,KAAK,aAAcwC,EAAenD,CAAQ,EAC1D,IAAMsD,EAAoB,KAAK,aAAa,EAAE,iBAAiB1D,EAAUC,CAAQ,EAGjF,OAAAoD,EAAa,OAASnD,EAAa,EACnCmD,EAAa,OAASnD,EAAa,EACnCmD,EAAa,KAAOC,EACpBD,EAAa,SAAWI,IAAmBC,GAAqBD,EAAe,SAASC,CAAiB,EAClG,CACL,cAAAH,EACA,aAAcnD,CAChB,CACF,CASA,MAAML,EAAMC,EAAUC,EAAUgB,EAAO,CACrC,IAAI0C,EAAa1C,GAAS,MAAQA,EAAQ,EAAI,KAAK,iCAAiClB,EAAMC,EAAUC,CAAQ,EAAIgB,EAI5G0C,IAAe,KACjBA,EAAa,KAAK,8BAA8B5D,EAAMC,EAAUC,CAAQ,GAE1E,IAAM2D,EAAa,KAAK,aAAaD,CAAU,EACzCrD,EAAe,KAAK,aAAa,QAAQP,CAAI,EAC/CO,EAAe,IACjB,KAAK,aAAa,OAAOA,EAAc,CAAC,EAEtCsD,GAAc,CAAC,KAAK,kBAAkB,WAAWA,CAAU,GAC7D,KAAK,aAAa,OAAOD,EAAY,EAAG5D,CAAI,EAC5C6D,EAAW,eAAe,EAAE,OAAO7D,EAAK,sBAAsB,CAAC,IAE/D,KAAK,aAAa,KAAKA,CAAI,EAC3B,KAAK,SAAS,YAAYA,EAAK,sBAAsB,CAAC,EAE1D,CAEA,UAAUD,EAAO,CACf,KAAK,aAAeA,EAAM,MAAM,CAClC,CAEA,kBAAkB8B,EAAW,CAC3B,KAAK,eAAiBA,CACxB,CAEA,OAAQ,CACN,IAAMiC,EAAO,KAAK,SACZR,EAAe,KAAK,cAQ1B,QAASF,EAAI,KAAK,cAAc,OAAS,EAAGA,EAAI,GAAIA,IAAK,CACvD,GAAM,CAACC,EAAMU,CAAW,EAAI,KAAK,cAAcX,CAAC,EAC5CC,EAAK,aAAeS,GAAQT,EAAK,cAAgBU,IAC/CA,IAAgB,KAClBD,EAAK,YAAYT,CAAI,EACZU,EAAY,aAAeD,GACpCA,EAAK,aAAaT,EAAMU,CAAW,EAGzC,CACA,KAAK,cAAgB,CAAC,EACtB,KAAK,aAAe,CAAC,EACrBT,EAAa,KAAO,KACpBA,EAAa,OAASA,EAAa,OAAS,EAC5CA,EAAa,SAAW,EAC1B,CAKA,wBAAyB,CACvB,OAAO,KAAK,YACd,CAEA,aAAatD,EAAM,CACjB,OAAO,KAAK,aAAa,QAAQA,CAAI,CACvC,CAEA,gBAAiB,CACf,KAAK,aAAa,QAAQA,GAAQ,CAC5B,KAAK,kBAAkB,WAAWA,CAAI,GAGxCA,EAAK,6BAA6B,CAEtC,CAAC,CACH,CACA,qBAAqBqC,EAAW,CAC1BA,IAAc,KAAK,WACrB,KAAK,SAAWA,EAChB,KAAK,UAAY,OAErB,CAQA,iCAAiCrC,EAAMC,EAAUC,EAAU,CACzD,IAAM8D,EAAiB,KAAK,aAAa,EAAE,iBAAiB,KAAK,MAAM/D,CAAQ,EAAG,KAAK,MAAMC,CAAQ,CAAC,EAChGgB,EAAQ8C,EAAiB,KAAK,aAAa,UAAUhE,GAAQ,CACjE,IAAM8D,EAAO9D,EAAK,eAAe,EACjC,OAAOgE,IAAmBF,GAAQA,EAAK,SAASE,CAAc,CAChE,CAAC,EAAI,GACL,OAAO9C,IAAU,IAAM,CAAC,KAAK,eAAeA,EAAOlB,CAAI,EAAI,GAAKkB,CAClE,CAEA,cAAe,CAEb,OAAK,KAAK,YACR,KAAK,UAAY+C,GAAe,KAAK,QAAQ,GAAK,KAAK,WAElD,KAAK,SACd,CAOA,8BAA8BjE,EAAMC,EAAUC,EAAU,CACtD,GAAI,KAAK,aAAa,SAAW,EAC/B,MAAO,GAET,GAAI,KAAK,aAAa,SAAW,EAC/B,MAAO,GAET,IAAIgE,EAAc,IACdC,EAAW,GAKf,QAASf,EAAI,EAAGA,EAAI,KAAK,aAAa,OAAQA,IAAK,CACjD,IAAMK,EAAU,KAAK,aAAaL,CAAC,EACnC,GAAIK,IAAYzD,EAAM,CACpB,GAAM,CACJ,EAAAoE,EACA,EAAAC,CACF,EAAIZ,EAAQ,eAAe,EAAE,sBAAsB,EAC7Ca,EAAW,KAAK,MAAMrE,EAAWmE,EAAGlE,EAAWmE,CAAC,EAClDC,EAAWJ,IACbA,EAAcI,EACdH,EAAWf,EAEf,CACF,CACA,OAAOe,CACT,CACF,EAMMI,GAA2B,IAK3BC,GAA6B,IAE/BC,EAA2C,SAAUA,EAA6B,CACpF,OAAAA,EAA4BA,EAA4B,KAAU,CAAC,EAAI,OACvEA,EAA4BA,EAA4B,GAAQ,CAAC,EAAI,KACrEA,EAA4BA,EAA4B,KAAU,CAAC,EAAI,OAChEA,CACT,EAAEA,GAA+B,CAAC,CAAC,EAE/BC,EAA6C,SAAUA,EAA+B,CACxF,OAAAA,EAA8BA,EAA8B,KAAU,CAAC,EAAI,OAC3EA,EAA8BA,EAA8B,KAAU,CAAC,EAAI,OAC3EA,EAA8BA,EAA8B,MAAW,CAAC,EAAI,QACrEA,CACT,EAAEA,GAAiC,CAAC,CAAC,EAI/BC,GAAN,KAAkB,CAChB,YAAY/C,EAAS9B,EAAmBoD,EAAW0B,EAASC,EAAgB,CAC1E,KAAK,kBAAoB/E,EACzB,KAAK,QAAU8E,EACf,KAAK,eAAiBC,EAEtB,KAAK,SAAW,GAEhB,KAAK,gBAAkB,GAKvB,KAAK,mBAAqB,GAE1B,KAAK,eAAiB,EAKtB,KAAK,eAAiB,IAAM,GAE5B,KAAK,cAAgB,IAAM,GAE3B,KAAK,cAAgB,IAAIC,EAIzB,KAAK,QAAU,IAAIA,EAKnB,KAAK,OAAS,IAAIA,EAElB,KAAK,QAAU,IAAIA,EAEnB,KAAK,OAAS,IAAIA,EAElB,KAAK,iBAAmB,IAAIA,EAE5B,KAAK,iBAAmB,IAAIA,EAE5B,KAAK,YAAc,GAEnB,KAAK,YAAc,CAAC,EAEpB,KAAK,UAAY,CAAC,EAElB,KAAK,gBAAkB,IAAI,IAE3B,KAAK,4BAA8BC,EAAa,MAEhD,KAAK,yBAA2BN,EAA4B,KAE5D,KAAK,2BAA6BC,EAA8B,KAEhE,KAAK,kBAAoB,IAAII,EAE7B,KAAK,kBAAoB,KAEzB,KAAK,oBAAsB,CAAC,EAE5B,KAAK,WAAa,MAElB,KAAK,qBAAuB,IAAM,CAChC,KAAK,eAAe,EACpBE,GAAS,EAAGC,EAAuB,EAAE,KAAKC,EAAU,KAAK,iBAAiB,CAAC,EAAE,UAAU,IAAM,CAC3F,IAAM7B,EAAO,KAAK,YACZ8B,EAAa,KAAK,eACpB,KAAK,2BAA6BV,EAA4B,GAChEpB,EAAK,SAAS,EAAG,CAAC8B,CAAU,EACnB,KAAK,2BAA6BV,EAA4B,MACvEpB,EAAK,SAAS,EAAG8B,CAAU,EAEzB,KAAK,6BAA+BT,EAA8B,KACpErB,EAAK,SAAS,CAAC8B,EAAY,CAAC,EACnB,KAAK,6BAA+BT,EAA8B,OAC3ErB,EAAK,SAAS8B,EAAY,CAAC,CAE/B,CAAC,CACH,EACA,IAAMC,EAAiB,KAAK,QAAUC,EAAczD,CAAO,EAC3D,KAAK,UAAYsB,EACjB,KAAK,gBAAgB,UAAU,EAAE,qBAAqBkC,CAAc,EACpEtF,EAAkB,sBAAsB,IAAI,EAC5C,KAAK,iBAAmB,IAAIwF,GAAsBpC,CAAS,CAC7D,CAEA,SAAU,CACR,KAAK,eAAe,EACpB,KAAK,kBAAkB,SAAS,EAChC,KAAK,4BAA4B,YAAY,EAC7C,KAAK,cAAc,SAAS,EAC5B,KAAK,QAAQ,SAAS,EACtB,KAAK,OAAO,SAAS,EACrB,KAAK,QAAQ,SAAS,EACtB,KAAK,OAAO,SAAS,EACrB,KAAK,iBAAiB,SAAS,EAC/B,KAAK,iBAAiB,SAAS,EAC/B,KAAK,gBAAgB,MAAM,EAC3B,KAAK,YAAc,KACnB,KAAK,iBAAiB,MAAM,EAC5B,KAAK,kBAAkB,oBAAoB,IAAI,CACjD,CAEA,YAAa,CACX,OAAO,KAAK,WACd,CAEA,OAAQ,CACN,KAAK,iBAAiB,EACtB,KAAK,yBAAyB,CAChC,CASA,MAAMlD,EAAMC,EAAUC,EAAUgB,EAAO,CACrC,KAAK,iBAAiB,EAGlBA,GAAS,MAAQ,KAAK,kBACxBA,EAAQ,KAAK,YAAY,QAAQlB,CAAI,GAEvC,KAAK,cAAc,MAAMA,EAAMC,EAAUC,EAAUgB,CAAK,EAGxD,KAAK,sBAAsB,EAE3B,KAAK,yBAAyB,EAC9B,KAAK,QAAQ,KAAK,CAChB,KAAAlB,EACA,UAAW,KACX,aAAc,KAAK,aAAaA,CAAI,CACtC,CAAC,CACH,CAKA,KAAKA,EAAM,CACT,KAAK,OAAO,EACZ,KAAK,OAAO,KAAK,CACf,KAAAA,EACA,UAAW,IACb,CAAC,CACH,CAcA,KAAKA,EAAMO,EAAciD,EAAe+B,EAAmBC,EAAwBlB,EAAUmB,EAAWC,EAAQ,CAAC,EAAG,CAClH,KAAK,OAAO,EACZ,KAAK,QAAQ,KAAK,CAChB,KAAA1F,EACA,aAAAO,EACA,cAAAiD,EACA,UAAW,KACX,kBAAA+B,EACA,uBAAAC,EACA,SAAAlB,EACA,UAAAmB,EACA,MAAAC,CACF,CAAC,CACH,CAKA,UAAU3F,EAAO,CACf,IAAM4F,EAAgB,KAAK,YAC3B,YAAK,YAAc5F,EACnBA,EAAM,QAAQC,GAAQA,EAAK,mBAAmB,IAAI,CAAC,EAC/C,KAAK,WAAW,IACG2F,EAAc,OAAO3F,GAAQA,EAAK,WAAW,CAAC,EAGlD,MAAMA,GAAQD,EAAM,QAAQC,CAAI,IAAM,EAAE,EACvD,KAAK,OAAO,EAEZ,KAAK,cAAc,UAAU,KAAK,WAAW,GAG1C,IACT,CAEA,cAAcgD,EAAW,CACvB,YAAK,WAAaA,EACd,KAAK,yBAAyBnD,KAChC,KAAK,cAAc,UAAYmD,GAE1B,IACT,CAMA,YAAY4C,EAAa,CACvB,YAAK,UAAYA,EAAY,MAAM,EAC5B,IACT,CAKA,gBAAgBC,EAAa,CAC3B,GAAIA,IAAgB,QAClB,KAAK,cAAgB,IAAI5C,GAAkB,KAAK,UAAW,KAAK,iBAAiB,MAC5E,CACL,IAAM6C,EAAW,IAAIjG,GAAuB,KAAK,iBAAiB,EAClEiG,EAAS,UAAY,KAAK,WAC1BA,EAAS,YAAcD,EACvB,KAAK,cAAgBC,CACvB,CACA,YAAK,cAAc,qBAAqB,KAAK,UAAU,EACvD,KAAK,cAAc,kBAAkB,CAAC5E,EAAOlB,IAAS,KAAK,cAAckB,EAAOlB,EAAM,IAAI,CAAC,EACpF,IACT,CAKA,sBAAsB+F,EAAU,CAC9B,IAAMnE,EAAU,KAAK,WAGrB,YAAK,oBAAsBmE,EAAS,QAAQnE,CAAO,IAAM,GAAK,CAACA,EAAS,GAAGmE,CAAQ,EAAIA,EAAS,MAAM,EAC/F,IACT,CAQA,qBAAqB1D,EAAW,CAC9B,GAAIA,IAAc,KAAK,WACrB,OAAO,KAET,IAAMT,EAAUyD,EAAc,KAAK,OAAO,EAIpCW,EAAoB,KAAK,oBAAoB,QAAQ,KAAK,UAAU,EACpEC,EAAoB,KAAK,oBAAoB,QAAQ5D,CAAS,EACpE,OAAI2D,EAAoB,IACtB,KAAK,oBAAoB,OAAOA,EAAmB,CAAC,EAElDC,EAAoB,IACtB,KAAK,oBAAoB,OAAOA,EAAmB,CAAC,EAElD,KAAK,eACP,KAAK,cAAc,qBAAqB5D,CAAS,EAEnD,KAAK,kBAAoB,KACzB,KAAK,oBAAoB,QAAQA,CAAS,EAC1C,KAAK,WAAaA,EACX,IACT,CAEA,sBAAuB,CACrB,OAAO,KAAK,mBACd,CAKA,aAAarC,EAAM,CACjB,OAAO,KAAK,YAAc,KAAK,cAAc,aAAaA,CAAI,EAAI,KAAK,YAAY,QAAQA,CAAI,CACjG,CAKA,aAAc,CACZ,OAAO,KAAK,gBAAgB,KAAO,CACrC,CAQA,UAAUA,EAAMC,EAAUC,EAAUC,EAAc,CAEhD,GAAI,KAAK,iBAAmB,CAAC,KAAK,UAAY,CAAC+F,GAAqB,KAAK,SAAU3B,GAA0BtE,EAAUC,CAAQ,EAC7H,OAEF,IAAMiG,EAAS,KAAK,cAAc,KAAKnG,EAAMC,EAAUC,EAAUC,CAAY,EACzEgG,GACF,KAAK,OAAO,KAAK,CACf,cAAeA,EAAO,cACtB,aAAcA,EAAO,aACrB,UAAW,KACX,KAAAnG,CACF,CAAC,CAEL,CAOA,2BAA2BC,EAAUC,EAAU,CAC7C,GAAI,KAAK,mBACP,OAEF,IAAIkG,EACAC,EAA0B5B,EAA4B,KACtD6B,EAA4B5B,EAA8B,KAgB9D,GAdA,KAAK,iBAAiB,UAAU,QAAQ,CAAC6B,EAAU3E,IAAY,CAGzDA,IAAY,KAAK,WAAa,CAAC2E,EAAS,YAAcH,GAGtDF,GAAqBK,EAAS,WAAYhC,GAA0BtE,EAAUC,CAAQ,IACxF,CAACmG,EAAyBC,CAAyB,EAAIE,GAA2B5E,EAAS2E,EAAS,WAAY,KAAK,WAAYtG,EAAUC,CAAQ,GAC/ImG,GAA2BC,KAC7BF,EAAaxE,GAGnB,CAAC,EAEG,CAACyE,GAA2B,CAACC,EAA2B,CAC1D,GAAM,CACJ,MAAAG,EACA,OAAAC,CACF,EAAI,KAAK,eAAe,gBAAgB,EAClCC,EAAU,CACd,MAAAF,EACA,OAAAC,EACA,IAAK,EACL,MAAOD,EACP,OAAQC,EACR,KAAM,CACR,EACAL,EAA0BO,GAA2BD,EAASzG,CAAQ,EACtEoG,EAA4BO,GAA6BF,EAAS1G,CAAQ,EAC1EmG,EAAa,MACf,CACIA,IAAeC,IAA4B,KAAK,0BAA4BC,IAA8B,KAAK,4BAA8BF,IAAe,KAAK,eACnK,KAAK,yBAA2BC,EAChC,KAAK,2BAA6BC,EAClC,KAAK,YAAcF,GACdC,GAA2BC,IAA8BF,EAC5D,KAAK,QAAQ,kBAAkB,KAAK,oBAAoB,EAExD,KAAK,eAAe,EAG1B,CAEA,gBAAiB,CACf,KAAK,kBAAkB,KAAK,CAC9B,CAEA,kBAAmB,CACjB,IAAMU,EAAS,KAAK,WAAW,MAC/B,KAAK,cAAc,KAAK,EACxB,KAAK,YAAc,GAcnB,KAAK,mBAAqBA,EAAO,kBAAoBA,EAAO,gBAAkB,GAC9EA,EAAO,eAAiBA,EAAO,iBAAmB,OAClD,KAAK,cAAc,MAAM,KAAK,WAAW,EACzC,KAAK,sBAAsB,EAC3B,KAAK,4BAA4B,YAAY,EAC7C,KAAK,sBAAsB,CAC7B,CAEA,uBAAwB,CACtB,KAAK,iBAAiB,MAAM,KAAK,mBAAmB,EAGpD,KAAK,SAAW,KAAK,iBAAiB,UAAU,IAAI,KAAK,UAAU,EAAE,UACvE,CAEA,QAAS,CACP,KAAK,YAAc,GACnB,IAAMA,EAAS,KAAK,WAAW,MAC/BA,EAAO,eAAiBA,EAAO,iBAAmB,KAAK,mBACvD,KAAK,UAAU,QAAQ7F,GAAWA,EAAQ,eAAe,IAAI,CAAC,EAC9D,KAAK,cAAc,MAAM,EACzB,KAAK,eAAe,EACpB,KAAK,4BAA4B,YAAY,EAC7C,KAAK,iBAAiB,MAAM,CAC9B,CAMA,iBAAiBmD,EAAGC,EAAG,CACrB,OAAO,KAAK,UAAY,MAAQ7C,GAAmB,KAAK,SAAU4C,EAAGC,CAAC,CACxE,CAQA,iCAAiCrE,EAAMoE,EAAGC,EAAG,CAC3C,OAAO,KAAK,UAAU,KAAKpD,GAAWA,EAAQ,YAAYjB,EAAMoE,EAAGC,CAAC,CAAC,CACvE,CAOA,YAAYrE,EAAMoE,EAAGC,EAAG,CACtB,GAAI,CAAC,KAAK,UAAY,CAAC7C,GAAmB,KAAK,SAAU4C,EAAGC,CAAC,GAAK,CAAC,KAAK,eAAerE,EAAM,IAAI,EAC/F,MAAO,GAET,IAAM+G,EAAmB,KAAK,eAAe,EAAE,iBAAiB3C,EAAGC,CAAC,EAGpE,OAAK0C,EASEA,IAAqB,KAAK,YAAc,KAAK,WAAW,SAASA,CAAgB,EAR/E,EASX,CAKA,gBAAgB9F,EAASlB,EAAO,CAC9B,IAAMiH,EAAiB,KAAK,gBACxB,CAACA,EAAe,IAAI/F,CAAO,GAAKlB,EAAM,MAAMC,GAKvC,KAAK,eAAeA,EAAM,IAAI,GAAK,KAAK,YAAY,QAAQA,CAAI,EAAI,EAC5E,IACCgH,EAAe,IAAI/F,CAAO,EAC1B,KAAK,sBAAsB,EAC3B,KAAK,sBAAsB,EAC3B,KAAK,iBAAiB,KAAK,CACzB,UAAWA,EACX,SAAU,KACV,MAAAlB,CACF,CAAC,EAEL,CAKA,eAAekB,EAAS,CACtB,KAAK,gBAAgB,OAAOA,CAAO,EACnC,KAAK,4BAA4B,YAAY,EAC7C,KAAK,iBAAiB,KAAK,CACzB,UAAWA,EACX,SAAU,IACZ,CAAC,CACH,CAKA,uBAAwB,CACtB,KAAK,4BAA8B,KAAK,kBAAkB,SAAS,KAAK,eAAe,CAAC,EAAE,UAAUyE,GAAS,CAC3G,GAAI,KAAK,WAAW,EAAG,CACrB,IAAMuB,EAAmB,KAAK,iBAAiB,aAAavB,CAAK,EAC7DuB,GACF,KAAK,cAAc,eAAeA,EAAiB,IAAKA,EAAiB,IAAI,CAEjF,MAAW,KAAK,YAAY,GAC1B,KAAK,sBAAsB,CAE/B,CAAC,CACH,CAOA,gBAAiB,CACf,GAAI,CAAC,KAAK,kBAAmB,CAC3B,IAAMC,EAAajD,GAAe,KAAK,UAAU,EACjD,KAAK,kBAAoBiD,GAAc,KAAK,SAC9C,CACA,OAAO,KAAK,iBACd,CAEA,0BAA2B,CACzB,IAAMC,EAAe,KAAK,cAAc,uBAAuB,EAAE,OAAOnH,GAAQA,EAAK,WAAW,CAAC,EACjG,KAAK,UAAU,QAAQiB,GAAWA,EAAQ,gBAAgB,KAAMkG,CAAY,CAAC,CAC/E,CACF,EAMA,SAASP,GAA2BzE,EAAYjC,EAAU,CACxD,GAAM,CACJ,IAAAkH,EACA,OAAAC,EACA,OAAAX,CACF,EAAIvE,EACEmF,EAAaZ,EAASlC,GAC5B,OAAItE,GAAYkH,EAAME,GAAcpH,GAAYkH,EAAME,EAC7C7C,EAA4B,GAC1BvE,GAAYmH,EAASC,GAAcpH,GAAYmH,EAASC,EAC1D7C,EAA4B,KAE9BA,EAA4B,IACrC,CAMA,SAASoC,GAA6B1E,EAAYlC,EAAU,CAC1D,GAAM,CACJ,KAAAsH,EACA,MAAAC,EACA,MAAAf,CACF,EAAItE,EACEsF,EAAahB,EAAQjC,GAC3B,OAAIvE,GAAYsH,EAAOE,GAAcxH,GAAYsH,EAAOE,EAC/C/C,EAA8B,KAC5BzE,GAAYuH,EAAQC,GAAcxH,GAAYuH,EAAQC,EACxD/C,EAA8B,MAEhCA,EAA8B,IACvC,CAUA,SAAS8B,GAA2B5E,EAASO,EAAYa,EAAW/C,EAAUC,EAAU,CACtF,IAAMwH,EAAmBd,GAA2BzE,EAAYjC,CAAQ,EAClEyH,EAAqBd,GAA6B1E,EAAYlC,CAAQ,EACxEoG,EAA0B5B,EAA4B,KACtD6B,EAA4B5B,EAA8B,KAK9D,GAAIgD,EAAkB,CACpB,IAAME,EAAYhG,EAAQ,UACtB8F,IAAqBjD,EAA4B,GAC/CmD,EAAY,IACdvB,EAA0B5B,EAA4B,IAE/C7C,EAAQ,aAAegG,EAAYhG,EAAQ,eACpDyE,EAA0B5B,EAA4B,KAE1D,CACA,GAAIkD,EAAoB,CACtB,IAAME,EAAajG,EAAQ,WACvBoB,IAAc,MACZ2E,IAAuBjD,EAA8B,MAEnDmD,EAAa,IACfvB,EAA4B5B,EAA8B,OAEnD9C,EAAQ,YAAciG,EAAajG,EAAQ,cACpD0E,EAA4B5B,EAA8B,MAGxDiD,IAAuBjD,EAA8B,KACnDmD,EAAa,IACfvB,EAA4B5B,EAA8B,MAEnD9C,EAAQ,YAAciG,EAAajG,EAAQ,cACpD0E,EAA4B5B,EAA8B,MAGhE,CACA,MAAO,CAAC2B,EAAyBC,CAAyB,CAC5D,CAGA,IAAMwB,GAA2CC,EAAgC,CAC/E,QAAS,GACT,QAAS,EACX,CAAC,EAEKC,GAA0B,IAAI,IAKhCC,IAA8B,IAAM,CACtC,IAAMC,EAAN,MAAMA,CAAc,CAqBpB,EAnBIA,EAAK,UAAO,SAA+BC,EAAG,CAC5C,OAAO,IAAKA,GAAKD,EACnB,EAGAA,EAAK,UAAyBE,GAAkB,CAC9C,KAAMF,EACN,UAAW,CAAC,CAAC,cAAc,CAAC,EAC5B,UAAW,CAAC,4BAA6B,EAAE,EAC3C,WAAY,GACZ,SAAU,CAAIG,EAAmB,EACjC,MAAO,EACP,KAAM,EACN,SAAU,SAAgCC,EAAIC,EAAK,CAAC,EACpD,OAAQ,CAAC,sKAAsK,EAC/K,cAAe,EACf,gBAAiB,CACnB,CAAC,EAnBL,IAAMN,EAANC,EAsBA,OAAOD,CACT,GAAG,EAYCO,IAAiC,IAAM,CACzC,IAAMC,EAAN,MAAMA,CAAiB,CACrB,YAAY7D,EAAS1B,EAAW,CAC9B,KAAK,QAAU0B,EACf,KAAK,QAAU8D,EAAOC,EAAc,EACpC,KAAK,qBAAuBD,EAAOE,EAAmB,EAEtD,KAAK,eAAiB,IAAI,IAE1B,KAAK,eAAiB,IAAI,IAE1B,KAAK,qBAAuBC,GAAO,CAAC,CAAC,EAErC,KAAK,iBAAmB,IAAI,IAK5B,KAAK,mBAAqB7I,GAAQA,EAAK,WAAW,EAKlD,KAAK,YAAc,IAAI8E,EAKvB,KAAK,UAAY,IAAIA,EAMrB,KAAK,OAAS,IAAIA,EAKlB,KAAK,6BAA+BY,GAAS,CACvC,KAAK,qBAAqB,EAAE,OAAS,GACvCA,EAAM,eAAe,CAEzB,EAEA,KAAK,6BAA+BA,GAAS,CACvC,KAAK,qBAAqB,EAAE,OAAS,IAInC,KAAK,qBAAqB,EAAE,KAAK,KAAK,kBAAkB,GAC1DA,EAAM,eAAe,EAEvB,KAAK,YAAY,KAAKA,CAAK,EAE/B,EACA,KAAK,UAAYxC,CACnB,CAEA,sBAAsB4F,EAAM,CACrB,KAAK,eAAe,IAAIA,CAAI,GAC/B,KAAK,eAAe,IAAIA,CAAI,CAEhC,CAEA,iBAAiB1G,EAAM,CACrB,KAAK,eAAe,IAAIA,CAAI,EAIxB,KAAK,eAAe,OAAS,GAC/B,KAAK,QAAQ,kBAAkB,IAAM,CAGnC,KAAK,UAAU,iBAAiB,YAAa,KAAK,6BAA8B0F,EAA2B,CAC7G,CAAC,CAEL,CAEA,oBAAoBgB,EAAM,CACxB,KAAK,eAAe,OAAOA,CAAI,CACjC,CAEA,eAAe1G,EAAM,CACnB,KAAK,eAAe,OAAOA,CAAI,EAC/B,KAAK,aAAaA,CAAI,EAClB,KAAK,eAAe,OAAS,GAC/B,KAAK,UAAU,oBAAoB,YAAa,KAAK,6BAA8B0F,EAA2B,CAElH,CAMA,cAAc1F,EAAMsD,EAAO,CAEzB,GAAI,OAAK,qBAAqB,EAAE,QAAQtD,CAAI,EAAI,MAGhD,KAAK,YAAY,EACjB,KAAK,qBAAqB,OAAO2G,GAAa,CAAC,GAAGA,EAAW3G,CAAI,CAAC,EAC9D,KAAK,qBAAqB,EAAE,SAAW,GAAG,CAC5C,IAAM4G,EAAetD,EAAM,KAAK,WAAW,OAAO,EAIlD,KAAK,iBAAiB,IAAIsD,EAAe,WAAa,UAAW,CAC/D,QAASC,GAAK,KAAK,UAAU,KAAKA,CAAC,EACnC,QAAS,EACX,CAAC,EAAE,IAAI,SAAU,CACf,QAASA,GAAK,KAAK,OAAO,KAAKA,CAAC,EAGhC,QAAS,EACX,CAAC,EAKA,IAAI,cAAe,CAClB,QAAS,KAAK,6BACd,QAASnB,EACX,CAAC,EAGIkB,GACH,KAAK,iBAAiB,IAAI,YAAa,CACrC,QAASC,GAAK,KAAK,YAAY,KAAKA,CAAC,EACrC,QAASnB,EACX,CAAC,EAEH,KAAK,QAAQ,kBAAkB,IAAM,CACnC,KAAK,iBAAiB,QAAQ,CAACoB,EAAQC,IAAS,CAC9C,KAAK,UAAU,iBAAiBA,EAAMD,EAAO,QAASA,EAAO,OAAO,CACtE,CAAC,CACH,CAAC,CACH,CACF,CAEA,aAAa9G,EAAM,CACjB,KAAK,qBAAqB,OAAO2G,GAAa,CAC5C,IAAM7H,EAAQ6H,EAAU,QAAQ3G,CAAI,EACpC,OAAIlB,EAAQ,IACV6H,EAAU,OAAO7H,EAAO,CAAC,EAClB,CAAC,GAAG6H,CAAS,GAEfA,CACT,CAAC,EACG,KAAK,qBAAqB,EAAE,SAAW,GACzC,KAAK,sBAAsB,CAE/B,CAEA,WAAW3G,EAAM,CACf,OAAO,KAAK,qBAAqB,EAAE,QAAQA,CAAI,EAAI,EACrD,CAQA,SAAS8E,EAAY,CACnB,IAAMkC,EAAU,CAAC,KAAK,MAAM,EAC5B,OAAIlC,GAAcA,IAAe,KAAK,WAIpCkC,EAAQ,KAAK,IAAIC,EAAWC,GACnB,KAAK,QAAQ,kBAAkB,IAAM,CAE1C,IAAMC,EAAW7D,GAAS,CACpB,KAAK,qBAAqB,EAAE,QAC9B4D,EAAS,KAAK5D,CAAK,CAEvB,EACA,OAAAwB,EAAW,iBAAiB,SAAUqC,EAAU,EAAY,EACrD,IAAM,CACXrC,EAAW,oBAAoB,SAAUqC,EAAU,EAAY,CACjE,CACF,CAAC,CACF,CAAC,EAEGC,GAAM,GAAGJ,CAAO,CACzB,CACA,aAAc,CACZ,KAAK,eAAe,QAAQK,GAAY,KAAK,eAAeA,CAAQ,CAAC,EACrE,KAAK,eAAe,QAAQA,GAAY,KAAK,oBAAoBA,CAAQ,CAAC,EAC1E,KAAK,sBAAsB,EAC3B,KAAK,YAAY,SAAS,EAC1B,KAAK,UAAU,SAAS,CAC1B,CAEA,uBAAwB,CACtB,KAAK,iBAAiB,QAAQ,CAACP,EAAQC,IAAS,CAC9C,KAAK,UAAU,oBAAoBA,EAAMD,EAAO,QAASA,EAAO,OAAO,CACzE,CAAC,EACD,KAAK,iBAAiB,MAAM,CAC9B,CAGA,aAAc,CACZ,GAAI,CAAClB,GAAW,IAAI,KAAK,OAAO,EAAG,CACjCA,GAAW,IAAI,KAAK,OAAO,EAC3B,IAAM0B,EAAeC,GAAgB1B,GAAe,CAClD,oBAAqB,KAAK,oBAC5B,CAAC,EACD,KAAK,QAAQ,UAAU,IAAM,CAC3BD,GAAW,OAAO,KAAK,OAAO,EAC1BA,GAAW,OAAS,GACtB0B,EAAa,QAAQ,CAEzB,CAAC,CACH,CACF,CAaF,EAXIjB,EAAK,UAAO,SAAkCN,EAAG,CAC/C,OAAO,IAAKA,GAAKM,GAAqBmB,EAAYC,CAAM,EAAMD,EAASE,CAAQ,CAAC,CAClF,EAGArB,EAAK,WAA0BsB,EAAmB,CAChD,MAAOtB,EACP,QAASA,EAAiB,UAC1B,WAAY,MACd,CAAC,EAlOL,IAAMD,EAANC,EAqOA,OAAOD,CACT,GAAG,EAMGwB,GAAiB,CACrB,mBAAoB,EACpB,gCAAiC,CACnC,EAIIC,IAAyB,IAAM,CACjC,IAAMC,EAAN,MAAMA,CAAS,CACb,YAAYhH,EAAW0B,EAASC,EAAgB/E,EAAmB,CACjE,KAAK,UAAYoD,EACjB,KAAK,QAAU0B,EACf,KAAK,eAAiBC,EACtB,KAAK,kBAAoB/E,CAC3B,CAMA,WAAW8B,EAASsH,EAASc,GAAgB,CAC3C,OAAO,IAAIG,GAAQvI,EAASsH,EAAQ,KAAK,UAAW,KAAK,QAAS,KAAK,eAAgB,KAAK,iBAAiB,CAC/G,CAKA,eAAetH,EAAS,CACtB,OAAO,IAAI+C,GAAY/C,EAAS,KAAK,kBAAmB,KAAK,UAAW,KAAK,QAAS,KAAK,cAAc,CAC3G,CAaF,EAXIsI,EAAK,UAAO,SAA0B/B,EAAG,CACvC,OAAO,IAAKA,GAAK+B,GAAaN,EAASE,CAAQ,EAAMF,EAAYC,CAAM,EAAMD,EAAYQ,EAAa,EAAMR,EAASpB,EAAgB,CAAC,CACxI,EAGA0B,EAAK,WAA0BH,EAAmB,CAChD,MAAOG,EACP,QAASA,EAAS,UAClB,WAAY,MACd,CAAC,EAhCL,IAAMD,EAANC,EAmCA,OAAOD,CACT,GAAG,EAWGI,GAA+B,IAAIC,EAAe,iBAAiB,EAkBzE,IAAMC,GAA+B,IAAIC,EAAe,eAAe,EAEnEC,IAA8B,IAAM,CACtC,IAAMC,EAAN,MAAMA,CAAc,CAElB,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASC,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,cAAc,KAAK,IAAI,CAC9B,CACA,YAAYC,EAASC,EAAa,CAChC,KAAK,QAAUD,EACf,KAAK,YAAcC,EAEnB,KAAK,cAAgB,IAAIC,EACzB,KAAK,UAAY,GAIjBD,GAAa,WAAW,IAAI,CAC9B,CACA,aAAc,CACZ,KAAK,aAAa,cAAc,IAAI,EACpC,KAAK,cAAc,SAAS,CAC9B,CAqBF,EAnBIH,EAAK,UAAO,SAA+BK,EAAG,CAC5C,OAAO,IAAKA,GAAKL,GAAkBM,EAAqBC,CAAU,EAAMD,EAAkBE,GAAiB,EAAE,CAAC,CAChH,EAGAR,EAAK,UAAyBS,EAAkB,CAC9C,KAAMT,EACN,UAAW,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EACrC,UAAW,CAAC,EAAG,iBAAiB,EAChC,OAAQ,CACN,SAAU,CAAC,EAAG,wBAAyB,WAAYU,CAAgB,CACrE,EACA,WAAY,GACZ,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAASd,GACT,YAAaG,CACf,CAAC,CAAC,EAAMY,CAAwB,CAClC,CAAC,EA1CL,IAAMb,EAANC,EA6CA,OAAOD,CACT,GAAG,EASGc,GAA+B,IAAIf,EAAe,iBAAiB,EACnEgB,GAAkB,WAMlBC,GAA6B,IAAIjB,EAAe,aAAa,EAE/DkB,IAAwB,IAAM,CAChC,IAAMC,EAAN,MAAMA,CAAQ,CAKZ,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,KAAK,eAAiB,KAAK,cAAc,QACpE,CACA,IAAI,SAAShB,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,SAAS,SAAW,KAAK,SAChC,CACA,YACAC,EACAgB,EAKAC,EAAWC,EAASC,EAAmBC,EAAQC,EAAMC,EAAUC,EAAoBC,EAAavB,EAAa,CAC3G,KAAK,QAAUD,EACf,KAAK,cAAgBgB,EACrB,KAAK,QAAUE,EACf,KAAK,kBAAoBC,EACzB,KAAK,KAAOE,EACZ,KAAK,mBAAqBE,EAC1B,KAAK,YAAcC,EACnB,KAAK,YAAcvB,EACnB,KAAK,WAAa,IAAIC,EACtB,KAAK,SAAW,IAAIuB,GAAgB,CAAC,CAAC,EAEtC,KAAK,QAAU,IAAIC,EAEnB,KAAK,SAAW,IAAIA,EAEpB,KAAK,MAAQ,IAAIA,EAEjB,KAAK,QAAU,IAAIA,EAEnB,KAAK,OAAS,IAAIA,EAElB,KAAK,QAAU,IAAIA,EAKnB,KAAK,MAAQ,IAAIC,EAAWC,GAAY,CACtC,IAAMC,GAAe,KAAK,SAAS,MAAM,KAAKC,GAAIC,IAAe,CAC/D,OAAQ,KACR,gBAAiBA,EAAW,gBAC5B,MAAOA,EAAW,MAClB,MAAOA,EAAW,MAClB,SAAUA,EAAW,QACvB,EAAE,CAAC,EAAE,UAAUH,CAAQ,EACvB,MAAO,IAAM,CACXC,GAAa,YAAY,CAC3B,CACF,CAAC,EACD,KAAK,UAAYG,EAAOC,EAAQ,EAChC,KAAK,SAAWX,EAAS,WAAWtB,EAAS,CAC3C,mBAAoBoB,GAAUA,EAAO,oBAAsB,KAAOA,EAAO,mBAAqB,EAC9F,gCAAiCA,GAAUA,EAAO,iCAAmC,KAAOA,EAAO,gCAAkC,EACrI,OAAQA,GAAQ,MAClB,CAAC,EACD,KAAK,SAAS,KAAO,KAIrBL,EAAQ,eAAe,KAAK,IAAI,EAC5BK,GACF,KAAK,gBAAgBA,CAAM,EASzBJ,IACF,KAAK,SAAS,mBAAmBA,EAAc,YAAY,EAC3DA,EAAc,QAAQ,IAAI,GAE5B,KAAK,YAAY,KAAK,QAAQ,EAC9B,KAAK,cAAc,KAAK,QAAQ,CAClC,CAKA,uBAAwB,CACtB,OAAO,KAAK,SAAS,sBAAsB,CAC7C,CAEA,gBAAiB,CACf,OAAO,KAAK,SAAS,eAAe,CACtC,CAEA,OAAQ,CACN,KAAK,SAAS,MAAM,CACtB,CAIA,qBAAsB,CACpB,OAAO,KAAK,SAAS,oBAAoB,CAC3C,CAKA,oBAAoBjB,EAAO,CACzB,KAAK,SAAS,oBAAoBA,CAAK,CACzC,CACA,iBAAkB,CAKhBmC,GAAgB,IAAM,CACpB,KAAK,mBAAmB,EACxB,KAAK,sBAAsB,EACvB,KAAK,kBACP,KAAK,SAAS,oBAAoB,KAAK,gBAAgB,CAE3D,EAAG,CACD,SAAU,KAAK,SACjB,CAAC,CACH,CACA,YAAYC,EAAS,CACnB,IAAMC,EAAqBD,EAAQ,oBAC7BE,EAAiBF,EAAQ,iBAG3BC,GAAsB,CAACA,EAAmB,aAC5C,KAAK,mBAAmB,EAItBC,GAAkB,CAACA,EAAe,aAAe,KAAK,kBACxD,KAAK,SAAS,oBAAoB,KAAK,gBAAgB,CAE3D,CACA,aAAc,CACR,KAAK,eACP,KAAK,cAAc,WAAW,IAAI,EAEpC,IAAMC,EAAQvB,EAAQ,eAAe,QAAQ,IAAI,EAC7CuB,EAAQ,IACVvB,EAAQ,eAAe,OAAOuB,EAAO,CAAC,EAGxC,KAAK,QAAQ,kBAAkB,IAAM,CACnC,KAAK,SAAS,SAAS,EACvB,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,EACzB,KAAK,SAAS,QAAQ,CACxB,CAAC,CACH,CACA,WAAWC,EAAQ,CACjB,IAAMC,EAAU,KAAK,SAAS,SAAS,EACvCA,EAAQ,KAAKD,CAAM,EACnB,KAAK,SAAS,KAAKC,CAAO,CAC5B,CACA,cAAcD,EAAQ,CACpB,IAAMC,EAAU,KAAK,SAAS,SAAS,EACjCF,EAAQE,EAAQ,QAAQD,CAAM,EAChCD,EAAQ,KACVE,EAAQ,OAAOF,EAAO,CAAC,EACvB,KAAK,SAAS,KAAKE,CAAO,EAE9B,CACA,oBAAoBC,EAAS,CAC3B,KAAK,iBAAmBA,CAC1B,CACA,sBAAsBA,EAAS,CACzBA,IAAY,KAAK,mBACnB,KAAK,iBAAmB,KAE5B,CACA,wBAAwBC,EAAa,CACnC,KAAK,qBAAuBA,CAC9B,CACA,0BAA0BA,EAAa,CACjCA,IAAgB,KAAK,uBACvB,KAAK,qBAAuB,KAEhC,CAEA,oBAAqB,CACnB,IAAM1C,EAAU,KAAK,QAAQ,cACzB2C,EAAc3C,EACd,KAAK,sBACP2C,EAAc3C,EAAQ,UAAY,OAAYA,EAAQ,QAAQ,KAAK,mBAAmB,EAEtFA,EAAQ,eAAe,QAAQ,KAAK,mBAAmB,GAKzD,KAAK,SAAS,gBAAgB2C,GAAe3C,CAAO,CACtD,CAEA,qBAAsB,CACpB,IAAM4C,EAAW,KAAK,gBACtB,OAAKA,EAGD,OAAOA,GAAa,SACf,KAAK,QAAQ,cAAc,QAAQA,CAAQ,EAE7CC,EAAcD,CAAQ,EALpB,IAMX,CAEA,YAAYE,EAAK,CACfA,EAAI,cAAc,UAAU,IAAM,CAChC,GAAI,CAACA,EAAI,WAAW,EAAG,CACrB,IAAMC,EAAM,KAAK,KACXC,EAAiB,KAAK,eACtBN,EAAc,KAAK,qBAAuB,CAC9C,SAAU,KAAK,qBAAqB,YACpC,QAAS,KAAK,qBAAqB,KACnC,cAAe,KAAK,iBACtB,EAAI,KACED,EAAU,KAAK,iBAAmB,CACtC,SAAU,KAAK,iBAAiB,YAChC,QAAS,KAAK,iBAAiB,KAC/B,UAAW,KAAK,iBAAiB,UACjC,cAAe,KAAK,iBACtB,EAAI,KACJK,EAAI,SAAW,KAAK,SACpBA,EAAI,SAAW,KAAK,SACpBA,EAAI,eAAiB,OAAOE,GAAmB,UAAYA,EAAiBA,EAAiBC,EAAqBD,CAAc,EAChIF,EAAI,kBAAoB,KAAK,kBAC7BA,EAAI,aAAe,KAAK,aACxBA,EAAI,oBAAoB,KAAK,oBAAoB,CAAC,EAAE,wBAAwBJ,CAAW,EAAE,oBAAoBD,CAAO,EAAE,qBAAqB,KAAK,kBAAoB,QAAQ,EACxKM,GACFD,EAAI,cAAcC,EAAI,KAAK,CAE/B,CACF,CAAC,EAEDD,EAAI,cAAc,KAAKI,GAAK,CAAC,CAAC,EAAE,UAAU,IAAM,CAE9C,GAAI,KAAK,YAAa,CACpBJ,EAAI,WAAW,KAAK,YAAY,QAAQ,EACxC,MACF,CAGA,IAAIK,EAAS,KAAK,QAAQ,cAAc,cACxC,KAAOA,GAAQ,CACb,GAAIA,EAAO,UAAU,SAASvC,EAAe,EAAG,CAC9CkC,EAAI,WAAW/B,EAAQ,eAAe,KAAKqC,GAClCA,EAAK,QAAQ,gBAAkBD,CACvC,GAAG,UAAY,IAAI,EACpB,KACF,CACAA,EAASA,EAAO,aAClB,CACF,CAAC,CACH,CAEA,cAAcL,EAAK,CACjBA,EAAI,QAAQ,UAAUO,GAAc,CAClC,KAAK,QAAQ,KAAK,CAChB,OAAQ,KACR,MAAOA,EAAW,KACpB,CAAC,EAGD,KAAK,mBAAmB,aAAa,CACvC,CAAC,EACDP,EAAI,SAAS,UAAUQ,GAAgB,CACrC,KAAK,SAAS,KAAK,CACjB,OAAQ,KACR,MAAOA,EAAa,KACtB,CAAC,CACH,CAAC,EACDR,EAAI,MAAM,UAAUS,GAAY,CAC9B,KAAK,MAAM,KAAK,CACd,OAAQ,KACR,SAAUA,EAAS,SACnB,UAAWA,EAAS,UACpB,MAAOA,EAAS,KAClB,CAAC,EAGD,KAAK,mBAAmB,aAAa,CACvC,CAAC,EACDT,EAAI,QAAQ,UAAUU,GAAc,CAClC,KAAK,QAAQ,KAAK,CAChB,UAAWA,EAAW,UAAU,KAChC,KAAM,KACN,aAAcA,EAAW,YAC3B,CAAC,CACH,CAAC,EACDV,EAAI,OAAO,UAAUW,GAAa,CAChC,KAAK,OAAO,KAAK,CACf,UAAWA,EAAU,UAAU,KAC/B,KAAM,IACR,CAAC,CACH,CAAC,EACDX,EAAI,QAAQ,UAAUY,GAAa,CACjC,KAAK,QAAQ,KAAK,CAChB,cAAeA,EAAU,cACzB,aAAcA,EAAU,aACxB,kBAAmBA,EAAU,kBAAkB,KAC/C,UAAWA,EAAU,UAAU,KAC/B,uBAAwBA,EAAU,uBAClC,KAAM,KACN,SAAUA,EAAU,SACpB,UAAWA,EAAU,UACrB,MAAOA,EAAU,KACnB,CAAC,CACH,CAAC,CACH,CAEA,gBAAgBtC,EAAQ,CACtB,GAAM,CACJ,SAAAuC,EACA,eAAAX,EACA,kBAAAY,EACA,aAAAC,EACA,gBAAAC,EACA,iBAAAC,EACA,oBAAAC,EACA,iBAAAC,CACF,EAAI7C,EACJ,KAAK,SAAW2C,GAA2B,GAC3C,KAAK,eAAiBf,GAAkB,EACpCW,IACF,KAAK,SAAWA,GAEdC,IACF,KAAK,kBAAoBA,GAEvBC,IACF,KAAK,aAAeA,GAElBC,IACF,KAAK,gBAAkBA,GAErBE,IACF,KAAK,oBAAsBA,GAEzBC,IACF,KAAK,iBAAmBA,EAE5B,CAEA,uBAAwB,CAEtB,KAAK,SAAS,KAEdC,GAAI1B,GAAW,CACb,IAAM2B,EAAiB3B,EAAQ,IAAID,GAAUA,EAAO,OAAO,EAIvD,KAAK,aAAe,KAAK,qBAC3B4B,EAAe,KAAK,KAAK,OAAO,EAElC,KAAK,SAAS,YAAYA,CAAc,CAC1C,CAAC,EAEDC,GAAU5B,GACD6B,GAAM,GAAG7B,EAAQ,IAAI8B,GAAQA,EAAK,cAAc,KAAKC,EAAUD,CAAI,CAAC,CAAC,CAAC,CAC9E,EAAGE,EAAU,KAAK,UAAU,CAAC,EAAE,UAAUC,GAAkB,CAE1D,IAAMC,EAAU,KAAK,SACfnC,EAASkC,EAAe,QAAQ,cACtCA,EAAe,SAAWC,EAAQ,cAAcnC,CAAM,EAAImC,EAAQ,aAAanC,CAAM,CACvF,CAAC,CACH,CA8CF,EAlaIxB,EAAK,eAAiB,CAAC,EAsXvBA,EAAK,UAAO,SAAyBZ,EAAG,CACtC,OAAO,IAAKA,GAAKY,GAAYX,EAAqBC,CAAU,EAAMD,EAAkBS,GAAe,EAAE,EAAMT,EAAkBuE,CAAQ,EAAMvE,EAAqBwE,CAAM,EAAMxE,EAAqByE,EAAgB,EAAMzE,EAAkBO,GAAiB,CAAC,EAAMP,EAAuB0E,EAAgB,CAAC,EAAM1E,EAAkB2E,EAAQ,EAAM3E,EAAqB4E,CAAiB,EAAM5E,EAAkBT,GAAiB,EAAE,EAAMS,EAAkBE,GAAiB,EAAE,CAAC,CAC9c,EAGAS,EAAK,UAAyBR,EAAkB,CAC9C,KAAMQ,EACN,UAAW,CAAC,CAAC,GAAI,UAAW,EAAE,CAAC,EAC/B,UAAW,CAAC,EAAG,UAAU,EACzB,SAAU,EACV,aAAc,SAA8BkE,EAAIC,EAAK,CAC/CD,EAAK,GACJE,EAAY,oBAAqBD,EAAI,QAAQ,EAAE,oBAAqBA,EAAI,SAAS,WAAW,CAAC,CAEpG,EACA,OAAQ,CACN,KAAM,CAAC,EAAG,cAAe,MAAM,EAC/B,SAAU,CAAC,EAAG,kBAAmB,UAAU,EAC3C,oBAAqB,CAAC,EAAG,qBAAsB,qBAAqB,EACpE,gBAAiB,CAAC,EAAG,kBAAmB,iBAAiB,EACzD,eAAgB,CAAC,EAAG,oBAAqB,gBAAgB,EACzD,iBAAkB,CAAC,EAAG,0BAA2B,kBAAkB,EACnE,SAAU,CAAC,EAAG,kBAAmB,WAAY1E,CAAgB,EAC7D,kBAAmB,CAAC,EAAG,2BAA4B,mBAAmB,EACtE,aAAc,CAAC,EAAG,sBAAuB,cAAc,EACvD,iBAAkB,CAAC,EAAG,0BAA2B,kBAAkB,CACrE,EACA,QAAS,CACP,QAAS,iBACT,SAAU,kBACV,MAAO,eACP,QAAS,iBACT,OAAQ,gBACR,QAAS,iBACT,MAAO,cACT,EACA,SAAU,CAAC,SAAS,EACpB,WAAY,GACZ,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAASH,GACT,YAAaS,CACf,CAAC,CAAC,EAAML,EAA6B0E,EAAoB,CAC3D,CAAC,EAlaL,IAAMtE,EAANC,EAqaA,OAAOD,CACT,GAAG,EAUGuE,GAAmC,IAAIzF,EAAe,kBAAkB,EAO1E0F,IAAiC,IAAM,CACzC,IAAMC,EAAN,MAAMA,CAAiB,CACrB,aAAc,CAEZ,KAAK,OAAS,IAAI,IAElB,KAAK,SAAW,EAClB,CACA,aAAc,CACZ,KAAK,OAAO,MAAM,CACpB,CAqBF,EAnBIA,EAAK,UAAO,SAAkCpF,EAAG,CAC/C,OAAO,IAAKA,GAAKoF,EACnB,EAGAA,EAAK,UAAyBhF,EAAkB,CAC9C,KAAMgF,EACN,UAAW,CAAC,CAAC,GAAI,mBAAoB,EAAE,CAAC,EACxC,OAAQ,CACN,SAAU,CAAC,EAAG,2BAA4B,WAAY/E,CAAgB,CACxE,EACA,SAAU,CAAC,kBAAkB,EAC7B,WAAY,GACZ,SAAU,CAAIC,EAAmB,CAAC,CAChC,QAAS4E,GACT,YAAaE,CACf,CAAC,CAAC,EAAM7E,CAAwB,CAClC,CAAC,EA5BL,IAAM4E,EAANC,EA+BA,OAAOD,CACT,GAAG,EAMCE,GAAmB,EAEnBC,IAA4B,IAAM,CACpC,IAAMC,EAAN,MAAMA,CAAY,CAMhB,IAAI,UAAW,CACb,OAAO,KAAK,WAAa,CAAC,CAAC,KAAK,QAAU,KAAK,OAAO,QACxD,CACA,IAAI,SAAS3F,EAAO,CAKlB,KAAK,aAAa,SAAW,KAAK,UAAYA,CAChD,CACA,YACAC,EAASsB,EAAUC,EAAoBoE,EAAmBtE,EAAMuE,EAAQxE,EAAQ,CAC9E,KAAK,QAAUpB,EACf,KAAK,mBAAqBuB,EAC1B,KAAK,kBAAoBoE,EACzB,KAAK,KAAOtE,EACZ,KAAK,OAASuE,EAEd,KAAK,WAAa,IAAI1F,EAMtB,KAAK,YAAc,CAAC,EAKpB,KAAK,GAAK,iBAAiBsF,IAAkB,GAK7C,KAAK,eAAiB,IAAM,GAE5B,KAAK,cAAgB,IAAM,GAE3B,KAAK,QAAU,IAAI9D,EAInB,KAAK,QAAU,IAAIA,EAKnB,KAAK,OAAS,IAAIA,EAElB,KAAK,OAAS,IAAIA,EAQlB,KAAK,eAAiB,IAAI,IAI1B,KAAK,aAAeJ,EAAS,eAAetB,CAAO,EACnD,KAAK,aAAa,KAAO,KACrBoB,GACF,KAAK,gBAAgBA,CAAM,EAE7B,KAAK,aAAa,eAAiB,CAACgC,EAAMyC,IACjC,KAAK,eAAezC,EAAK,KAAMyC,EAAK,IAAI,EAEjD,KAAK,aAAa,cAAgB,CAACvD,EAAOc,EAAMyC,IACvC,KAAK,cAAcvD,EAAOc,EAAK,KAAMyC,EAAK,IAAI,EAEvD,KAAK,4BAA4B,KAAK,YAAY,EAClD,KAAK,cAAc,KAAK,YAAY,EACpCH,EAAY,WAAW,KAAK,IAAI,EAC5BE,GACFA,EAAO,OAAO,IAAI,IAAI,CAE1B,CAEA,QAAQtB,EAAM,CACZ,KAAK,eAAe,IAAIA,CAAI,EACxB,KAAK,aAAa,WAAW,GAC/B,KAAK,kBAAkB,CAE3B,CAEA,WAAWA,EAAM,CACf,KAAK,eAAe,OAAOA,CAAI,EAC3B,KAAK,aAAa,WAAW,GAC/B,KAAK,kBAAkB,CAE3B,CAEA,gBAAiB,CACf,OAAO,MAAM,KAAK,KAAK,cAAc,EAAE,KAAK,CAACwB,EAAGC,IACrBD,EAAE,SAAS,kBAAkB,EAAE,wBAAwBC,EAAE,SAAS,kBAAkB,CAAC,EAIpF,KAAK,4BAA8B,GAAK,CACnE,CACH,CACA,aAAc,CACZ,IAAMzD,EAAQoD,EAAY,WAAW,QAAQ,IAAI,EAC7CpD,EAAQ,IACVoD,EAAY,WAAW,OAAOpD,EAAO,CAAC,EAEpC,KAAK,QACP,KAAK,OAAO,OAAO,OAAO,IAAI,EAEhC,KAAK,eAAe,MAAM,EAC1B,KAAK,aAAa,QAAQ,EAC1B,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,CAC3B,CAEA,4BAA4BQ,EAAK,CAC3B,KAAK,MACP,KAAK,KAAK,OAAO,KAAKyB,EAAU,KAAK,KAAK,KAAK,EAAGC,EAAU,KAAK,UAAU,CAAC,EAAE,UAAUzE,GAAS+C,EAAI,cAAc/C,CAAK,CAAC,EAE3H+C,EAAI,cAAc,UAAU,IAAM,CAChC,IAAMkD,EAAWC,GAAY,KAAK,WAAW,EAAE,IAAIJ,GAAQ,CACzD,GAAI,OAAOA,GAAS,SAAU,CAC5B,IAAMK,EAAwBR,EAAY,WAAW,KAAKS,GAAQA,EAAK,KAAON,CAAI,EAIlF,OAAOK,CACT,CACA,OAAOL,CACT,CAAC,EAUD,GATI,KAAK,QACP,KAAK,OAAO,OAAO,QAAQA,GAAQ,CAC7BG,EAAS,QAAQH,CAAI,IAAM,IAC7BG,EAAS,KAAKH,CAAI,CAEtB,CAAC,EAIC,CAAC,KAAK,2BAA4B,CACpC,IAAMO,EAAoB,KAAK,kBAAkB,4BAA4B,KAAK,OAAO,EAAE,IAAIC,GAAcA,EAAW,cAAc,EAAE,aAAa,EACrJ,KAAK,aAAa,sBAAsBD,CAAiB,EAGzD,KAAK,2BAA6B,EACpC,CACA,GAAI,KAAK,yBAA0B,CACjC,IAAME,EAAY,KAAK,QAAQ,cAAc,cAAc,KAAK,wBAAwB,EAIxFxD,EAAI,qBAAqBwD,CAAS,CACpC,CACAxD,EAAI,SAAW,KAAK,SACpBA,EAAI,SAAW,KAAK,SACpBA,EAAI,gBAAkB,KAAK,gBAC3BA,EAAI,mBAAqB,KAAK,mBAC9BA,EAAI,eAAiBG,EAAqB,KAAK,eAAgB,CAAC,EAChEH,EAAI,YAAYkD,EAAS,OAAOH,GAAQA,GAAQA,IAAS,IAAI,EAAE,IAAIM,GAAQA,EAAK,YAAY,CAAC,EAAE,gBAAgB,KAAK,WAAW,CACjI,CAAC,CACH,CAEA,cAAcrD,EAAK,CACjBA,EAAI,cAAc,UAAU,IAAM,CAChC,KAAK,kBAAkB,EACvB,KAAK,mBAAmB,aAAa,CACvC,CAAC,EACDA,EAAI,QAAQ,UAAUyD,GAAS,CAC7B,KAAK,QAAQ,KAAK,CAChB,UAAW,KACX,KAAMA,EAAM,KAAK,KACjB,aAAcA,EAAM,YACtB,CAAC,CACH,CAAC,EACDzD,EAAI,OAAO,UAAUyD,GAAS,CAC5B,KAAK,OAAO,KAAK,CACf,UAAW,KACX,KAAMA,EAAM,KAAK,IACnB,CAAC,EACD,KAAK,mBAAmB,aAAa,CACvC,CAAC,EACDzD,EAAI,OAAO,UAAUyD,GAAS,CAC5B,KAAK,OAAO,KAAK,CACf,cAAeA,EAAM,cACrB,aAAcA,EAAM,aACpB,UAAW,KACX,KAAMA,EAAM,KAAK,IACnB,CAAC,CACH,CAAC,EACDzD,EAAI,QAAQ,UAAUY,GAAa,CACjC,KAAK,QAAQ,KAAK,CAChB,cAAeA,EAAU,cACzB,aAAcA,EAAU,aACxB,kBAAmBA,EAAU,kBAAkB,KAC/C,UAAWA,EAAU,UAAU,KAC/B,KAAMA,EAAU,KAAK,KACrB,uBAAwBA,EAAU,uBAClC,SAAUA,EAAU,SACpB,UAAWA,EAAU,UACrB,MAAOA,EAAU,KACnB,CAAC,EAGD,KAAK,mBAAmB,aAAa,CACvC,CAAC,EACDW,GAAMvB,EAAI,iBAAkBA,EAAI,gBAAgB,EAAE,UAAU,IAAM,KAAK,mBAAmB,aAAa,CAAC,CAC1G,CAEA,gBAAgB1B,EAAQ,CACtB,GAAM,CACJ,SAAAuC,EACA,iBAAAI,EACA,gBAAAyC,EACA,uBAAAC,EACA,gBAAAC,CACF,EAAItF,EACJ,KAAK,SAAW2C,GAA2B,GAC3C,KAAK,gBAAkByC,GAA0B,GACjD,KAAK,mBAAqBC,GAAiC,GAC3D,KAAK,YAAcC,GAAmB,WAClC/C,IACF,KAAK,SAAWA,EAEpB,CAEA,mBAAoB,CAClB,KAAK,aAAa,UAAU,KAAK,eAAe,EAAE,IAAIW,GAAQA,EAAK,QAAQ,CAAC,CAC9E,CAmDF,EA3RIoB,EAAK,WAAa,CAAC,EA0OnBA,EAAK,UAAO,SAA6BvF,EAAG,CAC1C,OAAO,IAAKA,GAAKuF,GAAgBtF,EAAqBC,CAAU,EAAMD,EAAkB2E,EAAQ,EAAM3E,EAAqB4E,CAAiB,EAAM5E,EAAqBuG,CAAgB,EAAMvG,EAAuB0E,EAAgB,CAAC,EAAM1E,EAAkBiF,GAAqB,EAAE,EAAMjF,EAAkBO,GAAiB,CAAC,CAAC,CACjU,EAGA+E,EAAK,UAAyBnF,EAAkB,CAC9C,KAAMmF,EACN,UAAW,CAAC,CAAC,GAAI,cAAe,EAAE,EAAG,CAAC,eAAe,CAAC,EACtD,UAAW,CAAC,EAAG,eAAe,EAC9B,SAAU,EACV,aAAc,SAAkCT,EAAIC,EAAK,CACnDD,EAAK,IACJ2B,GAAY,KAAM1B,EAAI,EAAE,EACxBC,EAAY,yBAA0BD,EAAI,QAAQ,EAAE,yBAA0BA,EAAI,aAAa,WAAW,CAAC,EAAE,0BAA2BA,EAAI,aAAa,YAAY,CAAC,EAE7K,EACA,OAAQ,CACN,YAAa,CAAC,EAAG,yBAA0B,aAAa,EACxD,KAAM,CAAC,EAAG,kBAAmB,MAAM,EACnC,YAAa,CAAC,EAAG,yBAA0B,aAAa,EACxD,GAAI,KACJ,SAAU,CAAC,EAAG,sBAAuB,UAAU,EAC/C,SAAU,CAAC,EAAG,sBAAuB,WAAY1E,CAAgB,EACjE,gBAAiB,CAAC,EAAG,6BAA8B,kBAAmBA,CAAgB,EACtF,eAAgB,CAAC,EAAG,4BAA6B,gBAAgB,EACjE,cAAe,CAAC,EAAG,2BAA4B,eAAe,EAC9D,mBAAoB,CAAC,EAAG,gCAAiC,qBAAsBA,CAAgB,EAC/F,eAAgB,CAAC,EAAG,4BAA6B,gBAAgB,EACjE,yBAA0B,CAAC,EAAG,8BAA+B,0BAA0B,CACzF,EACA,QAAS,CACP,QAAS,qBACT,QAAS,qBACT,OAAQ,oBACR,OAAQ,mBACV,EACA,SAAU,CAAC,aAAa,EACxB,WAAY,GACZ,SAAU,CAAIC,EAAmB,CAEjC,CACE,QAAS4E,GACT,SAAU,MACZ,EAAG,CACD,QAASxE,GACT,YAAa6E,CACf,CAAC,CAAC,EAAMhF,CAAwB,CAClC,CAAC,EA5RL,IAAM+E,EAANC,EA+RA,OAAOD,CACT,GAAG,EA6DH,IAAMoB,GAAoC,IAAIC,EAAe,oBAAoB,EAK7EC,IAAmC,IAAM,CAC3C,IAAMC,EAAN,MAAMA,CAAmB,CACvB,YAAYC,EAAa,CACvB,KAAK,YAAcA,EACnB,KAAK,MAAQC,EAAOC,GAAiB,CACnC,SAAU,EACZ,CAAC,EACD,KAAK,OAAO,wBAAwB,IAAI,CAC1C,CACA,aAAc,CACZ,KAAK,OAAO,0BAA0B,IAAI,CAC5C,CAoBF,EAlBIH,EAAK,UAAO,SAAoCI,EAAG,CACjD,OAAO,IAAKA,GAAKJ,GAAuBK,EAAqBC,EAAW,CAAC,CAC3E,EAGAN,EAAK,UAAyBO,EAAkB,CAC9C,KAAMP,EACN,UAAW,CAAC,CAAC,cAAe,qBAAsB,EAAE,CAAC,EACrD,OAAQ,CACN,KAAM,MACR,EACA,WAAY,GACZ,SAAU,CAAIQ,EAAmB,CAAC,CAChC,QAASX,GACT,YAAaG,CACf,CAAC,CAAC,CAAC,CACL,CAAC,EA5BL,IAAMD,EAANC,EA+BA,OAAOD,CACT,GAAG,EAKH,IAAIU,IAA+B,IAAM,CACvC,IAAMC,EAAN,MAAMA,CAAe,CAiBrB,EAfIA,EAAK,UAAO,SAAgCC,EAAG,CAC7C,OAAO,IAAKA,GAAKD,EACnB,EAGAA,EAAK,UAAyBE,EAAiB,CAC7C,KAAMF,CACR,CAAC,EAGDA,EAAK,UAAyBG,EAAiB,CAC7C,UAAW,CAACC,EAAQ,EACpB,QAAS,CAACC,EAAmB,CAC/B,CAAC,EAfL,IAAMN,EAANC,EAkBA,OAAOD,CACT,GAAG","names":["coerceNumberProperty","value","fallbackValue","_isNumberValue","coerceArray","coerceElement","elementOrRef","ElementRef","hasV8BreakIterator","Platform","_Platform","_platformId","isPlatformBrowser","t","ɵɵinject","PLATFORM_ID","ɵɵdefineInjectable","supportsPassiveEvents","supportsPassiveEventListeners","normalizePassiveListenerOptions","options","RtlScrollAxisType","rtlScrollAxisType","scrollBehaviorSupported","supportsScrollBehavior","scrollToFunction","getRtlScrollAxisType","scrollContainer","containerStyle","content","contentStyle","shadowDomIsSupported","_supportsShadowDom","head","_getShadowRoot","element","rootNode","_getEventTarget","event","DIR_DOCUMENT","InjectionToken","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","_resolveDirectionality","rawValue","value","Directionality","_Directionality","_document","EventEmitter","bodyDir","htmlDir","t","ɵɵinject","ɵɵdefineInjectable","BidiModule","_BidiModule","t","ɵɵdefineNgModule","ɵɵdefineInjector","DataSource","isDataSource","value","ConnectableObservable","ArrayDataSource","_data","isObservable","of","_ViewRepeaterOperation","_VIEW_REPEATER_STRATEGY","InjectionToken","_RecycleViewRepeaterStrategy","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","record","adjustedPreviousIndex","currentIndex","view","operation","viewArgsFactory","_ViewRepeaterOperation","value","cachedView","viewArgs","index","detachedView","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","Subject","distinctUntilChanged","viewport","index","behavior","renderedRange","newRange","viewportSize","dataLength","scrollOffset","firstVisibleIndex","maxVisibleItems","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","CdkFixedSizeVirtualScroll","_CdkFixedSizeVirtualScroll","value","coerceNumberProperty","t","ɵɵdefineDirective","ɵɵProvidersFeature","forwardRef","ɵɵNgOnChangesFeature","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ScrollDispatcher","_ngZone","_platform","document","scrollable","scrollableReference","auditTimeInMs","Observable","observer","subscription","auditTime","of","_","container","elementOrElementRef","ancestors","filter","target","scrollingContainers","_subscription","element","coerceElement","scrollableElement","window","fromEvent","ɵɵinject","NgZone","Platform","DOCUMENT","ɵɵdefineInjectable","CdkScrollable","_CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","takeUntil","options","el","isRtl","getRtlScrollAxisType","RtlScrollAxisType","supportsScrollBehavior","from","LEFT","RIGHT","ɵɵdirectiveInject","ElementRef","Directionality","DEFAULT_RESIZE_TIME","ViewportRuler","_ViewportRuler","event","output","scrollPosition","width","height","documentElement","documentRect","top","left","throttleTime","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","_CdkVirtualScrollable","orientation","viewportEl","ɵɵInheritDefinitionFeature","rangesEqual","r1","r2","SCROLL_SCHEDULER","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_CdkVirtualScrollViewport","_changeDetectorRef","_scrollStrategy","viewportRuler","inject","Subscription","Injector","startWith","forOf","data","newLength","size","range","offset","to","isHorizontal","axis","transform","measureScrollOffset","_from","fromRect","scrollerClientRect","contentEl","runAfter","afterNextRender","runAfterChangeDetection","fn","ChangeDetectorRef","ɵɵdefineComponent","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵclassProp","booleanAttribute","virtualScrollable","Optional","Inject","ɵɵInputTransformsFeature","ɵɵStandaloneFeature","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","getOffset","direction","node","rect","CdkVirtualForOf","_CdkVirtualForOf","isDataSource","ArrayDataSource","isObservable","item","_viewContainerRef","_template","_differs","_viewRepeater","_viewport","pairwise","switchMap","prev","cur","shareReplay","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","changes","oldDs","newDs","count","record","_adjustedPreviousIndex","currentIndex","context","ViewContainerRef","TemplateRef","IterableDiffers","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","CdkScrollableModule","_CdkScrollableModule","t","ɵɵdefineNgModule","ɵɵdefineInjector","ScrollingModule","_ScrollingModule","BidiModule","isFakeMousedownFromScreenReader","event","isFakeTouchstartFromScreenReader","touch","deepCloneNode","node","clone","descendantsWithId","nodeName","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","i","cloneUniqueId","source","context","getMutableClientRect","element","rect","isInsideClientRect","clientRect","x","y","top","bottom","left","right","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","width","height","xThreshold","yThreshold","ParentPositionTracker","_document","elements","event","target","_getEventTarget","cachedPosition","scrollPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","getRootNode","viewRef","rootNodes","wrapper","extendStyles","dest","importantProperties","key","value","toggleNativeDragInteractions","enable","userSelect","toggleVisibility","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","parseCssTimeUnitsToMs","multiplier","getTransformTransitionDurationInMs","computedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","part","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","parent","className","handler","previewConfig","previewClass","previewTemplate","preview","rootRect","passiveEventListenerOptions","normalizePassiveListenerOptions","activeEventListenerOptions","activeCapturingEventOptions$1","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","signal","Subject","Subscription","targetHandle","pointerPosition","distanceX","distanceY","isDelayElapsed","container","constrainedPointerPosition","offset","activeTransform","handles","coerceElement","disabledHandles","template","rootElement","boundaryElement","direction","shadowDomSelectStart","isTouchEvent","shadowRoot","dropContainer","placeholder","anchor","referenceElement","isDragging","isTouchSequence","isAuxiliaryMouseButton","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","rootStyles","scrollEvent","currentIndex","distance","isPointerOverContainer","rawX","rawY","newContainer","placeholderRect","duration","resolve","timeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","svgMatrix","svgPoint","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","delta","positionSinceLastChange","changeX","changeY","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","scrollDifference","_getShadowRoot","initialParent","previewContainer","documentRef","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","clamp","value","max","SingleAxisSortStrategy","_dragDropRegistry","items","item","pointerX","pointerY","pointerDelta","siblings","newIndex","isHorizontal","currentIndex","currentItem","siblingAtNewPosition","currentPosition","newPosition","delta","itemOffset","siblingOffset","oldOrder","moveItemInArray","sibling","index","isDraggedItem","offset","elementToOffset","combineTransforms","adjustDomRect","isInsideClientRect","activeDraggables","placeholder","newPositionReference","element","predicate","rootElement","initialTransform","p","topDifference","leftDifference","clientRect","drag","container","elementToMeasure","getMutableClientRect","a","b","immediateSibling","start","end","itemPositions","lastItemRect","firstItemRect","direction","MixedSortStrategy","_document","childNodes","i","node","previousSwap","toSwapWith","previousIndex","current","overlapElement","newOverlapElement","enterIndex","targetItem","root","nextSibling","elementAtPoint","_getShadowRoot","minDistance","minIndex","x","y","distance","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","_ngZone","_viewportRuler","Subject","Subscription","interval","animationFrameScheduler","takeUntil","scrollStep","coercedElement","coerceElement","ParentPositionTracker","previousContainer","isPointerOverContainer","dropPoint","event","previousItems","connectedTo","orientation","strategy","elements","oldContainerIndex","newContainerIndex","isPointerNearDomRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","position","getElementScrollDirections","width","height","domRect","getVerticalScrollDirection","getHorizontalScrollDirection","styles","elementFromPoint","activeSiblings","scrollDifference","shadowRoot","draggedItems","top","bottom","yThreshold","left","right","xThreshold","computedVertical","computedHorizontal","scrollTop","scrollLeft","activeCapturingEventOptions","normalizePassiveListenerOptions","activeApps","_ResetsLoader","__ResetsLoader","t","ɵɵdefineComponent","ɵɵStandaloneFeature","rf","ctx","DragDropRegistry","_DragDropRegistry","inject","ApplicationRef","EnvironmentInjector","signal","drop","instances","isTouchEvent","e","config","name","streams","Observable","observer","callback","merge","instance","componentRef","createComponent","ɵɵinject","NgZone","DOCUMENT","ɵɵdefineInjectable","DEFAULT_CONFIG","DragDrop","_DragDrop","DragRef","ViewportRuler","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","InjectionToken","CdkDragHandle","_CdkDragHandle","value","element","_parentDrag","Subject","t","ɵɵdirectiveInject","ElementRef","CDK_DRAG_PARENT","ɵɵdefineDirective","booleanAttribute","ɵɵProvidersFeature","ɵɵInputTransformsFeature","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_CdkDrag","dropContainer","_document","_ngZone","_viewContainerRef","config","_dir","dragDrop","_changeDetectorRef","_selfHandle","BehaviorSubject","EventEmitter","Observable","observer","subscription","map","movedEvent","inject","Injector","afterNextRender","changes","rootSelectorChange","positionChange","index","handle","handles","preview","placeholder","rootElement","boundary","coerceElement","ref","dir","dragStartDelay","coerceNumberProperty","take","parent","drag","startEvent","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","lockAxis","constrainPosition","previewClass","boundaryElement","draggingDisabled","rootElementSelector","previewContainer","tap","handleElements","switchMap","merge","item","startWith","takeUntil","handleInstance","dragRef","DOCUMENT","NgZone","ViewContainerRef","Directionality","DragDrop","ChangeDetectorRef","rf","ctx","ɵɵclassProp","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_CdkDropListGroup","_uniqueIdCounter","CdkDropList","_CdkDropList","_scrollDispatcher","_group","drop","a","b","siblings","coerceArray","correspondingDropList","list","scrollableParents","scrollable","container","event","sortingDisabled","listAutoScrollDisabled","listOrientation","ScrollDispatcher","ɵɵattribute","CDK_DRAG_PLACEHOLDER","InjectionToken","CdkDragPlaceholder","_CdkDragPlaceholder","templateRef","inject","CDK_DRAG_PARENT","t","ɵɵdirectiveInject","TemplateRef","ɵɵdefineDirective","ɵɵProvidersFeature","DragDropModule","_DragDropModule","t","ɵɵdefineNgModule","ɵɵdefineInjector","DragDrop","CdkScrollableModule"],"x_google_ignoreList":[0,1,2,3,4,5,6]}