{
  "version": 3,
  "sources": ["src/app/shared/directives/form-control-invalid/form-control-invalid.directive.ts"],
  "sourcesContent": ["import { DestroyRef, Directive, ElementRef, Input, OnInit, Renderer2, inject } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { combineLatest, delay, distinctUntilChanged, fromEvent, map, startWith } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[appFormControlInvalid]',\r\n  standalone: true\r\n})\r\nexport class FormControlInvalidDirective implements OnInit {\r\n  private destroyRef = inject(DestroyRef);\r\n  private elementRef = inject(ElementRef<HTMLElement>);\r\n  private renderer = inject(Renderer2);\r\n\r\n  @Input({ alias: 'appFormControlInvalid', required: true })\r\n  public control!: AbstractControl;\r\n\r\n  public ngOnInit() {\r\n    const blur$ = fromEvent<FocusEvent>(this.elementRef.nativeElement, 'focusout').pipe(delay(0));\r\n    const statusChanges$ = this.control.statusChanges.pipe(startWith(this.control.status));\r\n\r\n    combineLatest({ event: blur$, status: statusChanges$ })\r\n      .pipe(\r\n        map((value) => value.status === 'INVALID' && this.control.touched),\r\n        distinctUntilChanged(),\r\n        takeUntilDestroyed(this.destroyRef)\r\n      )\r\n      .subscribe((shouldMarkInvalid) => {\r\n        if (shouldMarkInvalid) {\r\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'invalid', '');\r\n          this.renderer.addClass(this.elementRef.nativeElement, 'app-form-control-invalid');\r\n        } else {\r\n          this.renderer.removeAttribute(this.elementRef.nativeElement, 'invalid');\r\n          this.renderer.removeClass(this.elementRef.nativeElement, 'app-form-control-invalid');\r\n        }\r\n      });\r\n  }\r\n}\r\n"],
  "mappings": "4JASA,IAAaA,GAA2B,IAAA,CAAlC,IAAOA,EAAP,MAAOA,CAA2B,CAJxCC,aAAA,CAKU,KAAAC,WAAaC,EAAOC,CAAU,EAC9B,KAAAC,WAAaF,EAAOG,CAAuB,EAC3C,KAAAC,SAAWJ,EAAOK,CAAS,EAK5BC,UAAQ,CACb,IAAMC,EAAQC,EAAsB,KAAKN,WAAWO,cAAe,UAAU,EAAEC,KAAKC,EAAM,CAAC,CAAC,EACtFC,EAAiB,KAAKC,QAAQC,cAAcJ,KAAKK,EAAU,KAAKF,QAAQG,MAAM,CAAC,EAErFC,EAAc,CAAEC,MAAOX,EAAOS,OAAQJ,CAAc,CAAE,EACnDF,KACCS,EAAKC,GAAUA,EAAMJ,SAAW,WAAa,KAAKH,QAAQQ,OAAO,EACjEC,EAAoB,EACpBC,EAAmB,KAAKxB,UAAU,CAAC,EAEpCyB,UAAWC,GAAqB,CAC3BA,GACF,KAAKrB,SAASsB,aAAa,KAAKxB,WAAWO,cAAe,UAAW,EAAE,EACvE,KAAKL,SAASuB,SAAS,KAAKzB,WAAWO,cAAe,0BAA0B,IAEhF,KAAKL,SAASwB,gBAAgB,KAAK1B,WAAWO,cAAe,SAAS,EACtE,KAAKL,SAASyB,YAAY,KAAK3B,WAAWO,cAAe,0BAA0B,EAEvF,CAAC,CACL,yCA3BWZ,EAA2B,sBAA3BA,EAA2BiC,UAAA,CAAA,CAAA,GAAA,wBAAA,EAAA,CAAA,EAAAC,OAAA,CAAAlB,QAAA,CAAA,EAAA,wBAAA,SAAA,CAAA,EAAAmB,WAAA,EAAA,CAAA,EAAlC,IAAOnC,EAAPoC,SAAOpC,CAA2B,GAAA",
  "names": ["FormControlInvalidDirective", "constructor", "destroyRef", "inject", "DestroyRef", "elementRef", "ElementRef", "renderer", "Renderer2", "ngOnInit", "blur$", "fromEvent", "nativeElement", "pipe", "delay", "statusChanges$", "control", "statusChanges", "startWith", "status", "combineLatest", "event", "map", "value", "touched", "distinctUntilChanged", "takeUntilDestroyed", "subscribe", "shouldMarkInvalid", "setAttribute", "addClass", "removeAttribute", "removeClass", "selectors", "inputs", "standalone", "_FormControlInvalidDirective"]
}
