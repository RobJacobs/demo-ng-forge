{"version":3,"file":"341.2464a2f478a7b684.js","mappings":"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","names":["FormlyDemoService","constructor","this","formMessage","Subject","validateField","field","value","of","invalid","message","pipe","delay","getFieldHelp","param","filters","length","count","data","result","index","skip","take","push","id","address","city","state","static","t","core","jDH","factory","ɵfac","formlyDemoConstants","props","label","type","attributes","columns","fieldGroup","key","defaultValue","required","description","width","column","row","options","optionsKey","property","className","template","safeHtml","fieldArray","_c0","FormlyField_ng_template_0_Template","rf","ctx","_c1","FormlyGroup_formly_field_0_Template","i0","$implicit","getFieldId","formId","Type","prototype","name","join","hasKey","isNil","Array","isArray","getKeyPath","_keyPath","path","indexOf","replace","split","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","Uint8Array","Uint16Array","Uint32Array","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","o","_observers","target","onChange","set","previousValue","changeFn","setValue","emitEvent","filter","getField","f","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","isHiddenField","isHidden","hide","expressions","hideExpression","setDefaultValue","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","touched","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵprov","token","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","_build","_hiddenFieldsForCheck","checkExpressions","_detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","detectChanges","i2","unregisterControl","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","None","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","removeAttribute","setAttribute","_localFields","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","distinctUntilChanged","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","parsers","parserFn","next","templateFieldsSubs","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","immutable","setField","fields","checkExpressionChange","switchMap","isNoopNgZone","onStable","asObservable","runGuarded","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","_formlyControls","flat","to","formState","NgControl","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","add","initialModel","remove","updateArrayElementKey","newKey","ɵFieldArrayType_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","content","bypassSecurityTrustHtml","i1","FieldExpressionExtension","hidden","expr","parseExpressions","evalExpr","Observable","tap","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","pattern","minLengthResult","minLength","minLengthKey","minlength","l","maxLengthResult","maxLength","maxLengthKey","maxlength","min","max","validatorOption","isPromise","obj","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","hasValidators","mergeValidators","asyncValidator","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","placeholder","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","deps","useValue","forChild","ɵmod","ɵinj","imports","CommonModule","ctx_r0","formGroup","formDefinition","formOptions","FormlyDemoComponent","inject","moduleService","age","takeUntilDestroyed","getFormErrors","formErrors","groupError","VBU","FormlyDemoComponent_Conditional_2_Template","FormlyFieldComponent","ElementRef","FormlyFieldDirective","style","gridColumn","gridRow","addEventListener","FsC","formlyFieldDirective","standalone","f_r2","formlyField_r3","GroupTypeComponent","fieldContainerElement","fieldContainer","classList","gridTemplateColumns","gridWidth","gridHeight","GroupTypeComponent_Conditional_0_Template","GroupTypeComponent_For_4_Template","CheckboxTypeComponent","addAsyncValidators","complete","pristine","takeUntil","server","CheckboxTypeComponent_Conditional_2_Template","CheckboxTypeComponent_Conditional_3_Template","readonly","ReactiveFormsModule","ForgeCheckboxModule","i3","DatePickerTypeComponent","isValidDate","DatePickerTypeComponent_Conditional_3_Template","DatePickerTypeComponent_Conditional_4_Template","ForgeDatePickerModule","ForgeTextFieldModule","TextareaTypeComponent","cols","rows","TextareaTypeComponent_Conditional_3_Template","TextareaTypeComponent_Conditional_4_Template","field_r2","_r1","ctx_r2","onTabSelected","TabTypeComponent","activeTab","activeField","TabTypeComponent_For_2_Template","formlyField_r4","ForgeTabBarModule","ForgeTabModule","th_r2","f_r4","formlyField_r5","TableTypeComponent_For_9_For_2_Template","i_r6","_r3","$index","ctx_r6","onRemove","fg_r8","TableTypeComponent","onAdd","fromEntries","requestAnimationFrame","tr","from","tableElement","querySelectorAll","reverse","focusElement","querySelector","TableTypeComponent_For_5_Template","TableTypeComponent_For_9_Template","FieldHelpDialogComponent","dialogConfig","DialogConfig","dialogRef","DialogRef","trapFocusDirective","CdkTrapFocus","paginator","pageIndex","pageSize","total","isBusy","direction","SortDirection","Ascending","title","columnConfigurations","dataObservable","initialSort","autoCapture","getData","onClose","close","onPaginatorChange","onTableSort","columnIndex","onTableFilter","filterProperty","isDefined","toString","onTableRowClick","finalize","detail","FieldHelpDialogComponent_Conditional_8_Template","FieldHelpDialogComponent_Conditional_9_Template","ForgeIconButtonModule","ForgeIconModule","ForgePageStateModule","ForgePaginatorModule","ForgeSkeletonModule","ForgeTableModule","ctx_r1","InputHelpTypeComponent","dialogService","DialogService","onShowDialog","dialogSub","fullscreen","header","sortable","filterDelegate","TextFieldComponentDelegate","afterClosed","InputHelpTypeComponent_Conditional_3_Template","InputHelpTypeComponent_Conditional_7_Template","LabelTypeComponent","i_r4","option_r3","RadioTypeComponent_For_3_Conditional_2_Template","RadioTypeComponent","RadioTypeComponent_Conditional_0_Template","RadioTypeComponent_For_3_Template","RadioTypeComponent_Conditional_4_Template","ForgeRadioModule","SelectTypeComponent","SelectTypeComponent_Conditional_1_Template","ForgeSelectModule","formlyFieldExtension","ButtonTypeComponent","onClick","event","log","ForgeButtonModule","ContainerTypeComponent","ContainerTypeComponent_Conditional_0_Template","ContainerTypeComponent_For_4_Template","InputTypeComponent","inputType","InputTypeComponent_Conditional_3_Template","InputTypeComponent_Conditional_4_Template","i4","FormlyConfigModule","$C","G2t","routes","FormlyDemoModule","RouterModule","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","innerFrom","mergeAll","EMPTY"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/formly-demo/formly-demo.service.ts","./src/app/formly-demo/formly-demo.constants.ts","./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs","./src/app/formly-demo/formly-demo.component.html","./src/app/formly-demo/formly-demo.component.ts","./src/app/formly-demo/components/formly-field.component.ts","./src/app/formly-demo/components/formly-field.directive.ts","./src/app/formly-demo/components/group-type.component.ts","./src/app/formly-demo/components/checkbox-type.component.ts","./src/app/formly-demo/components/date-picker-type.component.ts","./src/app/formly-demo/components/textarea-type.component.ts","./src/app/formly-demo/components/tab-type.component.ts","./src/app/formly-demo/components/table-type.component.ts","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.html","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.ts","./src/app/formly-demo/components/input-help-type.component.ts","./src/app/formly-demo/components/label-type.component.ts","./src/app/formly-demo/components/radio-type.component.ts","./src/app/formly-demo/components/select-type.component.ts","./src/app/formly-demo/components/formly-field.extension.ts","./src/app/formly-demo/components/button-type.component.ts","./src/app/formly-demo/components/container-type.component.ts","./src/app/formly-demo/components/input-type.component.ts","./src/app/formly-demo/components/formly-config.module.ts","./src/app/formly-demo/formly-demo.module.ts","./node_modules/rxjs/dist/esm/internal/observable/merge.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\nimport { IFilterParameter, IFilterResponse } from '../shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport class FormlyDemoService {\r\n  public formMessage = new Subject<{ id: string; message: string; }>();\r\n\r\n  public validateField(field: string, value: any): Observable<{ invalid: boolean; message: string }> {\r\n    const validation = {\r\n      invalid: false,\r\n      message: `Error from server: ${field}`\r\n    };\r\n\r\n    return of(validation).pipe(\r\n      delay(1000)\r\n    );\r\n  }\r\n\r\n  public getFieldHelp(field: string, param: IFilterParameter): Observable<IFilterResponse<any>> {\r\n    if (param.filters?.length) {\r\n      return of({ count: 0, data: [] }).pipe(\r\n        delay(1000)\r\n      )\r\n    } else {\r\n      const result = [];\r\n      for (let index = param.skip as number; index < <number>param.skip + <number>param.take; index++) {\r\n        result.push(\r\n          {\r\n            id: index,\r\n            address: `${index} street`,\r\n            city: `${index} city`,\r\n            state: `${index} state`\r\n          }\r\n        );\r\n      }\r\n\r\n      return of({ count: 75, data: result }).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n  }\r\n}\r\n","const formDefinitionBasic = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'name',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Name',\r\n          type: 'string',\r\n          format: '###-##-####',\r\n          required: true,\r\n          description: 'Persons name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number',\r\n          format: '#,###,###,##&.&&',\r\n          required: true,\r\n          description: 'Persons age',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\nconst formDefinitionAll = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'firstName',\r\n        type: 'input',\r\n        defaultValue: 0,\r\n        props: {\r\n          label: 'First name',\r\n          required: true,\r\n          description: 'Persons first name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'lastName',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Last name',\r\n          description: 'Persons last name',\r\n          attributes: {\r\n            width: 320,\r\n            column: 1,\r\n            row: 2\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        defaultValue: 18,\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number'\r\n        }\r\n      },\r\n      {\r\n        key: 'isActive',\r\n        type: 'checkbox',\r\n        props: {\r\n          label: 'Is active'\r\n        }\r\n      },\r\n      {\r\n        key: 'birthDate',\r\n        type: 'date-picker',\r\n        props: {\r\n          label: 'DOB',\r\n          description: 'Persons date of birth',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'gender',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Gender',\r\n          options: [\r\n            { label: 'Male', value: 'M' },\r\n            { label: 'Female', value: 'F' },\r\n            { label: 'Other', value: 'O' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'comment',\r\n        type: 'textarea',\r\n        props: {\r\n          label: 'Comment',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'size',\r\n        type: 'radio',\r\n        props: {\r\n          label: 'Size',\r\n          description: 'What is your size?',\r\n          options: [\r\n            { label: 'Small', value: 'sm' },\r\n            { label: 'Medium', value: 'md' },\r\n            { label: 'Large', value: 'lg' }\r\n          ],\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'officeLocation',\r\n        type: 'input-help',\r\n        props: {\r\n          label: 'Office location',\r\n          description: 'What is your office location',\r\n          optionsKey: 'id',\r\n          options: [\r\n            { label: 'Address', property: 'address' },\r\n            { label: 'City', property: 'city' },\r\n            { label: 'State', property: 'state' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    className: 'form-divider',\r\n    template: '<forge-divider style=\"margin: 16px 0\"></forge-divider>',\r\n    props: {\r\n      safeHtml: true\r\n    }\r\n  },\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      type: 'group',\r\n      label: 'Address'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'hbox'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            key: 'address.street',\r\n            type: 'input',\r\n            props: {\r\n              label: 'Street'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.city',\r\n            type: 'input',\r\n            props: {\r\n              label: 'City'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.state',\r\n            type: 'input',\r\n            props: {\r\n              label: 'State'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'tab',\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          label: 'Tab 1'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'hbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field1',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 1'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field2',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 2'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        props: {\r\n          label: 'Tab 2'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'vbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field3',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 3'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field4',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 4'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'children',\r\n    type: 'table',\r\n    props: {\r\n      columns: [\r\n        {\r\n          label: 'First name',\r\n          key: 'firstName',\r\n          defaultValue: null\r\n        },\r\n        {\r\n          label: 'Last name',\r\n          key: 'lastName',\r\n          defaultValue: null\r\n        }\r\n      ]\r\n    },\r\n    fieldArray: {\r\n      fieldGroup: [\r\n        {\r\n          key: 'firstName',\r\n          type: 'input',\r\n          props: {\r\n            required: true\r\n          }\r\n        },\r\n        {\r\n          key: 'lastName',\r\n          type: 'input'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n];\r\n\r\nconst formDefinitionLayout = [\r\n  {\r\n    props: {\r\n      type: 'vbox'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'grid',\r\n          attributes: {\r\n            width: 83,\r\n            height: 10\r\n          }\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'group',\r\n              attributes: {\r\n                posX: 1,\r\n                posY: 1,\r\n                gridWidth: 83,\r\n                gridHeight: 6\r\n              }\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Year',\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 2,\r\n                    gridWidth: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'tax_year',\r\n                type: 'input',\r\n                defaultValue: '2023',\r\n                props: {\r\n                  type: 'number',\r\n                  disabled: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 2,\r\n                    gridWidth: 4,\r\n                    width: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'which_value',\r\n                type: 'radio',\r\n                props: {\r\n                  description: 'Value to use on report.',\r\n                  options: [\r\n                    { label: 'Original full value', value: 'O' },\r\n                    { label: 'Current full value', value: 'C' }\r\n                  ],\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 3,\r\n                    gridWidth: 31,\r\n                    width: 31\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Minimum value',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 4,\r\n                    gridWidth: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'min_val',\r\n                type: 'input',\r\n                props: {\r\n                  type: 'number',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 4,\r\n                    gridWidth: 13,\r\n                    width: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Sort vehicles by',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 5,\r\n                    gridWidth: 17\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'seq_sw',\r\n                type: 'select',\r\n                props: {\r\n                  required: true,\r\n                  options: [\r\n                    { label: 'Sequence number', value: 'S' },\r\n                    { label: 'Owner name', value: 'O' }\r\n                  ],\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 5,\r\n                    gridWidth: 17,\r\n                    width: 15\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const formlyDemoConstants = {\r\n  formDefinitionBasic,\r\n  formDefinitionAll,\r\n  formDefinitionLayout\r\n}","import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, NgControl, Validators } from '@angular/forms';\nimport { isObservable, of, merge, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '' && (!Array.isArray(field.key) || field.key.length > 0);\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    if (value instanceof Uint8Array) {\n        return new Uint8Array(value);\n    }\n    if (value instanceof Uint16Array) {\n        return new Uint16Array(value);\n    }\n    if (value instanceof Uint32Array) {\n        return new Uint32Array(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (setFn && state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1 && isObject(target)) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(currentValue, emitEvent = true) {\n            if (currentValue === state.value) {\n                return;\n            }\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => {\n                if (changeFn !== setFn && emitEvent) {\n                    changeFn({ previousValue, currentValue, firstChange: false });\n                }\n            });\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\nfunction isNoopNgZone(ngZone) {\n    return ngZone.constructor.name === 'NoopNgZone';\n}\nfunction isHiddenField(field) {\n    const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n    let setDefaultValue = !field.resetOnHide || !isHidden(field);\n    if (!isHidden(field) && field.resetOnHide) {\n        let parent = field.parent;\n        while (parent && !isHidden(parent)) {\n            parent = parent.parent;\n        }\n        setDefaultValue = !parent || !isHidden(parent);\n    }\n    return !setDefaultValue;\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n        }\n        disableTreeValidityCall(field.form, () => {\n            this._build(field);\n            // TODO: add test for https://github.com/ngx-formly/ngx-formly/issues/3910\n            if (!field.parent || field.fieldArray) {\n                // detect changes early to avoid reset value by hidden fields\n                const options = field.options;\n                if (field.parent && isHiddenField(field)) {\n                    // when hide is used in expression set defaul value will not be set until detect hide changes\n                    // which causes default value not set on new item is added\n                    options._hiddenFieldsForCheck?.push(field);\n                }\n                options.checkExpressions?.(field, true);\n                options._detectChanges?.(field);\n            }\n        });\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe();\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._localFields) {\n                field._localFields = [];\n            }\n            else {\n                defineHiddenProp(this.field, '_localFields', []);\n            }\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field))];\n        if (field.options) {\n            subscribes.push(observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)));\n        }\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['focus'], ['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        let templateFieldsSubs = [];\n        observe(field, ['_localFields'], ({ currentValue }) => {\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs = (currentValue || []).map((f) => this.fieldChanges(f));\n        });\n        return () => {\n            subscribes.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n        };\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => (isNoopNgZone(this.ngZone) ? of(null) : this.ngZone.onStable.asObservable().pipe(take(1)))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        for (let i = 0; i < this.uiAttributes.length; i++) {\n            const attr = this.uiAttributes[i];\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    constructor() {\n        this.field = {};\n    }\n    set _formlyControls(controls) {\n        const f = this.field;\n        f._localFields = controls\n            .map((c) => c.control._fields || [])\n            .flat()\n            .filter((f) => f.formControl !== this.field.formControl);\n    }\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options?.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"_formlyControls\", predicate: NgControl, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { _formlyControls: [{\n                type: ViewChildren,\n                args: [NgControl]\n            }], field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = { ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray) };\n            if (f.key !== null) {\n                f.key = `${i}`;\n            }\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => this.updateArrayElementKey(f, `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n    updateArrayElementKey(f, newKey) {\n        if (hasKey(f)) {\n            f.key = newKey;\n            return;\n        }\n        if (!f.fieldGroup?.length) {\n            return;\n        }\n        for (let i = 0; i < f.fieldGroup.length; i++) {\n            this.updateArrayElementKey(f.fieldGroup[i], newKey);\n        }\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _formlyControls(_) { }\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options._detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f && !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), parent = field.fieldGroup ? field : field.parent;\n            let control = field?.key === key ? field.formControl : field.form.get(key);\n            if (!control && field.get(key)) {\n                control = field.get(key).formControl;\n            }\n            assignFieldValue({ key, parent, model: field.model }, value);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        else {\n            try {\n                let target = field;\n                const paths = this._evalExpressionPath(field, prop);\n                const lastIndex = paths.length - 1;\n                for (let i = 0; i < lastIndex; i++) {\n                    target = target[paths[i]];\n                }\n                target[paths[lastIndex]] = value;\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n            if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n                this.changeDisabledState(field, value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (opt === 'required' && currentValue != null && typeof currentValue !== 'boolean') {\n                console.warn(`Formly: Invalid prop 'required' of type '${typeof currentValue}', expected 'boolean' (Field:${field.key}).`);\n            }\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (field.fieldArray) {\n            return;\n        }\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: !!field.props.disabled }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        else {\n            if (control instanceof FormControl) {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control.defaultValue = value;\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator && this.hasValidators(field, '_validators')) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    markForCheck = true;\n                }\n                if (null === c.asyncValidator && this.hasValidators(field, '_asyncValidators')) {\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    hasValidators(field, type) {\n        const c = field.formControl;\n        if (c?._fields?.length > 1 && c._fields.some((f) => f[type].length > 0)) {\n            return true;\n        }\n        else if (field[type].length > 0) {\n            return true;\n        }\n        return field.fieldGroup?.some((f) => f?.fieldGroup && !hasKey(f) && this.hasValidators(f, type));\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options._detectChanges = (f) => {\n            if (f._componentRefs) {\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options._detectChanges(f));\n        };\n        options.detectChanges = (f) => {\n            f.options.checkExpressions?.(f);\n            options._detectChanges(f);\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            observe(options, ['parentForm', 'submitted']).setValue(false, false);\n            options.build(field);\n            field.form.reset(field.model);\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) &&\n            !isUndefined(field.defaultValue) &&\n            isUndefined(getFieldValue(field)) &&\n            !isHiddenField(field)) {\n            assignFieldValue(field, field.defaultValue);\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n","<div class=\"body\">\r\n  <form class=\"form\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    @if (formDefinition) {\r\n    <formly-form [form]=\"formGroup\" [model]=\"model\" [fields]=\"formDefinition\" [options]=\"formOptions\"></formly-form>\r\n\r\n    <p>\r\n      {{formGroup.value| json}}\r\n    </p>\r\n    }\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <span class=\"forge-typography--caption\" slot=\"start\">\r\n    {{formMessage?.message}}\r\n  </span>\r\n</forge-toolbar>","import { ChangeDetectorRef, Component, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { formlyDemoConstants } from './formly-demo.constants';\r\n\r\n@Component({\r\n  selector: 'app-formly-demo',\r\n  templateUrl: './formly-demo.component.html',\r\n  styleUrls: ['./formly-demo.component.scss']\r\n})\r\nexport class FormlyDemoComponent implements OnInit {\r\n  private changeDetectorRef = inject(ChangeDetectorRef);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private form?: Form;\r\n\r\n  public formGroup = new FormGroup({});\r\n  public formDefinition?: FormlyFieldConfig[];\r\n  public formOptions: FormlyFormOptions = {\r\n    // showError(field) {\r\n    //   console.log(field);\r\n    //   return false;\r\n    // },\r\n    // build: (field) => {\r\n    //   console.log(field);\r\n    //   return field;\r\n    // }\r\n  };\r\n  public model = {\r\n    name: '',\r\n    age: 10\r\n  };\r\n  public record: any;\r\n  public formMessage?: { id: string; message: string; };\r\n\r\n  constructor() {\r\n    this.moduleService.formMessage.pipe(\r\n      takeUntilDestroyed()\r\n    ).subscribe(result => {\r\n      this.formMessage = result;\r\n    });\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formDefinition = formlyDemoConstants.formDefinitionAll as any;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  private getFormErrors(control: AbstractControl) {\r\n    if (control instanceof FormControl) {\r\n      return control.errors ? control : null;\r\n    }\r\n\r\n    if (control instanceof FormGroup) {\r\n      const formErrors = control.errors ? { groupError: control } : {} as any;\r\n      Object.keys(control.controls).forEach(key => {\r\n        const error = this.getFormErrors(control.get(key) as AbstractControl);\r\n        if (error) {\r\n          formErrors[key] = error;\r\n        }\r\n      });\r\n\r\n      return Object.keys(formErrors).length > 0 ? formErrors : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, ElementRef, Input, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-field',\r\n  template: `\r\n    <formly-field #formlyField [field]=\"$any(field)\"></formly-field>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyFieldComponent implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n\r\n  @ViewChild('formlyField', { static: true })\r\n  private formlyField?: FormlyField;\r\n\r\n  @Input()\r\n  public field?: FormlyFieldConfig;\r\n\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyField);\r\n    // console.log(this.elementRef.nativeElement);\r\n  }\r\n}\r\n","import { Input, inject } from '@angular/core';\r\nimport { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: '[formlyFieldDirective]',\r\n  standalone: true\r\n})\r\nexport class FormlyFieldDirective implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  @Input()\r\n  field?: FormlyFieldConfig\r\n  @Input()\r\n  formlyFieldDirective?: FormlyField;\r\n\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyFieldDirective);\r\n    // console.log(this.elementRef.nativeElement);\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n\r\n    if (this.field?.props?.attributes) {\r\n      if (this.field.props.attributes && this.field.props.attributes['width']) {\r\n        element.style.width = `${this.field.props.attributes['width']}px`;\r\n      }\r\n\r\n      if (this.field.props.attributes['column']) {\r\n        element.style.gridColumn = `${this.field.props.attributes['column']}`;\r\n      }\r\n\r\n      if (this.field.props.attributes['row']) {\r\n        element.style.gridRow = `${this.field.props.attributes['row']}`;\r\n      }\r\n    }\r\n\r\n    if (this.field?.props?.description?.length) {\r\n      element.addEventListener('focusin', () => {\r\n        this.moduleService.formMessage.next({ id: this.field?.id as string, message: this.field?.props?.description as string });\r\n      });\r\n      element.addEventListener('focusout', () => {\r\n        this.moduleService.formMessage.next({ id: this.field?.id as string, message: '' });\r\n      });\r\n    }\r\n\r\n    if (this.field?.props?.required) {\r\n      this.field.validation!.messages = {\r\n        required: `A ${this.field.props.label || 'value'} is required`\r\n      };\r\n    }\r\n\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, HostBinding, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FieldGroupTypeConfig, FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-group',\r\n  template: `\r\n    @if (props.label?.length && field.parent?.type !== 'tab') {\r\n      <div class=\"label\">{{props.label}}</div>\r\n    }\r\n    <div #fieldContainer>\r\n      @for (f of field.fieldGroup; track i; let i = $index) {\r\n        <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      }\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n      height: fit-content;\r\n\r\n      ::ng-deep {\r\n        .form-grid {\r\n          display: grid !important;\r\n          row-gap: 8px !important;\r\n          // row-gap: 0 !important;\r\n        }\r\n\r\n        .form-vbox {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n        }\r\n\r\n        .form-hbox {\r\n          display: flex;\r\n          flex-direction: row;\r\n          column-gap: 16px;\r\n        }\r\n\r\n        .form-group {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n          border: var(--forge-theme-border);\r\n          border-radius: 4px;\r\n          padding: 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .label {\r\n      padding-bottom: 8px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class GroupTypeComponent extends FieldType<FieldGroupTypeConfig> implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer?: ElementRef;\r\n  // @HostBinding('style.display')\r\n  // private displayStyle = 'block';\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer?.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n\r\n        if (this.props.attributes) {\r\n          if (this.props.attributes['width']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['width']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['height']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['height']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        // this.displayStyle = 'inline-block';\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n\r\n        if (this.props.attributes && (this.props.attributes['gridWidth'] || this.props.attributes['gridHeight'])) {\r\n          fieldContainerElement.classList.add('form-grid');\r\n          if (this.props.attributes['gridWidth']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['gridWidth']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['gridHeight']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['gridHeight']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeCheckboxModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-checkbox',\r\n  template: `\r\n    <forge-checkbox>\r\n      <input\r\n        [id]=\"id\"\r\n        type=\"checkbox\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      @if (props.description) {\r\n        <span slot=\"helper-text\">{{props.description}}</span>\r\n      }\r\n    </forge-checkbox>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeCheckboxModule\r\n  ],\r\n  standalone: true\r\n})\r\nexport class CheckboxTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeDatePickerModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { isValid as isValidDate } from 'date-fns';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n@Component({\r\n  selector: 'app-formly-date-picker',\r\n  template: `\r\n    <forge-date-picker [max]=\"$any(props.max)\" [min]=\"$any(props.min)\">\r\n      <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n        <input\r\n          [id]=\"id\"\r\n          type=\"text\"\r\n          [placeholder]=\"props.placeholder\"\r\n          [readonly]=\"props.readonly\"\r\n          [formControl]=\"formControl\"\r\n          [formlyAttributes]=\"field\" />\r\n        @if (props.label) {\r\n          <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n        }\r\n        @if (showError) {\r\n          <span slot=\"helper-text\">\r\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n          </span>\r\n        }\r\n      </forge-text-field>\r\n    </forge-date-picker>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeDatePickerModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DatePickerTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      if (control.value && !isValidDate(new Date(control.value))) {\r\n        control.setValue(null);\r\n        if (this.field.props.required) {\r\n          return of({ required: true });\r\n        }\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-textarea',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <textarea\r\n        [id]=\"id\"\r\n        [cols]=\"props.cols\"\r\n        [rows]=\"props.rows\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" >\r\n      </textarea>\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    textarea {\r\n      resize: none;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TextareaTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor() {\r\n    super();\r\n    this.defaultOptions = {\r\n      props: {\r\n        cols: 1,\r\n        rows: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTabBarModule, ForgeTabModule } from '@tylertech/forge-angular';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-tab',\r\n  template: `\r\n    <forge-tab-bar [activeTab]=\"activeTab\">\r\n      @for (field of $any(field.fieldGroup); track i; let i = $index) {\r\n        <forge-tab (forge-tab-interacted)=\"onTabSelected(field)\">\r\n          {{field.props?.label}}\r\n        </forge-tab>\r\n      }\r\n    </forge-tab-bar>\r\n    <formly-field [field]=\"$any(activeField)\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    forge-tab-bar {\r\n      display: inline-flex;\r\n      width: 100%;\r\n      border-bottom: var(--forge-theme-border);\r\n      margin: 16px 0;\r\n    }\r\n\r\n    forge-tab {\r\n      min-width: 240px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTabBarModule,\r\n    ForgeTabModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TabTypeComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  public activeTab = 0;\r\n  public activeField?: FieldTypeConfig;\r\n\r\n  public ngOnInit() {\r\n    this.activeField = this.field.fieldGroup![0] as FieldTypeConfig;\r\n  }\r\n\r\n  public onTabSelected(field: FieldTypeConfig) {\r\n    this.activeField = field;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\r\nimport { FieldArrayType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-table',\r\n  template: `\r\n    <table class=\"forge-table\" #table>\r\n      <thead>\r\n        <tr class=\"forge-table-row forge-table-head__row\">\r\n          @for (th of $any(props).columns; track i; let i = $index) {\r\n            <th scope=\"col\" class=\"forge-table-cell forge-table-head__cell\">\r\n              <div class=\"forge-table-head__cell-container\">\r\n                <span class=\"forge-table-head__cell-text\">{{th.label}}</span>\r\n              </div>\r\n            </th>\r\n          }\r\n          <th class=\"forge-table-cell forge-table-head__cell forge-table-cell__button\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        @for (fg of field.fieldGroup; track i; let i = $index) {\r\n          <tr class=\"forge-table-row forge-table-body__row\">\r\n            @for (f of fg.fieldGroup; track ii; let ii = $index) {\r\n              <td class=\"forge-table-cell forge-table-body__cell\">\r\n                <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n              </td>\r\n            }\r\n            <td class=\"forge-table-cell forge-table-body__cell forge-table-cell__button\">\r\n              <forge-icon-button>\r\n                <button type=\"button\" (click)=\"onRemove(i)\" aria-label=\"Delete\">\r\n                  <forge-icon name=\"delete\"></forge-icon>\r\n                </button>\r\n              </forge-icon-button>\r\n            </td>\r\n          </tr>\r\n        }\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td>\r\n            <forge-button>\r\n              <button type=\"button\" (click)=\"onAdd()\">Add</button>\r\n            </forge-button>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .forge-table {\r\n      // --forge-table-theme-row-hover-background: transparent;\r\n\r\n      &-cell {\r\n        padding-right: 24px;\r\n        &:first-child {\r\n          padding-left: 0;\r\n        }\r\n        &:last-child {\r\n          padding-right: 0;\r\n        }\r\n        &__button {\r\n          width: 48px;\r\n        }\r\n      }\r\n\r\n      &-body {\r\n\r\n        &__cell {\r\n          padding-top: 8px;\r\n          padding-bottom: 8px;\r\n          vertical-align: top;\r\n\r\n          formly-field {\r\n            background-color: var(--mdc-theme-surface);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TableTypeComponent extends FieldArrayType {\r\n  @ViewChild('table')\r\n  private tableElement?: ElementRef;\r\n\r\n  public onAdd() {\r\n    const model = this.props['columns'].filter((c: any) => c.key?.length).map((c: any) => [c.key, c.defaultValue]);\r\n\r\n    this.add(this.formControl.length, Object.fromEntries(model));\r\n\r\n    requestAnimationFrame(() => {\r\n      const tr = Array.from(this.tableElement?.nativeElement.querySelectorAll('tbody > tr')).reverse()[0] as HTMLTableRowElement;\r\n      if (tr) {\r\n        const focusElement = tr.querySelector(`[id*=\"${model[0][0]}\"]`) as HTMLElement;\r\n        if (focusElement) {\r\n          focusElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public onRemove(index: number) {\r\n    this.remove(index);\r\n  }\r\n}\r\n","<div class=\"dialog__header\">\r\n  <h2 class=\"forge-typography--headline5\" id=\"field-help--title\">{{title}}</h2>\r\n  <forge-icon-button class=\"forge-flex-item--right\">\r\n    <button type=\"button\" aria-label=\"Close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  <forge-table [ngClass]=\"{'app--hidden': isBusy}\" [data]=\"data\" [columnConfigurations]=\"columnConfigurations\" allow-row-click (forge-table-row-click)=\"onTableRowClick($event.detail)\" (forge-table-sort)=\"onTableSort($any($event).detail)\" filter=\"true\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n  @if (!isBusy && !data.length) {\r\n  <forge-page-state>\r\n    <img src=\"https://cdn.forge.tylertech.com/v1/images/spot/no-search-results-spot.svg\" slot=\"graphic\" alt=\"No records found\" />\r\n    <div slot=\"message\">No records were found.</div>\r\n  </forge-page-state>\r\n  }\r\n\r\n  @if (isBusy) {\r\n  <ng-container>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n  </ng-container>\r\n  }\r\n</div>\r\n\r\n<div class=\"dialog__footer\">\r\n  <forge-paginator [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"paginator.pageSize\" [total]=\"paginator.total\" (forge-paginator-change)=\"onPaginatorChange($event.detail)\" [disabled]=\"isBusy || !data.length\">\r\n  </forge-paginator>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { CdkTrapFocus } from '@angular/cdk/a11y';\r\nimport { finalize, Observable, Subject, takeUntil } from 'rxjs';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { IColumnConfiguration, ITableFilterEventData, ITableRowClickEventData, ITableSortEventData, SortDirection } from '@tylertech/forge';\r\nimport { DialogConfig, DialogRef, ForgeIconButtonModule, ForgeIconModule, ForgePageStateModule, ForgePaginatorModule, ForgeSkeletonModule, ForgeTableModule } from '@tylertech/forge-angular';\r\n\r\nimport { IFilterParameter, IFilter, IFilterResponse } from 'src/app/shared/interfaces/filter.interface';\r\n\r\nexport interface IFieldHelpDialogConfig {\r\n  columnConfigurations: IColumnConfiguration[];\r\n  dataObservable: (param: IFilterParameter) => Observable<IFilterResponse<any>>;\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-formly-field-help-dialog',\r\n  templateUrl: './field-help-dialog.component.html',\r\n  styleUrls: ['./field-help-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgePageStateModule,\r\n    ForgePaginatorModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule\r\n  ],\r\n  hostDirectives: [CdkTrapFocus]\r\n})\r\nexport class FieldHelpDialogComponent {\r\n  public dialogConfig = inject(DialogConfig<IFieldHelpDialogConfig>);\r\n  private dialogRef = inject(DialogRef);\r\n  private trapFocusDirective = inject(CdkTrapFocus);\r\n\r\n  public title: string;\r\n  public columnConfigurations: IColumnConfiguration[];\r\n  public data: any[] = [];\r\n  public paginator = {\r\n    pageIndex: 0,\r\n    pageSize: 25,\r\n    total: 0\r\n  };\r\n  public isBusy = false;\r\n  public key: string;\r\n\r\n  private unsubscribe = new Subject<void>();\r\n  private dataObservable: (param: IFilterParameter) => Observable<any>;\r\n  private sort = {\r\n    property: '',\r\n    direction: SortDirection.Ascending\r\n  };\r\n  private filters: IFilter[] = [];\r\n\r\n  constructor(\r\n  ) {\r\n    this.title = this.dialogConfig.data?.title || '';\r\n    this.columnConfigurations = this.dialogConfig.data?.columnConfigurations || [];\r\n    this.dataObservable = this.dialogConfig.data?.dataObservable as any;\r\n    this.key = this.dialogConfig.data?.key || '';\r\n    this.sort.property = this.columnConfigurations.find(c => c.initialSort)?.property || this.columnConfigurations[0].property as string;\r\n    this.dialogRef.nativeElement.setAttribute('aria-labelledby', 'field-help--title');\r\n    this.trapFocusDirective.autoCapture = true;\r\n    this.getData();\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onPaginatorChange(value: { pageIndex: number; pageSize: number; }) {\r\n    this.paginator.pageIndex = value.pageIndex;\r\n    this.paginator.pageSize = value.pageSize;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableSort(value: ITableSortEventData) {\r\n    this.sort.property = this.columnConfigurations[value.columnIndex].property as string;\r\n    this.sort.direction = value.direction;\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableFilter(filter: ITableFilterEventData) {\r\n    const filterProperty = this.columnConfigurations[filter.columnIndex].property as string;\r\n    if (isDefined(filter.value) && filter.value?.toString().length) {\r\n      this.filters.push({ property: filterProperty, value: filter.value });\r\n    } else {\r\n      const index = this.filters.findIndex(f => f.property === filterProperty);\r\n      if (index !== -1) {\r\n        this.filters.splice(index, 1);\r\n      }\r\n    }\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableRowClick(value: ITableRowClickEventData) {\r\n    this.dialogRef.close(value.data[this.key]);\r\n  }\r\n\r\n  private getData() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.isBusy = true;\r\n    const param: IFilterParameter = {\r\n      filters: this.filters,\r\n      sort: this.sort,\r\n      skip: this.paginator.pageIndex * this.paginator.pageSize,\r\n      take: this.paginator.pageSize\r\n    };\r\n    this.dataObservable(param)\r\n      .pipe(\r\n        finalize(() => this.isBusy = false),\r\n        takeUntil(this.unsubscribe)\r\n      )\r\n      .subscribe((r: IFilterResponse<any>) => {\r\n        this.data = r.data;\r\n        this.paginator.total = r.count;\r\n      });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { DialogService, ForgeIconButtonModule, ForgeIconModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { FieldHelpDialogComponent } from './field-help-dialog/field-help-dialog.component';\r\n@Component({\r\n  selector: 'app-formly-input-help',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        #input\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      <forge-icon-button slot=\"addon-end\" dense>\r\n        <button type=\"button\" aria-label=\"Browse options\" [disabled]=\"formControl.disabled\"\r\n          (click)=\"onShowDialog()\">\r\n          <forge-icon name=\"more_horiz\"></forge-icon>\r\n        </button>\r\n      </forge-icon-button>\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputHelpTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private dialogService = inject(DialogService);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  public onShowDialog() {\r\n    const dialogRef = this.dialogService.show(FieldHelpDialogComponent, { fullscreen: true }, {\r\n      data: {\r\n        columnConfigurations: (this.props.options as { label: string; property: string }[]).map(o => ({\r\n          header: o.label,\r\n          property: o.property,\r\n          sortable: true,\r\n          filter: true,\r\n          filterDelegate: new TextFieldComponentDelegate()\r\n        })),\r\n        dataObservable: (param: IFilterParameter) => this.moduleService.getFieldHelp(this.key as string, param),\r\n        key: this.props['optionsKey'],\r\n        title: `Select a ${this.props.label}`,\r\n      }\r\n    });\r\n\r\n    const dialogSub = dialogRef.afterClosed.subscribe(result => {\r\n      dialogSub.unsubscribe();\r\n      if (result) {\r\n        this.formControl.setValue(result);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-label',\r\n  template: `\r\n  <label [attr.for]=\"id\" class=\"forge-typography--body2\">{{props.label}}</label>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n  ],\r\n  standalone: true\r\n})\r\nexport class LabelTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeRadioModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-radio',\r\n  template: `\r\n    @if (props.label) {\r\n      <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n    }\r\n    <div role=\"radiogroup\">\r\n      @for (option of $any(props.options); track i; let i = $index) {\r\n        <forge-radio>\r\n          <input\r\n            type=\"radio\"\r\n            [id]=\"id + '-' + i\"\r\n            [value]=\"option.value\"\r\n            [formControl]=\"formControl\"\r\n            [formlyAttributes]=\"field\" />\r\n          @if (option.label) {\r\n            <label [for]=\"id + '-' + i\">{{option.label}}</label>\r\n          }\r\n        </forge-radio>\r\n      }\r\n    </div>\r\n    @if (showError) {\r\n      <div class=\"forge-typography--caption\">\r\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n      </div>\r\n    }\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    [role='radiogroup'] {\r\n      margin-left: -8px;\r\n      display: flex;\r\n      column-gap: 16px;\r\n      flex-direction: column;\r\n    }\r\n\r\n    forge-radio {\r\n      &::part(container) {\r\n        padding: 4px;\r\n      }\r\n    }\r\n\r\n    .forge-typography--caption {\r\n      color: var(--forge-theme-danger);\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeRadioModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RadioTypeComponent extends FieldType<FieldTypeConfig> {\r\n  // @HostBinding('attr.role')\r\n  // public roleAttribute = 'radiogroup';\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeSelectModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-select',\r\n  template: `\r\n    <forge-select\r\n      [id]=\"id\"\r\n      [options]=\"$any(props.options)\"\r\n      [label]=\"$any(props.label)\"\r\n      [placeholder]=\"$any(props.placeholder)\"\r\n      [invalid]=\"showError\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\">\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-select>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  // forge-select {\r\n  //   --forge-select-height: 2rem;\r\n  // }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeSelectModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SelectTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { FormlyExtension } from '@ngx-formly/core';\r\n\r\nexport const formlyFieldExtension: FormlyExtension = {\r\n  prePopulate(field) {\r\n    // TODO\r\n    switch (field.type) {\r\n      case 'date-picker':\r\n      case 'input':\r\n      case 'select':\r\n      case 'textarea': {\r\n        // field.modelOptions = {\r\n        //   updateOn: 'blur'\r\n        // }\r\n      }\r\n    }\r\n  }\r\n};","import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\nimport { ForgeButtonModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-button',\r\n  template: `\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onClick($event)\">\r\n        {{props.label}}\r\n      </button>\r\n    </forge-button>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeButtonModule\r\n  ],\r\n  standalone: true\r\n})\r\nexport class ButtonTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n  public onClick(event: MouseEvent) {\r\n    console.log(event);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { OnInit, ViewChild } from '@angular/core';\r\nimport { ElementRef } from '@angular/core';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { FormlyFieldComponent } from './formly-field.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-container',\r\n  template: `\r\n    @if (props.label) {\r\n      <div class=\"label\">{{props.label}}</div>\r\n    }\r\n\r\n    <div #fieldContainer>\r\n      @for (f of field.fieldGroup; track i; let i = $index) {\r\n        <formly-field #formlyField [field]=\"f\" [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      }\r\n    </div>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .form-grid {\r\n      display: grid;\r\n      gap: 16px;\r\n    }\r\n\r\n    .form-vbox {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n    }\r\n\r\n    .form-hbox {\r\n      display: flex;\r\n      flex-direction: row;\r\n      column-gap: 16px;\r\n    }\r\n\r\n    .form-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n      border: 1px solid #e6e6e6;\r\n      border-radius: 4px;\r\n      padding: 16px;\r\n    }\r\n  }\r\n\r\n  .label {\r\n    padding: 8px;\r\n  }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective,\r\n    FormlyFieldComponent\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ContainerTypeComponent extends FieldType implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer?: ElementRef;\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer?.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n        if (this.props.attributes!['columns']) {\r\n          fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes!['columns']}, auto)`\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-input',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        #input\r\n        [id]=\"id\"\r\n        [type]=\"inputType\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n\r\n    input[type='number']::-webkit-outer-spin-button,\r\n    input[type='number']::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  @ViewChild('input', { static: true })\r\n  private inputElement?: ElementRef;\r\n\r\n  public inputType = 'text';\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.inputType = this.props?.type || 'text';\r\n\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      // (this.inputElement.nativeElement as HTMLInputElement).disabled = true;\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        // finalize(() => (this.inputElement.nativeElement as HTMLInputElement).disabled = false),\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { GroupTypeComponent } from './group-type.component';\r\nimport { CheckboxTypeComponent } from './checkbox-type.component';\r\nimport { DatePickerTypeComponent } from './date-picker-type.component';\r\nimport { TextareaTypeComponent } from './textarea-type.component';\r\nimport { TabTypeComponent } from './tab-type.component';\r\nimport { TableTypeComponent } from './table-type.component';\r\nimport { InputHelpTypeComponent } from './input-help-type.component';\r\nimport { LabelTypeComponent } from './label-type.component';\r\nimport { RadioTypeComponent } from './radio-type.component';\r\nimport { SelectTypeComponent } from './select-type.component';\r\nimport { formlyFieldExtension } from './formly-field.extension';\r\nimport { ButtonTypeComponent } from './button-type.component';\r\nimport { ContainerTypeComponent } from './container-type.component';\r\nimport { InputTypeComponent } from './input-type.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormlyModule.forRoot({\r\n      extensions: [\r\n        { name: 'formly-field-extension', extension: formlyFieldExtension }\r\n      ],\r\n      types: [\r\n        { name: 'checkbox', component: CheckboxTypeComponent },\r\n        { name: 'date-picker', component: DatePickerTypeComponent },\r\n        { name: 'input', component: InputTypeComponent },\r\n        { name: 'input-help', component: InputHelpTypeComponent },\r\n        { name: 'radio', component: RadioTypeComponent },\r\n        { name: 'select', component: SelectTypeComponent },\r\n        { name: 'textarea', component: TextareaTypeComponent },\r\n        { name: 'button', component: ButtonTypeComponent },\r\n        { name: 'container', component: ContainerTypeComponent },\r\n        { name: 'formly-group', component: GroupTypeComponent },\r\n        { name: 'tab', component: TabTypeComponent },\r\n        { name: 'table', component: TableTypeComponent },\r\n        { name: 'label', component: LabelTypeComponent }\r\n      ],\r\n      // wrappers: [\r\n      //   { name: 'container', component: ContainerWrapperComponent }\r\n      // ]\r\n    }),\r\n    FormlyFieldDirective\r\n  ],\r\n  exports: [\r\n    FormlyModule\r\n  ]\r\n})\r\nexport class FormlyConfigModule { }","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FormlyDemoComponent } from './formly-demo.component';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { FormlyFieldComponent } from './components/formly-field.component';\r\nimport { FormlyConfigModule } from './components/formly-config.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: FormlyDemoComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormlyDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    FormlyConfigModule,\r\n    FormlyFieldComponent\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    FormlyDemoService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyDemoModule { }\r\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n"],"x_google_ignoreList":[2,25]}