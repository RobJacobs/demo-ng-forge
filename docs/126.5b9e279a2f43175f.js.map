{"version":3,"file":"126.5b9e279a2f43175f.js","mappings":"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","names":["AppDataService","constructor","httpClient","this","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Yz7","factory","ɵfac","providedIn","_r2","ctx_r1","onClose","ctx_r3","ConfirmDialogComponent","dialogConfig","dialogRef","title","message","showFooter","response","close","core","Xpm","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ConfirmDialogComponent_div_8_Template","CommonModule","i2","AutoFocusDirective","styles","AppToastService","toastService","show","toast","actionHandler","hide","placement","duration","ProfileCacheService","formGroup","FormGroup","personalFormGroup","firstName","FormControl","validators","Validators","required","lastName","gender","email","phone","dateOfBirth","comment","rank","size","friends","FormArray","addressFormGroup","name","street","city","state","zip","$event","_r4","onImageError","ctx_r0","imageUrl","ProfileComponent","cache","router","appDataService","dialogService","appToastService","noImageUrl","activeTab","profile","loadForm","canDeactivate","dirty","s","dialogSub","backdropClose","escapeClose","afterClosed","subscribe","result","unsubscribe","reset","onLoadProfile","onTabSelected","route","markAsTouched","navigate","onSave","invalid","parseForm","markAsPristine","onCancel","undefined","event","targetElement","target","src","includes","onerror","isInvalid","values","every","v","formatNumber","clear","patchValue","address","i3","i4","i5","ProfileComponent_img_4_Template","ProfileComponent_forge_icon_12_Template","ProfileComponent_forge_icon_16_Template","_c0","touched","getRawValue","AddressComponent","InputCasingDirective","DefaultValueAccessor","inputHandler","start","selectionStart","#casing","toLowerCase","toUpperCase","setSelectionRange","onChange","appInputCasing","lG2","hostBindings","provide","NG_VALUE_ACCESSOR","multi","useExisting","forwardRef","i_r3","option_r2","label","i_r5","_r7","index","ctx_r6","onDeleteFriend","friendOptions","tmp_2_0","controls","routes","path","component","children","PersonalComponent","friendsFormArray","genderOptions","sizeOptions","onAddFriend","push","removeAt","PersonalComponent_forge_radio_45_Template","PersonalComponent_div_49_Template","tmp_10_0","redirectTo","pathMatch","ProfileModule","oAB","cJS","imports","RouterModule","forChild","AppFormsModule","type","a","b","getPropertyValue","comparator","groupData","isArray","reduce","previousValue","currentValue","isString","operator","substring","Object","defineProperty","rec","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","fallbackRoute","getState","navigationId","back","elementId","prefix","Math","random","replace","formatDate","format","uniqueId","parseQueryStringParameters","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","eventName","options","resultSelector","isFunction","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","subscriber","args"],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/shared/components/confirm-dialog/confirm-dialog.component.html","./src/app/shared/components/confirm-dialog/confirm-dialog.component.ts","./src/app/app-toast.service.ts","./src/app/profile/profile-cache.service.ts","./src/app/profile/profile.component.html","./src/app/profile/profile.component.ts","./src/app/profile/address/address.component.ts","./src/app/profile/address/address.component.html","./src/app/shared/directives/input-casing/input-casing.directive.ts","./src/app/profile/personal/personal.component.html","./src/app/profile/profile.module.ts","./src/app/profile/personal/personal.component.ts","./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">{{title}}</span>\r\n  <forge-icon-button>\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  {{message}}\r\n</div>\r\n\r\n<div *ngIf=\"showFooter\" class=\"dialog__footer\">\r\n  <forge-button type=\"outlined\">\r\n    <button type=\"button\" (click)=\"onClose()\">Cancel</button>\r\n  </forge-button>\r\n  <forge-button type=\"raised\">\r\n    <button appAutoFocus type=\"button\" (click)=\"onClose(true)\">Ok</button>\r\n  </forge-button>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\nimport { AutoFocusDirective } from 'src/app/shared/directives/auto-focus/auto-focus.directive';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AutoFocusDirective\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ConfirmDialogComponent {\r\n  public title: string;\r\n  public message: string;\r\n  public showFooter?: boolean;\r\n\r\n  constructor(public dialogConfig: DialogConfig, private dialogRef: DialogRef) {\r\n    this.title = dialogConfig.data.title;\r\n    this.message = dialogConfig.data.message;\r\n    this.showFooter = isDefined(dialogConfig.data.showFooter) ? dialogConfig.data.showFooter : true;\r\n  }\r\n\r\n  public onClose(response = false): void {\r\n    this.dialogRef.close(response);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ToastService } from '@tylertech/forge-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppToastService {\r\n  constructor(private toastService: ToastService) { }\r\n\r\n  public show(message: string): void {\r\n    const toast = this.toastService.show({\r\n      message: `${message}`,\r\n      actionHandler: () => toast.hide(),\r\n      placement: 'bottom',\r\n      duration: 3000\r\n    });\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\n\r\nexport interface IPersonalFormGroup {\r\n  firstName: FormControl<string | null>;\r\n  lastName: FormControl<string | null>;\r\n  gender: FormControl<string | null>;\r\n  email: FormControl<string | null>;\r\n  phone: FormControl<string | null>;\r\n  dateOfBirth: FormControl<string | Date | null>;\r\n  comment: FormControl<string | null>;\r\n  rank: FormControl<number | null>;\r\n  size: FormControl<string | null>;\r\n  friends: FormArray<FormControl>;\r\n}\r\n\r\nexport interface IAddressFormGroup {\r\n  name: FormControl<string | null>;\r\n  street: FormControl<string | null>;\r\n  city: FormControl<string | null>;\r\n  state: FormControl<string | null>;\r\n  zip: FormControl<string | null>;\r\n}\r\n\r\n@Injectable()\r\nexport class ProfileCacheService {\r\n  public formGroup = new FormGroup({\r\n    personalFormGroup: new FormGroup<IPersonalFormGroup>({\r\n      firstName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      lastName: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      gender: new FormControl<string | null>(null),\r\n      email: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      phone: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      dateOfBirth: new FormControl<string | Date | null>(null),\r\n      comment: new FormControl<string | null>(null),\r\n      rank: new FormControl<number>(0),\r\n      size: new FormControl<string | null>(null),\r\n      friends: new FormArray<FormControl>([])\r\n    }),\r\n    addressFormGroup: new FormGroup<IAddressFormGroup>({\r\n      name: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      street: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      city: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      state: new FormControl<string | null>(null, { validators: [Validators.required] }),\r\n      zip: new FormControl<string | null>(null, { validators: [Validators.required] })\r\n    })\r\n  });\r\n  public profile?: IProfile;\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <h2 class=\"forge-typography--title\">Profile</h2>\r\n    <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" (error)=\"onImageError($event)\" alt=\"\" />\r\n  </div>\r\n\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onLoadProfile()\">Load profile</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<forge-tab-bar [activeTab]=\"activeTab\">\r\n  <forge-tab (forge-tab-interacted)=\"onTabSelected('personal')\">\r\n    Personal\r\n    <forge-icon *ngIf=\"[personalFormGroup.invalid, personalFormGroup.touched] | appCallback:isInvalid\" slot=\"trailing\" name=\"error\"></forge-icon>\r\n  </forge-tab>\r\n  <forge-tab (forge-tab-interacted)=\"onTabSelected('address')\">\r\n    Address\r\n    <forge-icon *ngIf=\"[addressFormGroup.invalid, addressFormGroup.touched] | appCallback:isInvalid\" slot=\"trailing\" name=\"error\"></forge-icon>\r\n  </forge-tab>\r\n</forge-tab-bar>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"cache.formGroup\">\r\n    <router-outlet></router-outlet>\r\n    <p>\r\n      {{cache.formGroup.getRawValue() | json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <div slot=\"end\">\r\n    <forge-button type=\"outlined\">\r\n      <button type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n    </forge-button>\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onSave()\" [disabled]=\"cache.formGroup.invalid || !cache.formGroup.dirty\">Save</button>\r\n    </forge-button>\r\n  </div>\r\n</forge-toolbar>","import { Component } from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogService } from '@tylertech/forge-angular';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { AppToastService } from 'src/app/app-toast.service';\r\nimport { IAddressFormGroup, IPersonalFormGroup, ProfileCacheService } from './profile-cache.service';\r\nimport { ConfirmDialogComponent } from '../shared/components/confirm-dialog/confirm-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent {\r\n  private noImageUrl = 'mock-data/no-image.png';\r\n\r\n  public get personalFormGroup() {\r\n    return this.cache.formGroup.get('personalFormGroup') as FormGroup<IPersonalFormGroup>;\r\n  }\r\n  public get addressFormGroup() {\r\n    return this.cache.formGroup.get('addressFormGroup') as FormGroup<IAddressFormGroup>;\r\n  }\r\n  public activeTab = 0;\r\n  public imageUrl?: string;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private appDataService: AppDataService,\r\n    private dialogService: DialogService,\r\n    private appToastService: AppToastService,\r\n    public cache: ProfileCacheService\r\n  ) {\r\n    if (this.cache.profile) {\r\n      this.loadForm(this.cache.profile);\r\n    }\r\n  }\r\n\r\n  public canDeactivate(): boolean | Observable<boolean> {\r\n    if (!this.cache.formGroup.dirty) {\r\n      return true;\r\n    }\r\n\r\n    return new Observable<boolean>(s => {\r\n      const dialogRef = this.dialogService.show(\r\n        ConfirmDialogComponent,\r\n        { backdropClose: false, escapeClose: false },\r\n        { data: { title: 'Unsaved changes', message: 'You have unsaved changes which will be lost, do you want to continue?' } }\r\n      );\r\n      const dialogSub = dialogRef.afterClosed.subscribe((result) => {\r\n        dialogSub.unsubscribe();\r\n        if (result) {\r\n          this.cache.formGroup.reset();\r\n        }\r\n        s.next(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  public onLoadProfile() {\r\n    this.appDataService.getProfile().subscribe((result: IProfile) => {\r\n      this.cache.formGroup.reset();\r\n      this.cache.profile = result;\r\n      this.loadForm(this.cache.profile);\r\n    });\r\n  }\r\n\r\n  public onTabSelected(route: string) {\r\n    switch (this.activeTab) {\r\n      case 0:\r\n        this.personalFormGroup.markAsTouched();\r\n        break;\r\n      case 1:\r\n        this.addressFormGroup.markAsTouched();\r\n        break;\r\n    }\r\n\r\n    switch (route) {\r\n      case 'personal':\r\n        this.activeTab = 0;\r\n        break;\r\n      case 'address':\r\n        this.activeTab = 1;\r\n        break;\r\n    }\r\n    this.router.navigate([`profile/${route}`]);\r\n  }\r\n\r\n  public onSave() {\r\n    if (this.cache.formGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.cache.profile = this.parseForm(this.cache.profile?.id);\r\n    this.cache.formGroup.markAsPristine();\r\n    this.appToastService.show('Profile saved.');\r\n  }\r\n\r\n  public onCancel() {\r\n    this.cache.formGroup.reset();\r\n    this.cache.formGroup.markAsPristine();\r\n    this.imageUrl = undefined;\r\n    this.cache.profile = undefined;\r\n  }\r\n\r\n  public onImageError(event: Event) {\r\n    const targetElement = event.target as HTMLImageElement;\r\n    if (!targetElement.src.includes(this.noImageUrl)) {\r\n      targetElement.src = this.noImageUrl;\r\n      targetElement.onerror = null;\r\n    }\r\n  }\r\n\r\n  public isInvalid(values: boolean[]) {\r\n    return values.every(v => v === true);\r\n  }\r\n\r\n  private loadForm(profile: IProfile) {\r\n    this.imageUrl = `mock-data/${Utils.formatNumber(this.cache.profile?.id as number, '2.0-0')}-small.png`;\r\n\r\n    (this.personalFormGroup.get('friends') as FormArray)?.clear();\r\n\r\n    this.personalFormGroup.patchValue(profile);\r\n    this.addressFormGroup.patchValue(profile.address as any);\r\n  }\r\n\r\n  private parseForm(id?: number): IProfile {\r\n    return {\r\n      id: id || -1,\r\n      firstName: this.personalFormGroup.value.firstName as string,\r\n      lastName: this.personalFormGroup.value.lastName as string,\r\n      gender: this.personalFormGroup.value.gender as any,\r\n      email: this.personalFormGroup.value.email as string,\r\n      phone: this.personalFormGroup.value.phone as string,\r\n      dateOfBirth: this.personalFormGroup.value.dateOfBirth as Date,\r\n      address: this.addressFormGroup.value as any\r\n    };\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { IAddressFormGroup, ProfileCacheService } from '../profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss']\r\n})\r\nexport class AddressComponent {\r\n  public get formGroup() {\r\n    return this.cache.formGroup.get('addressFormGroup') as FormGroup<IAddressFormGroup>;\r\n  }\r\n\r\n  constructor(public cache: ProfileCacheService) {\r\n  }\r\n}\r\n","<div [formGroup]=\"formGroup\" class=\"form-grid\">\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.get('name')\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"address-form--name\" formControlName=\"name\" />\r\n    <label for=\"address-form--name\" slot=\"label\">Name</label>\r\n    <span slot=\"helper-text\" class=\"app-form-control-invalid\">Name is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.get('street')\" class=\"form-grid--row-break\">\r\n    <input type=\"text\" id=\"address-form--street\" formControlName=\"street\" />\r\n    <label for=\"address-form--street\" slot=\"label\">Street</label>\r\n    <span slot=\"helper-text\" class=\"app-form-control-invalid\">Street is required</span>\r\n  </forge-text-field>\r\n\r\n  <forge-text-field required [appFormControlInvalid]=\"formGroup.get('city')\">\r\n    <input type=\"text\" id=\"address-form--city\" formControlName=\"city\" />\r\n    <label for=\"address-form--city\" slot=\"label\">City</label>\r\n    <span slot=\"helper-text\" class=\"app-form-control-invalid\">City is required</span>\r\n  </forge-text-field>\r\n\r\n  <div class=\"form-grid__state-zip\">\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('state')\">\r\n      <input type=\"text\" id=\"address-form--state\" formControlName=\"state\" />\r\n      <label for=\"address-form--state\" slot=\"label\">State</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">State is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('zip')\">\r\n      <input type=\"text\" id=\"address-form--zip\" formControlName=\"zip\" />\r\n      <label for=\"address-form--zip\" slot=\"label\">Zip code</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">Zip code is required</span>\r\n    </forge-text-field>\r\n  </div>\r\n</div>","import { Directive, HostListener, forwardRef, Input, Renderer2, ElementRef } from '@angular/core';\r\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[appInputCasing]',\r\n  standalone: true,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: forwardRef(() => InputCasingDirective),\r\n    },\r\n  ]\r\n})\r\nexport class InputCasingDirective extends DefaultValueAccessor {\r\n  @HostListener('input', ['$event'])\r\n  public inputHandler(event: InputEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    const start = target.selectionStart;\r\n\r\n    target.value = this.#casing === 'lower' ? target.value.toLowerCase() : target.value.toUpperCase();\r\n    target.setSelectionRange(start, start);\r\n\r\n    this.onChange(target.value);\r\n  }\r\n\r\n  #casing: 'upper' | 'lower' = 'upper';\r\n  @Input()\r\n  public set appInputCasing(value: 'upper' | 'lower') {\r\n    this.#casing = value;\r\n  }\r\n}","<ng-container [formGroup]=\"formGroup\">\r\n  <div class=\"form-grid\">\r\n    <!-- <forge-text-field required [appFormControlInvalid]=\"formGroup.get('firstName')\"> -->\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('firstName')\">\r\n      <input type=\"text\" id=\"personal-form--first-name\" formControlName=\"firstName\" [appInputCasing]=\"'upper'\" />\r\n      <label for=\"personal-form--first-name\" slot=\"label\">First Name</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">First name is required {{formGroup.get('firstName').invalid}} {{formGroup.get('firstName').touched}}</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('lastName')\">\r\n      <input type=\"text\" id=\"personal-form--first-name\" formControlName=\"lastName\" />\r\n      <label for=\"personal-form--last-name\" slot=\"label\">Last Name</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">Last name is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-select label=\"Gender\" formControlName=\"gender\" [options]=\"genderOptions\"></forge-select>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('email')\">\r\n      <input type=\"text\" id=\"personal-form--email\" formControlName=\"email\" />\r\n      <label for=\"personal-form--email\" slot=\"label\">Email</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">Email is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-text-field required [appFormControlInvalid]=\"formGroup.get('phone')\">\r\n      <input type=\"text\" id=\"personal-form--phone\" formControlName=\"phone\" />\r\n      <label for=\"personal-form--phone\" slot=\"label\">Phone</label>\r\n      <span slot=\"helper-text\" class=\"app-form-control-invalid\">Phone number is required</span>\r\n    </forge-text-field>\r\n\r\n    <forge-date-picker>\r\n      <forge-text-field>\r\n        <input type=\"text\" id=\"personal-form--dob\" formControlName=\"dateOfBirth\" />\r\n        <label for=\"personal-form--dob\">Date of birth</label>\r\n      </forge-text-field>\r\n    </forge-date-picker>\r\n\r\n    <forge-text-field class=\"form-grid__comment form-grid--col-span\">\r\n      <textarea type=\"text\" id=\"personal-form--comment\" formControlName=\"comment\" rows=\"4\"></textarea>\r\n      <label for=\"personal-form--comment\">Comment</label>\r\n    </forge-text-field>\r\n\r\n    <forge-label-value>\r\n      <span slot=\"label\">Rank {{formGroup?.value.rank}}</span>\r\n      <div slot=\"value\">\r\n        <forge-slider type=\"discrete\" min=\"0\" max=\"10\" formControlName=\"rank\"></forge-slider>\r\n      </div>\r\n    </forge-label-value>\r\n\r\n    <forge-label-value>\r\n      <span slot=\"label\">Size</span>\r\n      <div slot=\"value\" role=\"radiogroup\" aria-label=\"Choose size option\">\r\n        <forge-radio *ngFor=\"let option of sizeOptions; index as i\">\r\n          <input type=\"radio\" id=\"personal-form--size-{{i}}\" formControlName=\"size\" value=\"{{option.value}}\" />\r\n          <label for=\"personal-form--size-{{i}}\">{{option.label}}</label>\r\n        </forge-radio>\r\n      </div>\r\n    </forge-label-value>\r\n  </div>\r\n\r\n  <forge-divider></forge-divider>\r\n\r\n  <div class=\"friends\">\r\n    <ng-container formArrayName=\"friends\">\r\n      <div class=\"friend\" *ngFor=\"let friend of formGroup.get('friends')?.controls; index as i\">\r\n        <forge-select [options]=\"friendOptions\" [formControlName]=\"i\" label=\"Friend\" [appFormControlInvalid]=\"formGroup.get('friends')?.controls[i]\">\r\n          <span slot=\"helper-text\" class=\"app-form-control-invalid\">A friend is required</span>\r\n        </forge-select>\r\n        <forge-icon-button>\r\n          <button type=\"button\" aria-label=\"delete\" (click)=\"onDeleteFriend(i)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n      <forge-button type=\"raised\">\r\n        <button type=\"button\" (click)=\"onAddFriend()\">Add friend</button>\r\n      </forge-button>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormControlInvalidDirective } from 'src/app/shared/directives/form-control-invalid/form-control-invalid.directive';\r\nimport { InputCasingDirective } from 'src/app/shared/directives/input-casing/input-casing.directive';\r\nimport { CallbackPipe } from 'src/app/shared/pipes/callback.pipe';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { ProfileCacheService } from './profile-cache.service';\r\nimport { AddressComponent } from './address/address.component';\r\nimport { PersonalComponent } from './personal/personal.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent,\r\n    canDeactivate: [(component: ProfileComponent) => component.canDeactivate()],\r\n    children: [\r\n      { path: 'address', component: AddressComponent },\r\n      { path: 'personal', component: PersonalComponent },\r\n      { path: '', redirectTo: 'personal', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProfileComponent,\r\n    AddressComponent,\r\n    PersonalComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormControlInvalidDirective,\r\n    CallbackPipe,\r\n    InputCasingDirective\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    ProfileCacheService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ProfileModule { }\r\n","import { Component } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IOption } from '@tylertech/forge';\r\n\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { IPersonalFormGroup, ProfileCacheService } from '../profile-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-profile-personal',\r\n  templateUrl: './personal.component.html',\r\n  styleUrls: ['./personal.component.scss']\r\n})\r\nexport class PersonalComponent {\r\n  public get formGroup() {\r\n    return this.cache.formGroup.get('personalFormGroup') as FormGroup<IPersonalFormGroup>;\r\n  }\r\n  public get friendsFormArray() {\r\n    return this.formGroup.get('friends') as FormArray;\r\n  }\r\n\r\n  public genderOptions: IOption[] = [\r\n    { label: '', value: null },\r\n    { label: 'Male', value: 'M' },\r\n    { label: 'Female', value: 'F' },\r\n    { label: 'Undecided', value: 'U' }\r\n  ];\r\n  public friendOptions: IOption[] = [];\r\n  public sizeOptions: IOption[] = [\r\n    { label: 'Small', value: 'sm' },\r\n    { label: 'Medium', value: 'md' },\r\n    { label: 'Large', value: 'lg' }\r\n  ];\r\n\r\n  constructor(\r\n    public cache: ProfileCacheService,\r\n    private appDataService: AppDataService\r\n  ) {\r\n    this.appDataService.getPeople().subscribe((result) => {\r\n      this.friendOptions = result.data.map((p) => ({ label: `${p.firstName} ${p.lastName}`, value: p.id }));\r\n    });\r\n  }\r\n\r\n  public onAddFriend() {\r\n    this.friendsFormArray.push(new FormControl(null, { validators: [Validators.required] }));\r\n  }\r\n\r\n  public onDeleteFriend(index: number) {\r\n    this.friendsFormArray.removeAt(index);\r\n  }\r\n}\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n"],"x_google_ignoreList":[14]}