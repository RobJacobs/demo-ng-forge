{"version":3,"file":"744.cb1b9743adbe0819.js","mappings":"oLAKO,IAAMA,EAAiB,MAAxB,MAAOA,EAEXC,cACEC,KAAKC,YAAcC,OAAOC,OAAOC,GAAkBC,IAAKC,KAE7CC,MADID,EAAKE,KAAKC,MAAM,KAAKJ,IAAIK,GAAK,GAAGA,EAAEC,OAAO,GAAGC,gBAAgBF,EAAEG,MAAM,MAAMC,KAAK,KACvEC,MAAOT,EAAKE,KAAMQ,YAAaV,EAAKE,KAAMS,gBAAiB,eAEnFC,IAAaC,OAAOjB,OAAOC,OAAOC,GACpC,CAACgB,SAAApB,KAAA,mBAAAqB,iBARUvB,EAAiB,EAAAsB,SAAApB,KAAA,WAAAsB,EAAAC,IAAA,OAAjBzB,EAAiB0B,QAAjB1B,EAAiB2B,mBAAjB3B,CAAiB,qDCGxB4B,MAAA,uCAA2BA,MAAA,OAAAC,EAAAC,wCAW7BF,MAAA,WACEA,MAAA,mBACAA,MAAA,YAAuCA,MAAA,GAAcA,oCADzCA,cAAA,OAAAG,EAAAd,OAC2BW,MAAA,GAAAA,MAAAG,EAAAd,QCCtC,IAAMe,EAAc,MAArB,MAAOA,EAhBb/B,cAiBSC,KAAA+B,SAAQC,OAAOlC,GAGfE,KAAAiC,iBAA+C,CAACC,EAAgBnB,IACjEA,EACK,CAACf,KAAK+B,MAAM9B,aAAakC,KAAKC,GAAKA,EAAErB,QAAUA,IAElDmB,EAAOG,OACFrC,KAAK+B,MAAM9B,aAAaiC,OAAOE,GAAKA,EAAE7B,MAAM+B,oBAAoBC,SAASL,EAAOI,sBAAsBzB,MAAM,EAAG,KAE/Gb,KAAK+B,MAAM9B,aAAaY,MAAM,EAAG,KAKvC2B,eAAezB,GACpBf,KAAK4B,aAAe5B,KAAK+B,MAAM9B,aAAakC,KAAKC,GAAKA,EAAErB,QAAUA,IAAQA,MAC1E0B,QAAQC,IAAI1C,KAAK4B,aACnB,CAACR,SAAApB,KAAA,mBAAAqB,iBAnBUS,EAAc,EAAAV,SAAApB,KAAA,UAAAsB,EAAAqB,IAAA,MAAdb,EAAcc,UAAA,gBAAAC,YAAA,EAAAC,SAAA,CAAApB,MANd,CACT5B,IACD4B,OAAAqB,MAAA,GAAAC,KAAA,EAAAC,OAAA,uWAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDlBHzB,MAAA,oBAAAA,CAA8B,UACqBA,MAAA,WAAKA,UAGxDA,MAAA,UAAAA,CAAkB,0BACgCA,MAAA,qCAAA2B,GAAA,OAA6BD,EAAAZ,eAAAa,EAAAC,OAA6B,GACxG5B,MAAA,sBACEA,MAAA,EAAA6B,EAAA,oBAIA7B,MAAA,aACAA,MAAA,aAA4BA,MAAA,UAAIA,QAChCA,MAAA,mBACFA,UAGFA,MAAA,YACEA,MAAA,GAAA8B,EAAA,aAAA9B,OAMFA,iBAnBoBA,MAAA,GAAAA,MAAA,SAAA0B,EAAAnB,kBAEhBP,MAAA,GAAAA,MAAA,EAAA0B,EAAAxB,aAAA,MAWFF,MAAA,GAAAA,MAAA0B,EAAArB,MAAA9B,6BCRAwD,KACAC,MAAuBC,MACvBC,MAAeD,MACfE,MAAoBF,MACpBG,MAAkBH,OAAAI,OAAA,ykBAQTjC,CAAc","names":["IconsCacheService","constructor","this","iconOptions","Object","values","tylerIconsModule","map","icon","label","name","split","n","charAt","toUpperCase","slice","join","value","leadingIcon","leadingIconType","IconRegistry","define","static","t","core","wxM","factory","Éµfac","i0","ctx_r0","selectedIcon","icon_r2","IconsComponent","cache","inject","iconOptionFilter","filter","find","o","length","toLocaleLowerCase","includes","onIconSelected","console","log","In1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","detail","IconsComponent_Conditional_6_Template","IconsComponent_For_13_Template","CommonModule","ForgeAutocompleteModule","i1","ForgeIconModule","ForgeTextFieldModule","ForgeToolbarModule","styles"],"sourceRoot":"webpack:///","sources":["./src/app/icons/icons-cache.service.ts","./src/app/icons/icons.component.html","./src/app/icons/icons.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IconRegistry, IOption } from '@tylertech/forge';\r\nimport * as tylerIconsModule from '@tylertech/tyler-icons/standard';\r\n\r\n@Injectable()\r\nexport class IconsCacheService {\r\n  public iconOptions?: IOption[];\r\n  constructor() {\r\n    this.iconOptions = Object.values(tylerIconsModule).map((icon: { name: string; data: string }) => {\r\n      const name = icon.name.split('_').map(n => `${n.charAt(0).toUpperCase()}${n.slice(1)}`).join(' ');\r\n      return { label: name, value: icon.name, leadingIcon: icon.name, leadingIconType: 'component' };\r\n    });\r\n    IconRegistry.define(Object.values(tylerIconsModule));\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Icons</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <forge-autocomplete [filter]=\"iconOptionFilter\" (forge-autocomplete-change)=\"onIconSelected($event.detail)\">\r\n    <forge-text-field>\r\n      @if (selectedIcon) {\r\n      <forge-icon slot=\"leading\" [name]=\"selectedIcon\"></forge-icon>\r\n      }\r\n\r\n      <input id=\"autocomplete01\" type=\"text\" />\r\n      <label for=\"autocomplete01\">Icon</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <div class=\"all-icons\">\r\n    @for (icon of cache.iconOptions; track i; let i = $index) {\r\n    <div class=\"icon\">\r\n      <forge-icon [name]=\"icon.value\"></forge-icon>\r\n      <div class=\"forge-typography--caption\">{{icon.value}}</div>\r\n    </div>\r\n    }\r\n  </div>\r\n</div>","import { Component, inject } from '@angular/core';\r\nimport { AutocompleteFilterCallback, IOption } from '@tylertech/forge';\r\nimport { IconsCacheService } from './icons-cache.service';\r\nimport { ForgeAutocompleteModule, ForgeIconModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-icons',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeAutocompleteModule,\r\n    ForgeIconModule,\r\n    ForgeTextFieldModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  providers: [\r\n    IconsCacheService\r\n  ],\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.scss']\r\n})\r\nexport class IconsComponent {\r\n  public cache = inject(IconsCacheService);\r\n  public selectedIcon?: string;\r\n\r\n  public iconOptionFilter: AutocompleteFilterCallback = (filter: string, value: string) => {\r\n    if (value) {\r\n      return [this.cache.iconOptions?.find(o => o.value === value)] as IOption[];\r\n    } else {\r\n      if (filter.length) {\r\n        return this.cache.iconOptions?.filter(o => o.label.toLocaleLowerCase().includes(filter.toLocaleLowerCase())).slice(0, 100) as IOption[];\r\n      } else {\r\n        return this.cache.iconOptions?.slice(0, 100) as IOption[];\r\n      }\r\n    }\r\n  };\r\n\r\n  public onIconSelected(value: string) {\r\n    this.selectedIcon = this.cache.iconOptions?.find(o => o.value === value)?.value;\r\n    console.log(this.selectedIcon);\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}