{"version":3,"file":"523.c2971e8d9d6c503b.js","mappings":"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","names":["Utils","sortData","data","key","type","direction","length","slice","sort","a","b","getPropertyValue","this","comparator","groupData","property","isArray","reduce","previousValue","currentValue","push","filterData","filters","map","f","isString","value","operator","substring","Object","defineProperty","toLowerCase","filter","rec","every","strict","indexOf","isDefined","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","elementId","prefix","Math","random","toString","replace","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","timer","dueTime","intervalOrScheduler","scheduler","asyncScheduler","intervalDuration","isScheduler","due","isValidDate","now","n","schedule","closed","complete","pairwise","operate","source","prev","hasPrev","subscribe","createOperatorSubscriber","p","ReplaySubject","Subject","constructor","_bufferSize","Infinity","_windowTime","_timestampProvider","dateTimestampProvider","super","_buffer","_infiniteTimeWindow","max","isStopped","_trimBuffer","_subscribe","_throwIfClosed","subscription","_innerSubscribe","copy","i","_checkFinalizedStatuses","adjustedBufferSize","splice","last","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","Action","Subscription","work","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","id","recycleAsyncId","requestAsyncId","_id","flush","bind","_scheduler","execute","Error","error","_execute","_delay","errorValue","errored","e","unsubscribe","actions","arrRemove","Scheduler","schedulerActionCtor","AsyncScheduler","SchedulerAction","_active","action","shift","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","timestamp","animationFrameScheduler","AnimationFrameScheduler","flushId","_scheduled","AnimationFrameAction","async","DIR_DOCUMENT","InjectionToken","providedIn","factory","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","Directionality","_document","change","EventEmitter","_resolveDirectionality","rawValue","test","body","dir","documentElement","ngOnDestroy","static","ɵfac","t","i0","ɵprov","token","BidiModule","ɵmod","ɵinj","coerceBooleanProperty","coerceNumberProperty","fallbackValue","_isNumberValue","Number","coerceArray","Array","coerceElement","elementOrRef","ElementRef","nativeElement","hasV8BreakIterator","Intl","v8BreakIterator","supportsPassiveEvents","rtlScrollAxisType","scrollBehaviorSupported","shadowDomIsSupported","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","normalizePassiveListenerOptions","supportsPassiveEventListeners","get","capture","supportsScrollBehavior","Element","style","scrollToFunction","prototype","scrollTo","getRtlScrollAxisType","scrollContainer","createElement","containerStyle","width","overflow","visibility","pointerEvents","position","content","contentStyle","height","appendChild","scrollLeft","_getShadowRoot","element","_supportsShadowDom","head","createShadowRoot","attachShadow","rootNode","getRootNode","ShadowRoot","_getEventTarget","event","composedPath","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","Promise","resolve","then","clearImmediate","immediateProvider","asapScheduler","AsapScheduler","AsapAction","auditTime","duration","audit","durationSelector","hasValue","lastValue","durationSubscriber","isComplete","endDuration","cleanupDuration","DataSource","ArrayDataSource","_data","connect","isObservable","of","disconnect","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","_insertView","viewArgsFactory","_detachAndCacheView","_moveView","context","detach","destroy","cachedView","_insertViewFromCache","$implicit","viewArgs","createEmbeddedView","templateRef","index","detachedView","_maybeCacheView","move","pop","insert","_VIEW_REPEATER_STRATEGY","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","ngOnChanges","ɵdir","selectors","inputs","standalone","features","provide","useFactory","deps","forwardRef","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","has","set","elementScrolled","deregister","scrollableReference","delete","scrolled","auditTimeInMs","observer","_addGlobalListener","_removeGlobalListener","_","container","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","scrollableElement","getElementRef","parentElement","runOutsideAngular","i1","CdkScrollable","elementRef","scrollDispatcher","ngZone","_destroyed","_elementScrolled","takeUntil","ngOnInit","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTop","from","LEFT","RIGHT","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentRect","getBoundingClientRect","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","orientation","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","appendOnly","_appendOnly","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","classList","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","size","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","transform","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","markForCheck","runAfterChangeDetection","fn","ɵcmp","viewQuery","rf","ctx","_t","first","hostAttrs","hostVars","hostBindings","outputs","virtualScrollable","Optional","Inject","ngContentSelectors","decls","vars","consts","template","styles","encapsulation","changeDetection","getOffset","node","rect","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ConnectableObservable","_dataSourceChanges","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","item","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","_viewContainerRef","_differs","viewChange","switchMap","cur","_changeDataSource","_differ","_onRenderedDataChange","observers","renderedStartIndex","rangeLen","firstNode","lastNode","rootNodes","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","find","create","oldDs","newDs","count","_updateComputedContextProperties","detectChanges","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","even","odd","useClass","CdkScrollableModule","ScrollingModule","imports"],"sourceRoot":"webpack:///","sources":["./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/platform.mjs","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs"],"sourcesContent":["import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DIR_DOCUMENT]\n                }] }]; } });\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId\n            ? isPlatformBrowser(this._platformId)\n            : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser &&\n            !!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) &&\n            !this.BLINK &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\n\nclass PlatformModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => (supportsPassiveEvents = true),\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* RtlScrollAxisType.NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* RtlScrollAxisType.NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* RtlScrollAxisType.NEGATED */ : 2 /* RtlScrollAxisType.INVERTED */;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n    // We can't use `declare const` because it causes conflicts inside Google with the real typings\n    // for these symbols and we can't read them off the global object, because they don't appear to\n    // be attached there for some runners like Jest.\n    // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n    return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(value))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            for (let selectedValue of this._selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"],"x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]}