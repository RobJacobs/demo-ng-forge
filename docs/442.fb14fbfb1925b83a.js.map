{"version":3,"file":"442.fb14fbfb1925b83a.js","mappings":"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","names":["AppDataService","constructor","httpClient","this","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Yz7","factory","Éµfac","providedIn","ctx_r4","rangeMessage","option_r6","_r8","$implicit","ctx_r7","onDeleteRangeOption","label","$event","_r10","ctx_r9","rangeMin","ctx_r11","rangeMax","ctx_r12","onAddRangeOption","AutocompleteRangeComponent_ng_template_8_div_14_Template","AutocompleteRangeComponent_ng_template_8_forge_list_item_16_Template","ctx_r3","maxlength","rangeOptions","AutocompleteRangeComponent","values","writeValue","ngZone","viewContainerRef","valueChange","EventEmitter","elementId","uniqueId","onChange","fn","onTouched","onFilter","Promise","resolve","reject","optionFilter","subscribe","response","options","forEach","isArray","push","error","optionHeaderBuilder","run","undefined","rangeRef","rootNodes","selectedTextBuilder","selectedOptions","autocompleteRef","nativeElement","open","optionCount","rangeOptionCount","rangeOption","window","requestAnimationFrame","ngAfterViewInit","createEmbeddedView","rangeTemplateRef","remove","ngOnDestroy","destroy","registerOnChange","registerOnTouched","onAutocompleteChange","emitChangeEvents","autocompleteBlur","isString","trim","comp","comparator","findIndex","filterInputRef","option","focus","optionIndex","splice","emit","_angular_core__WEBPACK_IMPORTED_MODULE_0__","Xpm","selectors","viewQuery","rf","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","AutocompleteRangeComponent_ng_template_8_Template","CommonModule","FormsModule","i2","styles","type","a","b","getPropertyValue","groupData","reduce","previousValue","currentValue","operator","substring","Object","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","replace","formatDate","format","formatNumber","parseQueryStringParameters","params","search","httpParams","HttpParams","fromString","keys","k","getAll","enumerable","writable","reduceObject","object","reduced"],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/shared/components/autocomplete-range/autocomplete-range.component.html","./src/app/shared/components/autocomplete-range/autocomplete-range.component.ts","./src/utils.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\r\n  <forge-text-field>\r\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\" />\r\n    <label [attr.for]=\"elementId\">{{label}}</label>\r\n    <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n  </forge-text-field>\r\n</forge-autocomplete>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"range\" tabindex=\"-1\">\r\n    <div class=\"range__input\">\r\n      <span class=\"forge-typography--subtitle1 range__input__header\">Enter a search range</span>\r\n      <div class=\"range__input__body\">\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMin\" />\r\n        </forge-text-field>\r\n        <span>to</span>\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMax\" />\r\n        </forge-text-field>\r\n        <forge-icon-button>\r\n          <button type=\"button\" aria-label=\"add search range\" (click)=\"onAddRangeOption()\">\r\n            <forge-icon name=\"add\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n      <div *ngIf=\"rangeMessage\" class=\"forge-typography--caption\">{{rangeMessage}}</div>\r\n    </div>\r\n    <forge-list class=\"range__options\">\r\n      <forge-list-item *ngFor=\"let option of rangeOptions\">\r\n        <forge-icon-button slot=\"leading\">\r\n          <button type=\"button\" aria-label=\"delete search range\" (click)=\"onDeleteRangeOption(option)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n        {{option.label}}\r\n      </forge-list-item>\r\n    </forge-list>\r\n    <forge-divider></forge-divider>\r\n  </div>\r\n</ng-template>","import {\r\n  AfterViewInit,\r\n  Component,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  AutocompleteFilterCallback,\r\n  IOption,\r\n  IAutocompleteOptionGroup,\r\n  AutocompleteSelectedTextBuilder,\r\n  AutocompleteComponent\r\n} from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\n\r\nimport { Utils } from 'src/utils';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteRangeComponent), multi: true }]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  @ViewChild('rangeAutocomplete') autocompleteRef?: ElementRef;\r\n  @ViewChild('rangeTemplate') rangeTemplateRef?: TemplateRef<any>;\r\n  @ViewChild('filterInput') filterInputRef?: ElementRef;\r\n\r\n  @Input()\r\n  public optionFilter?: (filter: string) => Observable<IOption[]>;\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  @Input()\r\n  public label?: string;\r\n  @Input()\r\n  public maxlength: number | null = null;\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private viewContainerRef: ViewContainerRef\r\n  ) { }\r\n\r\n  public onChange = (fn: any) => { };\r\n  public onTouched = () => { };\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      if (this.optionFilter) {\r\n        this.optionFilter(this.filter).subscribe(\r\n          {\r\n            next: (response) => {\r\n              const options: IOption[] = [];\r\n              response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n              resolve(options);\r\n            },\r\n            error: () => reject()\r\n          }\r\n        );\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  writeValue(values: Array<IOption> | Array<string | string[] | number>): void {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({ label: `${rangeOption[0]} to ${rangeOption[1]}`, value: rangeOption });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange(): void {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  public onAddRangeOption(): void {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label =\r\n      this.rangeMin?.length && this.rangeMax?.length\r\n        ? `${this.rangeMin} to ${this.rangeMax}`\r\n        : this.rangeMin?.length\r\n          ? `Greater than ${this.rangeMin}`\r\n          : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption): void {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents(): void {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}