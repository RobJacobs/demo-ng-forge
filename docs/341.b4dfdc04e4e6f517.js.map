{"version":3,"file":"341.b4dfdc04e4e6f517.js","mappings":"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","names":["FormlyDemoService","constructor","this","formMessage","Subject","validateField","field","value","of","invalid","message","pipe","delay","getFieldHelp","param","filters","length","count","data","result","index","skip","take","push","id","address","city","state","static","t","core","jDH","factory","ɵfac","formlyDemoConstants","props","label","type","attributes","columns","fieldGroup","key","defaultValue","required","description","width","column","row","options","optionsKey","property","className","template","safeHtml","fieldArray","_c0","FormlyField_ng_template_0_Template","rf","ctx","_c1","FormlyGroup_formly_field_0_Template","i0","$implicit","getFieldId","formId","Type","prototype","name","join","hasKey","isNil","Array","isArray","getKeyPath","_keyPath","path","indexOf","replace","split","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","Uint8Array","Uint16Array","Uint32Array","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","o","_observers","target","onChange","set","previousValue","changeFn","setValue","emitEvent","filter","getField","f","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","isHiddenField","isHidden","hide","expressions","hideExpression","setDefaultValue","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","touched","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵprov","token","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","_build","_hiddenFieldsForCheck","checkExpressions","_detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","detectChanges","i2","unregisterControl","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","None","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","removeAttribute","setAttribute","VERSION","major","minor","distinctUntilChanged","_localFields","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","parsers","parserFn","is","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","next","templateFieldsSubs","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","immutable","setField","fields","checkExpressionChange","switchMap","isNoopNgZone","ɵNoopNgZone","onStable","asObservable","runGuarded","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","_formlyControls","flat","to","formState","NgControl","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","add","initialModel","remove","updateArrayElementKey","newKey","ɵFieldArrayType_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","content","bypassSecurityTrustHtml","i1","FieldExpressionExtension","hidden","expr","parseExpressions","evalExpr","Observable","tap","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","pattern","minLengthResult","minLength","minLengthKey","minlength","u","maxLengthResult","maxLength","maxLengthKey","maxlength","D","min","max","validatorOption","isPromise","obj","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","hasValidators","mergeValidators","asyncValidator","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","placeholder","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","deps","useValue","forChild","ɵmod","ɵinj","imports","CommonModule","ctx_r0","formGroup","formDefinition","formOptions","FormlyDemoComponent","inject","destroyRef","DestroyRef","moduleService","age","takeUntilDestroyed","getFormErrors","formErrors","groupError","VBU","FormlyDemoComponent_Conditional_2_Template","FormlyFieldComponent","ElementRef","FormlyFieldDirective","style","gridColumn","gridRow","addEventListener","FsC","formlyFieldDirective","standalone","f_r2","formlyField_r3","GroupTypeComponent","fieldContainerElement","fieldContainer","classList","gridTemplateColumns","gridWidth","gridHeight","GroupTypeComponent_Conditional_0_Template","GroupTypeComponent_For_4_Template","CheckboxTypeComponent","addAsyncValidators","complete","pristine","takeUntil","server","CheckboxTypeComponent_Conditional_1_Template","CheckboxTypeComponent_Conditional_2_Template","readonly","ReactiveFormsModule","ForgeCheckboxModule","i3","DatePickerTypeComponent","isValidDate","DatePickerTypeComponent_Conditional_3_Template","DatePickerTypeComponent_Conditional_4_Template","ForgeDatePickerModule","ForgeTextFieldModule","TextareaTypeComponent","cols","rows","TextareaTypeComponent_Conditional_3_Template","TextareaTypeComponent_Conditional_4_Template","field_r2","_r1","ctx_r2","onTabSelected","TabTypeComponent","activeTab","activeField","TabTypeComponent_For_2_Template","formlyField_r4","ForgeTabBarModule","ForgeTabModule","th_r2","f_r4","formlyField_r5","TableTypeComponent_For_9_For_2_Template","i_r6","_r3","$index","ctx_r6","onRemove","fg_r8","TableTypeComponent","onAdd","fromEntries","requestAnimationFrame","tr","from","tableElement","querySelectorAll","reverse","focusElement","querySelector","TableTypeComponent_For_5_Template","TableTypeComponent_For_9_Template","FieldHelpDialogComponent","dialogConfig","DIALOG_DATA","dialogRef","DialogRef","Utils","elementId","paginator","pageIndex","pageSize","total","isBusy","direction","SortDirection","Ascending","dialogTitle","title","columnConfigurations","dataObservable","initialSort","getData","onClose","close","onPaginatorChange","onTableSort","columnIndex","onTableFilter","filterProperty","isDefined","toString","onTableRowClick","finalize","detail","FieldHelpDialogComponent_Conditional_8_Template","FieldHelpDialogComponent_Conditional_9_Template","ForgeIconButtonModule","ForgeIconModule","ForgePageStateModule","ForgePaginatorModule","ForgeScaffoldModule","ForgeSkeletonModule","ForgeTableModule","ForgeToolbarModule","ctx_r1","InputHelpTypeComponent","dialogService","DialogService","onShowDialog","open","header","sortable","filterDelegate","TextFieldComponentDelegate","afterClosed","InputHelpTypeComponent_Conditional_3_Template","InputHelpTypeComponent_Conditional_6_Template","LabelTypeComponent","option_r2","RadioTypeComponent_For_3_Conditional_1_Template","i_r3","RadioTypeComponent","RadioTypeComponent_Conditional_0_Template","RadioTypeComponent_For_3_Template","RadioTypeComponent_Conditional_4_Template","ForgeRadioModule","ForgeRadioGroupModule","SelectTypeComponent","SelectTypeComponent_Conditional_1_Template","ForgeSelectModule","formlyFieldExtension","ButtonTypeComponent","onClick","event","log","ForgeButtonModule","ContainerTypeComponent","ContainerTypeComponent_Conditional_0_Template","ContainerTypeComponent_For_4_Template","InputTypeComponent","inputType","InputTypeComponent_Conditional_3_Template","InputTypeComponent_Conditional_4_Template","i4","FormlyConfigModule","$C","G2t","routes","FormlyDemoModule","RouterModule","sortData","getPropertyValue","comparator","groupData","filterData","isString","operator","substring","rec","strict","isNaN","parseFloat","localeCompare","navigator","language","sensitivity","numeric","navigateBack","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","queryIndex","window","href","httpParams","HttpParams","fromString","getAll","reduceObject","object","reduced","trim","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","innerFrom","mergeAll","EMPTY","timer","dueTime","intervalOrScheduler","asyncScheduler","intervalDuration","isScheduler","subscriber","due","now","n","schedule","closed","operate","activeTask","lastValue","lastTime","emitWhenIdle","targetTime","createOperatorSubscriber","delayWhen","delayDurationSelector","subscriptionDelay","concat","ignoreElements","noop","mergeMap","mapTo","duration","keySelector","identity","defaultCompare","previousKey","currentKey","Action","Subscription","work","intervalProvider","setInterval","handler","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","execute","_execute","_delay","errorValue","errored","actions","arrRemove","Scheduler","schedulerActionCtor","dateTimestampProvider","AsyncScheduler","SchedulerAction","_active","action","shift","async","isValid","date","isDate","call","_date","toDate","argument","argStr","NaN"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/formly-demo/formly-demo.service.ts","./src/app/formly-demo/formly-demo.constants.ts","./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs","./src/app/formly-demo/formly-demo.component.html","./src/app/formly-demo/formly-demo.component.ts","./src/app/formly-demo/components/formly-field.component.ts","./src/app/formly-demo/components/formly-field.directive.ts","./src/app/formly-demo/components/group-type.component.ts","./src/app/formly-demo/components/checkbox-type.component.ts","./src/app/formly-demo/components/date-picker-type.component.ts","./src/app/formly-demo/components/textarea-type.component.ts","./src/app/formly-demo/components/tab-type.component.ts","./src/app/formly-demo/components/table-type.component.ts","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.html","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.ts","./src/app/formly-demo/components/input-help-type.component.ts","./src/app/formly-demo/components/label-type.component.ts","./src/app/formly-demo/components/radio-type.component.ts","./src/app/formly-demo/components/select-type.component.ts","./src/app/formly-demo/components/formly-field.extension.ts","./src/app/formly-demo/components/button-type.component.ts","./src/app/formly-demo/components/container-type.component.ts","./src/app/formly-demo/components/input-type.component.ts","./src/app/formly-demo/components/formly-config.module.ts","./src/app/formly-demo/formly-demo.module.ts","./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/date-fns/isValid.mjs","./node_modules/date-fns/isDate.mjs","./node_modules/date-fns/toDate.mjs"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\nimport { IFilterParameter, IFilterResponse } from '../shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport class FormlyDemoService {\r\n  public formMessage = new Subject<{ id: string; message: string; }>();\r\n\r\n  public validateField(field: string, value: any): Observable<{ invalid: boolean; message: string }> {\r\n    const validation = {\r\n      invalid: false,\r\n      message: `Error from server: ${field}`\r\n    };\r\n\r\n    return of(validation).pipe(\r\n      delay(1000)\r\n    );\r\n  }\r\n\r\n  public getFieldHelp(field: string, param: IFilterParameter): Observable<IFilterResponse<any>> {\r\n    if (param.filters?.length) {\r\n      return of({ count: 0, data: [] }).pipe(\r\n        delay(1000)\r\n      )\r\n    } else {\r\n      const result = [];\r\n      for (let index = param.skip as number; index < <number>param.skip + <number>param.take; index++) {\r\n        result.push(\r\n          {\r\n            id: index,\r\n            address: `${index} street`,\r\n            city: `${index} city`,\r\n            state: `${index} state`\r\n          }\r\n        );\r\n      }\r\n\r\n      return of({ count: 75, data: result }).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n  }\r\n}\r\n","const formDefinitionBasic = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'name',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Name',\r\n          type: 'string',\r\n          format: '###-##-####',\r\n          required: true,\r\n          description: 'Persons name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number',\r\n          format: '#,###,###,##&.&&',\r\n          required: true,\r\n          description: 'Persons age',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\nconst formDefinitionAll = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'firstName',\r\n        type: 'input',\r\n        defaultValue: 0,\r\n        props: {\r\n          label: 'First name',\r\n          required: true,\r\n          description: 'Persons first name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'lastName',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Last name',\r\n          description: 'Persons last name',\r\n          attributes: {\r\n            width: 320,\r\n            column: 1,\r\n            row: 2\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        defaultValue: 18,\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number'\r\n        }\r\n      },\r\n      {\r\n        key: 'isActive',\r\n        type: 'checkbox',\r\n        props: {\r\n          label: 'Is active'\r\n        }\r\n      },\r\n      {\r\n        key: 'birthDate',\r\n        type: 'date-picker',\r\n        props: {\r\n          label: 'DOB',\r\n          description: 'Persons date of birth',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'gender',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Gender',\r\n          options: [\r\n            { label: 'Male', value: 'M' },\r\n            { label: 'Female', value: 'F' },\r\n            { label: 'Other', value: 'O' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'comment',\r\n        type: 'textarea',\r\n        props: {\r\n          label: 'Comment',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'size',\r\n        type: 'radio',\r\n        props: {\r\n          label: 'Size',\r\n          description: 'What is your size?',\r\n          options: [\r\n            { label: 'Small', value: 'sm' },\r\n            { label: 'Medium', value: 'md' },\r\n            { label: 'Large', value: 'lg' }\r\n          ],\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'officeLocation',\r\n        type: 'input-help',\r\n        props: {\r\n          label: 'Office location',\r\n          description: 'What is your office location',\r\n          optionsKey: 'id',\r\n          options: [\r\n            { label: 'Address', property: 'address' },\r\n            { label: 'City', property: 'city' },\r\n            { label: 'State', property: 'state' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    className: 'form-divider',\r\n    template: '<forge-divider style=\"margin: 16px 0\"></forge-divider>',\r\n    props: {\r\n      safeHtml: true\r\n    }\r\n  },\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      type: 'group',\r\n      label: 'Address'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'hbox'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            key: 'address.street',\r\n            type: 'input',\r\n            props: {\r\n              label: 'Street'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.city',\r\n            type: 'input',\r\n            props: {\r\n              label: 'City'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.state',\r\n            type: 'input',\r\n            props: {\r\n              label: 'State'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'tab',\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          label: 'Tab 1'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'hbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field1',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 1'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field2',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 2'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        props: {\r\n          label: 'Tab 2'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'vbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field3',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 3'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field4',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 4'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'children',\r\n    type: 'table',\r\n    props: {\r\n      columns: [\r\n        {\r\n          label: 'First name',\r\n          key: 'firstName',\r\n          defaultValue: null\r\n        },\r\n        {\r\n          label: 'Last name',\r\n          key: 'lastName',\r\n          defaultValue: null\r\n        }\r\n      ]\r\n    },\r\n    fieldArray: {\r\n      fieldGroup: [\r\n        {\r\n          key: 'firstName',\r\n          type: 'input',\r\n          props: {\r\n            required: true\r\n          }\r\n        },\r\n        {\r\n          key: 'lastName',\r\n          type: 'input'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n];\r\n\r\nconst formDefinitionLayout = [\r\n  {\r\n    props: {\r\n      type: 'vbox'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'grid',\r\n          attributes: {\r\n            width: 83,\r\n            height: 10\r\n          }\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'group',\r\n              attributes: {\r\n                posX: 1,\r\n                posY: 1,\r\n                gridWidth: 83,\r\n                gridHeight: 6\r\n              }\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Year',\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 2,\r\n                    gridWidth: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'tax_year',\r\n                type: 'input',\r\n                defaultValue: '2023',\r\n                props: {\r\n                  type: 'number',\r\n                  disabled: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 2,\r\n                    gridWidth: 4,\r\n                    width: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'which_value',\r\n                type: 'radio',\r\n                props: {\r\n                  description: 'Value to use on report.',\r\n                  options: [\r\n                    { label: 'Original full value', value: 'O' },\r\n                    { label: 'Current full value', value: 'C' }\r\n                  ],\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 3,\r\n                    gridWidth: 31,\r\n                    width: 31\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Minimum value',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 4,\r\n                    gridWidth: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'min_val',\r\n                type: 'input',\r\n                props: {\r\n                  type: 'number',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 4,\r\n                    gridWidth: 13,\r\n                    width: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Sort vehicles by',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 5,\r\n                    gridWidth: 17\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'seq_sw',\r\n                type: 'select',\r\n                props: {\r\n                  required: true,\r\n                  options: [\r\n                    { label: 'Sequence number', value: 'S' },\r\n                    { label: 'Owner name', value: 'O' }\r\n                  ],\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 5,\r\n                    gridWidth: 17,\r\n                    width: 15\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const formlyDemoConstants = {\r\n  formDefinitionBasic,\r\n  formDefinitionAll,\r\n  formDefinitionLayout\r\n}","import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, ɵNoopNgZone, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, NgControl, Validators } from '@angular/forms';\nimport { isObservable, of, merge, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, startWith, debounceTime, filter, switchMap, take, tap } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { VERSION, DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '' && (!Array.isArray(field.key) || field.key.length > 0);\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    if (value instanceof Uint8Array) {\n        return new Uint8Array(value);\n    }\n    if (value instanceof Uint16Array) {\n        return new Uint16Array(value);\n    }\n    if (value instanceof Uint32Array) {\n        return new Uint32Array(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (setFn && state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1 && isObject(target)) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(currentValue, emitEvent = true) {\n            if (currentValue === state.value) {\n                return;\n            }\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => {\n                if (changeFn !== setFn && emitEvent) {\n                    changeFn({ previousValue, currentValue, firstChange: false });\n                }\n            });\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\nfunction isNoopNgZone(ngZone) {\n    return ngZone instanceof ɵNoopNgZone;\n}\nfunction isHiddenField(field) {\n    const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n    let setDefaultValue = !field.resetOnHide || !isHidden(field);\n    if (!isHidden(field) && field.resetOnHide) {\n        let parent = field.parent;\n        while (parent && !isHidden(parent)) {\n            parent = parent.parent;\n        }\n        setDefaultValue = !parent || !isHidden(parent);\n    }\n    return !setDefaultValue;\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n        }\n        disableTreeValidityCall(field.form, () => {\n            this._build(field);\n            // TODO: add test for https://github.com/ngx-formly/ngx-formly/issues/3910\n            if (!field.parent || field.fieldArray) {\n                // detect changes early to avoid reset value by hidden fields\n                const options = field.options;\n                if (field.parent && isHiddenField(field)) {\n                    // when hide is used in expression set defaul value will not be set until detect hide changes\n                    // which causes default value not set on new item is added\n                    options._hiddenFieldsForCheck?.push(field);\n                }\n                options.checkExpressions?.(field, true);\n                options._detectChanges?.(field);\n            }\n        });\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe();\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n        ];\n        const isSignalRequired = +VERSION.major >= 18 && +VERSION.minor >= 1;\n        if (!isSignalRequired) {\n            ['touched', 'pristine', 'status'].forEach((prop) => this.hostObservers.push(observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))));\n        }\n        else if (this.field.formControl) {\n            const statusChanges = this.field.formControl.statusChanges\n                .pipe(distinctUntilChanged())\n                .subscribe(() => markFieldForCheck(this.field));\n            this.hostObservers.push(statusChanges);\n        }\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._localFields) {\n                field._localFields = [];\n            }\n            else {\n                defineHiddenProp(this.field, '_localFields', []);\n            }\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field))];\n        if (field.options) {\n            subscribes.push(observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)));\n        }\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['focus'], ['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(map((value) => {\n                field.parsers?.map((parserFn) => (value = parserFn(value, field)));\n                if (!Object.is(value, field.formControl.value)) {\n                    field.formControl.setValue(value);\n                }\n                return value;\n            }), distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        let templateFieldsSubs = [];\n        observe(field, ['_localFields'], ({ currentValue }) => {\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs = (currentValue || []).map((f) => this.fieldChanges(f));\n        });\n        return () => {\n            subscribes.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n        };\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => (isNoopNgZone(this.ngZone) ? of(null) : this.ngZone.onStable.asObservable().pipe(take(1)))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        for (let i = 0; i < this.uiAttributes.length; i++) {\n            const attr = this.uiAttributes[i];\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    constructor() {\n        this.field = {};\n    }\n    set _formlyControls(controls) {\n        const f = this.field;\n        f._localFields = controls\n            .map((c) => c.control._fields || [])\n            .flat()\n            .filter((f) => f.formControl !== this.field.formControl);\n    }\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options?.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"_formlyControls\", predicate: NgControl, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { _formlyControls: [{\n                type: ViewChildren,\n                args: [NgControl]\n            }], field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = { ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray) };\n            if (f.key !== null) {\n                f.key = `${i}`;\n            }\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => this.updateArrayElementKey(f, `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n    updateArrayElementKey(f, newKey) {\n        if (hasKey(f)) {\n            f.key = newKey;\n            return;\n        }\n        if (!f.fieldGroup?.length) {\n            return;\n        }\n        for (let i = 0; i < f.fieldGroup.length; i++) {\n            this.updateArrayElementKey(f.fieldGroup[i], newKey);\n        }\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _formlyControls(_) { }\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options._detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f && !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), parent = field.fieldGroup ? field : field.parent;\n            let control = field?.key === key ? field.formControl : field.form.get(key);\n            if (!control && field.get(key)) {\n                control = field.get(key).formControl;\n            }\n            assignFieldValue({ key, parent, model: field.model }, value);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        else {\n            try {\n                let target = field;\n                const paths = this._evalExpressionPath(field, prop);\n                const lastIndex = paths.length - 1;\n                for (let i = 0; i < lastIndex; i++) {\n                    target = target[paths[i]];\n                }\n                target[paths[lastIndex]] = value;\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n            if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n                this.changeDisabledState(field, value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (opt === 'required' && currentValue != null && typeof currentValue !== 'boolean') {\n                console.warn(`Formly: Invalid prop 'required' of type '${typeof currentValue}', expected 'boolean' (Field:${field.key}).`);\n            }\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (field.fieldArray) {\n            return;\n        }\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: !!field.props.disabled }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        else {\n            if (control instanceof FormControl) {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control.defaultValue = value;\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator && this.hasValidators(field, '_validators')) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    markForCheck = true;\n                }\n                if (null === c.asyncValidator && this.hasValidators(field, '_asyncValidators')) {\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    hasValidators(field, type) {\n        const c = field.formControl;\n        if (c?._fields?.length > 1 && c._fields.some((f) => f[type].length > 0)) {\n            return true;\n        }\n        else if (field[type].length > 0) {\n            return true;\n        }\n        return field.fieldGroup?.some((f) => f?.fieldGroup && !hasKey(f) && this.hasValidators(f, type));\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options._detectChanges = (f) => {\n            if (f._componentRefs) {\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options._detectChanges(f));\n        };\n        options.detectChanges = (f) => {\n            f.options.checkExpressions?.(f);\n            options._detectChanges(f);\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            observe(options, ['parentForm', 'submitted']).setValue(false, false);\n            options.build(field);\n            field.form.reset(field.model);\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) &&\n            !isUndefined(field.defaultValue) &&\n            isUndefined(getFieldValue(field)) &&\n            !isHiddenField(field)) {\n            assignFieldValue(field, field.defaultValue);\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n","<div class=\"body\">\r\n  <form class=\"form\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    @if (formDefinition) {\r\n    <formly-form [form]=\"formGroup\" [model]=\"model\" [fields]=\"formDefinition\" [options]=\"formOptions\"></formly-form>\r\n\r\n    <p>\r\n      {{formGroup.value| json}}\r\n    </p>\r\n    }\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <span class=\"forge-typography--label1\" slot=\"start\">\r\n    {{formMessage?.message}}\r\n  </span>\r\n</forge-toolbar>","import { ChangeDetectorRef, Component, DestroyRef, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { formlyDemoConstants } from './formly-demo.constants';\r\n\r\n@Component({\r\n  selector: 'app-formly-demo',\r\n  templateUrl: './formly-demo.component.html',\r\n  styleUrls: ['./formly-demo.component.scss']\r\n})\r\nexport class FormlyDemoComponent implements OnInit {\r\n  private changeDetectorRef = inject(ChangeDetectorRef);\r\n  private destroyRef = inject(DestroyRef);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private form?: Form;\r\n\r\n  public formGroup = new FormGroup({});\r\n  public formDefinition?: FormlyFieldConfig[];\r\n  public formOptions: FormlyFormOptions = {\r\n    // showError(field) {\r\n    //   console.log(field);\r\n    //   return false;\r\n    // },\r\n    // build: (field) => {\r\n    //   console.log(field);\r\n    //   return field;\r\n    // }\r\n  };\r\n  public model = {\r\n    name: '',\r\n    age: 10\r\n  };\r\n  public record: any;\r\n  public formMessage?: { id: string; message: string; };\r\n\r\n  constructor() {\r\n    this.moduleService.formMessage.pipe(\r\n      takeUntilDestroyed(this.destroyRef)\r\n    ).subscribe(result => {\r\n      this.formMessage = result;\r\n    });\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formDefinition = formlyDemoConstants.formDefinitionAll as any;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  private getFormErrors(control: AbstractControl) {\r\n    if (control instanceof FormControl) {\r\n      return control.errors ? control : null;\r\n    }\r\n\r\n    if (control instanceof FormGroup) {\r\n      const formErrors = control.errors ? { groupError: control } : {} as any;\r\n      Object.keys(control.controls).forEach(key => {\r\n        const error = this.getFormErrors(control.get(key) as AbstractControl);\r\n        if (error) {\r\n          formErrors[key] = error;\r\n        }\r\n      });\r\n\r\n      return Object.keys(formErrors).length > 0 ? formErrors : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, ElementRef, Input, OnInit, ViewChild, inject } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-field',\r\n  template: `\r\n    <formly-field #formlyField [field]=\"$any(field)\"></formly-field>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyFieldComponent implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n\r\n  @ViewChild('formlyField', { static: true })\r\n  private formlyField?: FormlyField;\r\n\r\n  @Input()\r\n  public field?: FormlyFieldConfig;\r\n\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyField);\r\n    // console.log(this.elementRef.nativeElement);\r\n  }\r\n}\r\n","import { Input, inject } from '@angular/core';\r\nimport { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: '[formlyFieldDirective]',\r\n  standalone: true\r\n})\r\nexport class FormlyFieldDirective implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  @Input()\r\n  field?: FormlyFieldConfig\r\n  @Input()\r\n  formlyFieldDirective?: FormlyField;\r\n\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyFieldDirective);\r\n    // console.log(this.elementRef.nativeElement);\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n\r\n    if (this.field?.props?.attributes) {\r\n      if (this.field.props.attributes && this.field.props.attributes['width']) {\r\n        element.style.width = `${this.field.props.attributes['width']}px`;\r\n      }\r\n\r\n      if (this.field.props.attributes['column']) {\r\n        element.style.gridColumn = `${this.field.props.attributes['column']}`;\r\n      }\r\n\r\n      if (this.field.props.attributes['row']) {\r\n        element.style.gridRow = `${this.field.props.attributes['row']}`;\r\n      }\r\n    }\r\n\r\n    if (this.field?.props?.description?.length) {\r\n      element.addEventListener('focusin', () => {\r\n        this.moduleService.formMessage.next({ id: this.field?.id as string, message: this.field?.props?.description as string });\r\n      });\r\n      element.addEventListener('focusout', () => {\r\n        this.moduleService.formMessage.next({ id: this.field?.id as string, message: '' });\r\n      });\r\n    }\r\n\r\n    if (this.field?.props?.required) {\r\n      this.field.validation!.messages = {\r\n        required: `A ${this.field.props.label || 'value'} is required`\r\n      };\r\n    }\r\n\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, HostBinding, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FieldGroupTypeConfig, FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-group',\r\n  template: `\r\n    @if (props.label?.length && field.parent?.type !== 'tab') {\r\n      <div class=\"label\">{{props.label}}</div>\r\n    }\r\n    <div #fieldContainer>\r\n      @for (f of field.fieldGroup; track i; let i = $index) {\r\n        <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      }\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n      height: fit-content;\r\n\r\n      ::ng-deep {\r\n        .form-grid {\r\n          display: grid !important;\r\n          row-gap: 8px !important;\r\n          // row-gap: 0 !important;\r\n        }\r\n\r\n        .form-vbox {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n        }\r\n\r\n        .form-hbox {\r\n          display: flex;\r\n          flex-direction: row;\r\n          column-gap: 16px;\r\n        }\r\n\r\n        .form-group {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n          border: var(--forge-theme-outline);\r\n          border-radius: 4px;\r\n          padding: 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .label {\r\n      padding-bottom: 8px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class GroupTypeComponent extends FieldType<FieldGroupTypeConfig> implements OnInit {\r\n  private elementRef = inject(ElementRef);\r\n\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer?: ElementRef;\r\n  // @HostBinding('style.display')\r\n  // private displayStyle = 'block';\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer?.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n\r\n        if (this.props.attributes) {\r\n          if (this.props.attributes['width']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['width']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['height']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['height']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        // this.displayStyle = 'inline-block';\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n\r\n        if (this.props.attributes && (this.props.attributes['gridWidth'] || this.props.attributes['gridHeight'])) {\r\n          fieldContainerElement.classList.add('form-grid');\r\n          if (this.props.attributes['gridWidth']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['gridWidth']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['gridHeight']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['gridHeight']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeCheckboxModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-checkbox',\r\n  template: `\r\n    <forge-checkbox\r\n      [id]=\"id\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\">\r\n      @if (props.label) {\r\n        {{props.label}}\r\n      }\r\n      @if (props.description) {\r\n        <span slot=\"helper-text\">{{props.description}}</span>\r\n      }\r\n    </forge-checkbox>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeCheckboxModule\r\n  ],\r\n  standalone: true\r\n})\r\nexport class CheckboxTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeDatePickerModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { isValid as isValidDate } from 'date-fns';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n@Component({\r\n  selector: 'app-formly-date-picker',\r\n  template: `\r\n    <forge-date-picker [max]=\"$any(props.max)\" [min]=\"$any(props.min)\">\r\n      <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n        <input\r\n          [id]=\"id\"\r\n          type=\"text\"\r\n          [placeholder]=\"props.placeholder\"\r\n          [readonly]=\"props.readonly\"\r\n          [formControl]=\"formControl\"\r\n          [formlyAttributes]=\"field\" />\r\n        @if (props.label) {\r\n          <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n        }\r\n        @if (showError) {\r\n          <span slot=\"helper-text\">\r\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n          </span>\r\n        }\r\n      </forge-text-field>\r\n    </forge-date-picker>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeDatePickerModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DatePickerTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      if (control.value && !isValidDate(new Date(control.value))) {\r\n        control.setValue(null);\r\n        if (this.field.props.required) {\r\n          return of({ required: true });\r\n        }\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-textarea',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <textarea\r\n        [id]=\"id\"\r\n        [cols]=\"props.cols\"\r\n        [rows]=\"props.rows\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" >\r\n      </textarea>\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    textarea {\r\n      resize: none;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TextareaTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor() {\r\n    super();\r\n    this.defaultOptions = {\r\n      props: {\r\n        cols: 1,\r\n        rows: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTabBarModule, ForgeTabModule } from '@tylertech/forge-angular';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-tab',\r\n  template: `\r\n    <forge-tab-bar secondary [activeTab]=\"activeTab\">\r\n      @for (field of $any(field.fieldGroup); track i; let i = $index) {\r\n        <forge-tab (forge-tab-select)=\"onTabSelected(field)\">\r\n          {{field.props?.label}}\r\n        </forge-tab>\r\n      }\r\n    </forge-tab-bar>\r\n    <formly-field [field]=\"$any(activeField)\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    forge-tab-bar {\r\n      &::part(container) {\r\n        justify-items: flex-start;\r\n      }\r\n\r\n      margin: 16px 0;\r\n    }\r\n\r\n    forge-tab {\r\n      min-width: 240px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTabBarModule,\r\n    ForgeTabModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TabTypeComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  public activeTab = 0;\r\n  public activeField?: FieldTypeConfig;\r\n\r\n  public ngOnInit() {\r\n    this.activeField = this.field.fieldGroup![0] as FieldTypeConfig;\r\n  }\r\n\r\n  public onTabSelected(field: FieldTypeConfig) {\r\n    this.activeField = field;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\r\nimport { FieldArrayType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-table',\r\n  template: `\r\n    <table class=\"forge-table\" #table>\r\n      <thead>\r\n        <tr class=\"forge-table-row forge-table-head__row\">\r\n          @for (th of $any(props).columns; track i; let i = $index) {\r\n            <th scope=\"col\" class=\"forge-table-cell forge-table-head__cell\">\r\n              <div class=\"forge-table-head__cell-container\">\r\n                <span class=\"forge-table-head__cell-text\">{{th.label}}</span>\r\n              </div>\r\n            </th>\r\n          }\r\n          <th class=\"forge-table-cell forge-table-head__cell forge-table-cell__button\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        @for (fg of field.fieldGroup; track i; let i = $index) {\r\n          <tr class=\"forge-table-row forge-table-body__row\">\r\n            @for (f of fg.fieldGroup; track ii; let ii = $index) {\r\n              <td class=\"forge-table-cell forge-table-body__cell\">\r\n                <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n              </td>\r\n            }\r\n            <td class=\"forge-table-cell forge-table-body__cell forge-table-cell__button\">\r\n              <forge-icon-button (click)=\"onRemove(i)\" aria-label=\"Delete\">\r\n                <forge-icon name=\"delete\"></forge-icon>\r\n              </forge-icon-button>\r\n            </td>\r\n          </tr>\r\n        }\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td>\r\n            <forge-button (click)=\"onAdd()\">Add</forge-button>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .forge-table {\r\n      // --forge-table-theme-row-hover-background: transparent;\r\n\r\n      &-cell {\r\n        padding-right: 24px;\r\n        &:first-child {\r\n          padding-left: 0;\r\n        }\r\n        &:last-child {\r\n          padding-right: 0;\r\n        }\r\n        &__button {\r\n          width: 48px;\r\n        }\r\n      }\r\n\r\n      &-body {\r\n\r\n        &__cell {\r\n          padding-top: 8px;\r\n          padding-bottom: 8px;\r\n          vertical-align: top;\r\n\r\n          formly-field {\r\n            background-color: var(--forge-theme-surface);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TableTypeComponent extends FieldArrayType {\r\n  @ViewChild('table')\r\n  private tableElement?: ElementRef;\r\n\r\n  public onAdd() {\r\n    const model = this.props['columns'].filter((c: any) => c.key?.length).map((c: any) => [c.key, c.defaultValue]);\r\n\r\n    this.add(this.formControl.length, Object.fromEntries(model));\r\n\r\n    requestAnimationFrame(() => {\r\n      const tr = Array.from(this.tableElement?.nativeElement.querySelectorAll('tbody > tr')).reverse()[0] as HTMLTableRowElement;\r\n      if (tr) {\r\n        const focusElement = tr.querySelector(`[id*=\"${model[0][0]}\"]`) as HTMLElement;\r\n        if (focusElement) {\r\n          focusElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public onRemove(index: number) {\r\n    this.remove(index);\r\n  }\r\n}\r\n","<forge-scaffold>\r\n  <forge-toolbar slot=\"header\">\r\n    <h2 slot=\"start\" class=\"forge-typography--heading4\" [id]=\"id + '--title'\">{{dialogTitle}}</h2>\r\n    <forge-icon-button class=\"header__close\" slot=\"end\" aria-label=\"Close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </forge-icon-button>\r\n  </forge-toolbar>\r\n  <div slot=\"body\">\r\n    <forge-table [ngClass]=\"{'app--hidden': isBusy}\" [data]=\"data\" [columnConfigurations]=\"columnConfigurations\" allow-row-click (forge-table-row-click)=\"onTableRowClick($event.detail)\" (forge-table-sort)=\"onTableSort($any($event).detail)\" filter=\"true\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n    @if (!isBusy && !data.length) {\r\n    <forge-page-state>\r\n      <img src=\"https://cdn.forge.tylertech.com/v1/images/spot/no-search-results-spot.svg\" slot=\"graphic\" alt=\"No records found\">\r\n      <div slot=\"message\">No records were found.</div>\r\n    </forge-page-state>\r\n    }\r\n\r\n    @if (isBusy) {\r\n    <ng-container>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n      <forge-skeleton list-item></forge-skeleton>\r\n    </ng-container>\r\n    }\r\n  </div>\r\n\r\n  <forge-toolbar slot=\"footer\" inverted=\"true\">\r\n    <forge-paginator slot=\"end\" [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"paginator.pageSize\" [total]=\"paginator.total\" (forge-paginator-change)=\"onPaginatorChange($event.detail)\" [disabled]=\"isBusy || !data.length\">\r\n    </forge-paginator>\r\n  </forge-toolbar>\r\n</forge-scaffold>\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { finalize, Observable, Subject, takeUntil } from 'rxjs';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { IColumnConfiguration, ITableFilterEventData, ITableRowClickEventData, ITableSortEventData, SortDirection } from '@tylertech/forge';\r\nimport { DIALOG_DATA, DialogRef, ForgeIconButtonModule, ForgeIconModule, ForgePageStateModule, ForgePaginatorModule, ForgeScaffoldModule, ForgeSkeletonModule, ForgeTableModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\nimport { IFilterParameter, IFilter, IFilterResponse } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\nexport interface IFieldHelpDialogConfig {\r\n  columnConfigurations: IColumnConfiguration[];\r\n  dataObservable: (param: IFilterParameter) => Observable<IFilterResponse<any>>;\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-formly-field-help-dialog',\r\n  templateUrl: './field-help-dialog.component.html',\r\n  styleUrls: ['./field-help-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgePageStateModule,\r\n    ForgePaginatorModule,\r\n    ForgeScaffoldModule,\r\n    ForgeSkeletonModule,\r\n    ForgeTableModule,\r\n    ForgeToolbarModule\r\n  ]\r\n})\r\nexport class FieldHelpDialogComponent {\r\n  public dialogConfig = inject<IFieldHelpDialogConfig>(DIALOG_DATA);\r\n  private dialogRef = inject(DialogRef);\r\n\r\n  public id = Utils.elementId('app-');\r\n  public dialogTitle: string;\r\n  public columnConfigurations: IColumnConfiguration[];\r\n  public data: any[] = [];\r\n  public paginator = {\r\n    pageIndex: 0,\r\n    pageSize: 25,\r\n    total: 0\r\n  };\r\n  public isBusy = false;\r\n  public key: string;\r\n\r\n  private unsubscribe = new Subject<void>();\r\n  private dataObservable: (param: IFilterParameter) => Observable<any>;\r\n  private sort = {\r\n    property: '',\r\n    direction: SortDirection.Ascending\r\n  };\r\n  private filters: IFilter[] = [];\r\n\r\n  constructor(\r\n  ) {\r\n    this.dialogTitle = this.dialogConfig.title || '';\r\n    this.columnConfigurations = this.dialogConfig.columnConfigurations || [];\r\n    this.dataObservable = this.dialogConfig.dataObservable as any;\r\n    this.key = this.dialogConfig.key || '';\r\n    this.sort.property = this.columnConfigurations.find(c => c.initialSort)?.property || this.columnConfigurations[0].property as string;\r\n    this.dialogRef.nativeElement.setAttribute('aria-labelledby', `${this.id}--title`);\r\n    this.getData();\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onPaginatorChange(value: { pageIndex: number; pageSize: number; }) {\r\n    this.paginator.pageIndex = value.pageIndex;\r\n    this.paginator.pageSize = value.pageSize;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableSort(value: ITableSortEventData) {\r\n    this.sort.property = this.columnConfigurations[value.columnIndex].property as string;\r\n    this.sort.direction = value.direction;\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableFilter(filter: ITableFilterEventData) {\r\n    const filterProperty = this.columnConfigurations[filter.columnIndex].property as string;\r\n    if (isDefined(filter.value) && filter.value?.toString().length) {\r\n      this.filters.push({ property: filterProperty, value: filter.value });\r\n    } else {\r\n      const index = this.filters.findIndex(f => f.property === filterProperty);\r\n      if (index !== -1) {\r\n        this.filters.splice(index, 1);\r\n      }\r\n    }\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableRowClick(value: ITableRowClickEventData) {\r\n    this.dialogRef.close(value.data[this.key]);\r\n  }\r\n\r\n  private getData() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.isBusy = true;\r\n    const param: IFilterParameter = {\r\n      filters: this.filters,\r\n      sort: this.sort,\r\n      skip: this.paginator.pageIndex * this.paginator.pageSize,\r\n      take: this.paginator.pageSize\r\n    };\r\n    this.dataObservable(param)\r\n      .pipe(\r\n        finalize(() => this.isBusy = false),\r\n        takeUntil(this.unsubscribe)\r\n      )\r\n      .subscribe((r: IFilterResponse<any>) => {\r\n        this.data = r.data;\r\n        this.paginator.total = r.count;\r\n      });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { DialogService, ForgeIconButtonModule, ForgeIconModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { FieldHelpDialogComponent } from './field-help-dialog/field-help-dialog.component';\r\n@Component({\r\n  selector: 'app-formly-input-help',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        #input\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      <forge-icon-button slot=\"addon-end\" dense aria-label=\"Browse options\" [disabled]=\"formControl.disabled\" (click)=\"onShowDialog()\">\r\n        <forge-icon name=\"more_horiz\"></forge-icon>\r\n      </forge-icon-button>\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputHelpTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private dialogService = inject(DialogService);\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  public onShowDialog() {\r\n    this.dialogService.open(FieldHelpDialogComponent, {\r\n      data: {\r\n        columnConfigurations: (this.props.options as { label: string; property: string }[]).map(o => ({\r\n          header: o.label,\r\n          property: o.property,\r\n          sortable: true,\r\n          filter: true,\r\n          filterDelegate: new TextFieldComponentDelegate()\r\n        })),\r\n        dataObservable: (param: IFilterParameter) => this.moduleService.getFieldHelp(this.key as string, param),\r\n        key: this.props['optionsKey'],\r\n        title: `Select a ${this.props.label}`,\r\n      }\r\n    }).afterClosed.subscribe(result => {\r\n      if (result) {\r\n        this.formControl.setValue(result);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-label',\r\n  template: `\r\n  <label [attr.for]=\"id\" class=\"forge-typography--body1\">{{props.label}}</label>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n  ],\r\n  standalone: true\r\n})\r\nexport class LabelTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeRadioGroupModule, ForgeRadioModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-radio',\r\n  template: `\r\n    @if (props.label) {\r\n      <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n    }\r\n    <forge-radio-group name=\"app--radio-type\">\r\n      @for (option of $any(props.options); track i; let i = $index) {\r\n        <forge-radio\r\n          [id]=\"id + '-' + i\"\r\n          [value]=\"option.value\"\r\n          [formControl]=\"formControl\"\r\n          [formlyAttributes]=\"field\">\r\n          @if (option.label) {\r\n            {{option.label}}\r\n          }\r\n        </forge-radio>\r\n      }\r\n    </forge-radio-group>\r\n    @if (showError) {\r\n      <div class=\"forge-typography--label1\">\r\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n      </div>\r\n    }\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    [role='radiogroup'] {\r\n      margin-left: -8px;\r\n      display: flex;\r\n      column-gap: 16px;\r\n      flex-direction: column;\r\n    }\r\n\r\n    forge-radio {\r\n      &::part(container) {\r\n        padding: 4px;\r\n      }\r\n    }\r\n\r\n    .forge-typography--label1 {\r\n      color: var(--forge-theme-error);\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeRadioModule,\r\n    ForgeRadioGroupModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RadioTypeComponent extends FieldType<FieldTypeConfig> {\r\n  // @HostBinding('attr.role')\r\n  // public roleAttribute = 'radiogroup';\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeSelectModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-select',\r\n  template: `\r\n    <forge-select\r\n      [id]=\"id\"\r\n      [options]=\"$any(props.options)\"\r\n      [label]=\"$any(props.label)\"\r\n      [placeholder]=\"$any(props.placeholder)\"\r\n      [invalid]=\"showError\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\">\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-select>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  // forge-select {\r\n  //   --forge-select-height: 2rem;\r\n  // }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeSelectModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SelectTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private moduleService = inject(FormlyDemoService);\r\n\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { FormlyExtension } from '@ngx-formly/core';\r\n\r\nexport const formlyFieldExtension: FormlyExtension = {\r\n  prePopulate(field) {\r\n    // TODO\r\n    switch (field.type) {\r\n      case 'date-picker':\r\n      case 'input':\r\n      case 'select':\r\n      case 'textarea': {\r\n        // field.modelOptions = {\r\n        //   updateOn: 'blur'\r\n        // }\r\n      }\r\n    }\r\n  }\r\n};","import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\nimport { ForgeButtonModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-button',\r\n  template: `\r\n    <forge-button variant=\"raised\" (click)=\"onClick($event)\">\r\n      {{props.label}}\r\n    </forge-button>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeButtonModule\r\n  ],\r\n  standalone: true\r\n})\r\nexport class ButtonTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n  public onClick(event: MouseEvent) {\r\n    console.log(event);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { OnInit, ViewChild } from '@angular/core';\r\nimport { ElementRef } from '@angular/core';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { FormlyFieldComponent } from './formly-field.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-container',\r\n  template: `\r\n    @if (props.label) {\r\n      <div class=\"label\">{{props.label}}</div>\r\n    }\r\n\r\n    <div #fieldContainer>\r\n      @for (f of field.fieldGroup; track i; let i = $index) {\r\n        <formly-field #formlyField [field]=\"f\" [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      }\r\n    </div>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .form-grid {\r\n      display: grid;\r\n      gap: 16px;\r\n    }\r\n\r\n    .form-vbox {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n    }\r\n\r\n    .form-hbox {\r\n      display: flex;\r\n      flex-direction: row;\r\n      column-gap: 16px;\r\n    }\r\n\r\n    .form-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n      border: 1px solid #e6e6e6;\r\n      border-radius: 4px;\r\n      padding: 16px;\r\n    }\r\n  }\r\n\r\n  .label {\r\n    padding: 8px;\r\n  }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective,\r\n    FormlyFieldComponent\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ContainerTypeComponent extends FieldType implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer?: ElementRef;\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer?.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n        if (this.props.attributes!['columns']) {\r\n          fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes!['columns']}, auto)`\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeTextFieldModule } from '@tylertech/forge-angular';\r\n\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-input',\r\n  template: `\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        #input\r\n        [id]=\"id\"\r\n        [type]=\"inputType\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      @if (props.label) {\r\n        <label [attr.for]=\"id\" slot=\"label\">{{props.label}}</label>\r\n      }\r\n      @if (showError) {\r\n        <span slot=\"helper-text\">\r\n          <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n        </span>\r\n      }\r\n    </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n\r\n    input[type='number']::-webkit-outer-spin-button,\r\n    input[type='number']::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  @ViewChild('input', { static: true })\r\n  private inputElement?: ElementRef;\r\n\r\n  public inputType = 'text';\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.inputType = this.props?.type || 'text';\r\n\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      // (this.inputElement.nativeElement as HTMLInputElement).disabled = true;\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        // finalize(() => (this.inputElement.nativeElement as HTMLInputElement).disabled = false),\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { GroupTypeComponent } from './group-type.component';\r\nimport { CheckboxTypeComponent } from './checkbox-type.component';\r\nimport { DatePickerTypeComponent } from './date-picker-type.component';\r\nimport { TextareaTypeComponent } from './textarea-type.component';\r\nimport { TabTypeComponent } from './tab-type.component';\r\nimport { TableTypeComponent } from './table-type.component';\r\nimport { InputHelpTypeComponent } from './input-help-type.component';\r\nimport { LabelTypeComponent } from './label-type.component';\r\nimport { RadioTypeComponent } from './radio-type.component';\r\nimport { SelectTypeComponent } from './select-type.component';\r\nimport { formlyFieldExtension } from './formly-field.extension';\r\nimport { ButtonTypeComponent } from './button-type.component';\r\nimport { ContainerTypeComponent } from './container-type.component';\r\nimport { InputTypeComponent } from './input-type.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormlyModule.forRoot({\r\n      extensions: [\r\n        { name: 'formly-field-extension', extension: formlyFieldExtension }\r\n      ],\r\n      types: [\r\n        { name: 'checkbox', component: CheckboxTypeComponent },\r\n        { name: 'date-picker', component: DatePickerTypeComponent },\r\n        { name: 'input', component: InputTypeComponent },\r\n        { name: 'input-help', component: InputHelpTypeComponent },\r\n        { name: 'radio', component: RadioTypeComponent },\r\n        { name: 'select', component: SelectTypeComponent },\r\n        { name: 'textarea', component: TextareaTypeComponent },\r\n        { name: 'button', component: ButtonTypeComponent },\r\n        { name: 'container', component: ContainerTypeComponent },\r\n        { name: 'formly-group', component: GroupTypeComponent },\r\n        { name: 'tab', component: TabTypeComponent },\r\n        { name: 'table', component: TableTypeComponent },\r\n        { name: 'label', component: LabelTypeComponent }\r\n      ],\r\n      // wrappers: [\r\n      //   { name: 'container', component: ContainerWrapperComponent }\r\n      // ]\r\n    }),\r\n    FormlyFieldDirective\r\n  ],\r\n  exports: [\r\n    FormlyModule\r\n  ]\r\n})\r\nexport class FormlyConfigModule { }","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FormlyDemoComponent } from './formly-demo.component';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { FormlyFieldComponent } from './components/formly-field.component';\r\nimport { FormlyConfigModule } from './components/formly-config.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: FormlyDemoComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormlyDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    FormlyConfigModule,\r\n    FormlyFieldComponent\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    FormlyDemoService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyDemoModule { }\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { sensitivity: 'base' });\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]) {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"x_google_ignoreList":[2,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]}