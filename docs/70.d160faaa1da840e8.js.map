{"version":3,"file":"70.d160faaa1da840e8.js","mappings":"yLAaO,IAAMA,EAAc,MAArB,MAAOA,EAHbC,cAIUC,KAAAC,cAAaC,OAAOC,MAErBC,aACL,OAAOJ,KAAKC,WAAWI,IAAc,yBACvC,CAEOC,UAAUC,GACf,OAAOP,KAAKC,WAAWI,IAAoB,yBAAyBG,QAElEC,KAAKC,IACH,IAAIC,EAAQD,EAAEE,OACd,OAAIL,IACEA,EAAOM,SAASD,SAKlBD,GAJAD,EAAII,IAAMC,WACRL,EACAH,EAAOM,QAAQJ,IAAKO,KAASC,IAAKD,EAAEE,SAAUC,MAAOH,EAAEG,MAAOC,OAAuB,WAAfJ,EAAEE,UAAwC,OAAfF,EAAEE,cAE3FN,QAGRL,EAAOc,OACTX,EAAII,IAAMQ,SAASZ,EAAGH,EAAOc,KAAKH,SAAU,SAAUX,EAAOc,KAAKE,aAAS,EAGzEC,MAASjB,EAAOkB,QAAI,EAAKD,MAASjB,EAAOmB,QAC3ChB,EAAIA,EAAEiB,MAAMpB,EAAOkB,KAAMlB,EAAOkB,KAAOlB,EAAOmB,QAG3C,CAAEf,QAAOiB,KAAMlB,EAAC,GAG7B,CAEOmB,UAAUC,GACf,OAAO9B,KAAKC,WAAWI,IAAI,yBAAyBG,QAAKC,KAAKC,GAAOA,EAAgBqB,KAAMC,GAAMA,EAAEF,GAAGG,aAAeH,EAAGG,aAC1H,CAEOC,YAAYjB,GACjB,OAAO,IAAIkB,IAAuBC,IAChC,IAAIC,EAAWC,aAAaC,QAAQtB,IACpC,EAAIuB,MAAUH,KACZA,EAAWI,KAAKC,MAAML,IAExBD,EAAEO,KAAKN,GACPD,EAAEQ,UAAQ,EAEd,CAEOC,aAAa5B,EAAaoB,GAC/B,OAAO,IAAIF,IAAqBC,IAC9BE,aAAaQ,QAAQ7B,EAAKwB,KAAKM,UAAUV,IACzCD,EAAEO,MAAK,GACPP,EAAEQ,UAAQ,EAEd,CAEOI,iBACL,OAAOhD,KAAKC,WAAWI,IAAY,qCACrC,CAAC4C,SAAAjD,KAAA,mBAAAkD,iBA3DUpD,EAAc,EAAAmD,SAAAjD,KAAA,WAAAmD,EAAAC,IAAA,OAAdtD,EAAcuD,QAAdvD,EAAcwD,UAAAC,WAFb,gBAEDzD,CAAc,+ECDpB,IAAM0D,EAAa,MAApB,MAAOA,EAAaP,SAAAjD,KAAA,mBAAAkD,iBAAbM,EAAa,EAAAP,SAAAjD,KAAA,UAAAyD,EAAAC,IAAA,MAAbF,EAAaG,UAAA,eAAAC,YAAA,EAAAC,SAAA,CAAAC,OAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GCZ1BJ,MAAA,kCDOIM,MAAYC,OAAA,6DAKHb,CAAa,yGENnB,MAAMc,EAAsB,CACjC,CACEC,KAAM,GAAIC,UAAWhB,EACrBiB,SAAU,CACR,CAAEF,KAAM,SAAUC,UCcI,MAAtB,MAAOE,EAbb3E,cAcUC,KAAA2E,UAASzE,OAAO0E,MAChB5E,KAAA6E,kBAAiB3E,OAAOJ,KACxBE,KAAA8E,YAAW5E,OAAO6E,KAEnB/E,KAAA8B,GAAKhB,IAAMkE,UAAU,QACrBhF,KAAAiF,gBAAiG,GACjGjF,KAAAkF,UAAY,IAAIC,KAAU,CAC/BC,KAAM,IAAIC,KAA2B,KAAM,CAAEC,gBAAiB,CAACtF,KAAKuF,mBAAmB,WACvFC,IAAK,IAAIH,KAA2B,KAAM,CAAEC,gBAAiB,CAACtF,KAAKuF,mBAAmB,YAGjFE,WAEP,CAEOC,WAAWC,GAChB3F,KAAK2E,OAAOiB,SAAS,CAACD,GACxB,CAEOE,WAGL,MAAMC,EAAa9F,KAAKiF,gBAAgBc,QACpCD,IACFA,EAAWE,YAAYrD,KAAK,MAC5BmD,EAAWE,YAAYpD,WACvBkD,EAAWE,gBAAaC,EAE5B,CAEQjD,iBACN,OAAOhD,KAAK6E,eAAe7B,iBAAiBxC,QAC1C0F,KAAI,CACFvD,KAAMwD,GAAUC,QAAQC,IAAIF,GAC5BG,MAAOA,GAASF,QAAQC,IAAIC,MAC7B,EACDC,KAAUvG,KAAK8E,SAAS0B,oBAE5B,CAEQjB,mBAAmBtE,GACzB,OAAQwF,IACN,GAAIA,EAAQC,SACV,SAAOC,MAAG,MAGZ,IAAIb,EAAa9F,KAAKiF,gBAAgBlD,KAAK6E,GAAKA,EAAE3F,MAAQA,GAC1D,OAAI6E,EACFA,EAAW3E,MAAQsF,EAAQtF,OAE3B2E,EAAa,CACX7E,MACA+E,WAAY,IAAIa,IAChB1F,MAAOsF,EAAQtF,OAEjBnB,KAAKiF,gBAAgB6B,KAAKhB,IAErBA,EAAWE,WAEtB,CAAC/C,SAAAjD,KAAA,mBAAAkD,iBA5DUwB,EAAe,EAAAzB,SAAAjD,KAAA,UAAAyD,EAAAC,IAAA,MAAfgB,EAAef,UAAA,sBAAAC,YAAA,EAAAC,SAAA,CAAAC,OAAAC,MAAA,GAAAC,KAAA,EAAA+C,OAAA,6VAAA9C,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICvB1BJ,MADF,oBACEA,CAD4B,UACqBA,MAAA,YACnDA,UAGEA,MADF,UACEA,CADgB,OACbA,MAAA,oBAAcA,QAEfA,MADF,mBACEA,CAD0B,cACJA,MAAA,0BAASK,EAAAuB,WAAW,aAAa,GAAE5B,MAAA,gBAC3DA,UAEEA,MADF,mBACEA,CADgD,eAC1BA,MAAA,0BAASK,EAAA0B,UAAU,GAAE/B,MAAA,mBAC7CA,UAEEA,MADF,YACEA,CAD0D,uBAExDA,MAAA,cACAA,MAAA,cAA0CA,MAAA,WAAIA,QAC9CA,MAAA,aAAyBA,MAAA,IAC3BA,UACAA,MAAA,uBACEA,MAAA,eACAA,MAAA,cAAyCA,MAAA,UAAGA,QAC5CA,MAAA,aAAyBA,MAAA,IAE7BA,YAEAA,MAAA,QAAGA,MAAA,IAELA,iBAfsCA,MAAA,IAAAA,MAAA,YAAAK,EAAAe,WAEbpB,MAAA,GAAAA,MAAA,KAAAK,EAAArC,GAAA,UACZgC,cAAA,MAAAK,EAAArC,GAAA,UACkBgC,MAAA,GAAAA,MAAAK,EAAAe,UAAA8B,SAAA5B,KAAA6B,QAGNnD,MAAA,GAAAA,MAAA,KAAAK,EAAArC,GAAA,SACZgC,cAAA,MAAAK,EAAArC,GAAA,SACkBgC,MAAA,GAAAA,MAAAK,EAAAe,UAAA8B,SAAAxB,IAAAyB,QAI1BnD,MAAA,GAAAA,MAAAK,EAAAc,gBAAArE,wBDVDsG,KACAC,KAAmBC,8BACnBC,MAAkBC,MAClBC,MAAiBD,MACjBE,MAAoBF,OAAAjD,OAAA,wJAKXK,CAAe,MDbtB,CAAEH,KAAM,QAASC,UGMI,MAArB,MAAOiD,EAZb1H,cAaUC,KAAA2E,UAASzE,OAAO0E,MAEjBc,WAAWC,GAChB3F,KAAK2E,OAAOiB,SAAS,CAACD,GACxB,CAAC1C,SAAAjD,KAAA,mBAAAkD,iBALUuE,EAAc,EAAAxE,SAAAjD,KAAA,UAAAyD,EAAAC,IAAA,MAAd+D,EAAc9D,UAAA,qBAAAC,YAAA,EAAAC,SAAA,CAAAC,OAAAC,MAAA,GAAAC,KAAA,EAAA+C,OAAA,kJAAA9C,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICdrBJ,MAHN,oBAGMA,CAHwB,UAGxBA,CAFc,sBAEdA,CADiB,cACKA,MAAA,0BAASK,EAAAuB,WAAW,cAAc,GACtD5B,MAAA,kBAEJA,UACAA,MAAA,UAAoCA,MAAA,WAExCA,YAGEA,MADF,UACEA,CADgB,OACbA,MAAA,mBACLA,0BDJIoD,KACAQ,MAAqBN,YACrBO,MACAN,MAAkBD,OAAA/C,OAAA,mSAKToD,CAAc,MHLrB,CAAElD,KAAM,GAAIqD,WAAY,SAAUC,UAAW,qFKN7C,MAAO/G,EACJ,eAAOQ,CAASM,EAAaX,EAAa6G,EAAgDvG,GAC/F,OAAKK,GAASA,EAAKhB,QAInBkH,EAAOA,GAAQ,SAEG,SAAdvG,IACFA,EAAY,OAGPK,EAAKD,QAAQN,KAAK,CAAC0G,EAAGC,KAC3BD,KAAIE,MAAiBF,EAAG9G,GACxB+G,KAAIC,MAAiBD,EAAG/G,GAEN,SAAdM,EACKvB,KAAKkI,WAAWF,EAAGD,EAAGD,GAEtB9H,KAAKkI,WAAWH,EAAGC,EAAGF,MAhBxBlG,CAmBX,CAEO,gBAAOuG,CAAUvG,EAAaV,GACnC,OAAI,EAACkH,MAAQxG,IAAUA,EAAKhB,QAAWM,GAAUN,OAI1CgB,EAAKyG,OAAO,CAACC,EAAeC,KACjC,MAAMtH,EAAMsH,EAAarH,GACzB,OAAKoH,EAAcrH,KACjBqH,EAAcrH,GAAO,IAEvBqH,EAAcrH,GAAK6F,KAAKyB,GACjBD,GACN,IAVM1G,CAWX,CAEO,iBAAOb,CAAWa,EAAaf,GACpC,MAAI,EAACuH,MAAQxG,IAAUA,EAAKhB,SAAU,EAACwH,MAAQvH,IAAaA,EAAQD,QAClE,OAAOgB,EAGTf,EAAUA,EAAQJ,IAAKO,IACrB,MAAIwH,MAASxH,EAAEG,QAAUH,EAAEG,MAAMP,OAAQ,CACvC,IAAI6H,EACJ,GAAgC,OAA5BzH,EAAEG,MAAMuH,UAAU,EAAG,GAAa,CACpC,GAAuB,IAAnB1H,EAAEG,MAAMP,OACVI,SAAEG,MAAQ,GACHH,EAETyH,EAAWzH,EAAEG,MAAMuH,UAAU,EAAG,GAChC1H,EAAEG,MAAQH,EAAEG,MAAMuH,UAAU,EAC9B,SAAuC,MAA5B1H,EAAEG,MAAMuH,UAAU,EAAG,IAA0C,MAA5B1H,EAAEG,MAAMuH,UAAU,EAAG,GAAY,CAC7E,GAAuB,IAAnB1H,EAAEG,MAAMP,OACVI,SAAEG,MAAQ,GACHH,EAETyH,EAAWzH,EAAEG,MAAMuH,UAAU,EAAG,GAChC1H,EAAEG,MAAQH,EAAEG,MAAMuH,UAAU,EAC9B,CAEID,GACFE,OAAOC,eAAe5H,EAAG,WAAY,CAAEG,MAAOsH,GAElD,CAEAzH,SAAEG,OAAS,GAAKH,EAAEG,OAAO0H,cAClB7H,IAGT,MAAMT,EAAUuI,GACdjI,EAAQkI,MAAO/H,IACb,IAAKA,EAAEG,MAAMP,OACX,OAAO,EAGT,MAAMO,GAAS,MAAK8G,MAAiBa,EAAK9H,EAAEC,MAAM4H,cAClD,IAAK1H,EAAMP,OACT,OAAO,EAGT,GAAII,EAAEI,OACJ,OAAOD,IAAUH,EAAEG,MAGrB,OAASH,EAAUyH,UACjB,IAAK,KACH,OAAmD,IAA5CzI,KAAKkI,WAAW/G,EAAOH,EAAEG,MAAOH,EAAE8G,MAC3C,IAAK,IACH,OAAO9H,KAAKkI,WAAW/G,EAAOH,EAAEG,MAAOH,EAAE8G,MAAQ,EACnD,IAAK,IACH,OAAO9H,KAAKkI,WAAW/G,EAAOH,EAAEG,MAAOH,EAAE8G,MAAQ,EACnD,QACE,OAAO3G,EAAM6H,QAAQhI,EAAEG,QAAS,EACpC,GAGJ,OAAOS,EAAKrB,OAAQuI,GAAQvI,EAAOuI,GACrC,CAEO,iBAAOZ,CAAWH,EAAQC,EAAQF,EAAiD,UAExF,GAAIC,GAAKC,EACP,OAAO,EAET,KAAI,EAACxF,MAAUuF,GACb,OAAO,EAET,KAAI,EAACvF,MAAUwF,GACb,OAAO,EAGT,OAAQF,GACN,IAAK,UACH,OAAOC,GAAI,EAAK,EAClB,IAAK,OAEH,GADAA,EAAI,IAAIkB,KAAKlB,GAAGmB,UACZC,MAAMpB,GACR,OAAO,EAGT,GADAC,EAAI,IAAIiB,KAAKjB,GAAGkB,UACZC,MAAMnB,GACR,OAAO,EAET,MACF,IAAK,SAEH,GADAD,EAAIqB,WAAWrB,GACXoB,MAAMpB,GACR,OAAO,EAGT,GADAC,EAAIoB,WAAWpB,GACXmB,MAAMnB,GACR,OAAO,EAET,MACF,QACE,OAAKmB,MAAMC,WAAWrB,KAAQoB,MAAMC,WAAWpB,KAGrC,GAAKD,GAAGsB,cAAc,GAAKrB,IAF3B,GAAKD,GAAGsB,cAAc,GAAKrB,EAAGsB,UAAUC,SAAU,CAAEC,SAAS,IAM3E,OAAOzB,EAAIC,GAAI,EAAKD,EAAIC,EAAI,EAAI,CAClC,CAEO,mBAAOyB,CAAaC,EAAoB/E,EAAgBgF,GACV,IAA9CD,EAASE,YAAoBC,aAChClF,EAAOiB,SAAS+D,GAEhBD,EAASI,MAEb,CAEO,gBAAO9E,CAAU+E,GACtB,OACEA,EACAC,KAAKC,SACFhI,SAAS,IACTiI,QAAQ,WAAY,GAE3B,CAEO,iBAAOC,CAAWhJ,EAAaiJ,EAAS,cAC7C,SAAK5H,MAAUrB,IAAK,EAGbgJ,MAAWhJ,EAAOiJ,EAAQd,UAAUC,UAFlC,EAGX,CAEO,mBAAOc,CAAalJ,EAAeiJ,EAAS,SACjD,SAAOC,MAAalJ,EAAOmI,UAAUC,SAAUa,EACjD,CAEO,eAAOE,GACZ,OAAON,KAAKC,SAAShI,SAAS,IAAIyG,UAAU,EAC9C,CAEO,iCAAO6B,GACZ,MAAMC,EAAS,GACTC,EAAaC,OAAOhB,SAASiB,KAAK3B,QAAQ,KAChD,IAAmB,IAAfyB,EAAmB,CACrB,MAAMG,EAAa,IAAIC,KAAW,CAAEC,WAAYJ,OAAOhB,SAASiB,KAAKjC,UAAU+B,KAC/EG,EAAWG,OAAOC,QAAQC,IACxB,MAAM9J,EAAQyJ,EAAWM,OAAOD,GAC5B9J,EAAMP,QACR+H,OAAOC,eAAe4B,EAAQS,EAAEpC,cAAe,CAAE1H,MAAwB,IAAjBA,EAAMP,OAAeO,EAAM,GAAKA,EAAOgK,YAAY,EAAMC,UAAU,GAAM,EAGvI,CAEA,OAAOZ,CACT,CAEO,mBAAOa,CAAaC,GACzB,MAAMC,EAAe,GAErB5C,cAAOoC,KAAKO,GAAQN,QAAQ/J,KAC1B,EAAIuB,MAAU8I,EAAOrK,OAAI,EACnBmH,MAAQkD,EAAOrK,IACbqK,EAAOrK,GAAKL,SACd2K,EAAQtK,GAAOqK,EAAOrK,KAEdqK,EAAOrK,GAAO,IAAIuK,OAAO5K,SACnC2K,EAAQtK,GAA8B,iBAAhBqK,EAAOrK,GAAoBqK,EAAOrK,GAAKuK,OAASF,EAAOrK,IAAG,GAK/EsK,CACT","names":["AppDataService","constructor","this","httpClient","inject","HttpClient","getProfile","get","getPeople","filter","pipe","map","r","count","length","filters","Utils","filterData","f","key","property","value","strict","sort","sortData","direction","isNumber","skip","take","slice","data","getPerson","id","find","p","toString","getSearches","Observable","o","searches","localStorage","getItem","isDefined","JSON","parse","next","complete","saveSearches","setItem","stringify","getLongRequest","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","jDH","factory","Éµfac","providedIn","TestComponent","core","VBU","selectors","standalone","features","i0","decls","vars","template","rf","ctx","RouterOutlet","styles","TEST_ROUTES","path","component","children","ParentComponent","router","Router","appDataService","appCache","AppCacheService","elementId","validationQueue","formGroup","FormGroup","name","FormControl","asyncValidators","formAsyncValidator","age","ngOnInit","onNavigate","route","navigate","onAction","validation","shift","validator$","undefined","tap","result","console","log","error","takeUntil","cancelHttpRequests","control","pristine","of","v","Subject","push","consts","controls","status","CommonModule","ReactiveFormsModule","i1","ForgeToolbarModule","i2","ForgeButtonModule","ForgeTextFieldModule","ChildComponent","ForgeIconButtonModule","ForgeIconModule","redirectTo","pathMatch","type","a","b","getPropertyValue","comparator","groupData","isArray","reduce","previousValue","currentValue","isString","operator","substring","Object","defineProperty","toLowerCase","rec","every","indexOf","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","numeric","navigateBack","location","fallbackRoute","getState","navigationId","back","prefix","Math","random","replace","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","queryIndex","window","href","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/app-data.service.ts","./src/app/test/test.component.ts","./src/app/test/test.component.html","./src/app/test/routes.ts","./src/app/test/parent/parent.component.ts","./src/app/test/parent/parent.component.html","./src/app/test/child/child.component.ts","./src/app/test/child/child.component.html","./src/utils.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { IPerson, IProfile } from 'src/app/shared/interfaces/person.interface';\r\nimport { ISearch } from 'src/app/shared/interfaces/search.interface';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: Array<IPerson> }> {\r\n    return this.httpClient.get<Array<IPerson>>('mock-data/people.json').pipe(\r\n      // delay(2000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({ key: f.property, value: f.value, strict: f.property === 'gender' || f.property === 'id' }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<string> {\r\n    return this.httpClient.get<string>('http://localhost:5000/long-request');\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet\r\n  ],\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent {\r\n}\r\n","<router-outlet></router-outlet>","import { Routes } from '@angular/router';\r\n\r\nimport { TestComponent } from './test.component';\r\nimport { ParentComponent } from './parent/parent.component';\r\nimport { ChildComponent } from './child/child.component';\r\n\r\nexport const TEST_ROUTES: Routes = [\r\n  {\r\n    path: '', component: TestComponent,\r\n    children: [\r\n      { path: 'parent', component: ParentComponent },\r\n      { path: 'child', component: ChildComponent },\r\n      { path: '', redirectTo: 'parent', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap, takeUntil, Subject, of } from 'rxjs';\r\nimport { ForgeButtonModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ReactiveFormsModule, ValidationErrors } from '@angular/forms';\r\n\r\nimport { AppCacheService } from 'src/app/app-cache.service';\r\nimport { AppDataService } from 'src/app/app-data.service';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Component({\r\n  selector: 'app-test-parent',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ForgeToolbarModule,\r\n    ForgeButtonModule,\r\n    ForgeTextFieldModule\r\n  ],\r\n  templateUrl: './parent.component.html',\r\n  styleUrls: ['./parent.component.scss']\r\n})\r\nexport class ParentComponent implements OnInit {\r\n  private router = inject(Router);\r\n  private appDataService = inject(AppDataService);\r\n  private appCache = inject(AppCacheService);\r\n\r\n  public id = Utils.elementId('app-');\r\n  public validationQueue: { key: string; value: any; validator$?: Subject<ValidationErrors | null>; }[] = [];\r\n  public formGroup = new FormGroup({\r\n    name: new FormControl<string | null>(null, { asyncValidators: [this.formAsyncValidator('name')] }),\r\n    age: new FormControl<string | null>(null, { asyncValidators: [this.formAsyncValidator('age')] })\r\n  });\r\n\r\n  public ngOnInit() {\r\n\r\n  }\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n\r\n  public onAction() {\r\n    // this.getLongRequest().subscribe();\r\n\r\n    const validation = this.validationQueue.shift();\r\n    if (validation) {\r\n      validation.validator$?.next(null);\r\n      validation.validator$?.complete();\r\n      validation.validator$ = undefined;\r\n    }\r\n  }\r\n\r\n  private getLongRequest(): Observable<any> {\r\n    return this.appDataService.getLongRequest().pipe(\r\n      tap({\r\n        next: result => console.log(result),\r\n        error: error => console.log(error)\r\n      }),\r\n      takeUntil(this.appCache.cancelHttpRequests)\r\n    );\r\n  }\r\n\r\n  private formAsyncValidator(key: string): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      let validation = this.validationQueue.find(v => v.key === key);\r\n      if (validation) {\r\n        validation.value = control.value;\r\n      } else {\r\n        validation = {\r\n          key,\r\n          validator$: new Subject<ValidationErrors | null>(),\r\n          value: control.value\r\n        };\r\n        this.validationQueue.push(validation);\r\n      }\r\n      return validation.validator$!;\r\n    }\r\n  }\r\n\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Parent</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <p>Parent content</p>\r\n  <forge-button type=\"raised\">\r\n    <button type=\"button\" (click)=\"onNavigate('test/child')\">View child</button>\r\n  </forge-button>\r\n  <forge-button type=\"raised\" style=\"margin: 16px;\">\r\n    <button type=\"button\" (click)=\"onAction()\">Make request</button>\r\n  </forge-button>\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <forge-text-field>\r\n      <input type=\"text\" [id]=\"id + '--name'\" formControlName=\"name\" />\r\n      <label [for]=\"id + '--name'\" slot=\"label\">Name</label>\r\n      <span slot=\"helper-text\">{{formGroup.controls.name.status}}</span>\r\n    </forge-text-field>\r\n    <forge-text-field>\r\n      <input type=\"text\" [id]=\"id + '--age'\" formControlName=\"age\" />\r\n      <label [for]=\"id + '--age'\" slot=\"label\">Age</label>\r\n      <span slot=\"helper-text\">{{formGroup.controls.age.status}}</span>\r\n    </forge-text-field>\r\n  </form>\r\n\r\n  <p>{{validationQueue.length}}</p>\r\n\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ForgeIconButtonModule, ForgeIconModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-test-child',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeIconButtonModule,\r\n    ForgeIconModule,\r\n    ForgeToolbarModule\r\n  ],\r\n  templateUrl: './child.component.html',\r\n  styleUrls: ['./child.component.scss']\r\n})\r\nexport class ChildComponent {\r\n  private router = inject(Router);\r\n\r\n  public onNavigate(route: string) {\r\n    this.router.navigate([route]);\r\n  }\r\n\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <div slot=\"start\">\r\n    <forge-icon-button>\r\n      <button type=\"button\" (click)=\"onNavigate('test/parent')\" aria-label=\"Go back\">\r\n        <forge-icon name=\"arrow_back\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n    <h2 class=\"forge-typography--title\">Child</h2>\r\n  </div>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <p>Child content</p>\r\n</div>","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}