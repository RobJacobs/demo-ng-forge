{
  "version": 3,
  "sources": ["src/app/app-data.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { isDefined, isNumber } from '@tylertech/forge-core';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { map, delay, concatMap, take, timeout, filter } from 'rxjs/operators';\r\n\r\nimport { SHOW_BUSY_INDICATOR } from 'src/app/shared/interceptors/busy.interceptor';\r\nimport { IFilterParameter, IPerson, IProfile, ISearch } from 'src/app/shared/interfaces';\r\nimport { Utils } from 'src/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppDataService {\r\n  private httpClient = inject(HttpClient);\r\n\r\n  public getProfile(): Observable<IProfile> {\r\n    return this.httpClient.get<IProfile>('mock-data/profile.json');\r\n  }\r\n\r\n  public getPeople(filter?: IFilterParameter): Observable<{ count: number; data: IPerson[] }> {\r\n    return this.httpClient.get<IPerson[]>('mock-data/people.json').pipe(\r\n      delay(1000),\r\n      map((r) => {\r\n        let count = r.length;\r\n        if (filter) {\r\n          if (filter.filters?.length) {\r\n            r = Utils.filterData(\r\n              r,\r\n              filter.filters.map((f) => ({\r\n                key: f.property,\r\n                value: f.value,\r\n                strict: f.property === 'gender' || f.property === 'id'\r\n              }))\r\n            );\r\n            count = r.length;\r\n          }\r\n\r\n          if (filter.sort) {\r\n            r = Utils.sortData(r, filter.sort.property, 'string', filter.sort.direction);\r\n          }\r\n\r\n          if (isNumber(filter.skip) && isNumber(filter.take)) {\r\n            r = r.slice(filter.skip, filter.skip + filter.take);\r\n          }\r\n        }\r\n        return { count, data: r };\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPerson(id: number): Observable<IPerson | undefined> {\r\n    return this.httpClient.get('mock-data/people.json').pipe(map((r) => (r as IPerson[]).find((p) => p.id.toString() === id.toString())));\r\n  }\r\n\r\n  public getSearches(key: string): Observable<ISearch[]> {\r\n    return new Observable<ISearch[]>((o) => {\r\n      let searches = localStorage.getItem(key);\r\n      if (isDefined(searches)) {\r\n        searches = JSON.parse(searches as string);\r\n      }\r\n      o.next(searches as any);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public saveSearches(key: string, searches: ISearch[]): Observable<boolean> {\r\n    return new Observable<boolean>((o) => {\r\n      localStorage.setItem(key, JSON.stringify(searches));\r\n      o.next(true);\r\n      o.complete();\r\n    });\r\n  }\r\n\r\n  public getLongRequest(): Observable<{ data: Date }> {\r\n    return this.httpClient.get<{ data: Date }>('http://localhost:5000/long-request', {\r\n      context: new HttpContext().set(SHOW_BUSY_INDICATOR, true)\r\n    });\r\n  }\r\n\r\n  public getFile(fileName: string): Observable<Blob> {\r\n    return this.httpClient.get(`mock-data/${fileName}`, {\r\n      context: new HttpContext().set(SHOW_BUSY_INDICATOR, true),\r\n      responseType: 'blob'\r\n    });\r\n  }\r\n\r\n  public pollingRequest(timespan: number): Observable<Date> {\r\n    const responseSub = new Subject<Date>();\r\n    const startDate = new Date();\r\n    startDate.setSeconds(startDate.getSeconds() + timespan);\r\n    timer(0, 100)\r\n      .pipe(\r\n        concatMap(() => {\r\n          return this.getLongRequest();\r\n        }),\r\n        filter((response) => {\r\n          const responseDate = new Date(response.data);\r\n          return responseDate > startDate;\r\n        }),\r\n        take(1),\r\n        timeout(60000)\r\n      )\r\n      .subscribe({\r\n        next: (result) => {\r\n          responseSub.next(result.data);\r\n          responseSub.complete();\r\n        },\r\n        error: (error) => {\r\n          responseSub.error(error);\r\n          responseSub.complete();\r\n        }\r\n      });\r\n    return responseSub;\r\n  }\r\n}\r\n"],
  "mappings": "6PAaA,IAAaA,GAAc,IAAA,CAArB,IAAOA,EAAP,MAAOA,CAAc,CAH3BC,aAAA,CAIU,KAAAC,WAAaC,EAAOC,CAAU,EAE/BC,YAAU,CACf,OAAO,KAAKH,WAAWI,IAAc,wBAAwB,CAC/D,CAEOC,UAAUC,EAAyB,CACxC,OAAO,KAAKN,WAAWI,IAAe,uBAAuB,EAAEG,KAC7DC,EAAM,GAAI,EACVC,EAAKC,GAAK,CACR,IAAIC,EAAQD,EAAEE,OACd,OAAIN,IACEA,EAAOO,SAASD,SAClBF,EAAII,EAAMC,WACRL,EACAJ,EAAOO,QAAQJ,IAAKO,IAAO,CACzBC,IAAKD,EAAEE,SACPC,MAAOH,EAAEG,MACTC,OAAQJ,EAAEE,WAAa,UAAYF,EAAEE,WAAa,MAClD,CAAC,EAELP,EAAQD,EAAEE,QAGRN,EAAOe,OACTX,EAAII,EAAMQ,SAASZ,EAAGJ,EAAOe,KAAKH,SAAU,SAAUZ,EAAOe,KAAKE,SAAS,GAGzEC,EAASlB,EAAOmB,IAAI,GAAKD,EAASlB,EAAOoB,IAAI,IAC/ChB,EAAIA,EAAEiB,MAAMrB,EAAOmB,KAAMnB,EAAOmB,KAAOnB,EAAOoB,IAAI,IAG/C,CAAEf,MAAAA,EAAOiB,KAAMlB,CAAC,CACzB,CAAC,CAAC,CAEN,CAEOmB,UAAUC,EAAU,CACzB,OAAO,KAAK9B,WAAWI,IAAI,uBAAuB,EAAEG,KAAKE,EAAKC,GAAOA,EAAgBqB,KAAMC,GAAMA,EAAEF,GAAGG,SAAQ,IAAOH,EAAGG,SAAQ,CAAE,CAAC,CAAC,CACtI,CAEOC,YAAYjB,EAAW,CAC5B,OAAO,IAAIkB,EAAuBC,GAAK,CACrC,IAAIC,EAAWC,aAAaC,QAAQtB,CAAG,EACnCuB,EAAUH,CAAQ,IACpBA,EAAWI,KAAKC,MAAML,CAAkB,GAE1CD,EAAEO,KAAKN,CAAe,EACtBD,EAAEQ,SAAQ,CACZ,CAAC,CACH,CAEOC,aAAa5B,EAAaoB,EAAmB,CAClD,OAAO,IAAIF,EAAqBC,GAAK,CACnCE,aAAaQ,QAAQ7B,EAAKwB,KAAKM,UAAUV,CAAQ,CAAC,EAClDD,EAAEO,KAAK,EAAI,EACXP,EAAEQ,SAAQ,CACZ,CAAC,CACH,CAEOI,gBAAc,CACnB,OAAO,KAAKhD,WAAWI,IAAoB,qCAAsC,CAC/E6C,QAAS,IAAIC,EAAW,EAAGC,IAAIC,EAAqB,EAAI,EACzD,CACH,CAEOC,QAAQC,EAAgB,CAC7B,OAAO,KAAKtD,WAAWI,IAAI,aAAakD,CAAQ,GAAI,CAClDL,QAAS,IAAIC,EAAW,EAAGC,IAAIC,EAAqB,EAAI,EACxDG,aAAc,OACf,CACH,CAEOC,eAAeC,EAAgB,CACpC,IAAMC,EAAc,IAAIC,EAClBC,EAAY,IAAIC,KACtBD,OAAAA,EAAUE,WAAWF,EAAUG,WAAU,EAAKN,CAAQ,EACtDO,EAAM,EAAG,GAAG,EACTzD,KACC0D,EAAU,IACD,KAAKjB,eAAc,CAC3B,EACD1C,EAAQ4D,GACe,IAAIL,KAAKK,EAAStC,IAAI,EACrBgC,CACvB,EACDlC,EAAK,CAAC,EACNyC,EAAQ,GAAK,CAAC,EAEfC,UAAU,CACTzB,KAAO0B,GAAU,CACfX,EAAYf,KAAK0B,EAAOzC,IAAI,EAC5B8B,EAAYd,SAAQ,CACtB,EACA0B,MAAQA,GAAS,CACfZ,EAAYY,MAAMA,CAAK,EACvBZ,EAAYd,SAAQ,CACtB,EACD,EACIc,CACT,yCArGW5D,EAAc,wBAAdA,EAAcyE,QAAdzE,EAAc0E,UAAAC,WAFb,MAAM,CAAA,EAEd,IAAO3E,EAAP4E,SAAO5E,CAAc,GAAA",
  "names": ["AppDataService", "constructor", "httpClient", "inject", "HttpClient", "getProfile", "get", "getPeople", "filter", "pipe", "delay", "map", "r", "count", "length", "filters", "Utils", "filterData", "f", "key", "property", "value", "strict", "sort", "sortData", "direction", "isNumber", "skip", "take", "slice", "data", "getPerson", "id", "find", "p", "toString", "getSearches", "Observable", "o", "searches", "localStorage", "getItem", "isDefined", "JSON", "parse", "next", "complete", "saveSearches", "setItem", "stringify", "getLongRequest", "context", "HttpContext", "set", "SHOW_BUSY_INDICATOR", "getFile", "fileName", "responseType", "pollingRequest", "timespan", "responseSub", "Subject", "startDate", "Date", "setSeconds", "getSeconds", "timer", "concatMap", "response", "timeout", "subscribe", "result", "error", "factory", "\u0275fac", "providedIn", "_AppDataService"]
}
