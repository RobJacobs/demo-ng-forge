{"version":3,"file":"629.8b9dbf1a0fa36427.js","mappings":"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","names":["formlyDemoConstants","props","label","type","attributes","columns","fieldGroup","key","format","required","description","width","FormlyDemoService","constructor","httpClient","this","formMessage","Subject","getFormDefinition","get","pipe","delay","getGeneroFormDefinition","responseType","getData","validateField","field","value","of","invalid","message","getFieldHelp","param","filters","length","count","data","result","index","skip","take","push","id","address","city","state","static","t","i0","i1","core","Yz7","factory","ɵfac","_c0","FormlyField_ng_template_0_Template","rf","ctx","FormlyGroup_formly_field_0_Template","$implicit","_c1","getFieldId","formId","template","Type","prototype","name","join","hasKey","isNil","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","defineProperty","defaultValue","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","o","_observers","target","onChange","set","previousValue","changeFn","setValue","emitEvent","filter","getField","f","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","touched","options","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵprov","token","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","_build","checkExpressions","_detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","detectChanges","i2","unregisterControl","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","className","removeAttribute","setAttribute","hide","_localFields","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","distinctUntilChanged","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","parsers","parserFn","next","templateFieldsSubs","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","immutable","setField","fields","checkExpressionChange","switchMap","onStable","asObservable","runGuarded","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","_formlyControls","flat","to","formState","NgControl","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","property","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","fieldArray","add","initialModel","remove","updateArrayElementKey","newKey","ɵFieldArrayType_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","content","safeHtml","bypassSecurityTrustHtml","FieldExpressionExtension","hidden","_hiddenFieldsForCheck","hideExpression","expr","parseExpressions","evalExpr","Observable","tap","expressions","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","pattern","minLengthResult","minLength","minLengthKey","minlength","maxLengthResult","maxLength","maxLengthKey","maxlength","C","min","max","validatorOption","isPromise","obj","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","l","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","hasValidators","mergeValidators","asyncValidator","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","placeholder","isHidden","setDefaultValue","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","deps","useValue","forChild","ɵmod","ɵinj","imports","CommonModule","ctx_r0","formGroup","formDefinition","formOptions","ctx_r1","FormlyDemoComponent","moduleService","age","takeUntilDestroyed","getFormErrors","formErrors","groupError","Xpm","FormlyDemoComponent_formly_form_2_Template","FormlyDemoComponent_p_3_Template","FormlyFieldComponent","FormlyFieldDirective","style","column","gridColumn","row","gridRow","addEventListener","lG2","formlyFieldDirective","standalone","f_r3","_r4","GroupTypeComponent","fieldContainerElement","fieldContainer","classList","gridTemplateColumns","gridWidth","gridHeight","GroupTypeComponent_div_0_Template","GroupTypeComponent_formly_field_3_Template","CheckboxTypeComponent","addAsyncValidators","complete","pristine","takeUntil","server","CheckboxTypeComponent_label_2_Template","CheckboxTypeComponent_span_3_Template","readonly","ReactiveFormsModule","i3","i4","ForgeModule","i5","DatePickerTypeComponent","isValidDate","DatePickerTypeComponent_label_3_Template","DatePickerTypeComponent_span_4_Template","TextareaTypeComponent","cols","rows","TextareaTypeComponent_label_3_Template","TextareaTypeComponent_span_4_Template","field_r2","ctx_r3","onTabSelected","TabTypeComponent","activeTab","activeField","TabTypeComponent_forge_tab_1_Template","_r1","th_r3","f_r7","_r8","TableTypeComponent_tr_7_td_1_Template","i_r5","_r10","ctx_r9","onRemove","fg_r4","TableTypeComponent","onAdd","fromEntries","requestAnimationFrame","tr","from","tableElement","querySelectorAll","reverse","focusElement","querySelector","TableTypeComponent_th_4_Template","TableTypeComponent_tr_7_Template","FieldHelpDialogComponent","dialogConfig","dialogRef","paginator","pageIndex","pageSize","total","isBusy","direction","SortDirection","Ascending","title","columnConfigurations","dataObservable","initialSort","onClose","close","onPaginatorChange","onTableSort","columnIndex","onTableFilter","filterProperty","isDefined","toString","onTableRowClick","finalize","detail","FieldHelpDialogComponent_forge_page_state_8_Template","FieldHelpDialogComponent_ng_container_9_Template","ctx_r2","InputHelpTypeComponent","dialogService","onShowDialog","dialogSub","fullscreen","header","sortable","filterDelegate","TextFieldComponentDelegate","optionsKey","afterClosed","InputHelpTypeComponent_label_3_Template","InputHelpTypeComponent_span_7_Template","LabelTypeComponent","ctx_r5","i_r4","option_r3","RadioTypeComponent_forge_radio_2_label_2_Template","RadioTypeComponent","RadioTypeComponent_label_0_Template","RadioTypeComponent_forge_radio_2_Template","RadioTypeComponent_div_3_Template","SelectTypeComponent","SelectTypeComponent_span_1_Template","formlyFieldExtension","ButtonTypeComponent","onClick","event","log","ContainerTypeComponent","ContainerTypeComponent_div_0_Template","ContainerTypeComponent_ng_container_3_Template","InputTypeComponent","inputType","InputTypeComponent_label_3_Template","InputTypeComponent_span_4_Template","FormlyConfigModule","oAB","cJS","routes","FormlyDemoModule","RouterModule","AppFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/formly-demo/formly-demo.constants.ts","./src/app/formly-demo/formly-demo.service.ts","./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs","./src/app/formly-demo/formly-demo.component.html","./src/app/formly-demo/formly-demo.component.ts","./src/app/formly-demo/components/formly-field.component.ts","./src/app/formly-demo/components/formly-field.directive.ts","./src/app/formly-demo/components/group-type.component.ts","./src/app/formly-demo/components/checkbox-type.component.ts","./src/app/formly-demo/components/date-picker-type.component.ts","./src/app/formly-demo/components/textarea-type.component.ts","./src/app/formly-demo/components/tab-type.component.ts","./src/app/formly-demo/components/table-type.component.ts","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.html","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.ts","./src/app/formly-demo/components/input-help-type.component.ts","./src/app/formly-demo/components/label-type.component.ts","./src/app/formly-demo/components/radio-type.component.ts","./src/app/formly-demo/components/select-type.component.ts","./src/app/formly-demo/components/formly-field.extension.ts","./src/app/formly-demo/components/button-type.component.ts","./src/app/formly-demo/components/container-type.component.ts","./src/app/formly-demo/components/input-type.component.ts","./src/app/formly-demo/components/formly-config.module.ts","./src/app/formly-demo/formly-demo.module.ts"],"sourcesContent":["const formDefinitionBasic = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'name',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Name',\r\n          type: 'string',\r\n          format: '###-##-####',\r\n          required: true,\r\n          description: 'Persons name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number',\r\n          format: '#,###,###,##&.&&',\r\n          required: true,\r\n          description: 'Persons age',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\nconst formDefinitionAll = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'firstName',\r\n        type: 'input',\r\n        defaultValue: 0,\r\n        props: {\r\n          label: 'First name',\r\n          required: true,\r\n          description: 'Persons first name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'lastName',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Last name',\r\n          description: 'Persons last name',\r\n          attributes: {\r\n            width: 320,\r\n            column: 1,\r\n            row: 2\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        defaultValue: 18,\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number'\r\n        }\r\n      },\r\n      {\r\n        key: 'isActive',\r\n        type: 'checkbox',\r\n        props: {\r\n          label: 'Is active'\r\n        }\r\n      },\r\n      {\r\n        key: 'birthDate',\r\n        type: 'date-picker',\r\n        props: {\r\n          label: 'DOB',\r\n          description: 'Persons date of birth',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'gender',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Gender',\r\n          options: [\r\n            { label: 'Male', value: 'M' },\r\n            { label: 'Female', value: 'F' },\r\n            { label: 'Other', value: 'O' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'comment',\r\n        type: 'textarea',\r\n        props: {\r\n          label: 'Comment',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'size',\r\n        type: 'radio',\r\n        props: {\r\n          label: 'Size',\r\n          description: 'What is your size?',\r\n          options: [\r\n            { label: 'Small', value: 'sm' },\r\n            { label: 'Medium', value: 'md' },\r\n            { label: 'Large', value: 'lg' }\r\n          ],\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'officeLocation',\r\n        type: 'input-help',\r\n        props: {\r\n          label: 'Office location',\r\n          description: 'What is your office location',\r\n          optionsKey: 'id',\r\n          options: [\r\n            { label: 'Address', property: 'address' },\r\n            { label: 'City', property: 'city' },\r\n            { label: 'State', property: 'state' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    className: 'form-divider',\r\n    template: '<forge-divider style=\"margin: 16px 0\"></forge-divider>',\r\n    props: {\r\n      safeHtml: true\r\n    }\r\n  },\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      type: 'group',\r\n      label: 'Address'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'hbox'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            key: 'address.street',\r\n            type: 'input',\r\n            props: {\r\n              label: 'Street'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.city',\r\n            type: 'input',\r\n            props: {\r\n              label: 'City'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.state',\r\n            type: 'input',\r\n            props: {\r\n              label: 'State'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'tab',\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          label: 'Tab 1'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'hbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field1',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 1'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field2',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 2'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        props: {\r\n          label: 'Tab 2'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'vbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field3',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 3'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field4',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 4'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'children',\r\n    type: 'table',\r\n    props: {\r\n      columns: [\r\n        {\r\n          label: 'First name',\r\n          key: 'firstName',\r\n          defaultValue: null\r\n        },\r\n        {\r\n          label: 'Last name',\r\n          key: 'lastName',\r\n          defaultValue: null\r\n        }\r\n      ]\r\n    },\r\n    fieldArray: {\r\n      fieldGroup: [\r\n        {\r\n          key: 'firstName',\r\n          type: 'input',\r\n          props: {\r\n            required: true\r\n          }\r\n        },\r\n        {\r\n          key: 'lastName',\r\n          type: 'input'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n];\r\n\r\nconst formDefinitionLayout = [\r\n  {\r\n    props: {\r\n      type: 'vbox'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'grid',\r\n          attributes: {\r\n            width: 83,\r\n            height: 10\r\n          }\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'group',\r\n              attributes: {\r\n                posX: 1,\r\n                posY: 1,\r\n                gridWidth: 83,\r\n                gridHeight: 6\r\n              }\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Year',\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 2,\r\n                    gridWidth: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'tax_year',\r\n                type: 'input',\r\n                defaultValue: '2023',\r\n                props: {\r\n                  type: 'number',\r\n                  disabled: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 2,\r\n                    gridWidth: 4,\r\n                    width: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'which_value',\r\n                type: 'radio',\r\n                props: {\r\n                  description: 'Value to use on report.',\r\n                  options: [\r\n                    { label: 'Original full value', value: 'O' },\r\n                    { label: 'Current full value', value: 'C' }\r\n                  ],\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 3,\r\n                    gridWidth: 31,\r\n                    width: 31\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Minimum value',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 4,\r\n                    gridWidth: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'min_val',\r\n                type: 'input',\r\n                props: {\r\n                  type: 'number',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 4,\r\n                    gridWidth: 13,\r\n                    width: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Sort vehicles by',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 5,\r\n                    gridWidth: 17\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'seq_sw',\r\n                type: 'select',\r\n                props: {\r\n                  required: true,\r\n                  options: [\r\n                    { label: 'Sequence number', value: 'S' },\r\n                    { label: 'Owner name', value: 'O' }\r\n                  ],\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 5,\r\n                    gridWidth: 17,\r\n                    width: 15\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const formlyDemoConstants = {\r\n  formDefinitionBasic,\r\n  formDefinitionAll,\r\n  formDefinitionLayout\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { IFilterParameter, IFilterResponse } from '../shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport class FormlyDemoService {\r\n  public formMessage = new Subject<{ id: string; message: string; }>();\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getFormDefinition(): Observable<FormlyFieldConfig[]> {\r\n    return this.httpClient.get<FormlyFieldConfig[]>('mock-data/form-definition.json').pipe(\r\n      delay(1000)\r\n    );\r\n  }\r\n\r\n  public getGeneroFormDefinition(): Observable<string> {\r\n    return this.httpClient.get('mock-data/genero-form-definition.xml', { responseType: 'text' });\r\n  }\r\n\r\n  public getData(): Observable<any> {\r\n    return this.httpClient.get('mock-data/form-data.json');\r\n  }\r\n\r\n  public validateField(field: string, value: any): Observable<{ invalid: boolean; message: string }> {\r\n    const validation = {\r\n      invalid: false,\r\n      message: `Error from server: ${field}`\r\n    };\r\n\r\n    return of(validation).pipe(\r\n      delay(1000)\r\n    );\r\n\r\n    // return this.httpClient.get<{ invalid: boolean; message: string }>('http://localhost:5000/validate-get');\r\n    // return this.httpClient.post<{ invalid: boolean; message: string }>('http://localhost:5000/validate-post', { field, value });\r\n  }\r\n\r\n  public getFieldHelp(field: string, param: IFilterParameter): Observable<IFilterResponse<any>> {\r\n    if (param.filters?.length) {\r\n      return of({ count: 0, data: [] }).pipe(\r\n        delay(1000)\r\n      )\r\n    } else {\r\n      const result = [];\r\n      for (let index = param.skip; index < param.skip + param.take; index++) {\r\n        result.push(\r\n          {\r\n            id: index,\r\n            address: `${index} street`,\r\n            city: `${index} city`,\r\n            state: `${index} state`\r\n          }\r\n        );\r\n      }\r\n\r\n      return of({ count: 75, data: result }).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, NgControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '';\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (setFn && state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1 && isObject(target)) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(currentValue, emitEvent = true) {\n            if (currentValue === state.value) {\n                return;\n            }\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => {\n                if (changeFn !== setFn && emitEvent) {\n                    changeFn({ previousValue, currentValue, firstChange: false });\n                }\n            });\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n        }\n        disableTreeValidityCall(field.form, () => {\n            this._build(field);\n            if (!field.parent) {\n                const options = field.options;\n                options.checkExpressions?.(field, true);\n                options._detectChanges?.(field);\n            }\n        });\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe();\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._localFields) {\n                field._localFields = [];\n            }\n            else {\n                defineHiddenProp(this.field, '_localFields', []);\n            }\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field))];\n        if (field.options) {\n            subscribes.push(observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)));\n        }\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['focus'], ['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        let templateFieldsSubs = [];\n        observe(field, ['_localFields'], ({ currentValue }) => {\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs = (currentValue || []).map((f) => this.fieldChanges(f));\n        });\n        return () => {\n            subscribes.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n        };\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        for (let i = 0; i < this.uiAttributes.length; i++) {\n            const attr = this.uiAttributes[i];\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    constructor() {\n        this.field = {};\n    }\n    set _formlyControls(controls) {\n        const f = this.field;\n        f._localFields = controls\n            .map((c) => c.control._fields || [])\n            .flat()\n            .filter((f) => f.formControl !== this.field.formControl);\n    }\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options?.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"_formlyControls\", predicate: NgControl, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { _formlyControls: [{\n                type: ViewChildren,\n                args: [NgControl]\n            }], field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = { ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray) };\n            if (f.key !== null) {\n                f.key = `${i}`;\n            }\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => this.updateArrayElementKey(f, `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.field.options.detectChanges(this.field);\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n    updateArrayElementKey(f, newKey) {\n        if (hasKey(f)) {\n            f.key = newKey;\n            return;\n        }\n        if (!f.fieldGroup?.length) {\n            return;\n        }\n        for (let i = 0; i < f.fieldGroup.length; i++) {\n            this.updateArrayElementKey(f.fieldGroup[i], newKey);\n        }\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _formlyControls(_) { }\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options._detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), parent = field.fieldGroup ? field : field.parent;\n            let control = field?.key === key ? field.formControl : field.form.get(key);\n            if (!control && field.get(key)) {\n                control = field.get(key).formControl;\n            }\n            assignFieldValue({ key, parent, model: field.model }, value);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        else {\n            try {\n                let target = field;\n                const paths = this._evalExpressionPath(field, prop);\n                const lastIndex = paths.length - 1;\n                for (let i = 0; i < lastIndex; i++) {\n                    target = target[paths[i]];\n                }\n                target[paths[lastIndex]] = value;\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n            if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n                this.changeDisabledState(field, value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (opt === 'required' && currentValue != null && typeof currentValue !== 'boolean') {\n                console.warn(`Formly: Invalid prop 'required' of type '${typeof currentValue}', expected 'boolean' (Field:${field.key}).`);\n            }\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (field.fieldArray) {\n            return;\n        }\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: !!field.props.disabled }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator && this.hasValidators(field, '_validators')) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    markForCheck = true;\n                }\n                if (null === c.asyncValidator && this.hasValidators(field, '_asyncValidators')) {\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    hasValidators(field, type) {\n        const c = field.formControl;\n        if (c?._fields?.length > 1 && c._fields.some((f) => f[type].length > 0)) {\n            return true;\n        }\n        else if (field[type].length > 0) {\n            return true;\n        }\n        return field.fieldGroup?.some((f) => f?.fieldGroup && !hasKey(f) && this.hasValidators(f, type));\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options._detectChanges = (f) => {\n            if (f._componentRefs) {\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options._detectChanges(f));\n        };\n        options.detectChanges = (f) => {\n            f.options.checkExpressions?.(f);\n            options._detectChanges(f);\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            observe(options, ['parentForm', 'submitted']).setValue(false, false);\n            options.build(field);\n            field.form.reset(field.model);\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n            const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n            let setDefaultValue = !field.resetOnHide || !isHidden(field);\n            if (!isHidden(field) && field.resetOnHide) {\n                let parent = field.parent;\n                while (parent && !isHidden(parent)) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !isHidden(parent);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n","<div class=\"body\">\r\n  <form class=\"form\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <formly-form *ngIf=\"formDefinition\" [form]=\"formGroup\" [model]=\"model\" [fields]=\"formDefinition\" [options]=\"formOptions\"></formly-form>\r\n\r\n    <p *ngIf=\"formDefinition\">\r\n      {{formGroup.value| json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <span class=\"forge-typography--caption\" slot=\"start\">\r\n    {{formMessage?.message}}\r\n  </span>\r\n</forge-toolbar>","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { formlyDemoConstants } from './formly-demo.constants';\r\n\r\n@Component({\r\n  selector: 'app-formly-demo',\r\n  templateUrl: './formly-demo.component.html',\r\n  styleUrls: ['./formly-demo.component.scss']\r\n})\r\nexport class FormlyDemoComponent implements OnInit {\r\n  private form: Form;\r\n\r\n  public formGroup = new FormGroup({});\r\n  public formDefinition?: FormlyFieldConfig[];\r\n  public formOptions: FormlyFormOptions = {\r\n    // showError(field) {\r\n    //   console.log(field);\r\n    //   return false;\r\n    // },\r\n    // build: (field) => {\r\n    //   console.log(field);\r\n    //   return field;\r\n    // }\r\n  };\r\n  public model = {\r\n    name: '',\r\n    age: 10\r\n  } as any;\r\n  public record: any;\r\n  public formMessage: { id: string; message: string; };\r\n\r\n  constructor(\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    this.moduleService.formMessage.pipe(\r\n      takeUntilDestroyed()\r\n    ).subscribe(result => {\r\n      this.formMessage = result;\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formDefinition = formlyDemoConstants.formDefinitionBasic;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  private getFormErrors(control: AbstractControl) {\r\n    if (control instanceof FormControl) {\r\n      return control.errors ? control : null;\r\n    }\r\n\r\n    if (control instanceof FormGroup) {\r\n      const formErrors = control.errors ? { groupError: control } : {};\r\n      Object.keys(control.controls).forEach(key => {\r\n        const error = this.getFormErrors(control.get(key));\r\n        if (error) {\r\n          formErrors[key] = error;\r\n        }\r\n      });\r\n\r\n      return Object.keys(formErrors).length > 0 ? formErrors : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-field',\r\n  template: `\r\n    <formly-field #formlyField [field]=\"field\"></formly-field>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyFieldComponent implements OnInit {\r\n  @ViewChild('formlyField', { static: true })\r\n  private formlyField: FormlyField;\r\n\r\n  @Input()\r\n  public field: FormlyFieldConfig;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyField);\r\n    // console.log(this.elementRef.nativeElement);\r\n  }\r\n}","import { Input } from '@angular/core';\r\nimport { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: '[formlyFieldDirective]',\r\n  standalone: true\r\n})\r\nexport class FormlyFieldDirective implements OnInit {\r\n  @Input()\r\n  field: FormlyFieldConfig\r\n  @Input()\r\n  formlyFieldDirective: FormlyField;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyFieldDirective);\r\n    // console.log(this.elementRef.nativeElement);\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n\r\n    if (this.field.props?.attributes) {\r\n      if (this.field.props.attributes && this.field.props.attributes['width']) {\r\n        element.style.width = `${this.field.props.attributes['width']}px`;\r\n      }\r\n\r\n      if (this.field.props.attributes['column']) {\r\n        element.style.gridColumn = `${this.field.props.attributes['column']}`;\r\n      }\r\n\r\n      if (this.field.props.attributes['row']) {\r\n        element.style.gridRow = `${this.field.props.attributes['row']}`;\r\n      }\r\n    }\r\n\r\n    if (this.field.props.description?.length) {\r\n      element.addEventListener('focusin', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: this.field.props.description });\r\n      });\r\n      element.addEventListener('focusout', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: '' });\r\n      });\r\n    }\r\n\r\n    if (this.field.props.required) {\r\n      this.field.validation.messages = {\r\n        required: `A ${this.field.props.label || 'value'} is required`\r\n      };\r\n    }\r\n\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, HostBinding, OnInit, ViewChild } from '@angular/core';\r\nimport { FieldGroupTypeConfig, FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-group',\r\n  template: `\r\n    <div class=\"label\" *ngIf=\"props.label?.length && field.parent?.type !== 'tab'\">{{props.label}}</div>\r\n    <div #fieldContainer>\r\n      <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n      height: fit-content;\r\n\r\n      ::ng-deep {\r\n        .form-grid {\r\n          display: grid !important;\r\n          row-gap: 8px !important;\r\n          // row-gap: 0 !important;\r\n        }\r\n\r\n        .form-vbox {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n        }\r\n\r\n        .form-hbox {\r\n          display: flex;\r\n          flex-direction: row;\r\n          column-gap: 16px;\r\n        }\r\n\r\n        .form-group {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n          border: var(--forge-theme-border);\r\n          border-radius: 4px;\r\n          padding: 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .label {\r\n      padding-bottom: 8px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class GroupTypeComponent extends FieldType<FieldGroupTypeConfig> implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n  // @HostBinding('style.display')\r\n  // private displayStyle = 'block';\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n\r\n        if (this.props.attributes) {\r\n          if (this.props.attributes['width']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['width']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['height']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['height']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        // this.displayStyle = 'inline-block';\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n\r\n        if (this.props.attributes && (this.props.attributes['gridWidth'] || this.props.attributes['gridHeight'])) {\r\n          fieldContainerElement.classList.add('form-grid');\r\n          if (this.props.attributes['gridWidth']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['gridWidth']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['gridHeight']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['gridHeight']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-checkbox',\r\n  template: `\r\n  <forge-checkbox>\r\n    <input\r\n      [id]=\"id\"\r\n      type=\"checkbox\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"props.description\">{{props.description}}</span>\r\n  </forge-checkbox>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class CheckboxTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { isValid as isValidDate } from 'date-fns';\r\n\r\n@Component({\r\n  selector: 'app-formly-date-picker',\r\n  template: `\r\n  <forge-date-picker [max]=\"props.max\" [min]=\"props.min\">\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n      <span slot=\"helper-text\" *ngIf=\"showError\">\r\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n      </span>\r\n    </forge-text-field>\r\n  </forge-date-picker>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DatePickerTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      if (control.value && !isValidDate(new Date(control.value))) {\r\n        control.setValue(null);\r\n        if (this.field.props.required) {\r\n          return of({ required: true });\r\n        }\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-textarea',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <textarea\r\n      [id]=\"id\"\r\n      [cols]=\"props.cols\"\r\n      [rows]=\"props.rows\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" >\r\n    </textarea>\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    textarea {\r\n      resize: none;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TextareaTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n    this.defaultOptions = {\r\n      props: {\r\n        cols: 1,\r\n        rows: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-tab',\r\n  template: `\r\n  <forge-tab-bar [activeTab]=\"activeTab\">\r\n    <forge-tab *ngFor=\"let field of field.fieldGroup\" (forge-tab-interacted)=\"onTabSelected(field)\">\r\n      {{field.props.label}}\r\n    </forge-tab>\r\n  </forge-tab-bar>\r\n  <formly-field [field]=\"activeField\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    forge-tab-bar {\r\n      display: inline-flex;\r\n      width: 100%;\r\n      border-bottom: var(--forge-theme-border);\r\n      margin: 16px 0;\r\n    }\r\n\r\n    forge-tab {\r\n      min-width: 240px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TabTypeComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n  public activeTab = 0;\r\n  public activeField: FieldTypeConfig;\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.activeField = this.field.fieldGroup[0] as FieldTypeConfig;\r\n  }\r\n\r\n  public onTabSelected(field: FieldTypeConfig) {\r\n    this.activeField = field;\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\r\nimport { FieldArrayType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-table',\r\n  template: `\r\n    <table class=\"forge-table\" #table>\r\n      <thead>\r\n        <tr class=\"forge-table-row forge-table-head__row\">\r\n          <th *ngFor=\"let th of props['columns']\" scope=\"col\" class=\"forge-table-cell forge-table-head__cell\">\r\n            <div class=\"forge-table-head__cell-container\">\r\n              <span class=\"forge-table-head__cell-text\">{{th.label}}</span>\r\n            </div>\r\n          </th>\r\n          <th class=\"forge-table-cell forge-table-head__cell forge-table-cell__button\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let fg of field.fieldGroup; index as i\" class=\"forge-table-row forge-table-body__row\">\r\n          <td *ngFor=\"let f of fg.fieldGroup\" class=\"forge-table-cell forge-table-body__cell\">\r\n            <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n          </td>\r\n          <td class=\"forge-table-cell forge-table-body__cell forge-table-cell__button\">\r\n            <forge-icon-button>\r\n              <button type=\"button\" (click)=\"onRemove(i)\">\r\n                <forge-icon name=\"delete\"></forge-icon>\r\n              </button>\r\n            </forge-icon-button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td>\r\n            <forge-button>\r\n              <button type=\"button\" (click)=\"onAdd()\">Add</button>\r\n            </forge-button>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .forge-table {\r\n      // --forge-table-theme-row-hover-background: transparent;\r\n\r\n      &-cell {\r\n        padding-right: 24px;\r\n        &:first-child {\r\n          padding-left: 0;\r\n        }\r\n        &:last-child {\r\n          padding-right: 0;\r\n        }\r\n        &__button {\r\n          width: 48px;\r\n        }\r\n      }\r\n\r\n      &-body {\r\n\r\n        &__cell {\r\n          padding-top: 8px;\r\n          padding-bottom: 8px;\r\n          vertical-align: top;\r\n\r\n          formly-field {\r\n            background-color: var(--mdc-theme-surface);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TableTypeComponent extends FieldArrayType {\r\n  @ViewChild('table')\r\n  private tableElement: ElementRef;\r\n\r\n  public onAdd() {\r\n    const model = this.props['columns'].filter(c => c.key?.length).map(c => [c.key, c.defaultValue]);\r\n\r\n    this.add(this.formControl.length, Object.fromEntries(model));\r\n\r\n    requestAnimationFrame(() => {\r\n      const tr = Array.from(this.tableElement.nativeElement.querySelectorAll('tbody > tr')).reverse()[0] as HTMLTableRowElement;\r\n      if (tr) {\r\n        const focusElement = tr.querySelector(`[id*=\"${model[0][0]}\"]`) as HTMLElement;\r\n        if (focusElement) {\r\n          focusElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public onRemove(index: number) {\r\n    this.remove(index);\r\n  }\r\n}\r\n","<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">{{title}}</span>\r\n  <forge-icon-button class=\"forge-flex-item--right\">\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  <forge-table [ngClass]=\"{'app--hidden': isBusy}\" [data]=\"data\" [columnConfigurations]=\"columnConfigurations\" allow-row-click (forge-table-row-click)=\"onTableRowClick($event.detail)\" (forge-table-sort)=\"onTableSort($event.detail)\" filter=\"true\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n  <forge-page-state *ngIf=\"!isBusy && !data?.length\">\r\n    <img src=\"https://cdn.forge.tylertech.com/v1/images/spot/no-search-results-spot.svg\" slot=\"graphic\" alt=\"No records found\" />\r\n    <div slot=\"message\">No records were found.</div>\r\n  </forge-page-state>\r\n\r\n  <ng-container *ngIf=\"isBusy\">\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n  </ng-container>\r\n</div>\r\n\r\n<div class=\"dialog__footer\">\r\n  <forge-paginator [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"paginator.pageSize\" [total]=\"paginator.total\" (forge-paginator-change)=\"onPaginatorChange($event.detail)\" [disabled]=\"isBusy || !data.length\">\r\n  </forge-paginator>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { IColumnConfiguration, ITableFilterEventData, ITableRowClickEventData, ITableSortEventData, SortDirection } from '@tylertech/forge';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\nimport { finalize, Observable, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter, IFilter, IFilterResponse } from 'src/app/shared/interfaces/filter.interface';\r\n\r\nexport interface IFieldHelpDialogConfig {\r\n  columnConfigurations: IColumnConfiguration[];\r\n  dataObservable: (param: IFilterParameter) => Observable<IFilterResponse<any>>;\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-formly-field-help-dialog',\r\n  templateUrl: './field-help-dialog.component.html',\r\n  styleUrls: ['./field-help-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FieldHelpDialogComponent {\r\n  public title: string;\r\n  public columnConfigurations: IColumnConfiguration[];\r\n  public data: any[] = [];\r\n  public paginator = {\r\n    pageIndex: 0,\r\n    pageSize: 25,\r\n    total: 0\r\n  };\r\n  public isBusy = false;\r\n  public key: string;\r\n\r\n  private unsubscribe = new Subject<void>();\r\n  private dataObservable: (param: IFilterParameter) => Observable<any>;\r\n  private sort = {\r\n    property: '',\r\n    direction: SortDirection.Ascending\r\n  };\r\n  private filters: IFilter[] = [];\r\n\r\n  constructor(\r\n    public dialogConfig: DialogConfig<IFieldHelpDialogConfig>,\r\n    private dialogRef: DialogRef\r\n  ) {\r\n    this.title = this.dialogConfig.data.title;\r\n    this.columnConfigurations = this.dialogConfig.data.columnConfigurations;\r\n    this.dataObservable = this.dialogConfig.data.dataObservable;\r\n    this.key = this.dialogConfig.data.key;\r\n    this.sort.property = this.columnConfigurations.find(c => c.initialSort)?.property || this.columnConfigurations[0].property;\r\n    this.getData();\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onPaginatorChange(value: { pageIndex: number; pageSize: number; }) {\r\n    this.paginator.pageIndex = value.pageIndex;\r\n    this.paginator.pageSize = value.pageSize;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableSort(value: ITableSortEventData) {\r\n    this.sort.property = this.columnConfigurations[value.columnIndex].property;\r\n    this.sort.direction = value.direction;\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableFilter(filter: ITableFilterEventData) {\r\n    const filterProperty = this.columnConfigurations[filter.columnIndex].property;\r\n    if (isDefined(filter.value) && filter.value?.toString().length) {\r\n      this.filters.push({ property: filterProperty, value: filter.value });\r\n    } else {\r\n      const index = this.filters.findIndex(f => f.property === filterProperty);\r\n      if (index !== -1) {\r\n        this.filters.splice(index, 1);\r\n      }\r\n    }\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableRowClick(value: ITableRowClickEventData) {\r\n    this.dialogRef.close(value.data[this.key]);\r\n  }\r\n\r\n  private getData() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.isBusy = true;\r\n    const param: IFilterParameter = {\r\n      filters: this.filters,\r\n      sort: this.sort,\r\n      skip: this.paginator.pageIndex * this.paginator.pageSize,\r\n      take: this.paginator.pageSize\r\n    };\r\n    this.dataObservable(param)\r\n      .pipe(\r\n        finalize(() => this.isBusy = false),\r\n        takeUntil(this.unsubscribe)\r\n      )\r\n      .subscribe((r: IFilterResponse<any>) => {\r\n        this.data = r.data;\r\n        this.paginator.total = r.count;\r\n      });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { DialogService, ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { FieldHelpDialogComponent } from './field-help-dialog/field-help-dialog.component';\r\n@Component({\r\n  selector: 'app-formly-input-help',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      type=\"text\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <forge-icon-button slot=\"addon-end\" dense>\r\n      <button type=\"button\" aria-label=\"Browse options\" [disabled]=\"formControl.disabled\"\r\n        (click)=\"onShowDialog()\">\r\n        <forge-icon name=\"more_horiz\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputHelpTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private dialogService: DialogService,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  public onShowDialog() {\r\n    const dialogRef = this.dialogService.show(FieldHelpDialogComponent, { fullscreen: true }, {\r\n      data: {\r\n        columnConfigurations: (this.props.options as { label: string; property: string }[]).map(o => ({\r\n          header: o.label,\r\n          property: o.property,\r\n          sortable: true,\r\n          filter: true,\r\n          filterDelegate: new TextFieldComponentDelegate()\r\n        })),\r\n        dataObservable: (param: IFilterParameter) => this.moduleService.getFieldHelp(this.key as string, param),\r\n        key: this.props['optionsKey'],\r\n        title: `Select a ${this.props.label}`,\r\n      }\r\n    });\r\n\r\n    const dialogSub = dialogRef.afterClosed.subscribe(result => {\r\n      dialogSub.unsubscribe();\r\n      if (result) {\r\n        this.formControl.setValue(result);\r\n      }\r\n    });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-label',\r\n  template: `\r\n  <label [attr.for]=\"id\" class=\"forge-typography--body2\">{{props.label}}</label>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LabelTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, HostBinding } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-radio',\r\n  template: `\r\n  <label *ngIf=\"props.label\">{{props.label}}</label>\r\n  <div role=\"radiogroup\">\r\n    <forge-radio *ngFor=\"let option of props.options; let i = index\">\r\n      <input\r\n        type=\"radio\"\r\n        [id]=\"id + '-' + i\"\r\n        [value]=\"option.value\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [for]=\"id + '-' + i\" *ngIf=\"option.label\">{{option.label}}</label>\r\n    </forge-radio>\r\n  </div>\r\n  <div class=\"forge-typography--caption\" *ngIf=\"showError\">\r\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n  </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    [role='radiogroup'] {\r\n      margin-left: -8px;\r\n      display: flex;\r\n      column-gap: 16px;\r\n      flex-direction: column;\r\n    }\r\n\r\n    forge-radio {\r\n      &::part(container) {\r\n        padding: 4px;\r\n      }\r\n    }\r\n\r\n    .forge-typography--caption {\r\n      color: var(--forge-theme-danger);\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RadioTypeComponent extends FieldType<FieldTypeConfig> {\r\n  // @HostBinding('attr.role')\r\n  // public roleAttribute = 'radiogroup';\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-select',\r\n  template: `\r\n  <forge-select\r\n    [id]=\"id\"\r\n    [options]=\"props.options\"\r\n    [label]=\"props.label\"\r\n    [placeholder]=\"props.placeholder\"\r\n    [invalid]=\"showError\"\r\n    [formControl]=\"formControl\"\r\n    [formlyAttributes]=\"field\">\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-select>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  // forge-select {\r\n  //   --forge-select-height: 2rem;\r\n  // }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SelectTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { FormlyExtension } from '@ngx-formly/core';\r\n\r\nexport const formlyFieldExtension: FormlyExtension = {\r\n  prePopulate(field) {\r\n    // TODO\r\n    switch (field.type) {\r\n      case 'date-picker':\r\n      case 'input':\r\n      case 'select':\r\n      case 'textarea': {\r\n        // field.modelOptions = {\r\n        //   updateOn: 'blur'\r\n        // }\r\n      }\r\n    }\r\n  }\r\n};","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-button',\r\n  template: `\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onClick($event)\">\r\n        {{props.label}}\r\n      </button>\r\n    </forge-button>\r\n  `,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ButtonTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n  public onClick(event: MouseEvent) {\r\n    console.log(event);\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { OnInit, ViewChild } from '@angular/core';\r\nimport { ElementRef } from '@angular/core';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldComponent } from './formly-field.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n// <formly-field [field]=\"field\"></formly-field>\r\n\r\n@Component({\r\n  selector: 'app-formly-container',\r\n  template: `\r\n  <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  <div #fieldContainer>\r\n    <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n      <formly-field #formlyField [field]=\"f\" [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n    </ng-container>\r\n  </div>\r\n  `,\r\n  // template: `\r\n  // <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  // <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n  //   <app-formly-field [field]=\"f\"></app-formly-field>\r\n  // </ng-container>\r\n  // `,\r\n  styles: [`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .form-grid {\r\n      display: grid;\r\n      gap: 16px;\r\n    }\r\n\r\n    .form-vbox {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n    }\r\n\r\n    .form-hbox {\r\n      display: flex;\r\n      flex-direction: row;\r\n      column-gap: 16px;\r\n    }\r\n\r\n    .form-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n      border: 1px solid #e6e6e6;\r\n      border-radius: 4px;\r\n      padding: 16px;\r\n    }\r\n  }\r\n\r\n  .label {\r\n    padding: 8px;\r\n  }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective,\r\n    FormlyFieldComponent\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ContainerTypeComponent extends FieldType implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n        if (this.props.attributes['columns']) {\r\n          fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['columns']}, auto)`\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n        break;\r\n    }\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-input',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      [type]=\"inputType\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n\r\n    input[type='number']::-webkit-outer-spin-button,\r\n    input[type='number']::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  @ViewChild('input', { static: true })\r\n  private inputElement: ElementRef;\r\n\r\n  public inputType = 'text';\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.inputType = this.props?.type || 'text';\r\n\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      // (this.inputElement.nativeElement as HTMLInputElement).disabled = true;\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        // finalize(() => (this.inputElement.nativeElement as HTMLInputElement).disabled = false),\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { GroupTypeComponent } from './group-type.component';\r\nimport { CheckboxTypeComponent } from './checkbox-type.component';\r\nimport { DatePickerTypeComponent } from './date-picker-type.component';\r\nimport { TextareaTypeComponent } from './textarea-type.component';\r\nimport { TabTypeComponent } from './tab-type.component';\r\nimport { TableTypeComponent } from './table-type.component';\r\nimport { InputHelpTypeComponent } from './input-help-type.component';\r\nimport { LabelTypeComponent } from './label-type.component';\r\nimport { RadioTypeComponent } from './radio-type.component';\r\nimport { SelectTypeComponent } from './select-type.component';\r\nimport { formlyFieldExtension } from './formly-field.extension';\r\nimport { ButtonTypeComponent } from './button-type.component';\r\nimport { ContainerTypeComponent } from './container-type.component';\r\nimport { InputTypeComponent } from './input-type.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormlyModule.forRoot({\r\n      extensions: [\r\n        { name: 'formly-field-extension', extension: formlyFieldExtension }\r\n      ],\r\n      types: [\r\n        { name: 'checkbox', component: CheckboxTypeComponent },\r\n        { name: 'date-picker', component: DatePickerTypeComponent },\r\n        { name: 'input', component: InputTypeComponent },\r\n        { name: 'input-help', component: InputHelpTypeComponent },\r\n        { name: 'radio', component: RadioTypeComponent },\r\n        { name: 'select', component: SelectTypeComponent },\r\n        { name: 'textarea', component: TextareaTypeComponent },\r\n        { name: 'button', component: ButtonTypeComponent },\r\n        { name: 'container', component: ContainerTypeComponent },\r\n        { name: 'formly-group', component: GroupTypeComponent },\r\n        { name: 'tab', component: TabTypeComponent },\r\n        { name: 'table', component: TableTypeComponent },\r\n        { name: 'label', component: LabelTypeComponent }\r\n      ],\r\n      // wrappers: [\r\n      //   { name: 'container', component: ContainerWrapperComponent }\r\n      // ]\r\n    }),\r\n    FormlyFieldDirective\r\n  ],\r\n  exports: [\r\n    FormlyModule\r\n  ]\r\n})\r\nexport class FormlyConfigModule { }","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormlyDemoComponent } from './formly-demo.component';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\n\r\nimport { FormlyFieldComponent } from './components/formly-field.component';\r\nimport { FormlyConfigModule } from './components/formly-config.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: FormlyDemoComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormlyDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormlyConfigModule,\r\n    FormlyFieldComponent\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    FormlyDemoService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyDemoModule { }\r\n"],"x_google_ignoreList":[2]}