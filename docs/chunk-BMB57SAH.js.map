{
  "version": 3,
  "sources": ["src/app/imask/nullable-number-mask.ts", "src/app/imask/imask.component.ts", "src/app/imask/imask.component.html"],
  "sourcesContent": ["import * as IMask from 'imask';\r\nimport { isDefined } from '@tylertech/forge-core';\r\n\r\nexport class NullableNumberMask extends IMask.MaskedNumber {\r\n  constructor(options: any) {\r\n    options.format = (value: any) => (isDefined(value) ? value.toString() : '');\r\n    super(options);\r\n  }\r\n\r\n  public override append(str: string, flags?: IMask.AppendFlags, tail?: string | string | IMask.TailDetails): IMask.ChangeDetails {\r\n    return super.append(isDefined(str) ? str.toString() : '', flags, tail);\r\n  }\r\n\r\n  public override get typedValue(): number | null {\r\n    return this.unmaskedValue !== '' ? super.typedValue : null;\r\n  }\r\n\r\n  public override set typedValue(value: number | null) {\r\n    super.typedValue = value ?? ('' as any);\r\n  }\r\n}\r\n", "// https://github.com/uNmAnNeR/imaskjs/issues/876\r\n\r\nimport { Component, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { IMaskDirective } from 'angular-imask';\r\nimport * as IMask from 'imask';\r\nimport { IOption } from '@tylertech/forge';\r\nimport { ForgeButtonModule, ForgeOptionModule, ForgeSelectModule, ForgeTextFieldModule, ForgeToolbarModule } from '@tylertech/forge-angular';\r\nimport { parse as dateParse, format as dateFormat, isValid as dateIsValid } from 'date-fns';\r\n\r\nimport { NullableNumberMask } from './nullable-number-mask';\r\n@Component({\r\n  selector: 'app-imask',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, IMaskDirective, ForgeButtonModule, ForgeOptionModule, ForgeSelectModule, ForgeTextFieldModule, ForgeToolbarModule],\r\n  templateUrl: './imask.component.html',\r\n  styleUrls: ['./imask.component.scss']\r\n})\r\nexport class ImaskComponent implements AfterViewInit {\r\n  @ViewChild('imaskRef')\r\n  public imaskRef?: IMaskDirective<any>;\r\n\r\n  public formGroup = new FormGroup({\r\n    format: new FormControl<string | null>('000-aa-****'),\r\n    input: new FormControl<string | null>(null),\r\n    maskType: new FormControl<string>('string')\r\n  });\r\n  public unmask: 'typed' | boolean = false;\r\n  public mask?: IMask.FactoryArg;\r\n  public maskOptions: IOption[] = [\r\n    { value: 'string', label: 'String' },\r\n    { value: 'number', label: 'Number' },\r\n    { value: 'number-search', label: 'Number search' },\r\n    { value: 'date', label: 'Date' },\r\n    { value: 'date-search', label: 'Date search' },\r\n    { value: 'datetime', label: 'Date time' }\r\n  ];\r\n  public helpText = '';\r\n\r\n  constructor() {\r\n    this.mask = this.buildStringMask(this.formGroup.value.format as string);\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    console.log(this.imaskRef);\r\n  }\r\n\r\n  public onApply() {\r\n    this.imaskRef?.destroyMask();\r\n    this.formGroup.controls.input.setValue(null);\r\n\r\n    requestAnimationFrame(() => {\r\n      this.helpText = '';\r\n      this.unmask = false;\r\n\r\n      switch (this.formGroup.value.maskType) {\r\n        case 'string':\r\n          this.mask = this.buildStringMask(this.formGroup.value.format as string);\r\n          break;\r\n        case 'number':\r\n          this.mask = this.buildNumberMask(this.formGroup.value.format as string);\r\n          break;\r\n        case 'number-search':\r\n          this.mask = this.buildNumberSearchMask();\r\n          break;\r\n        case 'date':\r\n          this.mask = this.buildDateMask();\r\n          break;\r\n        case 'date-search':\r\n          this.mask = this.buildDateSearchMask();\r\n          break;\r\n        case 'datetime':\r\n          this.mask = this.buildDateTimeMask();\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  private buildStringMask(format?: string): IMask.MaskedPattern | IMask.MaskedRegExp {\r\n    if (!format?.length) {\r\n      return {\r\n        mask: /./\r\n      } as IMask.MaskedRegExp;\r\n    }\r\n\r\n    const mask = format.replace(/([0a*]*)/g, (value) => {\r\n      // adds ` to prevent symbols shift back\r\n      return value.length ? `\\`${value}` : '';\r\n    });\r\n\r\n    return new IMask.MaskedPattern({\r\n      mask,\r\n      lazy: false,\r\n      placeholderChar: ' '\r\n    });\r\n  }\r\n\r\n  private buildNumberMask(format?: string): IMask.MaskedNumber {\r\n    this.unmask = 'typed';\r\n\r\n    if (!format?.length) {\r\n      return new NullableNumberMask({\r\n        mask: Number,\r\n        scale: 0,\r\n        signed: true\r\n      }) as IMask.MaskedNumber;\r\n    }\r\n\r\n    const max = parseFloat(format.replace(/[#&-]/g, '9').replace(/,/g, ''));\r\n    const min = format.includes('&') ? (format.includes('-') ? max * -1 : 0) : NaN;\r\n    return new NullableNumberMask({\r\n      mask: Number,\r\n      thousandsSeparator: format!.includes(',') ? ',' : '',\r\n      radix: '.',\r\n      padFractionalZeros: format!.includes('.') ? true : false,\r\n      scale: format!.split('.')[1]?.length || 0,\r\n      signed: format!.includes('-') ? true : false,\r\n      max: isFinite(max) ? max : undefined,\r\n      min: isFinite(min) ? min : undefined\r\n    }) as IMask.MaskedNumber;\r\n  }\r\n\r\n  private buildNumberSearchMask(): IMask.MaskedRegExp {\r\n    return {\r\n      mask: /^\\s*[!\\-.\\d:<>=|\\s+]*\\s*$/\r\n    } as IMask.MaskedRegExp;\r\n  }\r\n\r\n  private buildDateMask(): IMask.MaskedDate {\r\n    this.unmask = 'typed';\r\n    this.helpText = 'MM/dd/yyyy';\r\n\r\n    return new IMask.MaskedDate({\r\n      mask: Date,\r\n      pattern: 'MM/`dd/`yyyy',\r\n      placeholderChar: ' ',\r\n      blocks: {\r\n        MM: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1,\r\n          to: 12,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        dd: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1,\r\n          to: 31,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        yyyy: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1900,\r\n          to: 9999,\r\n          maxLength: 4\r\n        } as IMask.FactoryArg\r\n      },\r\n      autofix: false,\r\n      lazy: false,\r\n      overwrite: false,\r\n      format: (value: any): string => {\r\n        return dateIsValid(value) ? dateFormat(value, 'MM/dd/yyyy') : '';\r\n      },\r\n      parse: (value: string): Date => {\r\n        return dateParse(value, 'MM/dd/yyyy', new Date());\r\n      }\r\n    });\r\n  }\r\n\r\n  private buildDateTimeMask(): IMask.MaskedDate {\r\n    this.unmask = 'typed';\r\n    this.helpText = 'MM/dd/yyyy hh:mm:ss aa';\r\n\r\n    return new IMask.MaskedDate({\r\n      mask: Date,\r\n      pattern: 'MM/`dd/`yyyy `hh:`mm:`ss `aa',\r\n      placeholderChar: ' ',\r\n      blocks: {\r\n        MM: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1,\r\n          to: 12,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        dd: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1,\r\n          to: 31,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        yyyy: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1900,\r\n          to: 9999,\r\n          maxLength: 4\r\n        } as IMask.FactoryArg,\r\n        hh: {\r\n          mask: IMask.MaskedRange,\r\n          from: 1,\r\n          to: 12,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        mm: {\r\n          mask: IMask.MaskedRange,\r\n          from: 0,\r\n          to: 59,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        ss: {\r\n          mask: IMask.MaskedRange,\r\n          from: 0,\r\n          to: 59,\r\n          maxLength: 2\r\n        } as IMask.FactoryArg,\r\n        aa: {\r\n          mask: IMask.MaskedEnum,\r\n          enum: ['am', 'pm']\r\n        } as IMask.FactoryArg\r\n      },\r\n      autofix: false,\r\n      lazy: false,\r\n      overwrite: false,\r\n      format: (value: any): string => {\r\n        return dateIsValid(value) ? dateFormat(value, 'MM/dd/yyyy hh:mm:ss aaa') : '';\r\n      },\r\n      parse: (value: string): Date => {\r\n        return dateParse(value, 'MM/dd/yyyy hh:mm:ss aaa', new Date());\r\n      }\r\n    });\r\n  }\r\n\r\n  private buildDateSearchMask(): IMask.MaskedRegExp {\r\n    return {\r\n      mask: /^\\s*[!\\-.\\d:<>=|\\s/]*\\s*$/\r\n    } as IMask.MaskedRegExp;\r\n  }\r\n}\r\n", "<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--subheading4\">IMask</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n  <form novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <forge-text-field>\r\n      <input #input id=\"imask--input\" type=\"text\" [imask]=\"mask\" [unmask]=\"unmask\" #imaskRef=\"imask\" formControlName=\"input\" />\r\n      <label for=\"imask--input\" slot=\"label\">Input</label>\r\n      <span slot=\"support-text\">{{ helpText }}</span>\r\n    </forge-text-field>\r\n    <div style=\"width: 600px\">\r\n      <div><b>string mask</b>: (0) any digit, (a) any letter, (*) any char</div>\r\n      <div><b>number mask</b>: (#) required digit, (&) optional digit, (-) sign, (.) decimal, (,) separator</div>\r\n    </div>\r\n    <forge-text-field>\r\n      <input #input id=\"imask--format\" type=\"text\" formControlName=\"format\" />\r\n      <label for=\"imask--format\" slot=\"label\">Format</label>\r\n    </forge-text-field>\r\n    <forge-select formControlName=\"maskType\" label=\"Mask type\">\r\n      @for (option of maskOptions; track i; let i = $index) {\r\n        <forge-option [value]=\"option.value\">{{ option.label }}</forge-option>\r\n      }\r\n    </forge-select>\r\n    <forge-button variant=\"raised\" (click)=\"onApply()\">Apply mask</forge-button>\r\n  </form>\r\n  <p>{{ formGroup.getRawValue() | json }}</p>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["NullableNumberMask", "MaskedNumber", "constructor", "options", "format", "value", "isDefined", "toString", "append", "str", "flags", "tail", "typedValue", "unmaskedValue", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "option_r2", "value", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "label", "ImaskComponent", "constructor", "formGroup", "FormGroup", "format", "FormControl", "input", "maskType", "unmask", "maskOptions", "helpText", "mask", "buildStringMask", "ngAfterViewInit", "console", "log", "imaskRef", "onApply", "destroyMask", "controls", "setValue", "requestAnimationFrame", "buildNumberMask", "buildNumberSearchMask", "buildDateMask", "buildDateSearchMask", "buildDateTimeMask", "length", "replace", "MaskedPattern", "lazy", "placeholderChar", "NullableNumberMask", "Number", "scale", "signed", "max", "parseFloat", "min", "includes", "NaN", "thousandsSeparator", "radix", "padFractionalZeros", "split", "isFinite", "undefined", "MaskedDate", "Date", "pattern", "blocks", "MM", "MaskedRange", "from", "to", "maxLength", "dd", "yyyy", "autofix", "overwrite", "dateIsValid", "dateFormat", "parse", "dateParse", "hh", "mm", "ss", "aa", "MaskedEnum", "enum", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275repeaterCreate", "ImaskComponent_For_29_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "getRawValue", "CommonModule", "JsonPipe", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "IMaskDirective", "ForgeButtonModule", "ButtonComponent", "ForgeOptionModule", "OptionComponent", "ForgeSelectModule", "SelectValueAccessor", "SelectComponent", "ForgeTextFieldModule", "TextFieldComponent", "ForgeToolbarModule", "ToolbarComponent", "styles"]
}
