{"version":3,"file":"120.b942de59cc93d08e.js","mappings":"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","names":["ExamplesComponent","constructor","static","this","t","core","Xpm","selectors","decls","vars","template","rf","ctx","i0","ExamplesService","mockData","index","push","id","code","Utils","formatNumber","description","getSingleSelectOptions","filterText","value","take","Observable","o","setTimeout","records","length","filter","d","toLocaleLowerCase","includes","slice","toString","next","complete","getMutlipleSelectOptions","values","Set","map","v","Yz7","factory","ɵfac","providedIn","AutocompleteComponent","moduleService","formGroup","FormGroup","autocomplete01","FormControl","autocomplete02","label","autocomplete03","autocomplete04","autocomplete05","autocomplete06","autocomplete07","optionBuilder","option","parentElement","titleSpan","document","createElement","setAttribute","innerText","appendChild","subTitleSpan","selectedTextBuilder","options","singleSelectPrimitiveFilter","lastValueFrom","undefined","pipe","result","singleSelectObjectFilter","multipleSelectFilter","onAutocompleteChange","event","detail","onDisable","control","get","disabled","enable","disable","i1","consts","$event","getRawValue","item_r6","item_r7","DragDropComponent","items01","items02","onDrop","previousContainer","container","moveItemInArray","data","previousIndex","currentIndex","transferArrayItem","DragDropComponent_forge_list_item_6_Template","DragDropComponent_forge_list_item_7_Template","DragDropComponent_forge_list_item_13_Template","DragDropComponent_forge_list_item_14_Template","_c0","_r3","_r0","option_r1","SelectComponent","objectOptions","select01","select02","select03","select04","select05","select06","select07","onSelectChange","SelectComponent_forge_option_2_Template","ChildComponent","nameChange","EventEmitter","onNameChange","emit","name","inputs","outputs","BindingComponent","ArrayFindPipe","transform","source","filterProperty","returnProperty","sourceValue","find","isDeepEqual","Yjl","pure","standalone","variable_r2","routes","path","component","children","MiscComponent","MiscComponent_ng_template_12_Template","_c1","redirectTo","pathMatch","ExamplesModule","oAB","cJS","CommonModule","RouterModule","forChild","DragDropModule","AppFormsModule","CardComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FormsModule","ReactiveFormsModule","ForgeModule"],"sourceRoot":"webpack:///","sources":["./src/app/examples/examples.component.ts","./src/app/examples/examples.component.html","./src/app/examples/examples.service.ts","./src/app/examples/autocomplete/autocomplete.component.ts","./src/app/examples/autocomplete/autocomplete.component.html","./src/app/examples/drag-drop/drag-drop.component.html","./src/app/examples/drag-drop/drag-drop.component.ts","./src/app/examples/select/select.component.html","./src/app/examples/select/select.component.ts","./src/app/examples/binding/child/child.component.ts","./src/app/examples/binding/child/child.component.html","./src/app/examples/binding/binding.component.ts","./src/app/examples/binding/binding.component.html","./src/app/shared/pipes/array-find.pipe.ts","./src/app/examples/misc/misc.component.html","./src/app/examples/examples.module.ts","./src/app/examples/misc/misc.component.ts","./src/app/shared/app-forms.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-examples',\r\n  templateUrl: './examples.component.html',\r\n  styleUrls: ['./examples.component.scss']\r\n})\r\nexport class ExamplesComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Utils } from 'src/utils';\r\n\r\nexport interface IRecord {\r\n  id: number;\r\n  code: string;\r\n  description: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExamplesService {\r\n  public mockData: IRecord[] = [];\r\n\r\n  constructor() {\r\n    for (let index = 0; index < 300; index++) {\r\n      this.mockData.push({ id: index, code: Utils.formatNumber(index, '3.0'), description: `Item ${Utils.formatNumber(index, '3.0')}` });\r\n    }\r\n  }\r\n\r\n  public getSingleSelectOptions(filterText?: string, value?: string | number | null, take = 100): Observable<IRecord[]> {\r\n    // NOTES\r\n    // if there is filter text, query records with case insensitive include - sort, take\r\n    // if there is a value, query records for value match, return single result as []\r\n    // if there is no value or filter text query top - sort, take\r\n    return new Observable((o) => {\r\n      setTimeout(() => {\r\n        let records = [];\r\n        if (filterText?.length) {\r\n          records = this.mockData.filter(d => d.description.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).slice(0, take);\r\n        } else if (value) {\r\n          records = this.mockData.filter(d => d.id.toString() === value.toString());\r\n        } else {\r\n          records = this.mockData.slice(0, take);\r\n        }\r\n        o.next(records);\r\n        o.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  public getMutlipleSelectOptions(filterText?: string, values?: string[] | number[] | null, take = 100): Observable<IRecord[]> {\r\n    // NOTES\r\n    // if there is filter text, query records with case insensitive include - sort, take\r\n    // if there are values and no filter text, query records for values and top - sort by selected, take\r\n    // if there are no values or filter text query top - sort, take\r\n    return new Observable((o) => {\r\n      setTimeout(() => {\r\n        let records = [];\r\n        if (filterText?.length) {\r\n          records = this.mockData.filter(d => d.description.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).slice(0, take);\r\n        } else {\r\n          if (values?.length) {\r\n            records = [...new Set([...this.mockData.filter(d => values.map(v => v.toString()).includes(d.id.toString())), ...this.mockData.slice(0, take)])];\r\n          } else {\r\n            records = this.mockData.slice(0, take);\r\n          }\r\n        }\r\n\r\n        o.next(records);\r\n        o.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AutocompleteFilterCallback, AutocompleteOptionBuilder, AutocompleteSelectedTextBuilder, IOption } from '@tylertech/forge';\r\n\r\nimport { ExamplesService, IRecord } from '../examples.service';\r\n\r\n@Component({\r\n  selector: 'app-examples-autocomplete',\r\n  templateUrl: './autocomplete.component.html',\r\n  styleUrls: ['./autocomplete.component.scss']\r\n})\r\nexport class AutocompleteComponent {\r\n  public formGroup = new FormGroup({\r\n    autocomplete01: new FormControl(1),\r\n    autocomplete02: new FormControl({ value: { id: 2, code: '002', description: 'Item 002' }, label: 'Item 002' }),\r\n    autocomplete03: new FormControl([3, 4, 5]),\r\n    autocomplete04: new FormControl(),\r\n    autocomplete05: new FormControl()\r\n  });\r\n  public autocomplete06 = 6;\r\n  public autocomplete07 = 7;\r\n\r\n  public optionBuilder: AutocompleteOptionBuilder = (option: IOption, filterText: string, parentElement: HTMLElement) => {\r\n    const titleSpan = document.createElement('span');\r\n    titleSpan.setAttribute('slot', 'title');\r\n    titleSpan.innerText = option.value.description;\r\n    parentElement.appendChild(titleSpan);\r\n\r\n    const subTitleSpan = document.createElement('span');\r\n    subTitleSpan.setAttribute('slot', 'subtitle');\r\n    subTitleSpan.innerText = option.value.code;\r\n    parentElement.appendChild(subTitleSpan);\r\n\r\n    return undefined as unknown as HTMLElement;\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (options: IOption[]): string => {\r\n    return options[0] ? `${options[0].value} - ${options[0]?.label}` : '';\r\n  };\r\n\r\n  public singleSelectPrimitiveFilter: AutocompleteFilterCallback = (filterText: string, value: string) => {\r\n    if (value) {\r\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(undefined, value).pipe(map(result => result.map(d => ({ value: d.id, label: d.description })))));\r\n    } else {\r\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(filterText).pipe(map(result => result.map(d => ({ value: d.id, label: d.description })))));\r\n    }\r\n  };\r\n\r\n  public singleSelectObjectFilter: AutocompleteFilterCallback = (filterText: string, value: IOption) => {\r\n    if (value) {\r\n      return [{ label: value.label, value }];\r\n    } else {\r\n      return lastValueFrom(this.moduleService.getSingleSelectOptions(filterText).pipe(map(result => result.map(d => ({ label: d.description, value: d })))));\r\n    }\r\n  };\r\n\r\n  public multipleSelectFilter: AutocompleteFilterCallback = (filterText: string, value: string) => {\r\n    if (value) {\r\n      return [];\r\n    } else {\r\n      return lastValueFrom(this.moduleService.getMutlipleSelectOptions(filterText, this.formGroup.value.autocomplete03).pipe(map(result => result.map((d: IRecord) => ({ value: d.id, label: d.description })) as IOption[])));\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    public moduleService: ExamplesService\r\n  ) { }\r\n\r\n  public onAutocompleteChange(event: CustomEvent) {\r\n    this.autocomplete07 = event.detail;\r\n  }\r\n\r\n  public onDisable() {\r\n    const control = this.formGroup.get('autocomplete01');\r\n    if (control.disabled) {\r\n      control.enable();\r\n    } else {\r\n      control.disable();\r\n    }\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" class=\"form-grid\">\r\n  <div>\r\n    <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" formControlName=\"autocomplete01\">\r\n      <forge-text-field>\r\n        <input id=\"autocomplete01\" type=\"text\" [disabled]=\"formGroup.get('autocomplete01').disabled\" />\r\n        <label for=\"autocomplete01\">Autocomplete01 - single primitive</label>\r\n        <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n      </forge-text-field>\r\n    </forge-autocomplete>\r\n    <forge-button>\r\n      <button type=\"button\" (click)=\"onDisable()\">Disable</button>\r\n    </forge-button>\r\n  </div>\r\n\r\n\r\n  <forge-autocomplete [filter]=\"singleSelectObjectFilter\" formControlName=\"autocomplete02\">\r\n    <forge-text-field>\r\n      <input id=\"autocomplete01\" type=\"text\" />\r\n      <label for=\"autocomplete01\">Autocomplete02 - single object</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <forge-autocomplete [filter]=\"multipleSelectFilter\" formControlName=\"autocomplete03\" multiple>\r\n    <forge-text-field>\r\n      <input id=\"autocomplete01\" type=\"text\" />\r\n      <label for=\"autocomplete01\">Autocomplete03 - multiple select</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <forge-autocomplete [filter]=\"singleSelectObjectFilter\" formControlName=\"autocomplete04\" [optionBuilder]=\"optionBuilder\">\r\n    <forge-text-field>\r\n      <input id=\"autocomplete04\" type=\"text\" />\r\n      <label for=\"autocomplete04\">Autocomplete04 - option builder</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" formControlName=\"autocomplete05\" [selectedTextBuilder]=\"selectedTextBuilder\">\r\n    <forge-text-field>\r\n      <input id=\"autocomplete05\" type=\"text\" />\r\n      <label for=\"autocomplete05\">Autocomplete05 - selected text builder</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <p class=\"form-grid--col-span\">{{formGroup.getRawValue() | json}}</p>\r\n</form>\r\n\r\n<forge-divider></forge-divider>\r\n\r\n<div class=\"form-grid\">\r\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" [(ngModel)]=\"autocomplete06\">\r\n    <forge-text-field>\r\n      <input id=\"autocomplete06\" type=\"text\" />\r\n      <label for=\"autocomplete06\">Autocomplete06 - ngModel binding</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n      <span slot=\"helper-text\">selected value: {{autocomplete06}}</span>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n\r\n  <forge-autocomplete [filter]=\"singleSelectPrimitiveFilter\" [value]=\"autocomplete07\" (forge-autocomplete-change)=\"onAutocompleteChange($event)\">\r\n    <forge-text-field>\r\n      <input id=\"autocomplete07\" type=\"text\" />\r\n      <label for=\"autocomplete07\">Autocomplete07 - value binding</label>\r\n      <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n      <span slot=\"helper-text\">selected value: {{autocomplete07}}</span>\r\n    </forge-text-field>\r\n  </forge-autocomplete>\r\n</div>","<div class=\"card-container\" cdkDropListGroup>\r\n  <div class=\"card\">\r\n    <div class=\"title\">List 1</div>\r\n\r\n    <forge-list cdkDropList #item01List=\"cdkDropList\" [cdkDropListData]=\"items01\" [cdkDropListConnectedTo]=\"[item02List]\" (cdkDropListDropped)=\"onDrop($event)\">\r\n      <forge-list-item *ngFor=\"let item of items01\" cdkDrag>\r\n        <span class=\"cdk-drag__content\">{{ item }}</span>\r\n      </forge-list-item>\r\n      <forge-list-item class=\"cdk-drag-placeholder\" *cdkDragPlaceholder></forge-list-item>\r\n    </forge-list>\r\n\r\n  </div>\r\n\r\n  <div class=\"card\">\r\n    <div class=\"title\">List 2</div>\r\n\r\n    <forge-list cdkDropList #item02List=\"cdkDropList\" [cdkDropListData]=\"items02\" [cdkDropListConnectedTo]=\"[item01List]\" (cdkDropListDropped)=\"onDrop($event)\">\r\n      <forge-list-item *ngFor=\"let item of items02\" cdkDrag>\r\n        <span class=\"cdk-drag__content\">{{ item }}</span>\r\n      </forge-list-item>\r\n      <forge-list-item class=\"cdk-drag-placeholder\" *cdkDragPlaceholder></forge-list-item>\r\n    </forge-list>\r\n\r\n  </div>\r\n</div>","import { Component } from '@angular/core';\r\n\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-examples-drag-drop',\r\n  templateUrl: './drag-drop.component.html',\r\n  styleUrls: ['./drag-drop.component.scss']\r\n})\r\nexport class DragDropComponent {\r\n  public items01 = [\r\n    'List 1 - item 01',\r\n    'List 1 - item 02',\r\n    'List 1 - item 03',\r\n    'List 1 - item 04'\r\n  ];\r\n  public items02 = [\r\n    'List 2 - item 01',\r\n    'List 2 - item 02',\r\n    'List 2 - item 03',\r\n    'List 2 - item 04'\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  public onDrop(event: CdkDragDrop<string[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(\r\n        event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex,\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\" class=\"form-grid\">\r\n  <forge-select formControlName=\"select01\" label=\"Select01 - single primitive\">\r\n    <forge-option *ngFor=\"let option of options\" [value]=\"option.value\">{{option.label}}</forge-option>\r\n  </forge-select>\r\n\r\n  <forge-select label=\"Select02 - single object\" [options]=\"objectOptions\" formControlName=\"select02\"></forge-select>\r\n\r\n  <forge-select label=\"Select03 - multiple select\" [options]=\"options\" multiple formControlName=\"select03\"></forge-select>\r\n\r\n  <forge-select label=\"Select04 - option builder\" [options]=\"objectOptions\" formControlName=\"select04\" [optionBuilder]=\"optionBuilder\"></forge-select>\r\n\r\n  <forge-select label=\"Select05 - selected text builder\" [options]=\"options\" formControlName=\"select05\" [selectedTextBuilder]=\"selectedTextBuilder\"></forge-select>\r\n\r\n  <p class=\"form-grid--col-span\">{{formGroup.getRawValue() | json}}</p>\r\n</form>\r\n\r\n<forge-divider></forge-divider>\r\n\r\n<div class=\"form-grid\">\r\n  <forge-select label=\"Select06 - ngModel binding\" [options]=\"options\" [(ngModel)]=\"select06\">\r\n    <span slot=\"helper-text\">selected value: {{select06}}</span>\r\n  </forge-select>\r\n  <forge-select label=\"Select07 - value binding\" [options]=\"options\" [value]=\"select07\" (change)=\"onSelectChange($event)\">\r\n    <span slot=\"helper-text\">selected value: {{select07}}</span>\r\n  </forge-select>\r\n</div>","import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { IOption, SelectOptionBuilder, SelectSelectedTextBuilder } from '@tylertech/forge';\r\nimport { ExamplesService } from '../examples.service';\r\n\r\n@Component({\r\n  selector: 'app-examples-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\nexport class SelectComponent {\r\n  public options = this.moduleService.mockData.slice(0, 20).map(d => ({ value: d.id, label: d.description }));\r\n  public objectOptions = this.moduleService.mockData.slice(0, 20).map(d => ({ value: d, label: d.description }));\r\n  public formGroup = new FormGroup({\r\n    select01: new FormControl(1),\r\n    select02: new FormControl(this.objectOptions[2].value),\r\n    // select02: new FormControl({ id: 2, code: '002', description: 'Item 002' }),\r\n    select03: new FormControl([3, 4, 5]),\r\n    select04: new FormControl(),\r\n    select05: new FormControl()\r\n  });\r\n  public select06 = 6;\r\n  public select07 = 7;\r\n\r\n  public optionBuilder: SelectOptionBuilder = (option: IOption, parentElement: HTMLElement) => {\r\n    const titleSpan = document.createElement('span');\r\n    titleSpan.setAttribute('slot', 'title');\r\n    titleSpan.innerText = option.value.description;\r\n    parentElement.appendChild(titleSpan);\r\n\r\n    const subTitleSpan = document.createElement('span');\r\n    subTitleSpan.setAttribute('slot', 'subtitle');\r\n    subTitleSpan.innerText = option.value.code;\r\n    parentElement.appendChild(subTitleSpan);\r\n\r\n    return undefined as unknown as HTMLElement;\r\n  };\r\n\r\n  public selectedTextBuilder: SelectSelectedTextBuilder = (options: IOption[]): string => {\r\n    return options[0] ? `${options[0].value} - ${options[0]?.label}` : '';\r\n  };\r\n\r\n  constructor(\r\n    public moduleService: ExamplesService\r\n  ) { }\r\n\r\n  public onSelectChange(event: CustomEvent) {\r\n    this.select07 = event.detail;\r\n  }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-examples-binding-child',\r\n  templateUrl: './child.component.html',\r\n  styleUrls: ['./child.component.scss']\r\n})\r\nexport class ChildComponent {\r\n  @Input()\r\n  public name?: string;\r\n\r\n  // must be named the same as the input property with 'Change' suffix\r\n  @Output()\r\n  public nameChange = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  public onNameChange() {\r\n    this.nameChange.emit(this.name);\r\n  }\r\n}\r\n","<forge-text-field>\r\n  <input type=\"text\" id=\"examples--binding--child--name\" [(ngModel)]=\"name\" (input)=\"onNameChange()\" />\r\n  <label for=\"examples--binding--child--name\" slot=\"label\">Child component</label>\r\n</forge-text-field>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-examples-binding',\r\n  templateUrl: './binding.component.html',\r\n  styleUrls: ['./binding.component.scss']\r\n})\r\nexport class BindingComponent {\r\n\r\n  public name = 'two way binding example';\r\n\r\n  constructor() { }\r\n\r\n}\r\n","<div class=\"two-way-binding\">\r\n  <forge-text-field>\r\n    <input type=\"text\" id=\"examples--binding--name\" [(ngModel)]=\"name\" />\r\n    <label for=\"examples--binding--name\" slot=\"label\">Parent component</label>\r\n  </forge-text-field>\r\n  <app-examples-binding-child [(name)]=\"name\"></app-examples-binding-child>\r\n</div>","\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { isDeepEqual } from '@tylertech/forge-core';\r\n\r\n@Pipe({\r\n  name: 'appArrayFind',\r\n  standalone: true\r\n})\r\nexport class ArrayFindPipe implements PipeTransform {\r\n  transform(value: string | number, source: any[], filterProperty: string, returnProperty = null) {\r\n    if (!value?.toString().length || !source.length || !filterProperty.length) {\r\n      return;\r\n    }\r\n    const sourceValue = source.find(o => isDeepEqual(o[filterProperty], value));\r\n    if (!sourceValue) {\r\n      return;\r\n    }\r\n\r\n    return returnProperty ? sourceValue[returnProperty] : sourceValue;\r\n  }\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <h2 slot=\"start\" class=\"forge-typography--title\">Misc examples</h2>\r\n</forge-toolbar>\r\n\r\n<div class=\"body\">\r\n\r\n  <app-card border=\"outlined\">\r\n    <div app-card-header slot=\"start\">\r\n      <span>Card header</span>\r\n    </div>\r\n    <div app-card-header slot=\"end\">\r\n      <forge-icon-button>\r\n        <button type=\"button\">\r\n          <forge-icon name=\"close\"></forge-icon>\r\n        </button>\r\n      </forge-icon-button>\r\n    </div>\r\n\r\n    <ng-template #variableTemplate [ngTemplateOutlet]=\"variableTemplate\" [ngTemplateOutletContext]=\"{ $implicit: { cats: 1, dogs: 2 } }\" let-variable>\r\n      <p>{{variable | json}}</p>\r\n    </ng-template>\r\n\r\n    <div>{{0 | appArrayFind:data:'value':'label'}}</div>\r\n    <div>{{1 | appArrayFind:data:'value' | json}}</div>\r\n\r\n    <div app-card-footer slot=\"end\">\r\n      <forge-button type=\"outlined\">\r\n        <button type=\"button\">Cancel</button>\r\n      </forge-button>\r\n      <forge-button type=\"raised\">\r\n        <button type=\"button\">Save</button>\r\n      </forge-button>\r\n    </div>\r\n  </app-card>\r\n\r\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { CardComponent } from 'src/app/shared/components/card/card.component';\r\nimport { ArrayFindPipe } from 'src/app/shared/pipes/array-find.pipe';\r\nimport { ExamplesComponent } from './examples.component';\r\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component';\r\nimport { DragDropComponent } from './drag-drop/drag-drop.component';\r\nimport { SelectComponent } from './select/select.component';\r\nimport { BindingComponent } from './binding/binding.component';\r\nimport { ChildComponent } from './binding/child/child.component';\r\nimport { MiscComponent } from './misc/misc.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: ExamplesComponent,\r\n    children: [\r\n      { path: 'autocomplete', component: AutocompleteComponent },\r\n      { path: 'drag-drop', component: DragDropComponent },\r\n      { path: 'select', component: SelectComponent },\r\n      { path: 'binding', component: BindingComponent },\r\n      { path: 'misc', component: MiscComponent },\r\n      { path: '', redirectTo: 'autocomplete', pathMatch: 'full' }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ExamplesComponent,\r\n    AutocompleteComponent,\r\n    DragDropComponent,\r\n    SelectComponent,\r\n    BindingComponent,\r\n    ChildComponent,\r\n    MiscComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    DragDropModule,\r\n    AppFormsModule,\r\n    CardComponent,\r\n    ArrayFindPipe\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ExamplesModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-examples-misc',\r\n  templateUrl: './misc.component.html',\r\n  styleUrls: ['./misc.component.scss']\r\n})\r\nexport class MiscComponent {\r\n  public data = [\r\n    { value: 0, label: 'Item 0' },\r\n    { value: 1, label: 'Item 1' },\r\n    { value: 2, label: 'Item 2' },\r\n    { value: 3, label: 'Item 3' },\r\n    { value: 4, label: 'Item 4' },\r\n    { value: 5, label: 'Item 5' },\r\n    { value: 6, label: 'Item 6' },\r\n    { value: 7, label: 'Item 7' },\r\n    { value: 8, label: 'Item 8' },\r\n    { value: 9, label: 'Item 9' }\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }"],"x_google_ignoreList":[]}