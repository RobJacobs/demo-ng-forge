{"version":3,"file":"639.3bffa95716a979d9.js","mappings":"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","names":["CardComponent","constructor","this","border","raisedClass","outlinedClass","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","hostVars","hostBindings","rf","ctx","i0","CommonModule","ForgeToolbarModule","i1","styles","Utils","sortData","data","key","type","direction","length","slice","sort","a","b","getPropertyValue","comparator","groupData","property","isArray","reduce","previousValue","currentValue","push","filterData","filters","map","f","isString","value","operator","substring","Object","defineProperty","toLowerCase","filter","rec","every","strict","indexOf","isDefined","Date","getTime","isNaN","parseFloat","localeCompare","navigator","language","sensitivity","numeric","navigateBack","location","router","fallbackRoute","getState","navigationId","navigate","back","elementId","prefix","Math","random","toString","replace","formatDate","format","formatNumber","uniqueId","parseQueryStringParameters","params","queryIndex","window","href","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","reduceObject","object","reduced","trim","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","merge","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","mergeAll","from","EMPTY","timer","dueTime","intervalOrScheduler","asyncScheduler","intervalDuration","isScheduler","due","isValidDate","now","n","schedule","closed","complete","debounceTime","operate","source","activeTask","lastValue","lastTime","emit","unsubscribe","emitWhenIdle","targetTime","subscribe","createOperatorSubscriber","distinctUntilChanged","keySelector","identity","defaultCompare","previousKey","first","currentKey","ReplaySubject","Subject","_bufferSize","_windowTime","_timestampProvider","dateTimestampProvider","super","_buffer","_infiniteTimeWindow","max","isStopped","_trimBuffer","_subscribe","_throwIfClosed","subscription","_innerSubscribe","copy","i","_checkFinalizedStatuses","adjustedBufferSize","splice","last","handleReset","reset","onSubscriber","SafeSubscriber","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","error","err","Action","Subscription","work","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","AsyncAction","pending","_a","id","recycleAsyncId","requestAsyncId","_id","flush","bind","_scheduler","execute","Error","_execute","_delay","errorValue","errored","e","actions","arrRemove","Scheduler","schedulerActionCtor","AsyncScheduler","SchedulerAction","_active","action","shift","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","timestamp","animationFrameScheduler","AnimationFrameScheduler","flushId","_scheduled","AnimationFrameAction","async","DIR_DOCUMENT","InjectionToken","providedIn","factory","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","Directionality","_document","change","EventEmitter","_resolveDirectionality","rawValue","test","body","dir","documentElement","ngOnDestroy","ɵfac","ɵprov","token","BidiModule","ɵmod","ɵinj","coerceNumberProperty","fallbackValue","_isNumberValue","Number","coerceArray","Array","coerceElement","elementOrRef","ElementRef","nativeElement","extendStyles","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","width","height","getTransform","x","y","round","getMutableClientRect","rect","getBoundingClientRect","right","bottom","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","handleScroll","event","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","name","context","getContext","drawImage","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","parseCssTimeUnitsToMs","multiplier","parseCssPropertyValue","computedStyle","split","part","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_preview","_createPreview","showPopover","destroy","_previewEmbeddedView","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","find","prop","propertyIndex","rawDurations","rawDelays","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","disableHandle","enableHandle","delete","withDirection","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_getShadowRoot","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","isFakeMousedownFromScreenReader","buttons","detail","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","connectedTo","withOrientation","_scrollableElements","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","activeApps","_ResetsLoader","ɵcmp","hostAttrs","standalone","features","decls","vars","encapsulation","changeDetection","DragDropRegistry","_appRef","ApplicationRef","_environmentInjector","EnvironmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","startsWith","config","_clearGlobalListeners","streams","observer","eventOptions","instance","componentRef","createComponent","environmentInjector","onDestroy","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","_addHandle","_removeHandle","ɵdir","inputs","HasDecoratorInputTransform","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","BehaviorSubject","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","ref","templateRef","startEvent","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","startWith","handleInstance","dragRef","i1$1","None","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","_drag","optional","DragDropModule","providers","imports","CdkScrollableModule","hasV8BreakIterator","Intl","v8BreakIterator","supportsPassiveEvents","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","supportsPassiveEventListeners","RtlScrollAxisType","NORMAL","NEGATED","INVERTED","rtlScrollAxisType","scrollBehaviorSupported","shadowDomIsSupported","supportsScrollBehavior","Element","scrollToFunction","prototype","scrollTo","getRtlScrollAxisType","scrollContainer","containerStyle","overflow","visibility","content","contentStyle","_supportsShadowDom","head","createShadowRoot","attachShadow","rootNode","ShadowRoot","composedPath","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","clearImmediate","immediateProvider","asapScheduler","AsapScheduler","AsapAction","auditTime","audit","durationSelector","hasValue","durationSubscriber","isComplete","endDuration","cleanupDuration","DataSource","ArrayDataSource","_data","connect","isObservable","of","disconnect","_ViewRepeaterOperation","REPLACED","INSERTED","MOVED","REMOVED","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","view","operation","_insertView","viewArgsFactory","_detachAndCacheView","_moveView","detach","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","move","pop","insert","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","useFactory","deps","forwardRef","ScrollDispatcher","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","register","elementScrolled","deregister","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","_","ancestorScrolled","elementOrElementRef","ancestors","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","scrollableElement","CdkScrollable","elementRef","scrollDispatcher","ngZone","_elementScrolled","ngOnInit","el","isRtl","_applyScrollToOptions","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","viewportRuler","_detachedSubject","_renderedRangeSubject","appendOnly","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","axis","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","runAfterChangeDetection","fn","viewQuery","_t","virtualScrollable","Optional","Inject","ngContentSelectors","consts","getOffset","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ConnectableObservable","_dataSourceChanges","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","_differs","viewChange","pairwise","prev","hasPrev","cur","_changeDataSource","_differ","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","create","oldDs","newDs","count","_updateComputedContextProperties","_adjustedPreviousIndex","_getEmbeddedViewArgs","forEachIdentityChange","even","odd","useClass","ScrollingModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/card/card.component.ts","./src/app/shared/components/card/card.component.html","./src/utils.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/cdk/fesm2022/bidi.mjs","./node_modules/@angular/cdk/fesm2022/coercion.mjs","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/@angular/cdk/fesm2022/a11y.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/platform.mjs","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, HostBinding, Input } from '@angular/core';\r\nimport { ForgeToolbarModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ForgeToolbarModule\r\n  ]\r\n})\r\nexport class CardComponent {\r\n  @HostBinding('class.app-card--raised')\r\n  public get raisedClass() { return this.border === 'raised'; }\r\n  @HostBinding('class.app-card--outlined')\r\n  public get outlinedClass() { return this.border === 'outlined'; }\r\n\r\n  @Input()\r\n  public border: 'raised' | 'outlined' = 'raised';\r\n}\r\n","<forge-toolbar class=\"header\">\r\n  <ng-content select=\"[app-card-header]\"></ng-content>\r\n</forge-toolbar>\r\n<div class=\"body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<forge-toolbar class=\"footer\" inverted=\"true\">\r\n  <ng-content select=\"[app-card-footer]\"></ng-content>\r\n</forge-toolbar>\r\n","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { sensitivity: 'base' });\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]) {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({ fromString: window.location.href.substring(queryIndex) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = rawValue?.toLowerCase() || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DIR_DOCUMENT]\n                }] }] });\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: Dir, isStandalone: true, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                    standalone: true,\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\nclass BidiModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, imports: [Dir], exports: [Dir] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Dir],\n                    exports: [Dir],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if ('showPopover' in this._preview) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._sortStrategy.direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, isSignal, effect, booleanAttribute, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, PAGE_DOWN, PAGE_UP, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    id = id.trim();\n    if (ids.some(existingId => existingId.trim() === id)) {\n        return;\n    }\n    ids.push(id);\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    id = id.trim();\n    const filteredIds = ids.filter(val => val !== id);\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    const attrValue = el.getAttribute(attr);\n    return attrValue?.match(/\\S+/g) ?? [];\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        /** Map of all registered message elements that have been placed into the document. */\n        this._messageRegistry = new Map();\n        /** Container for all registered messages. */\n        this._messagesContainer = null;\n        /** Unique ID for the service. */\n        this._id = `${nextId++}`;\n        this._document = _document;\n        this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message, this._id);\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!this._messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = this._messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (this._messagesContainer?.childNodes.length === 0) {\n            this._messagesContainer.remove();\n            this._messagesContainer = null;\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        this._messagesContainer?.remove();\n        this._messagesContainer = null;\n        this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement, this._id);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        this._messagesContainer.appendChild(messageElement);\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        this._messageRegistry.get(key)?.messageElement?.remove();\n        this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (this._messagesContainer) {\n            return;\n        }\n        const containerClassName = 'cdk-describedby-message-container';\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n        for (let i = 0; i < serverContainers.length; i++) {\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            serverContainers[i].remove();\n        }\n        const messagesContainer = this._document.createElement('div');\n        // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n        messagesContainer.style.visibility = 'hidden';\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n        messagesContainer.classList.add(containerClassName);\n        messagesContainer.classList.add('cdk-visually-hidden');\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\n        if (this._platform && !this._platform.isBrowser) {\n            messagesContainer.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(messagesContainer);\n        this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = this._messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AriaDescriber, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AriaDescriber, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.Platform }] });\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n    }\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items, injector) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        this._pageUpAndDown = { enabled: false, delta: 10 };\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            this._itemChangesSubscription = _items.changes.subscribe((newItems) => this._itemsChanged(newItems.toArray()));\n        }\n        else if (isSignal(_items)) {\n            if (!injector && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('ListKeyManager constructed with a signal must receive an injector');\n            }\n            this._effectRef = effect(() => this._itemsChanged(_items()), { injector });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const items = this._getItemsArray();\n            if (items.length > 0 && items.some(item => typeof item.getLabel !== 'function')) {\n                throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n            }\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\n            .subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /** Cancels the current typeahead sequence. */\n    cancelTypeahead() {\n        this._pressedLetters = [];\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n     * respectively when the Page-Up or Page-Down key is pressed.\n     * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n     * @param delta Whether pressing the Home or End key activates the first/last item.\n     */\n    withPageUpDown(enabled = true, delta = 10) {\n        this._pageUpAndDown = { enabled, delta };\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_UP:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n                    this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            case PAGE_DOWN:\n                if (this._pageUpAndDown.enabled && isModifierAllowed) {\n                    const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n                    const itemsLength = this._getItemsArray().length;\n                    this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._getItemsArray().length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /** Cleans up the key manager. */\n    destroy() {\n        this._typeaheadSubscription.unsubscribe();\n        this._itemChangesSubscription?.unsubscribe();\n        this._effectRef?.destroy();\n        this._letterKeyStream.complete();\n        this.tabOut.complete();\n        this.change.complete();\n        this._pressedLetters = [];\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        if (isSignal(this._items)) {\n            return this._items();\n        }\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n    /** Callback for when the items have changed. */\n    _itemsChanged(newItems) {\n        if (this._activeItem) {\n            const newIndex = newItems.indexOf(this._activeItem);\n            if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                this._activeItemIndex = newIndex;\n            }\n        }\n    }\n}\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return (isPotentiallyFocusable(element) &&\n            !this.isDisabled(element) &&\n            (config?.ignoreVisibility || this.isVisible(element)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }] });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth ||\n        element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return (nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea');\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return (inputType === 'text' ||\n        inputType === 'password' ||\n        nodeName === 'select' ||\n        nodeName === 'textarea');\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return (isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element));\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n */\nclass FocusTrap {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            startAnchor.remove();\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            endAnchor.remove();\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            for (let i = 0; i < markers.length; i++) {\n                // @breaking-change 8.0.0\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                        `attribute will be removed in 8.0.0.`, markers[i]);\n                }\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                        `will be removed in 8.0.0.`, markers[i]);\n                }\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length\n            ? markers[markers.length - 1]\n            : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild?.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getFirstTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        const children = root.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getLastTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap?.enabled || false;\n    }\n    set enabled(value) {\n        if (this.focusTrap) {\n            this.focusTrap.enabled = value;\n        }\n    }\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        const platform = inject(Platform);\n        if (platform.isBrowser) {\n            this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n        }\n    }\n    ngOnDestroy() {\n        this.focusTrap?.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap?.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (this.focusTrap && !this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange &&\n            !autoCaptureChange.firstChange &&\n            this.autoCapture &&\n            this.focusTrap?.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap?.focusInitialElementWhenReady();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkTrapFocus, isStandalone: true, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\", booleanAttribute], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\", booleanAttribute] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTrapFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTrapFocus]',\n                    exportAs: 'cdkTrapFocus',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTrapFocus', transform: booleanAttribute }]\n            }], autoCapture: [{\n                type: Input,\n                args: [{ alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    /** Whether the FocusTrap is enabled. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_TRAP_INERT_STRATEGY]\n                }] }] });\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n    // `event.detail` is zero depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `detail` works on Chrome, but fails on Firefox.\n    return event.buttons === 0 || event.detail === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = {\n            ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n            ...options,\n        };\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: InputModalityDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n                }] }] });\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nlet uniqueIds = 0;\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        if (this._liveElement.id) {\n            this._exposeAnnouncerToModals(this._liveElement.id);\n        }\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._currentPromise) {\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n            }\n            clearTimeout(this._previousTimeout);\n            this._previousTimeout = setTimeout(() => {\n                this._liveElement.textContent = message;\n                if (typeof duration === 'number') {\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\n                }\n                // For some reason in tests this can be undefined\n                // Probably related to ZoneJS and every other thing that patches browser APIs in tests\n                this._currentResolve?.();\n                this._currentPromise = this._currentResolve = undefined;\n            }, 100);\n            return this._currentPromise;\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        this._liveElement?.remove();\n        this._liveElement = null;\n        this._currentResolve?.();\n        this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].remove();\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live announcer element if there is an\n     * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live announcer element.\n     */\n    _exposeAnnouncerToModals(id) {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `SnakBarContainer` and other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: LiveAnnouncer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n                }] }] });\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n        return this._politeness;\n    }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkAriaLive, isStandalone: true, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"], duration: [\"cdkAriaLiveDuration\", \"duration\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAriaLive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAriaLive]',\n                    exportAs: 'cdkAriaLive',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }], propDecorators: { politeness: [{\n                type: Input,\n                args: ['cdkAriaLive']\n            }], duration: [{\n                type: Input,\n                args: ['cdkAriaLiveDuration']\n            }] } });\n\n/** Detection mode used for attributing the origin of a focus event. */\nvar FocusMonitorDetectionMode;\n(function (FocusMonitorDetectionMode) {\n    /**\n     * Any mousedown, keydown, or touchstart event that happened in the previous\n     * tick or the current tick will be used to assign a focus event's origin (to\n     * either mouse, keyboard, or touch). This is the default option.\n     */\n    FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n    /**\n     * A focus event's origin is always attributed to the last corresponding\n     * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n     */\n    FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"EVENTUAL\"] = 1] = \"EVENTUAL\";\n})(FocusMonitorDetectionMode || (FocusMonitorDetectionMode = {}));\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                if (event.type === 'focus') {\n                    this._onFocus(event, element);\n                }\n                else {\n                    this._onBlur(event, element);\n                }\n            }\n        };\n        this._document = document;\n        this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            // Note: we don't want the observable to emit at all so we don't pass any parameters.\n            return of();\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode,\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        // If the interaction is coming from an input label, we consider it a mouse interactions.\n        // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n        // our detection, because all our assumptions are for `mousedown`. We need to handle this\n        // special case, because it's very common for checkboxes and radio buttons.\n        if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n            return 'mouse';\n        }\n        return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === FocusMonitorDetectionMode.EVENTUAL ||\n            !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        element.classList.toggle('cdk-focused', !!origin);\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n        element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo ||\n            (elementInfo.checkChildren &&\n                event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n        if (info.subject.observers.length) {\n            this._ngZone.run(() => info.subject.next(origin));\n        }\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => {\n                this._setOrigin(modality, true /* isFromInteraction */);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n        const { _mostRecentTarget: mostRecentTarget, mostRecentModality } = this._inputModalityDetector;\n        // If the last interaction used the mouse on an element contained by one of the labels\n        // of an `input`/`textarea` that is currently focused, it is very likely that the\n        // user redirected focus using the label.\n        if (mostRecentModality !== 'mouse' ||\n            !mostRecentTarget ||\n            mostRecentTarget === focusEventTarget ||\n            (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n            focusEventTarget.disabled) {\n            return false;\n        }\n        const labels = focusEventTarget.labels;\n        if (labels) {\n            for (let i = 0; i < labels.length; i++) {\n                if (labels[i].contains(mostRecentTarget)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FocusMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n                }] }] });\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._focusOrigin = null;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    get focusOrigin() {\n        return this._focusOrigin;\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => {\n            this._focusOrigin = origin;\n            this.cdkFocusChange.emit(origin);\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkMonitorFocus, isStandalone: true, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, exportAs: [\"cdkMonitorFocus\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n                    exportAs: 'cdkMonitorFocus',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: FocusMonitor }], propDecorators: { cdkFocusChange: [{\n                type: Output\n            }] } });\n\n/** Set of possible high-contrast mode backgrounds. */\nvar HighContrastMode;\n(function (HighContrastMode) {\n    HighContrastMode[HighContrastMode[\"NONE\"] = 0] = \"NONE\";\n    HighContrastMode[HighContrastMode[\"BLACK_ON_WHITE\"] = 1] = \"BLACK_ON_WHITE\";\n    HighContrastMode[HighContrastMode[\"WHITE_ON_BLACK\"] = 2] = \"WHITE_ON_BLACK\";\n})(HighContrastMode || (HighContrastMode = {}));\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n        this._breakpointSubscription = inject(BreakpointObserver)\n            .observe('(forced-colors: active)')\n            .subscribe(() => {\n            if (this._hasCheckedHighContrastMode) {\n                this._hasCheckedHighContrastMode = false;\n                this._applyBodyHighContrastModeCssClasses();\n            }\n        });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return HighContrastMode.NONE;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\n            ? documentWindow.getComputedStyle(testElement)\n            : null;\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\n        testElement.remove();\n        switch (computedColor) {\n            // Pre Windows 11 dark theme.\n            case 'rgb(0,0,0)':\n            // Windows 11 dark themes.\n            case 'rgb(45,50,54)':\n            case 'rgb(32,32,32)':\n                return HighContrastMode.WHITE_ON_BLACK;\n            // Pre Windows 11 light theme.\n            case 'rgb(255,255,255)':\n            // Windows 11 light theme.\n            case 'rgb(255,250,239)':\n                return HighContrastMode.BLACK_ON_WHITE;\n        }\n        return HighContrastMode.NONE;\n    }\n    ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === HighContrastMode.BLACK_ON_WHITE) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: A11yModule, imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: A11yModule, imports: [ObserversModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: A11yModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                }]\n        }], ctorParameters: () => [{ type: HighContrastModeDetector }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusMonitorDetectionMode, FocusTrap, FocusTrapFactory, HighContrastMode, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, addAriaReferencedId, getAriaReferenceIds, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, removeAriaReferencedId };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId\n            ? isPlatformBrowser(this._platformId)\n            : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser &&\n            !!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) &&\n            !this.BLINK &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Platform, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }] });\n\nclass PlatformModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: PlatformModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: PlatformModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => (supportsPassiveEvents = true),\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nvar RtlScrollAxisType;\n(function (RtlScrollAxisType) {\n    /**\n     * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"NORMAL\"] = 0] = \"NORMAL\";\n    /**\n     * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"NEGATED\"] = 1] = \"NEGATED\";\n    /**\n     * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    RtlScrollAxisType[RtlScrollAxisType[\"INVERTED\"] = 2] = \"INVERTED\";\n})(RtlScrollAxisType || (RtlScrollAxisType = {}));\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return RtlScrollAxisType.NORMAL;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n    // We can't use `declare const` because it causes conflicts inside Google with the real typings\n    // for these symbols and we can't read them off the global object, because they don't appear to\n    // be attached there for some runners like Jest.\n    // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n    return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, RtlScrollAxisType, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation;\n(function (_ViewRepeaterOperation) {\n    /** The content of an existing view was replaced with another item. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n    /** A new view was created with `createEmbeddedView`. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n    /** The position of a view changed, but the content remains the same. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n    /** A view was detached from the view container. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        /**\n         * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n         * will be removed.\n         */\n        this.appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: [\"appendOnly\", \"appendOnly\", booleanAttribute] }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }], propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }], propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n"],"x_google_ignoreList":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]}