{"version":3,"file":"629.78127b8ac76c788f.js","mappings":"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","names":["formlyDemoConstants","props","label","type","attributes","columns","fieldGroup","key","format","required","description","width","FormlyDemoService","constructor","httpClient","this","formMessage","Subject","getFormDefinition","get","pipe","delay","getGeneroFormDefinition","responseType","getData","validateField","field","value","of","invalid","message","getFieldHelp","param","filters","length","count","data","result","index","skip","take","push","id","address","city","state","t","i0","i1","core","Yz7","factory","ɵfac","_c0","FormlyField_ng_template_0_Template","rf","ctx","FormlyGroup_formly_field_0_Template","$implicit","_c1","getFieldId","formId","template","Type","prototype","name","join","hasKey","isNil","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","defineHiddenProp","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","resetOnHide","k","pop","reduce","model","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","Object","getPrototypeOf","x","isObservable","TemplateRef","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","defineProperty","defaultValue","enumerable","writable","configurable","observeDeep","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","o","_observers","target","onChange","set","previousValue","changeFn","setValue","filter","getField","f","len","markFieldForCheck","_componentRefs","ref","ComponentRef","injector","ChangeDetectorRef","markForCheck","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","lazyRender","resetFieldOnHide","renderFormlyFieldElement","showError","formControl","touched","options","parentForm","submitted","validation","show","extensions","presets","extensionsByPriority","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","setSortedExtensions","acc","curr","option","hasOwnProperty","getType","throwIfNotFound","component","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","_componentRef","_viewContainerRef","_injector","createComponent","destroy","e","console","error","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","extensionOptions","extensionOption","priority","extension","Number","sort","a","b","prio","extendedType","ɵprov","token","providedIn","FormlyFormBuilder","viewContainerRef","buildForm","form","build","_build","_setOptions","disableTreeValidityCall","callback","_updateTreeValidity","bind","checkExpressions","detectChanges","values","prePopulate","onPopulate","postPopulate","FormGroup","_buildForm","warn","i2","unregisterControl","emitEvent","control","fieldIndex","_fields","splice","opts","FormArray","controls","findIndex","removeAt","removeControl","setParent","findControl","shareFormControl","registerControl","setValidators","setAsyncValidators","disabled","disabledObserver","disable","enable","FormControl","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","clearControl","FormlyTemplate","ngOnChanges","ɵdir","selectors","inputs","features","FormlyFieldTemplates","FormlyField","renderer","_elementRef","hostContainerRef","hostObservers","componentRefs","hooksObservers","detectFieldBuild","valueChangesUnsubscribe","containerRef","elementRef","location","ngAfterContentInit","triggerHook","ngAfterViewInit","ngDoCheck","render","ngOnInit","changes","ngOnDestroy","resetRefs","hostObserver","renderField","clear","wps","attachComponentRef","_lContainer","viewRef","detach","destroyed","insert","changeDetectorRef","inlineType","templates","find","createEmbeddedView","fieldChanges","hooks","r","sub","subscribe","assign","setStyle","nativeElement","className","removeAttribute","setAttribute","hide","_localFields","subscribes","_expressions","expressionObserver","subscription","value$","fieldObserver","distinctUntilChanged","y","startWith","updateOn","debounce","modelOptions","default","debounceTime","parsers","parserFn","next","templateFieldsSubs","ɵcmp","viewQuery","ViewContainerRef","_t","first","decls","vars","consts","styles","FormlyForm","builder","ngZone","fieldTemplates","modelChange","EventEmitter","_modelChangeValue","immutable","setField","fields","checkExpressionChange","switchMap","onStable","asObservable","runGuarded","p","contentQueries","dirIndex","outputs","dependencies","encapsulation","changeDetection","FormlyAttributes","_document","uiAttributesCache","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","document","fieldAttrElements","_elementRefs","listener","listen","attr","detachElementRef","attachElementRef","focusObserver","toggleFocus","uiAttributes","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","then","blur","onHostChange","Event","change","markAsDirty","DOCUMENT","hostBindings","FieldType","flat","to","formState","NgControl","FormlyGroup","ɵFormlyGroup_BaseFactory","hostVars","fieldGroupClassName","ngContentSelectors","i2$1","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","merge","property","errorMessage","fieldForm","errors","errorPath","asyncValidators","FieldArrayType","fieldArray","add","initialModel","remove","ɵFieldArrayType_BaseFactory","FormlyTemplateType","sanitizer","super","innerHtml","content","safeHtml","bypassSecurityTrustHtml","FieldExpressionExtension","hidden","_hiddenFieldsForCheck","hideExpression","expr","parseExpressions","evalExpr","Observable","tap","expressions","expressionProperties","checkLocked","ignoreCache","fieldChanged","changeHideState","_checkField","parentExpression","includes","rootValue","evalStringExpression","expression","argNames","Function","exprValue","evalExpression","thisArg","argVal","apply","JSON","stringify","changeDisabledState","every","reset","_evalExpressionPath","lastIndex","emitExpressionChanges","arrayPath","match","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","pattern","minLengthResult","minLength","minLengthKey","minlength","maxLengthResult","maxLength","maxLengthKey","maxlength","min","max","validatorOption","isPromise","obj","handleAsyncResult","handleResult","ctrl","_childrenErrors","childCtrl","_errorPath","setErrors","l","_toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","initialValueIsDefault","enabled","asyncValidator","mergeValidators","composeAsync","CoreExtension","initRootOptions","initFieldProps","getFieldComponentInstance","initFieldOptions","templateOptions","_markForCheck","resetModel","_initialModel","updateInitialValue","placeholder","isHidden","setDefaultValue","componentRefInstance","fieldComponentRef","componentType","_proxyInstance","Proxy","_","defaultFormlyConfig","FormlyModule","configService","configs","static","ngModule","providers","provide","multi","useFactory","deps","useValue","ɵmod","ɵinj","imports","CommonModule","ctx_r0","formGroup","formDefinition","formOptions","ctx_r1","FormlyDemoComponent","moduleService","age","takeUntilDestroyed","getFormErrors","formErrors","groupError","Xpm","FormlyDemoComponent_formly_form_2_Template","FormlyDemoComponent_p_3_Template","FormlyFieldComponent","FormlyFieldDirective","style","column","gridColumn","row","gridRow","addEventListener","lG2","formlyFieldDirective","standalone","f_r3","_r4","GroupTypeComponent","fieldContainerElement","fieldContainer","classList","gridTemplateColumns","gridWidth","gridHeight","GroupTypeComponent_div_0_Template","GroupTypeComponent_formly_field_3_Template","CheckboxTypeComponent","addAsyncValidators","complete","pristine","takeUntil","server","CheckboxTypeComponent_label_2_Template","CheckboxTypeComponent_span_3_Template","readonly","ReactiveFormsModule","i3","i4","ForgeModule","i5","DatePickerTypeComponent","isValidDate","DatePickerTypeComponent_label_3_Template","DatePickerTypeComponent_span_4_Template","TextareaTypeComponent","cols","rows","TextareaTypeComponent_label_3_Template","TextareaTypeComponent_span_4_Template","field_r2","ctx_r3","onTabSelected","TabTypeComponent","activeTab","activeField","TabTypeComponent_forge_tab_1_Template","_r1","th_r3","f_r7","_r8","TableTypeComponent_tr_7_td_1_Template","i_r5","_r10","ctx_r9","onRemove","fg_r4","TableTypeComponent","onAdd","fromEntries","requestAnimationFrame","tr","from","tableElement","querySelectorAll","reverse","focusElement","querySelector","TableTypeComponent_th_4_Template","TableTypeComponent_tr_7_Template","FieldHelpDialogComponent","dialogConfig","dialogRef","paginator","pageIndex","pageSize","total","isBusy","direction","SortDirection","Ascending","title","columnConfigurations","dataObservable","initialSort","onClose","close","onPaginatorChange","onTableSort","columnIndex","onTableFilter","filterProperty","isDefined","toString","onTableRowClick","finalize","detail","FieldHelpDialogComponent_forge_page_state_8_Template","FieldHelpDialogComponent_ng_container_9_Template","ctx_r2","InputHelpTypeComponent","dialogService","onShowDialog","dialogSub","fullscreen","header","sortable","filterDelegate","TextFieldComponentDelegate","optionsKey","afterClosed","InputHelpTypeComponent_label_3_Template","InputHelpTypeComponent_span_7_Template","LabelTypeComponent","ctx_r5","i_r4","option_r3","RadioTypeComponent_forge_radio_2_label_2_Template","RadioTypeComponent","RadioTypeComponent_label_0_Template","RadioTypeComponent_forge_radio_2_Template","RadioTypeComponent_div_3_Template","SelectTypeComponent","SelectTypeComponent_span_1_Template","formlyFieldExtension","ButtonTypeComponent","onClick","event","log","ContainerTypeComponent","ContainerTypeComponent_div_0_Template","ContainerTypeComponent_ng_container_3_Template","InputTypeComponent","inputType","InputTypeComponent_label_3_Template","InputTypeComponent_span_4_Template","FormlyConfigModule","oAB","cJS","forRoot","routes","FormlyDemoModule","RouterModule","forChild","AppFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/formly-demo/formly-demo.constants.ts","./src/app/formly-demo/formly-demo.service.ts","./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs","./src/app/formly-demo/formly-demo.component.html","./src/app/formly-demo/formly-demo.component.ts","./src/app/formly-demo/components/formly-field.component.ts","./src/app/formly-demo/components/formly-field.directive.ts","./src/app/formly-demo/components/group-type.component.ts","./src/app/formly-demo/components/checkbox-type.component.ts","./src/app/formly-demo/components/date-picker-type.component.ts","./src/app/formly-demo/components/textarea-type.component.ts","./src/app/formly-demo/components/tab-type.component.ts","./src/app/formly-demo/components/table-type.component.ts","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.html","./src/app/formly-demo/components/field-help-dialog/field-help-dialog.component.ts","./src/app/formly-demo/components/input-help-type.component.ts","./src/app/formly-demo/components/label-type.component.ts","./src/app/formly-demo/components/radio-type.component.ts","./src/app/formly-demo/components/select-type.component.ts","./src/app/formly-demo/components/formly-field.extension.ts","./src/app/formly-demo/components/button-type.component.ts","./src/app/formly-demo/components/container-type.component.ts","./src/app/formly-demo/components/input-type.component.ts","./src/app/formly-demo/components/formly-config.module.ts","./src/app/formly-demo/formly-demo.module.ts"],"sourcesContent":["const formDefinitionBasic = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'name',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Name',\r\n          type: 'string',\r\n          format: '###-##-####',\r\n          required: true,\r\n          description: 'Persons name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number',\r\n          format: '#,###,###,##&.&&',\r\n          required: true,\r\n          description: 'Persons age',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\nconst formDefinitionAll = [\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      label: 'Container',\r\n      type: 'grid',\r\n      attributes: {\r\n        columns: 2\r\n      }\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'firstName',\r\n        type: 'input',\r\n        defaultValue: 0,\r\n        props: {\r\n          label: 'First name',\r\n          required: true,\r\n          description: 'Persons first name',\r\n          attributes: {\r\n            width: 480\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'lastName',\r\n        type: 'input',\r\n        props: {\r\n          label: 'Last name',\r\n          description: 'Persons last name',\r\n          attributes: {\r\n            width: 320,\r\n            column: 1,\r\n            row: 2\r\n          }\r\n        }\r\n      },\r\n      {\r\n        key: 'age',\r\n        type: 'input',\r\n        defaultValue: 18,\r\n        props: {\r\n          label: 'Age',\r\n          type: 'number'\r\n        }\r\n      },\r\n      {\r\n        key: 'isActive',\r\n        type: 'checkbox',\r\n        props: {\r\n          label: 'Is active'\r\n        }\r\n      },\r\n      {\r\n        key: 'birthDate',\r\n        type: 'date-picker',\r\n        props: {\r\n          label: 'DOB',\r\n          description: 'Persons date of birth',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'gender',\r\n        type: 'select',\r\n        props: {\r\n          label: 'Gender',\r\n          options: [\r\n            { label: 'Male', value: 'M' },\r\n            { label: 'Female', value: 'F' },\r\n            { label: 'Other', value: 'O' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'comment',\r\n        type: 'textarea',\r\n        props: {\r\n          label: 'Comment',\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'size',\r\n        type: 'radio',\r\n        props: {\r\n          label: 'Size',\r\n          description: 'What is your size?',\r\n          options: [\r\n            { label: 'Small', value: 'sm' },\r\n            { label: 'Medium', value: 'md' },\r\n            { label: 'Large', value: 'lg' }\r\n          ],\r\n          required: true\r\n        }\r\n      },\r\n      {\r\n        key: 'officeLocation',\r\n        type: 'input-help',\r\n        props: {\r\n          label: 'Office location',\r\n          description: 'What is your office location',\r\n          optionsKey: 'id',\r\n          options: [\r\n            { label: 'Address', property: 'address' },\r\n            { label: 'City', property: 'city' },\r\n            { label: 'State', property: 'state' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    className: 'form-divider',\r\n    template: '<forge-divider style=\"margin: 16px 0\"></forge-divider>',\r\n    props: {\r\n      safeHtml: true\r\n    }\r\n  },\r\n  {\r\n    // type: 'container',\r\n    props: {\r\n      type: 'group',\r\n      label: 'Address'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'hbox'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            key: 'address.street',\r\n            type: 'input',\r\n            props: {\r\n              label: 'Street'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.city',\r\n            type: 'input',\r\n            props: {\r\n              label: 'City'\r\n            }\r\n          },\r\n          {\r\n            key: 'address.state',\r\n            type: 'input',\r\n            props: {\r\n              label: 'State'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'tab',\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          label: 'Tab 1'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'hbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field1',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 1'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field2',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 2'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        props: {\r\n          label: 'Tab 2'\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'vbox'\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                key: 'tab.field3',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 3'\r\n                }\r\n              },\r\n              {\r\n                key: 'tab.field4',\r\n                type: 'input',\r\n                props: {\r\n                  label: 'Field 4'\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 'children',\r\n    type: 'table',\r\n    props: {\r\n      columns: [\r\n        {\r\n          label: 'First name',\r\n          key: 'firstName',\r\n          defaultValue: null\r\n        },\r\n        {\r\n          label: 'Last name',\r\n          key: 'lastName',\r\n          defaultValue: null\r\n        }\r\n      ]\r\n    },\r\n    fieldArray: {\r\n      fieldGroup: [\r\n        {\r\n          key: 'firstName',\r\n          type: 'input',\r\n          props: {\r\n            required: true\r\n          }\r\n        },\r\n        {\r\n          key: 'lastName',\r\n          type: 'input'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n];\r\n\r\nconst formDefinitionLayout = [\r\n  {\r\n    props: {\r\n      type: 'vbox'\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        props: {\r\n          type: 'grid',\r\n          attributes: {\r\n            width: 83,\r\n            height: 10\r\n          }\r\n        },\r\n        fieldGroup: [\r\n          {\r\n            props: {\r\n              type: 'group',\r\n              attributes: {\r\n                posX: 1,\r\n                posY: 1,\r\n                gridWidth: 83,\r\n                gridHeight: 6\r\n              }\r\n            },\r\n            fieldGroup: [\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Year',\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 2,\r\n                    gridWidth: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'tax_year',\r\n                type: 'input',\r\n                defaultValue: '2023',\r\n                props: {\r\n                  type: 'number',\r\n                  disabled: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 2,\r\n                    gridWidth: 4,\r\n                    width: 4\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'which_value',\r\n                type: 'radio',\r\n                props: {\r\n                  description: 'Value to use on report.',\r\n                  options: [\r\n                    { label: 'Original full value', value: 'O' },\r\n                    { label: 'Current full value', value: 'C' }\r\n                  ],\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 3,\r\n                    gridWidth: 31,\r\n                    width: 31\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Minimum value',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 4,\r\n                    gridWidth: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'min_val',\r\n                type: 'input',\r\n                props: {\r\n                  type: 'number',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 4,\r\n                    gridWidth: 13,\r\n                    width: 13\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                type: 'label',\r\n                props: {\r\n                  label: 'Sort vehicles by',\r\n                  required: true,\r\n                  attributes: {\r\n                    posX: 2,\r\n                    posY: 5,\r\n                    gridWidth: 17\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                key: 'seq_sw',\r\n                type: 'select',\r\n                props: {\r\n                  required: true,\r\n                  options: [\r\n                    { label: 'Sequence number', value: 'S' },\r\n                    { label: 'Owner name', value: 'O' }\r\n                  ],\r\n                  attributes: {\r\n                    posX: 20,\r\n                    posY: 5,\r\n                    gridWidth: 17,\r\n                    width: 15\r\n                  }\r\n                }\r\n              },\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const formlyDemoConstants = {\r\n  formDefinitionBasic,\r\n  formDefinitionAll,\r\n  formDefinitionLayout\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { map, delay } from 'rxjs/operators';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { IFilterParameter, IFilterResponse } from '../shared/interfaces/filter.interface';\r\n\r\n@Injectable()\r\nexport class FormlyDemoService {\r\n  public formMessage = new Subject<{ id: string; message: string; }>();\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getFormDefinition(): Observable<FormlyFieldConfig[]> {\r\n    return this.httpClient.get<FormlyFieldConfig[]>('mock-data/form-definition.json').pipe(\r\n      delay(1000)\r\n    );\r\n  }\r\n\r\n  public getGeneroFormDefinition(): Observable<string> {\r\n    return this.httpClient.get('mock-data/genero-form-definition.xml', { responseType: 'text' });\r\n  }\r\n\r\n  public getData(): Observable<any> {\r\n    return this.httpClient.get('mock-data/form-data.json');\r\n  }\r\n\r\n  public validateField(field: string, value: any): Observable<{ invalid: boolean; message: string }> {\r\n    const validation = {\r\n      invalid: false,\r\n      message: `Error from server: ${field}`\r\n    };\r\n\r\n    return of(validation).pipe(\r\n      delay(1000)\r\n    );\r\n\r\n    // return this.httpClient.get<{ invalid: boolean; message: string }>('http://localhost:5000/validate-get');\r\n    // return this.httpClient.post<{ invalid: boolean; message: string }>('http://localhost:5000/validate-post', { field, value });\r\n  }\r\n\r\n  public getFieldHelp(field: string, param: IFilterParameter): Observable<IFilterResponse<any>> {\r\n    if (param.filters?.length) {\r\n      return of({ count: 0, data: [] }).pipe(\r\n        delay(1000)\r\n      )\r\n    } else {\r\n      const result = [];\r\n      for (let index = param.skip; index < param.skip + param.take; index++) {\r\n        result.push(\r\n          {\r\n            id: index,\r\n            address: `${index} street`,\r\n            city: `${index} city`,\r\n            state: `${index} state`\r\n          }\r\n        );\r\n      }\r\n\r\n      return of({ count: 75, data: result }).pipe(\r\n        delay(1000)\r\n      )\r\n    }\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Type, TemplateRef, ComponentRef, ChangeDetectorRef, InjectionToken, Injectable, Optional, Directive, Input, ViewContainerRef, Component, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, Inject, ViewChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { AbstractControl, FormGroup, FormArray, FormControl, NgControl, Validators } from '@angular/forms';\nimport { isObservable, merge, of, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, startWith, debounceTime, filter, switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i2$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nfunction disableTreeValidityCall(form, callback) {\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = () => { };\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\nfunction getFieldId(formId, field, index) {\n    if (field.id) {\n        return field.id;\n    }\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (type instanceof Type) {\n        type = type.prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\nfunction hasKey(field) {\n    return !isNil(field.key) && field.key !== '';\n}\nfunction getKeyPath(field) {\n    if (!hasKey(field)) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (field._keyPath?.key !== field.key) {\n        let path = [];\n        if (typeof field.key === 'string') {\n            const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        defineHiddenProp(field, '_keyPath', { key: field.key, path });\n    }\n    return field._keyPath.path.slice(0);\n}\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\nfunction assignFieldValue(field, value) {\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        const k = paths.pop();\n        const m = paths.reduce((model, path) => model[path] || {}, root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\nfunction getFieldValue(field) {\n    let model = field.parent ? field.parent.model : field.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((src) => {\n        for (const srcArg in src) {\n            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    });\n    return dest;\n}\n// check a value is null or undefined\nfunction isNil(value) {\n    return value == null;\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isBlankString(value) {\n    return value === '';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction objAndSameType(obj1, obj2) {\n    return (isObject(obj1) &&\n        isObject(obj2) &&\n        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n        !(Array.isArray(obj1) || Array.isArray(obj2)));\n}\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nfunction clone(value) {\n    if (!isObject(value) ||\n        isObservable(value) ||\n        value instanceof TemplateRef ||\n        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((v) => clone(v));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    const proto = Object.getPrototypeOf(value);\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((newVal, prop) => {\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }, c);\n}\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\nfunction observeDeep(source, paths, setFn) {\n    let observers = [];\n    const unsubscribe = () => {\n        observers.forEach((observer) => observer());\n        observers = [];\n    };\n    const observer = observe(source, paths, ({ firstChange, currentValue }) => {\n        !firstChange && setFn();\n        unsubscribe();\n        if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n            Object.keys(currentValue).forEach((prop) => {\n                observers.push(observeDeep(source, [...paths, prop], setFn));\n            });\n        }\n    });\n    return () => {\n        observer.unsubscribe();\n        unsubscribe();\n    };\n}\nfunction observe(o, paths, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    let target = o;\n    for (let i = 0; i < paths.length - 1; i++) {\n        if (!target[paths[i]] || !isObject(target[paths[i]])) {\n            target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        target = target[paths[i]];\n    }\n    const key = paths[paths.length - 1];\n    const prop = paths.join('.');\n    if (!o._observers[prop]) {\n        o._observers[prop] = { value: target[key], onChange: [] };\n    }\n    const state = o._observers[prop];\n    if (target[key] !== state.value) {\n        state.value = target[key];\n    }\n    if (state.onChange.indexOf(setFn) === -1) {\n        state.onChange.push(setFn);\n        setFn({ currentValue: state.value, firstChange: true });\n        if (state.onChange.length >= 1 && isObject(target)) {\n            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n            Object.defineProperty(target, key, {\n                enumerable,\n                configurable: true,\n                get: () => state.value,\n                set: (currentValue) => {\n                    if (currentValue !== state.value) {\n                        const previousValue = state.value;\n                        state.value = currentValue;\n                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n                    }\n                },\n            });\n        }\n    }\n    return {\n        setValue(currentValue) {\n            if (currentValue === state.value) {\n                return;\n            }\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => {\n                if (changeFn !== setFn) {\n                    changeFn({ previousValue, currentValue, firstChange: false });\n                }\n            });\n        },\n        unsubscribe() {\n            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n            if (state.onChange.length === 0) {\n                delete o._observers[prop];\n            }\n        },\n    };\n}\nfunction getField(f, key) {\n    key = (Array.isArray(key) ? key.join('.') : key);\n    if (!f.fieldGroup) {\n        return undefined;\n    }\n    for (let i = 0, len = f.fieldGroup.length; i < len; i++) {\n        const c = f.fieldGroup[i];\n        const k = (Array.isArray(c.key) ? c.key.join('.') : c.key);\n        if (k === key) {\n            return c;\n        }\n        if (c.fieldGroup && (isNil(k) || key.indexOf(`${k}.`) === 0)) {\n            const field = getField(c, isNil(k) ? key : key.slice(k.length + 1));\n            if (field) {\n                return field;\n            }\n        }\n    }\n    return undefined;\n}\nfunction markFieldForCheck(field) {\n    field._componentRefs?.forEach((ref) => {\n        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n        if (ref instanceof ComponentRef) {\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n        }\n        else {\n            ref.markForCheck();\n        }\n    });\n}\n\n/**\n * An InjectionToken for registering additional formly config options (types, wrappers ...).\n */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly config options. This can be used to register new field type.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.extras = {\n            checkExpressionOn: 'modelChange',\n            lazyRender: true,\n            resetFieldOnHide: true,\n            renderFormlyFieldElement: true,\n            showError(field) {\n                return (field.formControl?.invalid &&\n                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));\n            },\n        };\n        this.extensions = {};\n        this.presets = {};\n        this.extensionsByPriority = {};\n    }\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((type) => this.setType(type));\n        }\n        if (config.validators) {\n            config.validators.forEach((validator) => this.setValidator(validator));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n        }\n        if (config.extensions) {\n            this.setSortedExtensions(config.extensions);\n        }\n        if (config.extras) {\n            this.extras = { ...this.extras, ...config.extras };\n        }\n        if (config.presets) {\n            this.presets = {\n                ...this.presets,\n                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),\n            };\n        }\n    }\n    /**\n     * Allows you to specify a custom type which you can use in your field configuration.\n     * You can pass an object of options, or an array of objects of options.\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((option) => this.setType(option));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = { name: options.name };\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            });\n        }\n    }\n    getType(name, throwIfNotFound = false) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.types[name]) {\n            if (throwIfNotFound) {\n                throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n            }\n            return null;\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /** @ignore */\n    getMergedField(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return;\n        }\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field?.optionsTypes) {\n            field.optionsTypes.forEach((option) => {\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            });\n        }\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef?.instance?.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /** @ignore @internal */\n    resolveFieldTypeRef(field = {}) {\n        const type = this.getType(field.type);\n        if (!type) {\n            return null;\n        }\n        if (!type.component || type._componentRef) {\n            return type._componentRef;\n        }\n        const { _viewContainerRef, _injector } = field.options;\n        if (!_viewContainerRef || !_injector) {\n            return null;\n        }\n        const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });\n        defineHiddenProp(type, '_componentRef', componentRef);\n        try {\n            componentRef.destroy();\n        }\n        catch (e) {\n            console.error(`An error occurred while destroying the Formly component type \"${field.type}\"`, e);\n        }\n        return type._componentRef;\n    }\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((type) => {\n                this.setTypeWrapper(type, options.name);\n            });\n        }\n    }\n    getWrapper(name) {\n        if (name instanceof Type) {\n            return { component: name, name: name.prototype.constructor.name };\n        }\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /** @ignore */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = {};\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };\n            if (deprecated[name]) {\n                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);\n                this.messages[deprecated[name]] = message;\n            }\n        }\n    }\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    setSortedExtensions(extensionOptions) {\n        // insert new extensions, grouped by priority\n        extensionOptions.forEach((extensionOption) => {\n            const priority = extensionOption.priority ?? 1;\n            this.extensionsByPriority[priority] = {\n                ...this.extensionsByPriority[priority],\n                [extensionOption.name]: extensionOption.extension,\n            };\n        });\n        // flatten extensions object with sorted keys\n        this.extensions = Object.keys(this.extensionsByPriority)\n            .map(Number)\n            .sort((a, b) => a - b)\n            .reduce((acc, prio) => ({\n            ...acc,\n            ...this.extensionsByPriority[prio],\n        }), {});\n    }\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FormlyFormBuilder {\n    constructor(config, injector, viewContainerRef, parentForm) {\n        this.config = config;\n        this.injector = injector;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n    }\n    buildForm(form, fieldGroup = [], model, options) {\n        this.build({ fieldGroup, model, form, options });\n    }\n    build(field) {\n        if (!this.config.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        if (!field.parent) {\n            this._setOptions(field);\n            disableTreeValidityCall(field.form, () => {\n                this._build(field);\n                const options = field.options;\n                options.checkExpressions?.(field, true);\n                options.detectChanges?.(field);\n            });\n        }\n        else {\n            this._build(field);\n        }\n    }\n    _build(field) {\n        if (!field) {\n            return;\n        }\n        const extensions = Object.values(this.config.extensions);\n        extensions.forEach((extension) => extension.prePopulate?.(field));\n        extensions.forEach((extension) => extension.onPopulate?.(field));\n        field.fieldGroup?.forEach((f) => this._build(f));\n        extensions.forEach((extension) => extension.postPopulate?.(field));\n    }\n    _setOptions(field) {\n        field.form = field.form || new FormGroup({});\n        field.model = field.model || {};\n        field.options = field.options || {};\n        const options = field.options;\n        if (!options._viewContainerRef) {\n            defineHiddenProp(options, '_viewContainerRef', this.viewContainerRef);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options.build) {\n            options._buildForm = () => {\n                console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n                this.build(field);\n            };\n            options.build = (f = field) => {\n                this.build(f);\n                return f;\n            };\n        }\n        if (!options.parentForm && this.parentForm) {\n            defineHiddenProp(options, 'parentForm', this.parentForm);\n            observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n                if (!firstChange) {\n                    options.checkExpressions(field);\n                    options.detectChanges(field);\n                }\n            });\n        }\n    }\n}\nFormlyFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, deps: [{ token: FormlyConfig }, { token: i0.Injector }, { token: i0.ViewContainerRef, optional: true }, { token: i2.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Injector }, { type: i0.ViewContainerRef, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nfunction unregisterControl(field, emitEvent = false) {\n    const control = field.formControl;\n    const fieldIndex = control._fields ? control._fields.indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control._fields.splice(fieldIndex, 1);\n    }\n    const form = control.parent;\n    if (!form) {\n        return;\n    }\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        const key = form.controls.findIndex((c) => c === control);\n        if (key !== -1) {\n            form.removeAt(key, opts);\n        }\n    }\n    else if (form instanceof FormGroup) {\n        const paths = getKeyPath(field);\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            form.removeControl(key, opts);\n        }\n    }\n    control.setParent(null);\n}\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field.shareFormControl === false) {\n        return null;\n    }\n    return field.form?.get(getKeyPath(field));\n}\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control._fields) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control._fields.indexOf(field) === -1) {\n        control._fields.push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.props.disabled = !!field.props.disabled;\n        const disabledObserver = observe(field, ['props', 'disabled'], ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        });\n        if (control instanceof FormControl) {\n            control.registerOnDisabledChange(disabledObserver.setValue);\n        }\n    }\n    if (!field.form || !hasKey(field)) {\n        return;\n    }\n    let form = field.form;\n    const paths = getKeyPath(field);\n    const value = getFieldValue(field);\n    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < paths.length - 1; i++) {\n        const path = paths[i];\n        if (!form.get([path])) {\n            form.setControl(path, new FormGroup({}), { emitEvent });\n        }\n        form = form.get([path]);\n    }\n    const key = paths[paths.length - 1];\n    if (!field._hide && form.get([key]) !== control) {\n        form.setControl(key, control, { emitEvent });\n    }\n}\nfunction updateValidity(c, onlySelf = false) {\n    const status = c.status;\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        c.statusChanges.emit(c.status);\n    }\n    if (value !== c.value) {\n        c.valueChanges.emit(c.value);\n    }\n}\nfunction clearControl(form) {\n    delete form?._fields;\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.values(form.controls).forEach((c) => clearControl(c));\n    }\n}\n\nclass FormlyTemplate {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    ngOnChanges() {\n        this.name = this.name || 'formly-group';\n    }\n}\nFormlyTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplate, selector: \"[formlyTemplate]\", inputs: { name: [\"formlyTemplate\", \"name\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplate, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formlyTemplate]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formlyTemplate']\n            }] } });\n// workarround for https://github.com/angular/angular/issues/43227#issuecomment-904173738\nclass FormlyFieldTemplates {\n}\nFormlyFieldTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormlyFieldTemplates.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldTemplates, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The `<formly-field>` component is used to render the UI widget (layout + type) of a given `field`.\n */\nclass FormlyField {\n    constructor(config, renderer, _elementRef, hostContainerRef, form) {\n        this.config = config;\n        this.renderer = renderer;\n        this._elementRef = _elementRef;\n        this.hostContainerRef = hostContainerRef;\n        this.form = form;\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.valueChangesUnsubscribe = () => { };\n    }\n    get containerRef() {\n        return this.config.extras.renderFormlyFieldElement ? this.viewContainerRef : this.hostContainerRef;\n    }\n    get elementRef() {\n        if (this.config.extras.renderFormlyFieldElement) {\n            return this._elementRef;\n        }\n        if (this.componentRefs?.[0] instanceof ComponentRef) {\n            return this.componentRefs[0].location;\n        }\n        return null;\n    }\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    ngDoCheck() {\n        if (this.detectFieldBuild && this.field && this.field.options) {\n            this.render();\n        }\n    }\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n        this.valueChangesUnsubscribe();\n        this.triggerHook('onDestroy');\n    }\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field?.wrappers;\n        }\n        if (wrappers?.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.config.getWrapper(wrapper);\n            const ref = containerRef.createComponent(component);\n            this.attachComponentRef(ref, f);\n            observe(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue._lContainer === currentValue._lContainer) {\n                        return;\n                    }\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            });\n        }\n        else if (f?.type) {\n            const inlineType = this.form?.templates?.find((ref) => ref.name === f.type);\n            let ref;\n            if (inlineType) {\n                ref = containerRef.createEmbeddedView(inlineType.ref, { $implicit: f });\n            }\n            else {\n                const { component } = this.config.getType(f.type, true);\n                ref = containerRef.createComponent(component);\n            }\n            this.attachComponentRef(ref, f);\n        }\n    }\n    triggerHook(name, changes) {\n        if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n            this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n        }\n        if (this.field?.hooks?.[name]) {\n            if (!changes || changes.field) {\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    const sub = r.subscribe();\n                    this.hooksObservers.push(() => sub.unsubscribe());\n                }\n            }\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        if (ref instanceof ComponentRef) {\n            Object.assign(ref.instance, { field });\n        }\n    }\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n        this.hostObservers = [\n            observe(this.field, ['hide'], ({ firstChange, currentValue }) => {\n                const containerRef = this.containerRef;\n                if (this.config.extras.lazyRender === false) {\n                    firstChange && this.renderField(containerRef, this.field);\n                    if (!firstChange || (firstChange && currentValue)) {\n                        this.elementRef &&\n                            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                    }\n                }\n                else {\n                    if (currentValue) {\n                        containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n                !firstChange && this.field.options.detectChanges(this.field);\n            }),\n            observe(this.field, ['className'], ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue)) &&\n                    (!this.config.extras.lazyRender || this.field.hide !== true)) {\n                    this.elementRef && this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            }),\n            ...['touched', 'pristine', 'status'].map((prop) => observe(this.field, ['formControl', prop], ({ firstChange }) => !firstChange && markFieldForCheck(this.field))),\n        ];\n    }\n    resetRefs(field) {\n        if (field) {\n            if (field._localFields) {\n                field._localFields = [];\n            }\n            else {\n                defineHiddenProp(this.field, '_localFields', []);\n            }\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n    fieldChanges(field) {\n        this.valueChangesUnsubscribe();\n        if (!field) {\n            return () => { };\n        }\n        const subscribes = [observeDeep(field, ['props'], () => field.options.detectChanges(field))];\n        if (field.options) {\n            subscribes.push(observeDeep(field.options, ['formState'], () => field.options.detectChanges(field)));\n        }\n        for (const key of Object.keys(field._expressions || {})) {\n            const expressionObserver = observe(field, ['_expressions', key], ({ currentValue, previousValue }) => {\n                if (previousValue?.subscription) {\n                    previousValue.subscription.unsubscribe();\n                    previousValue.subscription = null;\n                }\n                if (isObservable(currentValue.value$)) {\n                    currentValue.subscription = currentValue.value$.subscribe();\n                }\n            });\n            subscribes.push(() => {\n                if (field._expressions[key]?.subscription) {\n                    field._expressions[key].subscription.unsubscribe();\n                }\n                expressionObserver.unsubscribe();\n            });\n        }\n        for (const path of [['focus'], ['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n            const fieldObserver = observe(field, path, ({ firstChange }) => !firstChange && field.options.detectChanges(field));\n            subscribes.push(() => fieldObserver.unsubscribe());\n        }\n        if (field.formControl && !field.fieldGroup) {\n            const control = field.formControl;\n            let valueChanges = control.valueChanges.pipe(distinctUntilChanged((x, y) => {\n                if (x !== y || Array.isArray(x) || isObject(x)) {\n                    return false;\n                }\n                return true;\n            }));\n            if (control.value !== getFieldValue(field)) {\n                valueChanges = valueChanges.pipe(startWith(control.value));\n            }\n            const { updateOn, debounce } = field.modelOptions;\n            if ((!updateOn || updateOn === 'change') && debounce?.default > 0) {\n                valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n            }\n            const sub = valueChanges.subscribe((value) => {\n                // workaround for https://github.com/angular/angular/issues/13792\n                if (control._fields?.length > 1 && control instanceof FormControl) {\n                    control.patchValue(value, { emitEvent: false, onlySelf: true });\n                }\n                field.parsers?.forEach((parserFn) => (value = parserFn(value)));\n                if (value !== field.formControl.value) {\n                    field.formControl.setValue(value);\n                    return;\n                }\n                if (hasKey(field)) {\n                    assignFieldValue(field, value);\n                }\n                field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n            });\n            subscribes.push(() => sub.unsubscribe());\n        }\n        let templateFieldsSubs = [];\n        observe(field, ['_localFields'], ({ currentValue }) => {\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs = (currentValue || []).map((f) => this.fieldChanges(f));\n        });\n        return () => {\n            subscribes.forEach((unsubscribe) => unsubscribe());\n            templateFieldsSubs.forEach((unsubscribe) => unsubscribe());\n        };\n    }\n}\nFormlyField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, deps: [{ token: FormlyConfig }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: FormlyFieldTemplates, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nFormlyField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyField, selector: \"formly-field\", inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"viewContainerRef\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: '<ng-template #container></ng-template>', isInline: true, styles: [\":host:empty{display:none}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyField, decorators: [{\n            type: Component,\n            args: [{ selector: 'formly-field', template: '<ng-template #container></ng-template>', styles: [\":host:empty{display:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: FormlyFieldTemplates, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { field: [{\n                type: Input\n            }], viewContainerRef: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/**\n * The `<form-form>` component is the main container of the form,\n * which takes care of managing the form state\n * and delegates the rendering of each field to `<formly-field>` component.\n */\nclass FormlyForm {\n    constructor(builder, config, ngZone, fieldTemplates) {\n        this.builder = builder;\n        this.config = config;\n        this.ngZone = ngZone;\n        this.fieldTemplates = fieldTemplates;\n        /** Event that is emitted when the model value is changed */\n        this.modelChange = new EventEmitter();\n        this.field = { type: 'formly-group' };\n        this._modelChangeValue = {};\n        this.valueChangesUnsubscribe = () => { };\n    }\n    /** The form instance which allow to track model value and validation status. */\n    set form(form) {\n        this.field.form = form;\n    }\n    get form() {\n        return this.field.form;\n    }\n    /** The model to be represented by the form. */\n    set model(model) {\n        if (this.config.extras.immutable && this._modelChangeValue === model) {\n            return;\n        }\n        this.setField({ model });\n    }\n    get model() {\n        return this.field.model;\n    }\n    /** The field configurations for building the form. */\n    set fields(fieldGroup) {\n        this.setField({ fieldGroup });\n    }\n    get fields() {\n        return this.field.fieldGroup;\n    }\n    /** Options for the form. */\n    set options(options) {\n        this.setField({ options });\n    }\n    get options() {\n        return this.field.options;\n    }\n    set templates(templates) {\n        this.fieldTemplates.templates = templates;\n    }\n    ngDoCheck() {\n        if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.valueChangesUnsubscribe();\n            this.builder.build(this.field);\n            this.valueChangesUnsubscribe = this.valueChanges();\n        }\n    }\n    ngOnDestroy() {\n        this.valueChangesUnsubscribe();\n    }\n    checkExpressionChange() {\n        this.field.options.checkExpressions?.(this.field);\n    }\n    valueChanges() {\n        this.valueChangesUnsubscribe();\n        const sub = this.field.options.fieldChanges\n            .pipe(filter(({ field, type }) => hasKey(field) && type === 'valueChanges'), switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))))\n            .subscribe(() => this.ngZone.runGuarded(() => {\n            // runGuarded is used to keep in sync the expression changes\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }));\n        return () => sub.unsubscribe();\n    }\n    setField(field) {\n        if (this.config.extras.immutable) {\n            this.field = { ...this.field, ...clone(field) };\n        }\n        else {\n            Object.keys(field).forEach((p) => (this.field[p] = field[p]));\n        }\n    }\n}\nFormlyForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, deps: [{ token: FormlyFormBuilder }, { token: FormlyConfig }, { token: i0.NgZone }, { token: FormlyFieldTemplates }], target: i0.ɵɵFactoryTarget.Component });\nFormlyForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyForm, selector: \"formly-form\", inputs: { form: \"form\", model: \"model\", fields: \"fields\", options: \"options\" }, outputs: { modelChange: \"modelChange\" }, providers: [FormlyFormBuilder, FormlyFieldTemplates], queries: [{ propertyName: \"templates\", predicate: FormlyTemplate }], usesOnChanges: true, ngImport: i0, template: '<formly-field [field]=\"field\"></formly-field>', isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyForm, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-form',\n                    template: '<formly-field [field]=\"field\"></formly-field>',\n                    providers: [FormlyFormBuilder, FormlyFieldTemplates],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: i0.NgZone }, { type: FormlyFieldTemplates }]; }, propDecorators: { form: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], fields: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], modelChange: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [FormlyTemplate]\n            }] } });\n\n/**\n * Allow to link the `field` HTML attributes (`id`, `name` ...) and Event attributes (`focus`, `blur` ...) to an element in the DOM.\n */\nclass FormlyAttributes {\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.props[eventName](this.field, $event);\n                }\n            },\n        };\n        this.document = _document;\n    }\n    get props() {\n        return this.field.props || {};\n    }\n    get fieldAttrElements() {\n        return this.field?.['_elementRefs'] || [];\n    }\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((listener) => listener());\n            this.uiEvents.events.forEach((eventName) => {\n                if (this.props?.[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => this.uiEvents.callback(eventName, e)));\n                }\n            });\n            if (this.props?.attributes) {\n                observe(this.field, ['props', 'attributes'], ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((attr) => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        });\n                    }\n                });\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                this.focusObserver = observe(this.field, ['focus'], ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                });\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            const element = this.elementRef.nativeElement;\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((attr) => !element.hasAttribute || !element.hasAttribute(attr));\n        }\n        this.uiAttributes.forEach((attr) => {\n            const value = this.props[attr];\n            if (this.uiAttributesCache[attr] !== value &&\n                (!this.props.attributes || !this.props.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((listener) => listener());\n        this.detachElementRef(this.field);\n        this.focusObserver?.unsubscribe();\n    }\n    toggleFocus(value) {\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        const isFocused = !!this.document.activeElement &&\n            this.fieldAttrElements.some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n        if (value && !isFocused) {\n            Promise.resolve().then(() => element.nativeElement.focus());\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then(() => element.nativeElement.blur());\n        }\n    }\n    onFocus($event) {\n        this.focusObserver?.setValue(true);\n        this.props.focus?.(this.field, $event);\n    }\n    onBlur($event) {\n        this.focusObserver?.setValue(false);\n        this.props.blur?.(this.field, $event);\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    onChange($event) {\n        this.props.change?.(this.field, $event);\n        this.field.formControl?.markAsDirty();\n    }\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs']?.indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    detachElementRef(f) {\n        const index = f?.['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            f['_elementRefs'].splice(index, 1);\n        }\n    }\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nFormlyAttributes.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyAttributes, selector: \"[formlyAttributes]\", inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, host: { listeners: { \"change\": \"onHostChange($event)\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyAttributes, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formlyAttributes]',\n                    host: {\n                        '(change)': 'onHostChange($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['formlyAttributes']\n            }], id: [{\n                type: Input\n            }] } });\n\nclass FieldType {\n    constructor() {\n        this.field = {};\n    }\n    set controls(controls) {\n        const f = this.field;\n        f._localFields = controls\n            .map((c) => c.control._fields || [])\n            .flat()\n            .filter((f) => f.formControl !== this.field.formControl);\n    }\n    get model() {\n        return this.field.model;\n    }\n    get form() {\n        return this.field.form;\n    }\n    get options() {\n        return this.field.options;\n    }\n    get key() {\n        return this.field.key;\n    }\n    get formControl() {\n        return this.field.formControl;\n    }\n    get props() {\n        return (this.field.props || {});\n    }\n    /** @deprecated Use `props` instead. */\n    get to() {\n        return this.props;\n    }\n    get showError() {\n        return this.options.showError(this);\n    }\n    get id() {\n        return this.field.id;\n    }\n    get formState() {\n        return this.options?.formState || {};\n    }\n}\nFieldType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nFieldType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldType, inputs: { field: \"field\" }, viewQueries: [{ propertyName: \"controls\", predicate: NgControl, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldType, decorators: [{\n            type: Directive\n        }], propDecorators: { controls: [{\n                type: ViewChildren,\n                args: [NgControl]\n            }], field: [{\n                type: Input\n            }] } });\n\n/** @ignore */\nclass FormlyGroup extends FieldType {\n}\nFormlyGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyGroup, selector: \"formly-group\", host: { properties: { \"class\": \"field.fieldGroupClassName || \\\"\\\"\" } }, usesInheritance: true, ngImport: i0, template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: FormlyField, selector: \"formly-field\", inputs: [\"field\"] }], directives: [{ type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyGroup, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-group',\n                    template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class]': 'field.fieldGroupClassName || \"\"',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\n/**\n * The `<formly-validation-message>` component renders the error message of a given `field`.\n */\nclass FormlyValidationMessage {\n    constructor(config) {\n        this.config = config;\n    }\n    ngOnChanges() {\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((v) => `templateOptions.${v}`);\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter(({ field, type, property }) => {\n                return (field === this.field &&\n                    type === 'expressionChanges' &&\n                    (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))).pipe(startWith(null), switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))));\n    }\n    get errorMessage() {\n        const fieldForm = this.field.formControl;\n        for (const error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                let message = this.config.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return undefined;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation?.messages?.[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators?.[error]?.message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators?.[error]?.message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n        return undefined;\n    }\n}\nFormlyValidationMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, deps: [{ token: FormlyConfig }], target: i0.ɵɵFactoryTarget.Component });\nFormlyValidationMessage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyValidationMessage, selector: \"formly-validation-message\", inputs: { field: \"field\" }, usesOnChanges: true, ngImport: i0, template: '{{ errorMessage$ | async }}', isInline: true, pipes: { \"async\": i2$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyValidationMessage, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-validation-message',\n                    template: '{{ errorMessage$ | async }}',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }]; }, propDecorators: { field: [{\n                type: Input\n            }] } });\n\nclass FieldArrayType extends FieldType {\n    onPopulate(field) {\n        if (hasKey(field)) {\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        const length = Array.isArray(field.model) ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            const f = {\n                ...clone(typeof field.fieldArray === 'function' ? field.fieldArray(field) : field.fieldArray),\n                key: `${i}`,\n            };\n            field.fieldGroup.push(f);\n        }\n    }\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = i == null ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        const field = this.field.fieldGroup[i];\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\n        unregisterControl(field, true);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    _build() {\n        const fields = this.field.formControl._fields ?? [this.field];\n        fields.forEach((f) => this.options.build(f));\n        this.options.fieldChanges.next({\n            field: this.field,\n            value: getFieldValue(this.field),\n            type: 'valueChanges',\n        });\n    }\n}\nFieldArrayType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldArrayType.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldArrayType, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldArrayType, decorators: [{\n            type: Directive\n        }] });\n\nclass FieldWrapper extends FieldType {\n    set _staticContent(content) {\n        this.fieldComponent = content;\n    }\n}\nFieldWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nFieldWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FieldWrapper, viewQueries: [{ propertyName: \"fieldComponent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef }, { propertyName: \"_staticContent\", first: true, predicate: [\"fieldComponent\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FieldWrapper, decorators: [{\n            type: Directive\n        }], propDecorators: { fieldComponent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef }]\n            }], _staticContent: [{\n                type: ViewChild,\n                args: ['fieldComponent', { read: ViewContainerRef, static: true }]\n            }] } });\n\n/** @ignore */\nclass FormlyTemplateType extends FieldType {\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = {};\n    }\n    get template() {\n        if (this.field && this.field.template !== this.innerHtml.template) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.props.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nFormlyTemplateType.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyTemplateType, selector: \"formly-template\", usesInheritance: true, ngImport: i0, template: `<div [innerHtml]=\"template\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyTemplateType, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-template',\n                    template: `<div [innerHtml]=\"template\"></div>`,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nfunction evalStringExpression(expression, argNames) {\n    try {\n        return Function(...argNames, `return ${expression};`);\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nfunction evalExpression(expression, thisArg, argVal) {\n    if (typeof expression === 'function') {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\nclass FieldExpressionExtension {\n    onPopulate(field) {\n        if (field._expressions) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressions', {});\n        observe(field, ['hide'], ({ currentValue, firstChange }) => {\n            defineHiddenProp(field, '_hide', !!currentValue);\n            if (!firstChange || (firstChange && currentValue === true)) {\n                field.props.hidden = currentValue;\n                field.options._hiddenFieldsForCheck.push(field);\n            }\n        });\n        if (field.hideExpression) {\n            observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n                field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n            });\n        }\n        const evalExpr = (key, expr) => {\n            if (typeof expr === 'string' || isFunction(expr)) {\n                field._expressions[key] = this.parseExpressions(field, key, expr);\n            }\n            else if (expr instanceof Observable) {\n                field._expressions[key] = {\n                    value$: expr.pipe(tap((v) => {\n                        this.evalExpr(field, key, v);\n                        field.options.detectChanges(field);\n                    })),\n                };\n            }\n        };\n        field.expressions = field.expressions || {};\n        for (const key of Object.keys(field.expressions)) {\n            observe(field, ['expressions', key], ({ currentValue: expr }) => {\n                evalExpr(key, isFunction(expr) ? (...args) => expr(field, args[3]) : expr);\n            });\n        }\n        field.expressionProperties = field.expressionProperties || {};\n        for (const key of Object.keys(field.expressionProperties)) {\n            observe(field, ['expressionProperties', key], ({ currentValue }) => evalExpr(key, currentValue));\n        }\n    }\n    postPopulate(field) {\n        if (field.parent) {\n            return;\n        }\n        if (!field.options.checkExpressions) {\n            let checkLocked = false;\n            field.options.checkExpressions = (f, ignoreCache) => {\n                if (checkLocked) {\n                    return;\n                }\n                checkLocked = true;\n                const fieldChanged = this.checkExpressions(f, ignoreCache);\n                const options = field.options;\n                options._hiddenFieldsForCheck\n                    .sort((f) => (f.hide ? -1 : 1))\n                    .forEach((f) => this.changeHideState(f, f.hide, !ignoreCache));\n                options._hiddenFieldsForCheck = [];\n                if (fieldChanged) {\n                    this.checkExpressions(field);\n                    if (field.options && field.options.detectChanges) {\n                        field.options.detectChanges(field);\n                    }\n                }\n                checkLocked = false;\n            };\n            field.options._checkField = (f, ignoreCache) => {\n                console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n                field.options.checkExpressions(f, ignoreCache);\n            };\n        }\n    }\n    parseExpressions(field, path, expr) {\n        let parentExpression;\n        if (field.parent && ['hide', 'props.disabled'].includes(path)) {\n            const rootValue = (f) => {\n                return path === 'hide' ? f.hide : f.props.disabled;\n            };\n            parentExpression = () => {\n                let root = field.parent;\n                while (root.parent && !rootValue(root)) {\n                    root = root.parent;\n                }\n                return rootValue(root);\n            };\n        }\n        expr = expr || (() => false);\n        if (typeof expr === 'string') {\n            expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n        }\n        let currentValue;\n        return {\n            callback: (ignoreCache) => {\n                try {\n                    const exprValue = evalExpression(parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr, { field }, [field.model, field.options.formState, field, ignoreCache]);\n                    if (ignoreCache ||\n                        (currentValue !== exprValue &&\n                            (!isObject(exprValue) ||\n                                isObservable(exprValue) ||\n                                JSON.stringify(exprValue) !== JSON.stringify(currentValue)))) {\n                        currentValue = exprValue;\n                        this.evalExpr(field, path, exprValue);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (error) {\n                    error.message = `[Formly Error] [Expression \"${path}\"] ${error.message}`;\n                    throw error;\n                }\n            },\n        };\n    }\n    checkExpressions(field, ignoreCache = false) {\n        if (!field) {\n            return false;\n        }\n        let fieldChanged = false;\n        if (field._expressions) {\n            for (const key of Object.keys(field._expressions)) {\n                field._expressions[key].callback?.(ignoreCache) && (fieldChanged = true);\n            }\n        }\n        field.fieldGroup?.forEach((f) => this.checkExpressions(f, ignoreCache) && (fieldChanged = true));\n        return fieldChanged;\n    }\n    changeDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hasOwnProperty('props.disabled'))\n                .forEach((f) => this.changeDisabledState(f, value));\n        }\n        if (hasKey(field) && field.props.disabled !== value) {\n            field.props.disabled = value;\n        }\n    }\n    changeHideState(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => !f._expressions.hide)\n                .forEach((f) => this.changeHideState(f, hide, resetOnHide));\n        }\n        if (field.formControl && hasKey(field)) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            const c = field.formControl;\n            if (c._fields?.length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c._fields || c._fields.every((f) => !!f._hide))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    assignFieldValue(field, undefined);\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    field.options.fieldChanges.next({ value: undefined, field, type: 'valueChanges' });\n                    if (field.fieldGroup && field.formControl instanceof FormArray) {\n                        field.fieldGroup.length = 0;\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && field.fieldGroup?.length !== field.model?.length) {\n                    field.options.build(field);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next({ field, type: 'hidden', value: hide });\n        }\n    }\n    evalExpr(field, prop, value) {\n        if (prop.indexOf('model.') === 0) {\n            const key = prop.replace(/^model\\./, ''), parent = field.fieldGroup ? field : field.parent;\n            let control = field?.key === key ? field.formControl : field.form.get(key);\n            if (!control && field.get(key)) {\n                control = field.get(key).formControl;\n            }\n            assignFieldValue({ key, parent, model: field.model }, value);\n            if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        else {\n            try {\n                let target = field;\n                const paths = this._evalExpressionPath(field, prop);\n                const lastIndex = paths.length - 1;\n                for (let i = 0; i < lastIndex; i++) {\n                    target = target[paths[i]];\n                }\n                target[paths[lastIndex]] = value;\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n            if (['templateOptions.disabled', 'props.disabled'].includes(prop) && hasKey(field)) {\n                this.changeDisabledState(field, value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n    _evalExpressionPath(field, prop) {\n        if (field._expressions[prop] && field._expressions[prop].paths) {\n            return field._expressions[prop].paths;\n        }\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((p) => p)\n                .forEach((path) => {\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((p) => p));\n                }\n            });\n        }\n        if (field._expressions[prop]) {\n            field._expressions[prop].paths = paths;\n        }\n        return paths;\n    }\n}\n\nclass FieldValidationExtension {\n    constructor(config) {\n        this.config = config;\n    }\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    initFieldValidation(field, type) {\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !hasKey(field))) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName of Object.keys(field[type])) {\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    getPredefinedFieldValidation(field) {\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['props', opt], ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }));\n        return (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((opt) => () => {\n                const value = field.props[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        const minLengthResult = Validators.minLength(value)(control);\n                        const minLengthKey = this.config.getValidatorMessage('minlength') || field.validation?.messages?.minlength\n                            ? 'minlength'\n                            : 'minLength';\n                        return minLengthResult ? { [minLengthKey]: minLengthResult.minlength } : null;\n                    case 'maxLength':\n                        const maxLengthResult = Validators.maxLength(value)(control);\n                        const maxLengthKey = this.config.getValidatorMessage('maxlength') || field.validation?.messages?.maxlength\n                            ? 'maxlength'\n                            : 'maxLength';\n                        return maxLengthResult ? { [maxLengthKey]: maxLengthResult.maxlength } : null;\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                    default:\n                        return null;\n                }\n            }))(control);\n        };\n    }\n    wrapNgValidatorFn(field, validator, validatorName) {\n        let validatorOption;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.config.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.config.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression, ...options } = validator;\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (control) => {\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        };\n    }\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        field.options.detectChanges(field);\n        return this.handleResult(field, errors, options);\n    }\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        const ctrl = field.formControl;\n        ctrl?._childrenErrors?.[name]?.();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((name) => {\n                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const { errorPath: _errorPath, ...opts } = errors[name];\n                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n                    !ctrl._childrenErrors && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl._childrenErrors[name] = () => {\n                        const { [name]: _toDelete, ...childErrors } = childCtrl.errors || {};\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    };\n                }\n            });\n        }\n        return errors;\n    }\n}\n\nclass FieldFormExtension {\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n        if (field.parent) {\n            Object.defineProperty(field, 'form', {\n                get: () => field.parent.formControl,\n                configurable: true,\n            });\n        }\n    }\n    onPopulate(field) {\n        if (field.hasOwnProperty('fieldGroup') && !hasKey(field)) {\n            defineHiddenProp(field, 'formControl', field.form);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        const markForCheck = this.setValidators(field);\n        if (markForCheck && field.parent) {\n            let parent = field.parent;\n            while (parent) {\n                if (hasKey(parent) || !parent.parent) {\n                    updateValidity(parent.formControl, true);\n                }\n                parent = parent.parent;\n            }\n        }\n    }\n    addFormControl(field) {\n        let control = findControl(field);\n        if (field.fieldArray) {\n            return;\n        }\n        if (!control) {\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            if (field.fieldGroup) {\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                const value = hasKey(field) ? getFieldValue(field) : field.defaultValue;\n                control = new FormControl({ value, disabled: !!field.props.disabled }, { ...controlOptions, initialValueIsDefault: true });\n            }\n        }\n        registerControl(field, control);\n    }\n    setValidators(field, disabled = false) {\n        if (disabled === false && hasKey(field) && field.props?.disabled) {\n            disabled = true;\n        }\n        let markForCheck = false;\n        field.fieldGroup?.forEach((f) => f && this.setValidators(f, disabled) && (markForCheck = true));\n        if (hasKey(field) || !field.parent || (!hasKey(field) && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            if (c) {\n                if (hasKey(field) && c instanceof FormControl) {\n                    if (disabled && c.enabled) {\n                        c.disable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                    if (!disabled && c.disabled) {\n                        c.enable({ emitEvent: false, onlySelf: true });\n                        markForCheck = true;\n                    }\n                }\n                if (null === c.validator || null === c.asyncValidator) {\n                    c.setValidators(() => {\n                        const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                        return v ? v(c) : null;\n                    });\n                    c.setAsyncValidators(() => {\n                        const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                        return v ? v(c) : of(null);\n                    });\n                    markForCheck = true;\n                }\n                if (markForCheck) {\n                    updateValidity(c, true);\n                    // update validity of `FormGroup` instance created by field with nested key.\n                    let parent = c.parent;\n                    for (let i = 1; i < getKeyPath(field).length; i++) {\n                        if (parent) {\n                            updateValidity(parent, true);\n                            parent = parent.parent;\n                        }\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    mergeValidators(field, type) {\n        const validators = [];\n        const c = field.formControl;\n        if (c?._fields?.length > 1) {\n            c._fields\n                .filter((f) => !f._hide)\n                .forEach((f) => validators.push(...f[type]));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((f) => f?.fieldGroup && !hasKey(f))\n                .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n        }\n        return validators;\n    }\n}\n\nclass CoreExtension {\n    constructor(config) {\n        this.config = config;\n        this.formId = 0;\n    }\n    prePopulate(field) {\n        const root = field.parent;\n        this.initRootOptions(field);\n        this.initFieldProps(field);\n        if (root) {\n            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n            Object.defineProperty(field, 'model', {\n                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),\n                configurable: true,\n            });\n        }\n        Object.defineProperty(field, 'get', {\n            value: (key) => getField(field, key),\n            configurable: true,\n        });\n        this.getFieldComponentInstance(field).prePopulate?.(field);\n    }\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate?.(field);\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((f, index) => {\n                if (f) {\n                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n                }\n                this.formId++;\n            });\n        }\n    }\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate?.(field);\n    }\n    initFieldProps(field) {\n        field.props ?? (field.props = field.templateOptions);\n        Object.defineProperty(field, 'templateOptions', {\n            get: () => field.props,\n            set: (props) => (field.props = props),\n            configurable: true,\n        });\n    }\n    initRootOptions(field) {\n        if (field.parent) {\n            return;\n        }\n        const options = field.options;\n        field.options.formState = field.options.formState || {};\n        if (!options.showError) {\n            options.showError = this.config.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        options._markForCheck = (f) => {\n            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n            options.detectChanges(f);\n        };\n        options.detectChanges = (f) => {\n            if (f._componentRefs) {\n                f.options.checkExpressions(f);\n                markFieldForCheck(f);\n            }\n            f.fieldGroup?.forEach((f) => f && options.detectChanges(f));\n        };\n        options.resetModel = (model) => {\n            model = clone(model ?? options._initialModel);\n            if (field.model) {\n                Object.keys(field.model).forEach((k) => delete field.model[k]);\n                Object.assign(field.model, model || {});\n            }\n            options.build(field);\n            field.form.reset(field.model);\n            if (options.parentForm && options.parentForm.control === field.formControl) {\n                options.parentForm.submitted = false;\n            }\n        };\n        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));\n        field.options.updateInitialValue();\n    }\n    initFieldOptions(field) {\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field.index),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            props: !field.type || !hasKey(field)\n                ? {}\n                : {\n                    label: '',\n                    placeholder: '',\n                    disabled: false,\n                },\n        });\n        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.type !== 'formly-template' &&\n            (field.template || field.expressions?.template || field.expressionProperties?.template)) {\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.config.getMergedField(field);\n        }\n        if (hasKey(field) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n            const isHidden = (f) => f.hide || f.expressions?.hide || f.hideExpression;\n            let setDefaultValue = !field.resetOnHide || !isHidden(field);\n            if (!isHidden(field) && field.resetOnHide) {\n                let parent = field.parent;\n                while (parent && !isHidden(parent)) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !isHidden(parent);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        field.wrappers = field.wrappers || [];\n    }\n    getFieldComponentInstance(field) {\n        const componentRefInstance = () => {\n            let componentRef = this.config.resolveFieldTypeRef(field);\n            const fieldComponentRef = field._componentRefs?.slice(-1)[0];\n            if (fieldComponentRef instanceof ComponentRef &&\n                fieldComponentRef?.componentType === componentRef?.componentType) {\n                componentRef = fieldComponentRef;\n            }\n            return componentRef?.instance;\n        };\n        if (!field._proxyInstance) {\n            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {\n                get: (_, prop) => componentRefInstance()?.[prop],\n                set: (_, prop, value) => (componentRefInstance()[prop] = value),\n            }));\n        }\n        return field._proxyInstance;\n    }\n}\n\nfunction defaultFormlyConfig(config) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(config), priority: -250 },\n            { name: 'field-validation', extension: new FieldValidationExtension(config), priority: -200 },\n            { name: 'field-form', extension: new FieldFormExtension(), priority: -150 },\n            { name: 'field-expression', extension: new FieldExpressionExtension(), priority: -100 },\n        ],\n    };\n}\nclass FormlyModule {\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((config) => configService.addConfig(config));\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, deps: [{ token: FormlyConfig }, { token: FORMLY_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, declarations: [FormlyTemplate,\n        FormlyForm,\n        FormlyField,\n        FormlyAttributes,\n        FormlyGroup,\n        FormlyValidationMessage,\n        FormlyTemplateType], imports: [CommonModule], exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage] });\nFormlyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FormlyTemplate,\n                        FormlyForm,\n                        FormlyField,\n                        FormlyAttributes,\n                        FormlyGroup,\n                        FormlyValidationMessage,\n                        FormlyTemplateType,\n                    ],\n                    exports: [FormlyTemplate, FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: FormlyConfig }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FORMLY_CONFIG]\n                }] }]; } });\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FORMLY_CONFIG, FieldArrayType, FieldType, FieldWrapper, FormlyConfig, FormlyField, FormlyForm, FormlyFormBuilder, FormlyModule, FormlyAttributes as ɵFormlyAttributes, FormlyGroup as ɵFormlyGroup, FormlyTemplate as ɵFormlyTemplate, FormlyValidationMessage as ɵFormlyValidationMessage, clone as ɵclone, defineHiddenProp as ɵdefineHiddenProp, getFieldValue as ɵgetFieldValue, hasKey as ɵhasKey, observe as ɵobserve, reverseDeepMerge as ɵreverseDeepMerge };\n","<div class=\"body\">\r\n  <form class=\"form\" novalidate autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n    <formly-form *ngIf=\"formDefinition\" [form]=\"formGroup\" [model]=\"model\" [fields]=\"formDefinition\" [options]=\"formOptions\"></formly-form>\r\n\r\n    <p *ngIf=\"formDefinition\">\r\n      {{formGroup.value| json}}\r\n    </p>\r\n  </form>\r\n</div>\r\n\r\n<forge-toolbar class=\"footer\" inverted>\r\n  <span class=\"forge-typography--caption\" slot=\"start\">\r\n    {{formMessage?.message}}\r\n  </span>\r\n</forge-toolbar>","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { formlyDemoConstants } from './formly-demo.constants';\r\n\r\n@Component({\r\n  selector: 'app-formly-demo',\r\n  templateUrl: './formly-demo.component.html',\r\n  styleUrls: ['./formly-demo.component.scss']\r\n})\r\nexport class FormlyDemoComponent implements OnInit {\r\n  private form: Form;\r\n\r\n  public formGroup = new FormGroup({});\r\n  public formDefinition?: FormlyFieldConfig[];\r\n  public formOptions: FormlyFormOptions = {\r\n    // showError(field) {\r\n    //   console.log(field);\r\n    //   return false;\r\n    // },\r\n    // build: (field) => {\r\n    //   console.log(field);\r\n    //   return field;\r\n    // }\r\n  };\r\n  public model = {\r\n    name: '',\r\n    age: 10\r\n  } as any;\r\n  public record: any;\r\n  public formMessage: { id: string; message: string; };\r\n\r\n  constructor(\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    this.moduleService.formMessage.pipe(\r\n      takeUntilDestroyed()\r\n    ).subscribe(result => {\r\n      this.formMessage = result;\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formDefinition = formlyDemoConstants.formDefinitionBasic;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  private getFormErrors(control: AbstractControl) {\r\n    if (control instanceof FormControl) {\r\n      return control.errors ? control : null;\r\n    }\r\n\r\n    if (control instanceof FormGroup) {\r\n      const formErrors = control.errors ? { groupError: control } : {};\r\n      Object.keys(control.controls).forEach(key => {\r\n        const error = this.getFormErrors(control.get(key));\r\n        if (error) {\r\n          formErrors[key] = error;\r\n        }\r\n      });\r\n\r\n      return Object.keys(formErrors).length > 0 ? formErrors : null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-field',\r\n  template: `\r\n    <formly-field #formlyField [field]=\"field\"></formly-field>\r\n  `,\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyFieldComponent implements OnInit {\r\n  @ViewChild('formlyField', { static: true })\r\n  private formlyField: FormlyField;\r\n\r\n  @Input()\r\n  public field: FormlyFieldConfig;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyField);\r\n    // console.log(this.elementRef.nativeElement);\r\n  }\r\n}","import { Input } from '@angular/core';\r\nimport { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { FormlyField, FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: '[formlyFieldDirective]',\r\n  standalone: true\r\n})\r\nexport class FormlyFieldDirective implements OnInit {\r\n  @Input()\r\n  field: FormlyFieldConfig\r\n  @Input()\r\n  formlyFieldDirective: FormlyField;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    // console.log(this.field);\r\n    // console.log(this.formlyFieldDirective);\r\n    // console.log(this.elementRef.nativeElement);\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n\r\n    if (this.field.props?.attributes) {\r\n      if (this.field.props.attributes && this.field.props.attributes['width']) {\r\n        element.style.width = `${this.field.props.attributes['width']}px`;\r\n      }\r\n\r\n      if (this.field.props.attributes['column']) {\r\n        element.style.gridColumn = `${this.field.props.attributes['column']}`;\r\n      }\r\n\r\n      if (this.field.props.attributes['row']) {\r\n        element.style.gridRow = `${this.field.props.attributes['row']}`;\r\n      }\r\n    }\r\n\r\n    if (this.field.props.description?.length) {\r\n      element.addEventListener('focusin', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: this.field.props.description });\r\n      });\r\n      element.addEventListener('focusout', () => {\r\n        this.moduleService.formMessage.next({ id: this.field.id, message: '' });\r\n      });\r\n    }\r\n\r\n    if (this.field.props.required) {\r\n      this.field.validation.messages = {\r\n        required: `A ${this.field.props.label || 'value'} is required`\r\n      };\r\n    }\r\n\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, HostBinding, OnInit, ViewChild } from '@angular/core';\r\nimport { FieldGroupTypeConfig, FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-group',\r\n  template: `\r\n    <div class=\"label\" *ngIf=\"props.label?.length && field.parent?.type !== 'tab'\">{{props.label}}</div>\r\n    <div #fieldContainer>\r\n      <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n      height: fit-content;\r\n\r\n      ::ng-deep {\r\n        .form-grid {\r\n          display: grid !important;\r\n          row-gap: 8px !important;\r\n          // row-gap: 0 !important;\r\n        }\r\n\r\n        .form-vbox {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n        }\r\n\r\n        .form-hbox {\r\n          display: flex;\r\n          flex-direction: row;\r\n          column-gap: 16px;\r\n        }\r\n\r\n        .form-group {\r\n          display: flex;\r\n          flex-direction: column;\r\n          row-gap: 16px;\r\n          border: var(--forge-theme-border);\r\n          border-radius: 4px;\r\n          padding: 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .label {\r\n      padding-bottom: 8px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class GroupTypeComponent extends FieldType<FieldGroupTypeConfig> implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n  // @HostBinding('style.display')\r\n  // private displayStyle = 'block';\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n\r\n        if (this.props.attributes) {\r\n          if (this.props.attributes['width']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['width']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['height']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['height']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        // this.displayStyle = 'inline-block';\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n\r\n        if (this.props.attributes && (this.props.attributes['gridWidth'] || this.props.attributes['gridHeight'])) {\r\n          fieldContainerElement.classList.add('form-grid');\r\n          if (this.props.attributes['gridWidth']) {\r\n            fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['gridWidth']}, 8px)`;\r\n          }\r\n          // if (this.props.attributes['gridHeight']) {\r\n          //   fieldContainerElement.style.gridTemplateRows = `repeat(${this.props.attributes['gridHeight']}, 8px)`;\r\n          // }\r\n        }\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-checkbox',\r\n  template: `\r\n  <forge-checkbox>\r\n    <input\r\n      [id]=\"id\"\r\n      type=\"checkbox\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"props.description\">{{props.description}}</span>\r\n  </forge-checkbox>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class CheckboxTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { isValid as isValidDate } from 'date-fns';\r\n\r\n@Component({\r\n  selector: 'app-formly-date-picker',\r\n  template: `\r\n  <forge-date-picker [max]=\"props.max\" [min]=\"props.min\">\r\n    <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n      <input\r\n        [id]=\"id\"\r\n        type=\"text\"\r\n        [placeholder]=\"props.placeholder\"\r\n        [readonly]=\"props.readonly\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n      <span slot=\"helper-text\" *ngIf=\"showError\">\r\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n      </span>\r\n    </forge-text-field>\r\n  </forge-date-picker>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DatePickerTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      if (control.value && !isValidDate(new Date(control.value))) {\r\n        control.setValue(null);\r\n        if (this.field.props.required) {\r\n          return of({ required: true });\r\n        }\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-textarea',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <textarea\r\n      [id]=\"id\"\r\n      [cols]=\"props.cols\"\r\n      [rows]=\"props.rows\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" >\r\n    </textarea>\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    textarea {\r\n      resize: none;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TextareaTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n    this.defaultOptions = {\r\n      props: {\r\n        cols: 1,\r\n        rows: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-tab',\r\n  template: `\r\n  <forge-tab-bar [activeTab]=\"activeTab\">\r\n    <forge-tab *ngFor=\"let field of field.fieldGroup\" (forge-tab-interacted)=\"onTabSelected(field)\">\r\n      {{field.props.label}}\r\n    </forge-tab>\r\n  </forge-tab-bar>\r\n  <formly-field [field]=\"activeField\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    forge-tab-bar {\r\n      display: inline-flex;\r\n      width: 100%;\r\n      border-bottom: var(--forge-theme-border);\r\n      margin: 16px 0;\r\n    }\r\n\r\n    forge-tab {\r\n      min-width: 240px;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TabTypeComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n  public activeTab = 0;\r\n  public activeField: FieldTypeConfig;\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\r\n  public ngOnInit() {\r\n    this.activeField = this.field.fieldGroup[0] as FieldTypeConfig;\r\n  }\r\n\r\n  public onTabSelected(field: FieldTypeConfig) {\r\n    this.activeField = field;\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\r\nimport { FieldArrayType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-formly-table',\r\n  template: `\r\n    <table class=\"forge-table\" #table>\r\n      <thead>\r\n        <tr class=\"forge-table-row forge-table-head__row\">\r\n          <th *ngFor=\"let th of props['columns']\" scope=\"col\" class=\"forge-table-cell forge-table-head__cell\">\r\n            <div class=\"forge-table-head__cell-container\">\r\n              <span class=\"forge-table-head__cell-text\">{{th.label}}</span>\r\n            </div>\r\n          </th>\r\n          <th class=\"forge-table-cell forge-table-head__cell forge-table-cell__button\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let fg of field.fieldGroup; index as i\" class=\"forge-table-row forge-table-body__row\">\r\n          <td *ngFor=\"let f of fg.fieldGroup\" class=\"forge-table-cell forge-table-body__cell\">\r\n            <formly-field [field]=\"f\" #formlyField [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n          </td>\r\n          <td class=\"forge-table-cell forge-table-body__cell forge-table-cell__button\">\r\n            <forge-icon-button>\r\n              <button type=\"button\" (click)=\"onRemove(i)\">\r\n                <forge-icon name=\"delete\"></forge-icon>\r\n              </button>\r\n            </forge-icon-button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td>\r\n            <forge-button>\r\n              <button type=\"button\" (click)=\"onAdd()\">Add</button>\r\n            </forge-button>\r\n          </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    .forge-table {\r\n      // --forge-table-theme-row-hover-background: transparent;\r\n\r\n      &-cell {\r\n        padding-right: 24px;\r\n        &:first-child {\r\n          padding-left: 0;\r\n        }\r\n        &:last-child {\r\n          padding-right: 0;\r\n        }\r\n        &__button {\r\n          width: 48px;\r\n        }\r\n      }\r\n\r\n      &-body {\r\n\r\n        &__cell {\r\n          padding-top: 8px;\r\n          padding-bottom: 8px;\r\n          vertical-align: top;\r\n\r\n          formly-field {\r\n            background-color: var(--mdc-theme-surface);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class TableTypeComponent extends FieldArrayType {\r\n  @ViewChild('table')\r\n  private tableElement: ElementRef;\r\n\r\n  public onAdd() {\r\n    const model = this.props['columns'].filter(c => c.key?.length).map(c => [c.key, c.defaultValue]);\r\n\r\n    this.add(this.formControl.length, Object.fromEntries(model));\r\n\r\n    requestAnimationFrame(() => {\r\n      const tr = Array.from(this.tableElement.nativeElement.querySelectorAll('tbody > tr')).reverse()[0] as HTMLTableRowElement;\r\n      if (tr) {\r\n        const focusElement = tr.querySelector(`[id*=\"${model[0][0]}\"]`) as HTMLElement;\r\n        if (focusElement) {\r\n          focusElement.focus();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public onRemove(index: number) {\r\n    this.remove(index);\r\n  }\r\n}\r\n","<div class=\"dialog__header\">\r\n  <span class=\"forge-typography--headline5\">{{title}}</span>\r\n  <forge-icon-button class=\"forge-flex-item--right\">\r\n    <button type=\"button\" aria-label=\"close\" (click)=\"onClose()\">\r\n      <forge-icon name=\"close\"></forge-icon>\r\n    </button>\r\n  </forge-icon-button>\r\n</div>\r\n\r\n<div class=\"dialog__body\">\r\n  <forge-table [ngClass]=\"{'app--hidden': isBusy}\" [data]=\"data\" [columnConfigurations]=\"columnConfigurations\" allow-row-click (forge-table-row-click)=\"onTableRowClick($event.detail)\" (forge-table-sort)=\"onTableSort($event.detail)\" filter=\"true\" (forge-table-filter)=\"onTableFilter($event.detail)\"></forge-table>\r\n\r\n  <forge-page-state *ngIf=\"!isBusy && !data?.length\">\r\n    <img src=\"https://cdn.forge.tylertech.com/v1/images/spot/no-search-results-spot.svg\" slot=\"graphic\" alt=\"No records found\" />\r\n    <div slot=\"message\">No records were found.</div>\r\n  </forge-page-state>\r\n\r\n  <ng-container *ngIf=\"isBusy\">\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n    <forge-skeleton list-item></forge-skeleton>\r\n  </ng-container>\r\n</div>\r\n\r\n<div class=\"dialog__footer\">\r\n  <forge-paginator [pageIndex]=\"paginator.pageIndex\" [pageSize]=\"paginator.pageSize\" [total]=\"paginator.total\" (forge-paginator-change)=\"onPaginatorChange($event.detail)\" [disabled]=\"isBusy || !data.length\">\r\n  </forge-paginator>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { IColumnConfiguration, ITableFilterEventData, ITableRowClickEventData, ITableSortEventData, SortDirection } from '@tylertech/forge';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { DialogConfig, DialogRef } from '@tylertech/forge-angular';\r\nimport { finalize, Observable, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter, IFilter, IFilterResponse } from 'src/app/shared/interfaces/filter.interface';\r\n\r\nexport interface IFieldHelpDialogConfig {\r\n  columnConfigurations: IColumnConfiguration[];\r\n  dataObservable: (param: IFilterParameter) => Observable<IFilterResponse<any>>;\r\n  key: string;\r\n  title: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-formly-field-help-dialog',\r\n  templateUrl: './field-help-dialog.component.html',\r\n  styleUrls: ['./field-help-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FieldHelpDialogComponent {\r\n  public title: string;\r\n  public columnConfigurations: IColumnConfiguration[];\r\n  public data: any[] = [];\r\n  public paginator = {\r\n    pageIndex: 0,\r\n    pageSize: 25,\r\n    total: 0\r\n  };\r\n  public isBusy = false;\r\n  public key: string;\r\n\r\n  private unsubscribe = new Subject<void>();\r\n  private dataObservable: (param: IFilterParameter) => Observable<any>;\r\n  private sort = {\r\n    property: '',\r\n    direction: SortDirection.Ascending\r\n  };\r\n  private filters: IFilter[] = [];\r\n\r\n  constructor(\r\n    public dialogConfig: DialogConfig<IFieldHelpDialogConfig>,\r\n    private dialogRef: DialogRef\r\n  ) {\r\n    this.title = this.dialogConfig.data.title;\r\n    this.columnConfigurations = this.dialogConfig.data.columnConfigurations;\r\n    this.dataObservable = this.dialogConfig.data.dataObservable;\r\n    this.key = this.dialogConfig.data.key;\r\n    this.sort.property = this.columnConfigurations.find(c => c.initialSort)?.property || this.columnConfigurations[0].property;\r\n    this.getData();\r\n  }\r\n\r\n  public onClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public onPaginatorChange(value: { pageIndex: number; pageSize: number; }) {\r\n    this.paginator.pageIndex = value.pageIndex;\r\n    this.paginator.pageSize = value.pageSize;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableSort(value: ITableSortEventData) {\r\n    this.sort.property = this.columnConfigurations[value.columnIndex].property;\r\n    this.sort.direction = value.direction;\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableFilter(filter: ITableFilterEventData) {\r\n    const filterProperty = this.columnConfigurations[filter.columnIndex].property;\r\n    if (isDefined(filter.value) && filter.value?.toString().length) {\r\n      this.filters.push({ property: filterProperty, value: filter.value });\r\n    } else {\r\n      const index = this.filters.findIndex(f => f.property === filterProperty);\r\n      if (index !== -1) {\r\n        this.filters.splice(index, 1);\r\n      }\r\n    }\r\n    this.paginator.pageIndex = 0;\r\n    this.getData();\r\n  }\r\n\r\n  public onTableRowClick(value: ITableRowClickEventData) {\r\n    this.dialogRef.close(value.data[this.key]);\r\n  }\r\n\r\n  private getData() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.isBusy = true;\r\n    const param: IFilterParameter = {\r\n      filters: this.filters,\r\n      sort: this.sort,\r\n      skip: this.paginator.pageIndex * this.paginator.pageSize,\r\n      take: this.paginator.pageSize\r\n    };\r\n    this.dataObservable(param)\r\n      .pipe(\r\n        finalize(() => this.isBusy = false),\r\n        takeUntil(this.unsubscribe)\r\n      )\r\n      .subscribe((r: IFilterResponse<any>) => {\r\n        this.data = r.data;\r\n        this.paginator.total = r.count;\r\n      });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { TextFieldComponentDelegate } from '@tylertech/forge';\r\nimport { DialogService, ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { IFilterParameter } from 'src/app/shared/interfaces/filter.interface';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\nimport { FieldHelpDialogComponent } from './field-help-dialog/field-help-dialog.component';\r\n@Component({\r\n  selector: 'app-formly-input-help',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      type=\"text\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <forge-icon-button slot=\"addon-end\" dense>\r\n      <button type=\"button\" aria-label=\"Browse options\" [disabled]=\"formControl.disabled\"\r\n        (click)=\"onShowDialog()\">\r\n        <forge-icon name=\"more_horiz\"></forge-icon>\r\n      </button>\r\n    </forge-icon-button>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputHelpTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private dialogService: DialogService,\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  public onShowDialog() {\r\n    const dialogRef = this.dialogService.show(FieldHelpDialogComponent, { fullscreen: true }, {\r\n      data: {\r\n        columnConfigurations: (this.props.options as { label: string; property: string }[]).map(o => ({\r\n          header: o.label,\r\n          property: o.property,\r\n          sortable: true,\r\n          filter: true,\r\n          filterDelegate: new TextFieldComponentDelegate()\r\n        })),\r\n        dataObservable: (param: IFilterParameter) => this.moduleService.getFieldHelp(this.key as string, param),\r\n        key: this.props['optionsKey'],\r\n        title: `Select a ${this.props.label}`,\r\n      }\r\n    });\r\n\r\n    const dialogSub = dialogRef.afterClosed.subscribe(result => {\r\n      dialogSub.unsubscribe();\r\n      if (result) {\r\n        this.formControl.setValue(result);\r\n      }\r\n    });\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-label',\r\n  template: `\r\n  <label [attr.for]=\"id\" class=\"forge-typography--body2\">{{props.label}}</label>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LabelTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, HostBinding } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@Component({\r\n  selector: 'app-formly-radio',\r\n  template: `\r\n  <label *ngIf=\"props.label\">{{props.label}}</label>\r\n  <div role=\"radiogroup\">\r\n    <forge-radio *ngFor=\"let option of props.options; let i = index\">\r\n      <input\r\n        type=\"radio\"\r\n        [id]=\"id + '-' + i\"\r\n        [value]=\"option.value\"\r\n        [formControl]=\"formControl\"\r\n        [formlyAttributes]=\"field\" />\r\n      <label [for]=\"id + '-' + i\" *ngIf=\"option.label\">{{option.label}}</label>\r\n    </forge-radio>\r\n  </div>\r\n  <div class=\"forge-typography--caption\" *ngIf=\"showError\">\r\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n  </div>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    [role='radiogroup'] {\r\n      margin-left: -8px;\r\n      display: flex;\r\n      column-gap: 16px;\r\n      flex-direction: column;\r\n    }\r\n\r\n    forge-radio {\r\n      &::part(container) {\r\n        padding: 4px;\r\n      }\r\n    }\r\n\r\n    .forge-typography--caption {\r\n      color: var(--forge-theme-danger);\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RadioTypeComponent extends FieldType<FieldTypeConfig> {\r\n  // @HostBinding('attr.role')\r\n  // public roleAttribute = 'radiogroup';\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-select',\r\n  template: `\r\n  <forge-select\r\n    [id]=\"id\"\r\n    [options]=\"props.options\"\r\n    [label]=\"props.label\"\r\n    [placeholder]=\"props.placeholder\"\r\n    [invalid]=\"showError\"\r\n    [formControl]=\"formControl\"\r\n    [formlyAttributes]=\"field\">\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-select>\r\n  `,\r\n  styles: [`\r\n  :host {\r\n    display: block;\r\n  }\r\n\r\n  // forge-select {\r\n  //   --forge-select-height: 2rem;\r\n  // }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class SelectTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { FormlyExtension } from '@ngx-formly/core';\r\n\r\nexport const formlyFieldExtension: FormlyExtension = {\r\n  prePopulate(field) {\r\n    // TODO\r\n    switch (field.type) {\r\n      case 'date-picker':\r\n      case 'input':\r\n      case 'select':\r\n      case 'textarea': {\r\n        // field.modelOptions = {\r\n        //   updateOn: 'blur'\r\n        // }\r\n      }\r\n    }\r\n  }\r\n};","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-formly-button',\r\n  template: `\r\n    <forge-button type=\"raised\">\r\n      <button type=\"button\" (click)=\"onClick($event)\">\r\n        {{props.label}}\r\n      </button>\r\n    </forge-button>\r\n  `,\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ButtonTypeComponent extends FieldType<FieldTypeConfig> {\r\n\r\n  public onClick(event: MouseEvent) {\r\n    console.log(event);\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { OnInit, ViewChild } from '@angular/core';\r\nimport { ElementRef } from '@angular/core';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FieldType, FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyFieldComponent } from './formly-field.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n// <formly-field [field]=\"field\"></formly-field>\r\n\r\n@Component({\r\n  selector: 'app-formly-container',\r\n  template: `\r\n  <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  <div #fieldContainer>\r\n    <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n      <formly-field #formlyField [field]=\"f\" [formlyFieldDirective]=\"formlyField\"></formly-field>\r\n    </ng-container>\r\n  </div>\r\n  `,\r\n  // template: `\r\n  // <div class=\"label\" *ngIf=\"props.label\">{{props.label}}</div>\r\n\r\n  // <ng-container *ngFor=\"let f of field.fieldGroup\">\r\n  //   <app-formly-field [field]=\"f\"></app-formly-field>\r\n  // </ng-container>\r\n  // `,\r\n  styles: [`\r\n  :host {\r\n    display: inline-block;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .form-grid {\r\n      display: grid;\r\n      gap: 16px;\r\n    }\r\n\r\n    .form-vbox {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n    }\r\n\r\n    .form-hbox {\r\n      display: flex;\r\n      flex-direction: row;\r\n      column-gap: 16px;\r\n    }\r\n\r\n    .form-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      row-gap: 16px;\r\n      border: 1px solid #e6e6e6;\r\n      border-radius: 4px;\r\n      padding: 16px;\r\n    }\r\n  }\r\n\r\n  .label {\r\n    padding: 8px;\r\n  }\r\n`],\r\n  imports: [\r\n    CommonModule,\r\n    FormlyModule,\r\n    FormlyFieldDirective,\r\n    FormlyFieldComponent\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ContainerTypeComponent extends FieldType implements OnInit {\r\n  @ViewChild('fieldContainer', { static: true })\r\n  private fieldContainer: ElementRef;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    const fieldContainerElement = this.fieldContainer.nativeElement as HTMLElement;\r\n    switch (this.field.props?.type) {\r\n      case 'grid':\r\n        fieldContainerElement.classList.add('form-grid');\r\n        if (this.props.attributes['columns']) {\r\n          fieldContainerElement.style.gridTemplateColumns = `repeat(${this.props.attributes['columns']}, auto)`\r\n        }\r\n        break;\r\n      case 'vbox':\r\n        fieldContainerElement.classList.add('form-vbox');\r\n        break;\r\n      case 'hbox':\r\n        fieldContainerElement.classList.add('form-hbox');\r\n        break;\r\n      case 'group':\r\n        fieldContainerElement.classList.add('form-group');\r\n        break;\r\n    }\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\nimport { finalize, map, of, Subject, takeUntil } from 'rxjs';\r\nimport { FormlyDemoService } from '../formly-demo.service';\r\n\r\n@Component({\r\n  selector: 'app-formly-input',\r\n  template: `\r\n  <forge-text-field [required]=\"props.required\" [invalid]=\"showError\">\r\n    <input\r\n      #input\r\n      [id]=\"id\"\r\n      [type]=\"inputType\"\r\n      [placeholder]=\"props.placeholder\"\r\n      [readonly]=\"props.readonly\"\r\n      [formControl]=\"formControl\"\r\n      [formlyAttributes]=\"field\" />\r\n    <label [attr.for]=\"id\" *ngIf=\"props.label\" slot=\"label\">{{props.label}}</label>\r\n    <span slot=\"helper-text\" *ngIf=\"showError\">\r\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\r\n    </span>\r\n  </forge-text-field>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: block;\r\n    }\r\n\r\n    // forge-text-field {\r\n    //   --forge-text-field-height: 2rem;\r\n    // }\r\n\r\n    input[type='number']::-webkit-outer-spin-button,\r\n    input[type='number']::-webkit-inner-spin-button {\r\n      -webkit-appearance: none;\r\n      margin: 0;\r\n    }\r\n  `],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormlyModule,\r\n    ForgeModule\r\n  ],\r\n  standalone: true,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class InputTypeComponent extends FieldType<FieldTypeConfig> implements OnInit, OnDestroy {\r\n  private unsubscribe = new Subject<void>();\r\n  @ViewChild('input', { static: true })\r\n  private inputElement: ElementRef;\r\n\r\n  public inputType = 'text';\r\n\r\n  constructor(\r\n    private moduleService: FormlyDemoService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.inputType = this.props?.type || 'text';\r\n\r\n    this.formControl.addAsyncValidators((control: AbstractControl) => {\r\n      this.unsubscribe.next();\r\n      this.unsubscribe.complete();\r\n\r\n      if (control.pristine) {\r\n        return of(null);\r\n      }\r\n\r\n      // (this.inputElement.nativeElement as HTMLInputElement).disabled = true;\r\n      return this.moduleService.validateField(this.field.key as string, control.value).pipe(\r\n        // finalize(() => (this.inputElement.nativeElement as HTMLInputElement).disabled = false),\r\n        takeUntil(this.unsubscribe),\r\n        map(r => {\r\n          return r.invalid ? { server: { message: r.message } } : null;\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n}","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\n\r\nimport { GroupTypeComponent } from './group-type.component';\r\nimport { CheckboxTypeComponent } from './checkbox-type.component';\r\nimport { DatePickerTypeComponent } from './date-picker-type.component';\r\nimport { TextareaTypeComponent } from './textarea-type.component';\r\nimport { TabTypeComponent } from './tab-type.component';\r\nimport { TableTypeComponent } from './table-type.component';\r\nimport { InputHelpTypeComponent } from './input-help-type.component';\r\nimport { LabelTypeComponent } from './label-type.component';\r\nimport { RadioTypeComponent } from './radio-type.component';\r\nimport { SelectTypeComponent } from './select-type.component';\r\nimport { formlyFieldExtension } from './formly-field.extension';\r\nimport { ButtonTypeComponent } from './button-type.component';\r\nimport { ContainerTypeComponent } from './container-type.component';\r\nimport { InputTypeComponent } from './input-type.component';\r\nimport { FormlyFieldDirective } from './formly-field.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormlyModule.forRoot({\r\n      extensions: [\r\n        { name: 'formly-field-extension', extension: formlyFieldExtension }\r\n      ],\r\n      types: [\r\n        { name: 'checkbox', component: CheckboxTypeComponent },\r\n        { name: 'date-picker', component: DatePickerTypeComponent },\r\n        { name: 'input', component: InputTypeComponent },\r\n        { name: 'input-help', component: InputHelpTypeComponent },\r\n        { name: 'radio', component: RadioTypeComponent },\r\n        { name: 'select', component: SelectTypeComponent },\r\n        { name: 'textarea', component: TextareaTypeComponent },\r\n        { name: 'button', component: ButtonTypeComponent },\r\n        { name: 'container', component: ContainerTypeComponent },\r\n        { name: 'formly-group', component: GroupTypeComponent },\r\n        { name: 'tab', component: TabTypeComponent },\r\n        { name: 'table', component: TableTypeComponent },\r\n        { name: 'label', component: LabelTypeComponent }\r\n      ],\r\n      // wrappers: [\r\n      //   { name: 'container', component: ContainerWrapperComponent }\r\n      // ]\r\n    }),\r\n    FormlyFieldDirective\r\n  ],\r\n  exports: [\r\n    FormlyModule\r\n  ]\r\n})\r\nexport class FormlyConfigModule { }","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormlyDemoComponent } from './formly-demo.component';\r\nimport { FormlyDemoService } from './formly-demo.service';\r\n\r\nimport { FormlyFieldComponent } from './components/formly-field.component';\r\nimport { FormlyConfigModule } from './components/formly-config.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: FormlyDemoComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormlyDemoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormlyConfigModule,\r\n    FormlyFieldComponent\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  providers: [\r\n    FormlyDemoService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class FormlyDemoModule { }\r\n"],"x_google_ignoreList":[2]}