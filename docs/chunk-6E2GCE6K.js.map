{
  "version": 3,
  "sources": ["src/app/shared/components/autocomplete-range/autocomplete-range.component.ts", "src/app/shared/components/autocomplete-range/autocomplete-range.component.html"],
  "sourcesContent": ["import { AfterViewInit, Component, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewChild, ViewContainerRef, forwardRef, ElementRef, Output, EventEmitter, HostListener, NgZone, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { AutocompleteFilterCallback, IOption, IAutocompleteOptionGroup, AutocompleteSelectedTextBuilder, AutocompleteComponent } from '@tylertech/forge';\r\nimport { isArray, isString, isDefined } from '@tylertech/forge-core';\r\nimport { ForgeAutocompleteModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgeTextFieldModule } from '@tylertech/forge-angular';\r\nimport { ListDropdownHeaderBuilder } from '@tylertech/forge/esm/list-dropdown';\r\n\r\nimport { Utils } from 'src/utils';\r\n@Component({\r\n  selector: 'app-autocomplete-range',\r\n  templateUrl: './autocomplete-range.component.html',\r\n  styleUrls: ['./autocomplete-range.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ForgeAutocompleteModule, ForgeDividerModule, ForgeIconButtonModule, ForgeIconModule, ForgeListItemModule, ForgeListModule, ForgeTextFieldModule],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteRangeComponent), multi: true }]\r\n})\r\nexport class AutocompleteRangeComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n  private ngZone = inject(NgZone);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  public autocompleteBlur() {\r\n    this.onTouched();\r\n  }\r\n  @ViewChild('rangeAutocomplete') autocompleteRef?: ElementRef;\r\n  @ViewChild('rangeTemplate') rangeTemplateRef?: TemplateRef<any>;\r\n  @ViewChild('filterInput') filterInputRef?: ElementRef;\r\n\r\n  @Input()\r\n  public optionFilter?: (filter: string) => Observable<IOption[]>;\r\n\r\n  @Input()\r\n  public set value(values: Array<IOption> | Array<string | string[] | number>) {\r\n    this.writeValue(values);\r\n  }\r\n  @Output()\r\n  public valueChange = new EventEmitter<Array<string | string[] | number>>();\r\n\r\n  @Input()\r\n  public label?: string;\r\n  @Input()\r\n  public maxlength: number | null = null;\r\n\r\n  public rangeOptions: IOption[] = [];\r\n  public rangeMin?: string;\r\n  public rangeMax?: string;\r\n  public rangeMessage?: string;\r\n  public elementId = Utils.uniqueId();\r\n\r\n  private rangeRef?: EmbeddedViewRef<any>;\r\n  private filter = '';\r\n\r\n  public onChange = (fn: any) => {};\r\n  public onTouched = () => {};\r\n\r\n  public onFilter: AutocompleteFilterCallback = (filter: string): Promise<IOption[] | IAutocompleteOptionGroup[]> => {\r\n    this.filter = filter;\r\n    return new Promise((resolve, reject) => {\r\n      if (this.optionFilter) {\r\n        this.optionFilter(this.filter).subscribe({\r\n          next: (response) => {\r\n            const options: IOption[] = [];\r\n            response.forEach((o) => (isArray(o.value) ? this.rangeOptions.push(o) : options.push(o)));\r\n            resolve(options);\r\n          },\r\n          error: () => reject()\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  public optionHeaderBuilder: ListDropdownHeaderBuilder = (): HTMLElement => {\r\n    this.ngZone.run(() => {\r\n      this.rangeMin = undefined;\r\n      this.rangeMax = undefined;\r\n      this.rangeMessage = undefined;\r\n    });\r\n\r\n    return this.rangeRef?.rootNodes[0] as HTMLElement;\r\n  };\r\n\r\n  public selectedTextBuilder: AutocompleteSelectedTextBuilder = (selectedOptions: IOption[]): string => {\r\n    if (this.autocompleteRef?.nativeElement.open && this.filter.length) {\r\n      return this.filter;\r\n    }\r\n\r\n    const optionCount = selectedOptions?.length;\r\n    const rangeOptionCount = this.rangeOptions?.length;\r\n\r\n    if (optionCount > 0 && rangeOptionCount > 0) {\r\n      return `${optionCount} option(s) selected, ${rangeOptionCount} range(s)`;\r\n    } else if (optionCount > 0) {\r\n      return `${optionCount} option(s) selected`;\r\n    } else if (rangeOptionCount > 0) {\r\n      return `${rangeOptionCount} range(s)`;\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  public writeValue(values: Array<IOption> | Array<string | string[] | number>) {\r\n    const options: IOption[] = [];\r\n    this.rangeOptions.length = 0;\r\n    if (isArray(values)) {\r\n      values.forEach((o) => {\r\n        if (isArray(o) || isArray((o as IOption).value)) {\r\n          const rangeOption = isDefined((o as IOption).value) ? (o as IOption).value : o;\r\n          this.rangeOptions.push({ label: `${rangeOption[0]} to ${rangeOption[1]}`, value: rangeOption });\r\n        } else {\r\n          options.push(o as IOption);\r\n        }\r\n      });\r\n    }\r\n    window.requestAnimationFrame(() => {\r\n      ((this.autocompleteRef as ElementRef).nativeElement as AutocompleteComponent).value = options;\r\n    });\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    window.requestAnimationFrame(() => {\r\n      this.rangeRef = this.viewContainerRef.createEmbeddedView(this.rangeTemplateRef as TemplateRef<any>);\r\n      (this.rangeRef.rootNodes[0] as HTMLElement).remove();\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.rangeRef?.destroy();\r\n  }\r\n\r\n  public registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public onAutocompleteChange() {\r\n    this.emitChangeEvents();\r\n  }\r\n\r\n  public onAddRangeOption() {\r\n    if (!this.rangeMin?.length && !this.rangeMax?.length) {\r\n      this.rangeMessage = 'A min or max value is required.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMin = isString(this.rangeMin) ? this.rangeMin?.trim() : this.rangeMin;\r\n    this.rangeMax = isString(this.rangeMax) ? this.rangeMax?.trim() : this.rangeMax;\r\n\r\n    if (this.rangeMin?.length && this.rangeMax?.length) {\r\n      const comp = Utils.comparator(this.rangeMin, this.rangeMax, 'string');\r\n      if (comp === 0) {\r\n        this.rangeMessage = 'Min and Max cannot be the same value.';\r\n        return;\r\n      }\r\n      if (comp === 1) {\r\n        this.rangeMessage = 'Min value cannot be greater than Max value.';\r\n        return;\r\n      }\r\n    }\r\n\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value[0] === this.rangeMin && o.value[1] === this.rangeMax);\r\n    if (optionIndex !== -1) {\r\n      this.rangeMessage = 'This range is already defined.';\r\n      return;\r\n    }\r\n\r\n    this.rangeMessage = undefined;\r\n\r\n    const label = this.rangeMin?.length && this.rangeMax?.length ? `${this.rangeMin} to ${this.rangeMax}` : this.rangeMin?.length ? `Greater than ${this.rangeMin}` : `Less than ${this.rangeMax}`;\r\n\r\n    this.rangeOptions.push({ label, value: [this.rangeMin, this.rangeMax] });\r\n    this.emitChangeEvents();\r\n    this.rangeMin = undefined;\r\n    this.rangeMax = undefined;\r\n\r\n    (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n  }\r\n\r\n  public onDeleteRangeOption(option: IOption) {\r\n    (this.rangeRef?.rootNodes[0] as HTMLElement).focus();\r\n    const optionIndex = this.rangeOptions.findIndex((o) => o.value === option.value);\r\n    if (optionIndex !== -1) {\r\n      this.rangeOptions.splice(optionIndex, 1);\r\n      (this.filterInputRef as ElementRef).nativeElement.value = this.selectedTextBuilder(this.autocompleteRef?.nativeElement.value);\r\n      this.emitChangeEvents();\r\n    }\r\n  }\r\n\r\n  private emitChangeEvents() {\r\n    const options = [];\r\n    if (isArray(this.rangeOptions) && this.rangeOptions.length) {\r\n      options.push(...this.rangeOptions.map((o) => o.value));\r\n    }\r\n\r\n    const values = this.autocompleteRef?.nativeElement.value;\r\n    if (isArray(values) && values.length) {\r\n      options.push(...values);\r\n    }\r\n\r\n    this.onChange(options);\r\n    this.valueChange.emit(options);\r\n  }\r\n}\r\n", "<forge-autocomplete #rangeAutocomplete [filter]=\"onFilter\" [selectedTextBuilder]=\"selectedTextBuilder\" [popupHeaderBuilder]=\"optionHeaderBuilder\" multiple (forge-autocomplete-change)=\"onAutocompleteChange()\">\r\n  <forge-text-field>\r\n    <input #filterInput type=\"text\" [attr.id]=\"elementId\" />\r\n    <label [attr.for]=\"elementId\">{{ label }}</label>\r\n    <forge-icon slot=\"end\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n  </forge-text-field>\r\n</forge-autocomplete>\r\n\r\n<ng-template #rangeTemplate>\r\n  <div class=\"range\" tabindex=\"-1\">\r\n    <div class=\"range__input\">\r\n      <span class=\"forge-typography--subheading2 range__input__header\">Enter a search range</span>\r\n      <div class=\"range__input__body\">\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"min\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMin\" />\r\n        </forge-text-field>\r\n        <span>to</span>\r\n        <forge-text-field>\r\n          <input type=\"text\" placeholder=\"max\" [attr.maxlength]=\"maxlength\" [(ngModel)]=\"rangeMax\" />\r\n        </forge-text-field>\r\n        <forge-icon-button aria-label=\"Add search range\" (click)=\"onAddRangeOption()\">\r\n          <forge-icon name=\"add\"></forge-icon>\r\n        </forge-icon-button>\r\n      </div>\r\n      @if (rangeMessage) {\r\n        <div class=\"forge-typography--label1\">{{ rangeMessage }}</div>\r\n      }\r\n    </div>\r\n    <forge-list class=\"range__options\">\r\n      @for (option of rangeOptions; track i; let i = $index) {\r\n        <forge-list-item>\r\n          <forge-icon-button slot=\"start\" aria-label=\"Delete search range\" (click)=\"onDeleteRangeOption(option)\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </forge-icon-button>\r\n          {{ option.label }}\r\n        </forge-list-item>\r\n      }\r\n    </forge-list>\r\n    <forge-divider></forge-divider>\r\n  </div>\r\n</ng-template>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r2", "rangeMessage", "\u0275\u0275listener", "option_r5", "\u0275\u0275restoreView", "_r4", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onDeleteRangeOption", "\u0275\u0275element", "\u0275\u0275textInterpolate1", "label", "\u0275\u0275twoWayListener", "$event", "_r2", "i0", "\u0275\u0275twoWayBindingSet", "rangeMin", "rangeMax", "onAddRangeOption", "\u0275\u0275template", "AutocompleteRangeComponent_ng_template_8_Conditional_13_Template", "\u0275\u0275repeaterCreate", "AutocompleteRangeComponent_ng_template_8_For_16_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275twoWayProperty", "\u0275\u0275conditional", "\u0275\u0275repeater", "rangeOptions", "AutocompleteRangeComponent", "constructor", "ngZone", "inject", "NgZone", "viewContainerRef", "ViewContainerRef", "valueChange", "EventEmitter", "maxlength", "elementId", "Utils", "uniqueId", "filter", "onChange", "fn", "onTouched", "onFilter", "Promise", "resolve", "reject", "optionFilter", "subscribe", "next", "response", "options", "forEach", "o", "isArray", "value", "push", "error", "optionHeaderBuilder", "run", "undefined", "rangeRef", "rootNodes", "selectedTextBuilder", "selectedOptions", "autocompleteRef", "nativeElement", "open", "length", "optionCount", "rangeOptionCount", "autocompleteBlur", "values", "writeValue", "rangeOption", "isDefined", "window", "requestAnimationFrame", "ngAfterViewInit", "createEmbeddedView", "rangeTemplateRef", "remove", "ngOnDestroy", "destroy", "registerOnChange", "registerOnTouched", "onAutocompleteChange", "emitChangeEvents", "isString", "trim", "comp", "comparator", "findIndex", "filterInputRef", "option", "focus", "optionIndex", "splice", "map", "emit", "selectors", "viewQuery", "rf", "ctx", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "_r1", "AutocompleteRangeComponent_ng_template_8_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "CommonModule", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "NgModel", "ForgeAutocompleteModule", "AutocompleteComponent", "ForgeDividerModule", "DividerComponent", "ForgeIconButtonModule", "IconButtonComponent", "IconComponent", "ForgeIconModule", "ForgeListItemModule", "ListItemComponent", "ForgeListModule", "ListComponent", "ForgeTextFieldModule", "TextFieldComponent", "styles", "_AutocompleteRangeComponent"]
}
