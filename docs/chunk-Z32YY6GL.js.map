{
  "version": 3,
  "sources": ["src/utils.ts"],
  "sourcesContent": ["import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString, isObject } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(\r\n    data: any[],\r\n    filters: {\r\n      key: string;\r\n      value: string;\r\n      type?: 'string' | 'number' | 'boolean' | 'date';\r\n      strict?: boolean;\r\n    }[]\r\n  ): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, {\r\n            numeric: true\r\n          });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b, navigator.language, {\r\n            sensitivity: 'base'\r\n          });\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]) {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n    const queryIndex = window.location.href.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n      const httpParams = new HttpParams({\r\n        fromString: window.location.href.substring(queryIndex)\r\n      });\r\n      httpParams.keys().forEach((k) => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), {\r\n            value: value.length === 1 ? value[0] : value,\r\n            enumerable: true,\r\n            writable: true\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static objectReduce(obj: object): object {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n      if (isDefined(obj[key])) {\r\n        if (isArray(obj[key])) {\r\n          if (obj[key].length) {\r\n            reduced[key] = obj[key];\r\n          }\r\n        } else if ((obj[key] + '').trim().length) {\r\n          reduced[key] = typeof obj[key] === 'string' ? obj[key].trim() : obj[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n\r\n  public static objectPropertyPaths(obj: object, parentKey?: string): Map<string, string> {\r\n    // return Object.keys(obj).reduce((prev, curr) => {\r\n    //   const value = obj[curr];\r\n    //   const key = parentKey ? `${parentKey}.${curr}` : `${curr}`;\r\n    //   if (value && typeof value === 'object') {\r\n    //     return { ...prev, ...this.objectPropertyPaths(value, key) };\r\n    //   } else {\r\n    //     return { ...prev, [key]: value };\r\n    //   }\r\n    // }, {});\r\n\r\n    const result = new Map<string, string>();\r\n    Object.keys(obj).forEach((key) => {\r\n      const path = parentKey?.length ? `${parentKey}.${key}` : key;\r\n      const value = obj[key];\r\n      if (isObject(value)) {\r\n        Object.assign(result, this.objectPropertyPaths(obj[key], path));\r\n      } else {\r\n        result[path] = value;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["Utils", "sortData", "data", "key", "type", "direction", "length", "slice", "sort", "a", "b", "getPropertyValue", "comparator", "groupData", "property", "isArray", "reduce", "previousValue", "currentValue", "push", "filterData", "filters", "map", "f", "isString", "value", "operator", "substring", "Object", "defineProperty", "toLowerCase", "filter", "rec", "every", "strict", "indexOf", "isDefined", "Date", "getTime", "isNaN", "parseFloat", "localeCompare", "navigator", "language", "numeric", "sensitivity", "navigateBack", "location", "router", "fallbackRoute", "getState", "navigationId", "navigate", "back", "elementId", "prefix", "Math", "random", "toString", "replace", "formatDate", "format", "formatNumber", "uniqueId", "parseQueryStringParameters", "params", "queryIndex", "window", "href", "httpParams", "HttpParams", "fromString", "keys", "forEach", "k", "getAll", "enumerable", "writable", "objectReduce", "obj", "reduced", "trim", "objectPropertyPaths", "parentKey", "result", "Map", "path", "isObject", "assign"]
}
