{"version":3,"file":"685.efe3a36d9e3a3ccb.js","mappings":"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","names":["i0","QueryBuilderComponent_ng_container_2_ng_container_2_Template","_r1","_c0","filterGroup_r5","filterIndex_r6","QueryBuilderComponent_ng_template_10_ng_container_0_ng_container_1_Template","_r3","_c1","formGroup_r8","operator_r19","value","label","_r23","formGroup","get","updateValueAndValidity","QueryBuilderComponent_ng_template_10_forge_text_field_17_span_5_Template","_c2","invalid","touched","index_r9","errors","required","range","_r30","QueryBuilderComponent_ng_template_10_div_18_span_6_Template","QueryBuilderComponent_ng_template_10_div_18_span_13_Template","QueryBuilderComponent_ng_template_10_ng_container_27_ng_container_1_ng_container_1_Template","QueryBuilderComponent_ng_template_10_ng_container_27_ng_container_1_ng_container_3_Template","filter_r35","filterIndex_r36","QueryBuilderComponent_ng_template_10_ng_container_27_ng_container_1_Template","tmp_0_0","controls","QueryBuilderComponent_ng_template_10_ng_container_0_Template","_r41","QueryBuilderComponent_ng_template_10_span_10_Template","QueryBuilderComponent_ng_template_10_forge_option_14_Template","QueryBuilderComponent_ng_template_10_span_15_Template","QueryBuilderComponent_ng_template_10_forge_text_field_17_Template","QueryBuilderComponent_ng_template_10_div_18_Template","$event","ctx_r43","onAddFilter","detail","ctx_r44","onDeleteFilter","QueryBuilderComponent_ng_template_10_ng_container_27_Template","ctx_r2","propertyOptions","propertyFilter","operatorOptions","filterOptions","tmp_14_0","length","condition_r47","QueryBuilderComponent_ng_template_12_forge_option_2_Template","formGroup_r45","ctx_r4","conditionOptions","routes","path","component","QueryBuilderComponent","constructor","this","FormGroup","filters","FormArray","buildFilterFormGroup","Utils","filterData","key","type","push","index","parent","indexOf","insert","formArray","removeAt","filter","property","FormControl","validators","Validators","condition","operator","validateFilterValue","minValue","maxValue","controlName","control","isDefined","toString","localeCompare","navigator","language","numeric","ignorePunctuation","setErrors","t","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","QueryBuilderComponent_ng_container_2_Template","QueryBuilderComponent_ng_template_10_Template","QueryBuilderComponent_ng_template_12_Template","tmp_1_0","QueryBuilderModule","oAB","cJS","CommonModule","RouterModule","forChild","AppFormsModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FormsModule","ReactiveFormsModule","ForgeModule","static","data","direction","slice","sort","a","b","getPropertyValue","comparator","isArray","reduce","previousValue","currentValue","map","f","isString","substring","Object","defineProperty","toLowerCase","rec","every","strict","Date","getTime","isNaN","parseFloat","location","router","fallbackRoute","getState","navigationId","navigate","back","prefix","Math","random","replace","format","formatDate","formatNumber","params","window","search","httpParams","HttpParams","fromString","keys","forEach","k","getAll","enumerable","writable","object","reduced","trim"],"sourceRoot":"webpack:///","sources":["./src/app/query-builder/query-builder.component.html","./src/app/query-builder/query-builder.module.ts","./src/app/query-builder/query-builder.component.ts","./src/app/shared/app-forms.module.ts","./src/utils.ts"],"sourcesContent":["<form [formGroup]=\"formGroup\" novalidate autocomplete=\"off\">\r\n  <div formArrayName=\"filters\">\r\n    <ng-container *ngFor=\"let filterGroup of formGroup.get('filters')?.controls; index as filterIndex;\">\r\n      <div class=\"filter__group\">\r\n        <ng-container *ngTemplateOutlet=\"filterFormTemplate, context: { formGroup: filterGroup, index: filterIndex }\"></ng-container>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <forge-button class=\"filter__group__add\">\r\n    <button type=\"button\" (click)=\"onAddFilter(formGroup, 'condition')\">\r\n      <forge-icon name=\"add_circle\"></forge-icon> Add a new condition\r\n    </button>\r\n  </forge-button>\r\n\r\n  <p>{{formGroup.value | json}}</p>\r\n</form>\r\n\r\n<ng-template #filterFormTemplate let-formGroup=\"formGroup\" let-index=\"index\">\r\n  <ng-container *ngIf=\"index > 0\">\r\n    <ng-container *ngTemplateOutlet=\"filterHeaderTemplate, context: { formGroup: formGroup }\"></ng-container>\r\n  </ng-container>\r\n\r\n  <ng-container [formGroup]=\"formGroup\">\r\n    <div class=\"filter__form\">\r\n      <forge-autocomplete formControlName=\"property\" [options]=\"propertyOptions\" [filter]=\"propertyFilter\" (blur)=\"formGroup.get('property').updateValueAndValidity()\">\r\n        <forge-text-field required [invalid]=\"[formGroup.get('property').invalid, formGroup.get('property').touched] | appFormControlInvalid\">\r\n          <input type=\"text\" id=\"{{'app--query-builder--filter-property' + index}}\" />\r\n          <label for=\"{{'app--query-builder--filter-property' + index}}\">Property</label>\r\n          <forge-icon slot=\"trailing\" class=\"forge-dropdown-icon\" name=\"arrow_drop_down\"></forge-icon>\r\n          <span *ngIf=\"[formGroup.get('property').invalid, formGroup.get('property').touched] | appFormControlInvalid\" slot=\"helper-text\">A property is required</span>\r\n        </forge-text-field>\r\n      </forge-autocomplete>\r\n\r\n      <forge-select formControlName=\"operator\" label=\"Operator\" required [invalid]=\"[formGroup.get('operator').invalid, formGroup.get('operator').touched] | appFormControlInvalid\" (blur)=\"formGroup.get('operator').updateValueAndValidity()\">\r\n        <forge-option [value]=\"operator.value\" *ngFor=\"let operator of operatorOptions\">{{operator.label}}</forge-option>\r\n        <span *ngIf=\"[formGroup.get('operator').invalid, formGroup.get('operator').touched] | appFormControlInvalid\" slot=\"helper-text\">An operator is required</span>\r\n      </forge-select>\r\n\r\n      <forge-text-field *ngIf=\"formGroup.get('operator').value !== 6\" required [invalid]=\"[formGroup.get('value').invalid, formGroup.get('value').touched] | appFormControlInvalid\">\r\n        <input type=\"text\" id=\"{{'app--query-builder--filter-value-' + index}}\" formControlName=\"value\" (blur)=\"formGroup.get('value').updateValueAndValidity()\">\r\n        <label for=\"{{'app--query-builder--filter-value-' + index}}\" slot=\"label\">Value</label>\r\n        <span *ngIf=\"[formGroup.get('value').invalid, formGroup.get('value').touched] | appFormControlInvalid\" slot=\"helper-text\">A value is required</span>\r\n      </forge-text-field>\r\n\r\n      <div *ngIf=\"formGroup.get('operator').value === 6\" class=\"filter__form__range\">\r\n        <forge-text-field required [invalid]=\"[formGroup.get('minValue').invalid, formGroup.get('minValue').touched] | appFormControlInvalid\">\r\n          <input type=\"text\" id=\"{{'app--query-builder--filter-min-' + index}}\" formControlName=\"minValue\" (blur)=\"formGroup.get('minValue').updateValueAndValidity()\">\r\n          <label for=\"{{'app--query-builder--filter-min-' + index}}\" slot=\"label\">Minimum</label>\r\n          <span *ngIf=\"[formGroup.get('minValue').invalid, formGroup.get('minValue').touched] | appFormControlInvalid\" slot=\"helper-text\">A minimum value is required</span>\r\n        </forge-text-field>\r\n        <forge-text-field required [invalid]=\"[formGroup.get('maxValue').invalid, formGroup.get('maxValue').touched] | appFormControlInvalid\">\r\n          <input type=\"text\" id=\"{{'app--query-builder--filter-max-' + index}}\" formControlName=\"maxValue\" (blur)=\"formGroup.get('maxValue').updateValueAndValidity()\">\r\n          <label for=\"{{'app--query-builder--filter-max-' + index}}\" slot=\"label\">Maximum</label>\r\n          <span *ngIf=\"[formGroup.get('maxValue').invalid, formGroup.get('maxValue').touched] | appFormControlInvalid\" slot=\"helper-text\">\r\n            {{formGroup.get('maxValue').errors.required ? 'A maximum value is required' : formGroup.get('maxValue').errors.range ? 'Max value must be greater or equal to min value' : ''}}\r\n          </span>\r\n        </forge-text-field>\r\n      </div>\r\n\r\n      <div class=\"filter__form__action\">\r\n        <forge-menu [options]=\"filterOptions\" (forge-menu-select)=\"onAddFilter(formGroup, $event.detail.value)\">\r\n          <forge-icon-button>\r\n            <button type=\"button\" aria-label=\"add filter item\">\r\n              <forge-icon name=\"add_circle\"></forge-icon>\r\n            </button>\r\n          </forge-icon-button>\r\n        </forge-menu>\r\n        <forge-icon-button>\r\n          <button type=\"button\" (click)=\"onDeleteFilter(formGroup)\" aria-label=\"Delete filter\">\r\n            <forge-icon name=\"delete\"></forge-icon>\r\n          </button>\r\n        </forge-icon-button>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"formGroup.get('filters')?.controls?.length\" formArrayName=\"filters\">\r\n      <ng-container *ngFor=\"let filter of formGroup.get('filters')?.controls; index as filterIndex\">\r\n        <ng-container *ngTemplateOutlet=\"filterHeaderTemplate, context: { formGroup: filter }\"></ng-container>\r\n        <div class=\"filter__group\">\r\n          <ng-container *ngTemplateOutlet=\"filterFormTemplate, context: { formGroup: filter, index: filterIndex }\"></ng-container>\r\n        </div>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n</ng-template>\r\n\r\n<ng-template #filterHeaderTemplate let-formGroup=\"formGroup\">\r\n  <div class=\"filter__header\">\r\n    <forge-select [formControl]=\"formGroup.get('condition')\" class=\"filter__header__condition\">\r\n      <forge-option [value]=\"condition.value\" *ngFor=\"let condition of conditionOptions\">{{condition.label}}</forge-option>\r\n    </forge-select>\r\n  </div>\r\n</ng-template>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppFormsModule } from 'src/app/shared/app-forms.module';\r\nimport { FormControlInvalidPipe } from 'src/app/shared/pipes/form-control-invalid.pipe';\r\nimport { QueryBuilderComponent } from './query-builder.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '**', component: QueryBuilderComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    QueryBuilderComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    AppFormsModule,\r\n    FormControlInvalidPipe\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class QueryBuilderModule { }\r\n","import { Component } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { isDefined } from '@tylertech/forge-core';\r\nimport { Utils } from 'src/utils';\r\nimport { IFilter } from 'src/app/shared/interfaces/filter.interface';\r\n\r\n@Component({\r\n  selector: 'app-query-builder',\r\n  templateUrl: './query-builder.component.html',\r\n  styleUrls: ['./query-builder.component.scss']\r\n})\r\nexport class QueryBuilderComponent {\r\n  public formGroup = new FormGroup({\r\n    filters: new FormArray([this.buildFilterFormGroup()])\r\n  });\r\n\r\n  public conditionOptions = [\r\n    { value: 'and', label: 'And' },\r\n    { value: 'or', label: 'Or' }\r\n  ];\r\n\r\n  public propertyOptions = [\r\n    { value: 'firstName', label: 'First name' },\r\n    { value: 'lastName', label: 'Last name' },\r\n    { value: 'dateOfBirth', label: 'Date of birth' },\r\n    { value: 'gender', label: 'Gender' },\r\n    { value: 'occupation', label: 'Occupation' }\r\n  ];\r\n\r\n  public operatorOptions = [\r\n    { value: 0, label: 'Equal' },\r\n    { value: 1, label: 'Not equal' },\r\n    { value: 2, label: 'Greater than' },\r\n    { value: 3, label: 'Less than' },\r\n    { value: 4, label: 'Greater than equal to' },\r\n    { value: 5, label: 'Less than equal to' },\r\n    { value: 6, label: 'Range' },\r\n    { value: 7, label: 'Contains' },\r\n    { value: 8, label: 'Not contains' },\r\n    { value: 9, label: 'Empty' }\r\n  ];\r\n\r\n  public filterOptions = [\r\n    { value: 'condition', label: 'Add condition' },\r\n    { value: 'group', label: 'Add group' }\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  public propertyFilter = (value: string) => Utils.filterData(this.propertyOptions, [{ key: 'label', value }]);\r\n\r\n  public onAddFilter(formGroup: FormGroup, type: 'condition' | 'group') {\r\n    if (formGroup === this.formGroup) {\r\n      (this.formGroup.get('filters') as FormArray).push(this.buildFilterFormGroup());\r\n    } else {\r\n      switch (type) {\r\n        case 'condition': {\r\n          const index = (formGroup.parent as FormArray).controls.indexOf(formGroup) + 1;\r\n          (formGroup.parent as FormArray).insert(index, this.buildFilterFormGroup());\r\n          break;\r\n        }\r\n        case 'group':\r\n          (formGroup.get('filters') as FormArray).push(this.buildFilterFormGroup());\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onDeleteFilter(formGroup: FormGroup) {\r\n    const formArray = formGroup.parent as FormArray;\r\n    const index = formArray.controls.indexOf(formGroup);\r\n    if (index !== -1) {\r\n      formArray.removeAt(index);\r\n    }\r\n  }\r\n\r\n  private buildFilterFormGroup(filter?: IFilter): FormGroup {\r\n    return new FormGroup({\r\n      property: new FormControl(filter?.property, { validators: [Validators.required] }),\r\n      condition: new FormControl(filter?.condition || 'and', { validators: [Validators.required] }),\r\n      operator: new FormControl(filter?.operator, { validators: [Validators.required] }),\r\n      value: new FormControl(filter?.value, { validators: [this.validateFilterValue('value')] }),\r\n      minValue: new FormControl(filter?.minValue, { validators: [this.validateFilterValue('minValue')] }),\r\n      maxValue: new FormControl(filter?.minValue, { validators: [this.validateFilterValue('maxValue')] }),\r\n      filters: new FormArray([])\r\n    });\r\n  }\r\n\r\n  private validateFilterValue(controlName: string): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const formGroup = control.parent;\r\n      if (!formGroup) {\r\n        return null;\r\n      }\r\n\r\n      const operator = formGroup.value.operator;\r\n      if (!isDefined(operator)) {\r\n        return null;\r\n      }\r\n\r\n      switch (operator) {\r\n        case 6: {\r\n          if (controlName === 'value') {\r\n            return null;\r\n          }\r\n\r\n          if (!isDefined(control.value) || !control.value.toString().length) {\r\n            return { required: true };\r\n          }\r\n\r\n          const minValue = formGroup.value.minValue;\r\n          const maxValue = formGroup.value.maxValue;\r\n\r\n          if (controlName === 'minValue') {\r\n            if (isDefined(maxValue) && minValue.localeCompare(maxValue, navigator.language, { numeric: true, ignorePunctuation: true }) < 1) {\r\n              formGroup.get('maxValue')?.setErrors(null);\r\n            }\r\n          }\r\n\r\n          if (controlName === 'maxValue') {\r\n            if (!isDefined(minValue)) {\r\n              return null;\r\n            }\r\n\r\n            if (minValue.localeCompare(maxValue, navigator.language, { numeric: true, ignorePunctuation: true }) > 0) {\r\n              return { range: true };\r\n            }\r\n          }\r\n\r\n          return null;\r\n        }\r\n        default:\r\n          if (controlName === 'minValue' || controlName === 'maxValue') {\r\n            return null;\r\n          }\r\n\r\n          if (!isDefined(control.value) || !control.value.toString().length) {\r\n            return { required: true };\r\n          }\r\n\r\n          return null;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForgeModule } from '@tylertech/forge-angular';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FormsModule, ReactiveFormsModule, ForgeModule],\r\n  providers: []\r\n})\r\nexport class AppFormsModule { }","import { formatDate, formatNumber, Location } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { isArray, getPropertyValue, isDefined, isString } from '@tylertech/forge-core';\r\nimport { SortDirection } from '@tylertech/forge';\r\n\r\nexport class Utils {\r\n  public static sortData(data: any[], key: string, type: 'string' | 'number' | 'boolean' | 'date', direction: 'ASC' | 'DESC' | SortDirection): any[] {\r\n    if (!data || !data.length) {\r\n      return data;\r\n    }\r\n\r\n    type = type || 'string';\r\n\r\n    if (direction !== 'DESC') {\r\n      direction = 'ASC';\r\n    }\r\n\r\n    return data.slice().sort((a, b): number => {\r\n      a = getPropertyValue(a, key);\r\n      b = getPropertyValue(b, key);\r\n\r\n      if (direction === 'DESC') {\r\n        return this.comparator(b, a, type);\r\n      } else {\r\n        return this.comparator(a, b, type);\r\n      }\r\n    });\r\n  }\r\n\r\n  public static groupData(data: any[], property: string): any[] {\r\n    if (!isArray(data) || !data.length || !property?.length) {\r\n      return data;\r\n    }\r\n\r\n    return data.reduce((previousValue, currentValue) => {\r\n      const key = currentValue[property];\r\n      if (!previousValue[key]) {\r\n        previousValue[key] = [];\r\n      }\r\n      previousValue[key].push(currentValue);\r\n      return previousValue;\r\n    }, {});\r\n  }\r\n\r\n  public static filterData(data: any[], filters: { key: string; value: string; type?: 'string' | 'number' | 'boolean' | 'date'; strict?: boolean }[]): any[] {\r\n    if (!isArray(data) || !data.length || !isArray(filters) || !filters.length) {\r\n      return data;\r\n    }\r\n\r\n    filters = filters.map((f) => {\r\n      if (isString(f.value) && f.value.length) {\r\n        let operator;\r\n        if (f.value.substring(0, 2) === '<>') {\r\n          if (f.value.length === 2) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 2);\r\n          f.value = f.value.substring(2);\r\n        } else if (f.value.substring(0, 1) === '<' || f.value.substring(0, 1) === '>') {\r\n          if (f.value.length === 1) {\r\n            f.value = '';\r\n            return f;\r\n          }\r\n          operator = f.value.substring(0, 1);\r\n          f.value = f.value.substring(1);\r\n        }\r\n\r\n        if (operator) {\r\n          Object.defineProperty(f, 'operator', { value: operator });\r\n        }\r\n      }\r\n\r\n      f.value = ('' + f.value).toLowerCase();\r\n      return f;\r\n    });\r\n\r\n    const filter = (rec: any) =>\r\n      filters.every((f) => {\r\n        if (!f.value.length) {\r\n          return true;\r\n        }\r\n\r\n        const value = ('' + getPropertyValue(rec, f.key)).toLowerCase();\r\n        if (!value.length) {\r\n          return false;\r\n        }\r\n\r\n        if (f.strict) {\r\n          return value === f.value;\r\n        }\r\n\r\n        switch ((f as any).operator) {\r\n          case '<>':\r\n            return this.comparator(value, f.value, f.type) !== 0;\r\n          case '>':\r\n            return this.comparator(value, f.value, f.type) > 0;\r\n          case '<':\r\n            return this.comparator(value, f.value, f.type) < 0;\r\n          default:\r\n            return value.indexOf(f.value) > -1;\r\n        }\r\n      });\r\n\r\n    return data.filter((rec) => filter(rec));\r\n  }\r\n\r\n  public static comparator(a: any, b: any, type: 'string' | 'number' | 'boolean' | 'date' = 'string'): number {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (a == b) {\r\n      return 0;\r\n    }\r\n    if (!isDefined(a)) {\r\n      return -1;\r\n    }\r\n    if (!isDefined(b)) {\r\n      return 1;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'boolean':\r\n        return a ? -1 : 1;\r\n      case 'date':\r\n        a = new Date(a).getTime();\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = new Date(b).getTime();\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      case 'number':\r\n        a = parseFloat(a);\r\n        if (isNaN(a)) {\r\n          return -1;\r\n        }\r\n        b = parseFloat(b);\r\n        if (isNaN(b)) {\r\n          return 1;\r\n        }\r\n        break;\r\n      default:\r\n        if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\r\n          return ('' + a).localeCompare('' + b, navigator.language, { numeric: true });\r\n        } else {\r\n          return ('' + a).localeCompare('' + b);\r\n        }\r\n    }\r\n\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }\r\n\r\n  public static navigateBack(location: Location, router: Router, fallbackRoute: any[]): void {\r\n    if ((location.getState() as any)?.navigationId === 1) {\r\n      router.navigate(fallbackRoute);\r\n    } else {\r\n      location.back();\r\n    }\r\n  }\r\n\r\n  public static elementId(prefix: string): string {\r\n    return (\r\n      prefix +\r\n      Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, '')\r\n    );\r\n  }\r\n\r\n  public static formatDate(value: Date, format = 'MM/dd/yyyy'): string {\r\n    if (!isDefined(value)) {\r\n      return '';\r\n    }\r\n    return formatDate(value, format, navigator.language);\r\n  }\r\n\r\n  public static formatNumber(value: number, format = '1.2-2'): string {\r\n    return formatNumber(value, navigator.language, format);\r\n  }\r\n\r\n  public static uniqueId(): string {\r\n    return Math.random().toString(36).substring(2);\r\n  }\r\n\r\n  public static parseQueryStringParameters(): any {\r\n    const params = {};\r\n\r\n    if (window.location.search.length) {\r\n      const httpParams = new HttpParams({ fromString: window.location.search.substring(1) });\r\n      httpParams.keys().forEach(k => {\r\n        const value = httpParams.getAll(k) as string[];\r\n        if (value.length) {\r\n          Object.defineProperty(params, k.toLowerCase(), { value: value.length === 1 ? value[0] : value, enumerable: true, writable: true });\r\n        }\r\n      });\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  public static reduceObject(object: any): any {\r\n    const reduced: any = {};\r\n\r\n    Object.keys(object).forEach(key => {\r\n      if (isDefined(object[key])) {\r\n        if (isArray(object[key])) {\r\n          if (object[key].length) {\r\n            reduced[key] = object[key];\r\n          }\r\n        } else if ((object[key] + '').trim().length) {\r\n          reduced[key] = typeof object[key] === 'string' ? object[key].trim() : object[key];\r\n        }\r\n      }\r\n    });\r\n\r\n    return reduced;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}