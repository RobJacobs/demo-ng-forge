@use '@tylertech/forge/sass/core/styles/tokens/color-palette' as forge-color;
@use '@tylertech/forge/sass/utils/mixins-flex' as forge-flex;
@use 'src/variables' as app-var;

@mixin container-outlined {
  background-color: var(--forge-theme-surface);
  border-radius: var(--forge-shape-medium);
  @include border();
}

@mixin container-raised() {
  background-color: var(--forge-theme-surface);
  border-radius: var(--forge-shape-medium);
  border-color: var(--forge-theme-outline);
  box-shadow: var(--forge-elevation-1);
}

@mixin table-header-footer {
  &__header {
    margin: 0 16px;
    min-height: 48px;
    @include forge-flex.container(flex, row, nowrap, center);

    &-action {
      border-radius: 4px;
      padding: 8px;
      background-color: forge-color.$indigo-50;
    }
  }

  &__body {
    padding: 0 16px;
  }

  &__footer {
    padding: 0 16px;
    @include forge-flex.container(flex, row, nowrap, center);
    @include border(border-top);

    forge-paginator {
      margin-left: auto;
    }
  }
}

@function form-grid-width($columns: 1, $width: app-var.$form-grid-column-width, $gap: app-var.$form-grid-gap) {
  @return (($columns - 1) * $gap)+($columns * $width);
}

@mixin form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, #{app-var.$form-grid-column-width}px);
  gap: #{app-var.$form-grid-gap}px;
  // force a 72px min row height for forge input with helper text
  // grid-auto-rows: minmax(72px, auto);

  &--row-break {
    grid-column-start: 1;
  }

  // > * {
  //   width: #{app-var.$form-grid-column-width}px;
  //   overflow: hidden;
  //   word-break: break-word;
  // }

  &--col-span {
    grid-column: 1 / -1;

    &#{&} {
      width: auto;
    }
  }

  &--col-span2 {
    grid-column: span 2;

    &#{&} {
      width: #{app-var.$form-grid-column-width * 2 + app-var.$form-grid-gap}px;
    }
  }

  &--col-span3 {
    grid-column: span 3;

    &#{&} {
      width: #{app-var.$form-grid-column-width * 3 + app-var.$form-grid-gap * 2}px;
    }
  }

  [slot='value'] {
    &:empty {
      &::before {
        content: 'n/a';
        color: var(--forge-theme-text-medium);
        font-style: italic;
      }
    }
  }
}

@mixin dialog {
  :host {
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .dialog {
    &__header {
      @include forge-flex.container(flex, row, nowrap, center);
      padding: 8px;
      padding-left: 16px;
      @include border(border-bottom);

      .forge-typography--heading4 {
        margin-right: 16px;
      }

      forge-icon-button {
        &:first-of-type {
          margin-left: auto;
        }
      }
    }

    &__body {
      flex-grow: 1;
      overflow: auto;
      padding: 16px;
    }

    &__footer {
      @include forge-flex.container(flex, row, nowrap, center);
      justify-content: flex-end;
      column-gap: 16px;
      padding: 8px 16px;
      @include border(border-top);
    }
  }
}

@mixin empty-placeholder {
  forge-label-value {
    [slot='value'] {
      &:empty {
        &::before {
          content: 'n/a';
          color: var(--forge-theme-text-medium);
          font-style: italic;
        }
      }
    }
  }
}

@mixin border($border: 'border') {
  #{$border}: 1px solid var(--forge-theme-outline);
}

@mixin form-control-invalid() {
  .app-form-control-invalid {
    display: none;

    &[invalid] {
      display: block;

      .app-form-control-invalid {
        display: block;
      }
    }
  }
}
